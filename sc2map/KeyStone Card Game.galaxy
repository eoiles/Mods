//==================================================================================================
// 
// Generated Map Script
// 
// Name:   KeyStone Card Game
// 
//==================================================================================================
include "TriggerLibs/NativeLib"

//--------------------------------------------------------------------------------------------------
// Library: SCCGLibrary
//--------------------------------------------------------------------------------------------------
// Preset Declarations
const int lib1_ge_CosmeticType_Decoration = 0;
const int lib1_ge_CosmeticType_Pet = 1;
const int lib1_ge_CosmeticType_Trophy = 2;

// Constants
const int lib1_gv_mAX_MODE_ID = 2;
const int lib1_gv_rANKED3V3 = 0;
const int lib1_gv_cASUAL = 1;
const int lib1_gv_tUTORIAL = 2;
const int lib1_gv_dECKEDITOR = -1;
const int lib1_gv_cOMMON = 0;
const int lib1_gv_uNCOMMON = 1;
const int lib1_gv_rARE = 2;
const int lib1_gv_uNIQUE = 3;
const int lib1_gv_tERRAN = 0;
const int lib1_gv_zERG = 1;
const int lib1_gv_pROTOSS = 2;
const int lib1_gv_vOID = 3;
const int lib1_gv_tERRAN_ZERG_UED = 4;
const int lib1_gv_pROTOSS_TERRAN_FENIX = 5;
const int lib1_gv_zERG_PROTOSS_KERRIGAN = 6;
const int lib1_gv_uNCOLLECTIBLE = -1;
const int lib1_gv_cORE = 0;
const int lib1_gv_lEGACY = 1;
const int lib1_gv_fIRST_CONTACT = 2;
const int lib1_gv_uNNATURAL_EXPERIMENTS = 3;
const int lib1_gv_dESPERATE_ALLIANCES = 4;
const int lib1_gv_uNAVAILABLE = 0;
const int lib1_gv_pREVIEW = 1;
const int lib1_gv_aVAILABLE = 2;
const string lib1_gv_uNIT = "\xe5\x8d\x95\xe4\xbd\x8d";
const string lib1_gv_aGGRESSIVE = "\xe6\x94\xbb\xe5\x87\xbb\xe5\x8d\x95\xe4\xbd\x8d";
const string lib1_gv_dEFENSIVE = "\xe9\x98\xb2\xe5\xbe\xa1\xe5\x8d\x95\xe4\xbd\x8d";
const string lib1_gv_hOSTILE = "\xe6\x95\x8c\xe6\x96\xb9\xe5\x8d\x95\xe4\xbd\x8d";
const string lib1_gv_tACTICAL = "\xe6\x88\x98\xe6\x9c\xaf\xe5\x8d\x95\xe4\xbd\x8d";
const string lib1_gv_aCTION = "\xe5\x8a\xa8\xe4\xbd\x9c";
const string lib1_gv_sTRUCTURE = "\xe5\xbb\xba\xe7\xad\x91\xe5\x8d\x95\xe4\xbd\x8d";
const string lib1_gv_sPAWN = "Spawn";
const string lib1_gv_nOVA_OPS = "Nova Ops";
const string lib1_gv_hIVE_MIND = "Hive Mind";
const string lib1_gv_eVOLUTION = "Evolution";
const string lib1_gv_pRIMAL = "Primal";
const string lib1_gv_cONFEDERATE = "Confederate";
const string lib1_gv_rESEARCH = "Xenomorph Research";
const string lib1_gv_wARP = "Warp";
const int lib1_gv_xELNAGA_FOUNDATION = 0;
const int lib1_gv_xELNAGA_CRYSTALS = 1;
const int lib1_gv_lAB_BOT = 2;
const int lib1_gv_eF_MAX = 27;
const int lib1_gv_eF_PLAY_CARD = 0;
const int lib1_gv_eF_CREATE_UNIT = 1;
const int lib1_gv_eF_DISCARD_FROM_HAND = 2;
const int lib1_gv_eF_INCREASE_HAND_SIZE = 3;
const int lib1_gv_eF_BUFF_SPECIFIC_HAND_CARD = 4;
const int lib1_gv_eF_COPY_HAND_CARD = 5;
const int lib1_gv_eF_DEBUFF_HAND_CARD = 6;
const int lib1_gv_eF_FETCH = 7;
const int lib1_gv_eF_DRAW = 8;
const int lib1_gv_eF_FILL_HAND = 9;
const int lib1_gv_eF_BUFF_ALL_HAND_CARDS = 10;
const int lib1_gv_eF_DEBUFF_DECK = 11;
const int lib1_gv_eF_DISCARD_FROM_DECK = 12;
const int lib1_gv_eF_BUFF_DECK = 13;
const int lib1_gv_eF_DEFAULT = 14;
const int lib1_gv_eF_BUFF_UNITS = 15;
const int lib1_gv_eF_REVEAL_UNIT = 16;
const int lib1_gv_eF_INSTANT_AOE_FREEZE = 17;
const int lib1_gv_eF_REMOVE_UNIT = 18;
const int lib1_gv_eF_REMOVE_UNIT_1500_DAMAGE = 19;
const int lib1_gv_eF_REMOVE_UNIT_1000_DAMAGE = 20;
const int lib1_gv_eF_REMOVE_UNIT_800_DAMAGE = 21;
const int lib1_gv_eF_REMOVE_UNIT_500_DAMAGE = 22;
const int lib1_gv_eF_REMOVE_UNIT_AOE_DAMAGE = 23;
const int lib1_gv_eF_FREEZE_SPECIFIC_UNIT = 24;
const int lib1_gv_eF_BUFF_TARGETED_UNIT = 25;
const int lib1_gv_eF_SET_INCOME = 26;
const int lib1_gv_eF_INCREASE_INCOME = 27;
const int lib1_gv_mAX_CARD_ID = 450;
const int lib1_gv_mAX_UNIT_TYPE_PER_CARD = 9;
const int lib1_gv_mAX_SET_ID = 4;
const int lib1_gv_hAND_LIMIT = 7;
const int lib1_gv_bOOSTED_HAND_LIMIT = 11;
const int lib1_gv_dECK_LIMIT = 999;
const int lib1_gv_dISCARD_LIMIT = 999;
const int lib1_gv_mAX_MINERAL_INCOME = 8;
const int lib1_gv_mINERAL_LIMIT = 15;
const int lib1_gv_mAX_GAS_INCOME = 3;
const int lib1_gv_gAS_LIMIT = 15;
const int lib1_gv_dECKLIST_PER_RACE_LIMIT = 3;
const int lib1_gv_dECKLIST_LIMIT = 39;
const int lib1_gv_tROPHY_DOODAD_LIMIT = 17;
const int lib1_gv_tROPHY_LIMIT = 17;
const int lib1_gv_pET_LIMIT = 2;
const int lib1_gv_dECORATION_LIMIT = 2;
const int lib1_gv_mAX_PLAYERS2 = 2;
const int lib1_gv_mAX_PLAYERS = 6;
const int lib1_gv_mAX_KEYSTONE_ENERGY = 10;
const int lib1_gv_bUILDER_LIMIT = 999;
const int lib1_gv_mAX_REBUILD_ATTEMPTS_PER_TURN = 3;
const int lib1_gv_mAX_CHARACTERS_PER_LINE = 25;
const int lib1_gv_mAX_LINES = 7;
const int lib1_gv_iNITIAL_CARD_X = 700;
const int lib1_gv_iNITIAL_CARD_Y = 445;
const int lib1_gv_cARD_HEIGHT = 390;
const int lib1_gv_cARD_WIDTH = 260;
const int lib1_gv_hOVER_OVER_PERCENT = 120;
const fixed lib1_gv_nAME_FRAME_Y = 9.5;
const fixed lib1_gv_nAME_Y = 0.5;
const fixed lib1_gv_iMAGE_Y = 10.0;
const fixed lib1_gv_iMAGE_FRAME_SIZE = 37.5;
const fixed lib1_gv_iMAGE_SIZE = 34.0;
const fixed lib1_gv_rESOURCE_SIZE = 14.0;
const fixed lib1_gv_rESOURCE_Y_INSET = 3.0;
const fixed lib1_gv_rESOURCE_TEXT_Y_INSET = 3.5;
const fixed lib1_gv_rESOURCE_Y_2 = 17.0;
const fixed lib1_gv_sET_ICON_Y = 35.5;
const fixed lib1_gv_tYPE_Y = 35.5;
const fixed lib1_gv_tEXT_Y = 4.5;
const fixed lib1_gv_rACE_Y = 1.0;
const int lib1_gv_cOUNT_X = 85;
const int lib1_gv_cOUNT_Y = 197;
const int lib1_gv_cOUNT_SIZE = 50;
const fixed lib1_gv_cHANNEL_ENERGY_TRANSPARENCY = 50.0;
const int lib1_gv_hAND_POSITION_Y = 50;
const int lib1_gv_hAND_POSITION_SELECTED_Y = 75;
const int lib1_gv_hAND_BUTTON_POSITION_Y = 85;
const int lib1_gv_cARD_SPACING = 240;
const int lib1_gv_cARD_SPACING_MOD = 20;
const int lib1_gv_cARD_MOVE_SPEED = 50;
const int lib1_gv_rESOURCE_BACKGROUND_EXTRA_WIDTH = 0;
const int lib1_gv_rESOURCE_BORDER_WIDTH = 20;
const int lib1_gv_rESOURCE_CHOOSER_BOTTOM_BORDER = 0;
const int lib1_gv_rESOURCE_CHOOSER_Y_OFFSET = 3;
const int lib1_gv_rESOURCE_ICON_SIZE = 40;
const int lib1_gv_rESOURCE_TEXT_WIDTH = 70;
const int lib1_gv_rESOURCE_TEXT_HEIGHT = 40;
const int lib1_gv_rESOURCE_CHOOSER_TEXT_HEIGHT = 30;
const int lib1_gv_rESOURCE_CHOOSER_WIDTH = 260;
const int lib1_gv_rESOURCE_CHOOSER_ICON_SIZE = 60;
const int lib1_gv_rESOURCE_ICON_SPACING = 8;
const int lib1_gv_dECK_TRACKER_WIDTH = 175;
const int lib1_gv_dECK_TRACKER_HEIGHT = 80;
const int lib1_gv_tURN_TIMER_WIDTH = 300;
const int lib1_gv_tURN_TIMER_HEIGHT = 60;
const int lib1_gv_cARD_HOVER_LINE_HEIGHT = 16;
const int lib1_gv_cARD_HOVER_TEXT_WIDTH = 250;
const int lib1_gv_cARD_HOVER_BORDER = 10;
const int lib1_gv_cARD_HOVER_X_OFFSET = 280;
const int lib1_gv_cARD_HOVER_X_OFFSET_COLLECTION = 260;
const int lib1_gv_cARD_HOVER_Y_POSITION = 70;
const fixed lib1_gv_hOVER_DELAY = 0.8;
const fixed lib1_gv_pLANNING_PHASE_LENGTH = 30.0;
const fixed lib1_gv_pLAY_PHASE_LENGTH = 45.0;
const fixed lib1_gv_bATTLE_PHASE_LENGTH = 20.0;
const int lib1_gv_eFFECT_QUEUE_LIMIT = 299;
const int lib1_gv_aI_PRIORITY_MAX = 0;
const int lib1_gv_aI_PRIORITY_MIN = 0;
const int lib1_gv_mAX_STRUCTURE_PLAN_POINTS = 999;
const fixed lib1_gv_dEFENSIVE_STRUCTURE_SPACING = 0.5;
const fixed lib1_gv_sTRUCTURE_SPACING = -1.0;
const fixed lib1_gv_bURIED_STRUCTURE_SPACING = 0.0;
const fixed lib1_gv_mIN_PATROL_DISTANCE = 5.0;
const int lib1_gv_pACK_COST = 100;
const int lib1_gv_cOMMON_FREQ_T1 = 76;
const int lib1_gv_cOMMON_FREQ_T2 = 0;
const int lib1_gv_uNCOMMON_FREQ_T1 = 20;
const int lib1_gv_uNCOMMON_FREQ_T2 = 61;
const int lib1_gv_rARE_FREQ_T1 = 3;
const int lib1_gv_rARE_FREQ_T2 = 35;
const int lib1_gv_uNIQUE_FREQ_T1 = 1;
const int lib1_gv_uNIQUE_FREQ_T2 = 4;
const int lib1_gv_rANKED_WIN_REWARD = 60;
const int lib1_gv_rANKED_LOSS_REWARD = 40;
const int lib1_gv_rEWARD_MESSAGE_HEIGHT = 60;
const int lib1_gv_rEWARD_AMOUNT_HEIGHT = 80;
const string lib1_gv_mAIN_MENU_BACKGROUND = "Assets\\Textures\\DesperateAlliancesNewsBackground.dds";
const int lib1_gv_mAIN_MENU_BUTTON_WIDTH = 250;
const int lib1_gv_mAIN_MENU_BUTTON_HEIGHT = 100;
const int lib1_gv_mAIN_MENU_BUTTON_SPACE_X = 290;
const int lib1_gv_mAIN_MENU_WIDTH = 1512;
const int lib1_gv_mAIN_MENU_HEIGHT = 850;
const int lib1_gv_mAIN_MENU_PADDING = 48;
const int lib1_gv_cOLLECTION_CARD_SIDE_MARGIN = 40;
const int lib1_gv_cOLLECTION_CARD_TOP_MARGIN = 40;
const int lib1_gv_cOLLECTION_CARD_PADDING = 40;
const int lib1_gv_cOLLECTION_CARD_SPACE_X = 10;
const int lib1_gv_cOLLECTION_CARD_SPACE_Y = 10;
const int lib1_gv_cOLLECTION_CARD_COLUMNS = 4;
const int lib1_gv_cOLLECTION_CARD_ROWS = 2;
const int lib1_gv_dECK_PADDING = 40;
const int lib1_gv_dECK_NAME_HEIGHT = 50;
const int lib1_gv_dECKLIST_Y = 23;
const int lib1_gv_dECKLIST_CARD_HEIGHT = 36;
const int lib1_gv_dECKLIST_CARD_SPACING = 36;
const int lib1_gv_dECKLIST_CARD_ICON_SIZE = 26;
const int lib1_gv_dECKLIST_ICON_X = 91;
const int lib1_gv_cHANGE_DECK_BUTTON_HEIGHT = 40;
const int lib1_gv_sPACE_BETWEEN_COLLECTION_WINDOWS = 30;
const int lib1_gv_fILTER_HEIGHT = 150;
const int lib1_gv_fILTER_TOP_PADDING = 30;
const int lib1_gv_fILTER_ICON_SIZE = 65;
const int lib1_gv_fILTER_ICON_SMALL = 51;
const int lib1_gv_fILTER_ICON_SPACING = 8;
const int lib1_gv_cRAFTING_BUTTON_OFFSET = 40;
const int lib1_gv_mAX_COST_FILTER_INDEX = 7;
const int lib1_gv_sEARCH_ICON_SIZE = 35;
const int lib1_gv_sEARCH_ICON_X = 330;
const int lib1_gv_sAVE_DECK_BUTTON_WIDTH = 185;
const int lib1_gv_dECK_COUNT_LABEL_WIDTH = 110;
const int lib1_gv_lIST_CARD_WIDTH = 260;
const string lib1_gv_eDIT_ICON = "Assets\\Textures\\ui_glues_bluebuttons_editicondisabled.dds";
const string lib1_gv_eDIT_ICON_HIGHLIGHTED = "Assets\\Textures\\ui_glues_bluebuttons_editicon.dds";
const string lib1_gv_cHECK_ICON = "Assets\\Textures\\ui_glues_bluebuttons_checkbox_check_disabled.dds";
const string lib1_gv_cHECK_ICON_HIGHLIGHTED = "Assets\\Textures\\ui_glues_bluebuttons_checkbox_check.dds";
const int lib1_gv_dECK_CHOOSER_HEIGHT = 645;
const int lib1_gv_dECK_MODIFIER_PADDING = 40;
const int lib1_gv_dECKLIST_BUTTON_HEIGHT = 120;
const int lib1_gv_dECKLIST_TITLE_HEIGHT = 50;
const int lib1_gv_dECKLIST_ICON_SIZE = 50;
const string lib1_gv_dELETE_ICON = "Assets\\Textures\\ui_glues_bluebuttons_deleteicondisabled.dds";
const string lib1_gv_dELETE_ICON_HIGHLIGHTED = "Assets\\Textures\\ui_glues_bluebuttons_deleteicon.dds";
const string lib1_gv_mAIN_DECK_RIBBON = "Assets\\Textures\\ui_glues_arcade_ribbon_topplayed.dds";
const string lib1_gv_wARNING_ICON = "Assets\\Textures\\sc2_ui_userprofile_summary_derankwarning.dds";
const string lib1_gv_aDD_ICON = "Assets\\Textures\\sc2_ui_glues_icons_addtoparty.dds";
const string lib1_gv_aDD_ICON_HIGHLIGHTED = "Assets\\Textures\\sc2_ui_glues_icons_addtopartyhover.dds";
const int lib1_gv_pURCHASE_CREDIT_WIDTH = 350;
const int lib1_gv_pURCHASE_SPACING = 50;
const int lib1_gv_pURCHASE_WIDTH = 400;
const int lib1_gv_pURCHASE_HEIGHT = 600;
const int lib1_gv_mAX_STORE_PAGE = 1;
const int lib1_gv_cOSMETIC_BUTTON_SIZE = 72;
const bool lib1_gv_test_mode = false;
const bool lib1_gv_test_tutorial_mode = false;
const bool lib1_gv_straight_to_decks = false;

// Structures
struct lib1_gs_CardUI {
    int lv_size;
    int lv_dialog;
    int lv_background;
    int lv_name_frame;
    int lv_name;
    int lv_image;
    int lv_image_frame;
    int lv_mineral_icon;
    int lv_mineral_cost;
    int lv_gas_icon;
    int lv_gas_cost;
    int lv_type;
    int lv_set_icon;
    int lv_text_frame;
    int lv_race_background;
    int lv_text;
    int lv_border;
    int lv_rarity_icon;
    int lv_selected_indicator;
    int lv_selected_indicator_planning;
    int lv_channel_indicator;
};

struct lib1_gs_Card {
    int lv_id;
    int lv_set;
    int lv_race;
    bool lv_promo;
    string lv_name;
    string lv_cname;
    string lv_type;
    string lv_subtype;
    int lv_rarity;
    int lv_mineral;
    int lv_gas;
    int lv_mineral_adjustment;
    int lv_gas_adjustment;
    trigger lv_default_effect;
    trigger[lib1_gv_eF_MAX + 1] lv_effect;
    string lv_image;
    soundlink lv_sound;
    string[lib1_gv_mAX_UNIT_TYPE_PER_CARD + 1] lv_unit_type;
    int[lib1_gv_mAX_UNIT_TYPE_PER_CARD + 1] lv_unit_count;
    string lv_base_text;
    string lv_default_text;
    bool lv_rush;
    bool lv_delay;
    bool lv_heroic;
    int lv_transform;
    bool lv_stream;
    lib1_gs_CardUI lv_ui;
    bool lv_detection;
    int lv_channel;
    bool lv_buried;
    int lv_locked_by_player;
};

struct lib1_gs_Set {
    string lv_name;
    string lv_description;
    string lv_icon;
    string lv_store_image;
    int lv_start_id;
    int lv_end_id;
    int lv_state;
    int lv_price;
    int lv_common_cost;
    int lv_uncommon_cost;
    int lv_rare_cost;
    int lv_unique_cost;
    int lv_common_sell;
    int lv_uncommon_sell;
    int lv_rare_sell;
    int lv_unique_sell;
};

struct lib1_gs_Hand {
    lib1_gs_Card[lib1_gv_bOOSTED_HAND_LIMIT + 1] lv_card;
    bool[lib1_gv_bOOSTED_HAND_LIMIT + 1] lv_selected;
    bool[lib1_gv_bOOSTED_HAND_LIMIT + 1] lv_channel_enabled;
    int lv_hidden_overlay;
    int[lib1_gv_bOOSTED_HAND_LIMIT + 1] lv_card_button;
};

struct lib1_gs_Deck {
    lib1_gs_Card[lib1_gv_dECK_LIMIT + 1] lv_card;
    fixed lv_last_milled_timestamp;
};

struct lib1_gs_OldDiscard {
    int[lib1_gv_dISCARD_LIMIT + 1] lv_card_id;
};

struct lib1_gs_NewDiscard {
    lib1_gs_Card[lib1_gv_dISCARD_LIMIT + 1] lv_card;
};

struct lib1_gs_Resources {
    int lv_max_mineral_income;
    int lv_max_gas_income;
    int lv_mineral_income;
    int lv_gas_income;
    int lv_previous_mineral_income;
    int lv_previous_gas_income;
    int lv_minerals_used;
    int lv_gas_used;
    int lv_dialog;
    int lv_background;
    int lv_mineral_text;
    int lv_gas_text;
    int[lib1_gv_mINERAL_LIMIT + 1] lv_mineral_icon;
    int[lib1_gv_gAS_LIMIT + 1] lv_gas_icon;
    string lv_resource_chosen;
};

struct lib1_gs_Filter {
    int lv_race;
    bool[lib1_gv_mAX_COST_FILTER_INDEX + 1] lv_total_cost;
    bool lv_crafting_mode;
    bool lv_search_ready;
    string lv_text_search;
};

struct lib1_gs_Decklist {
    string lv_name;
    bool lv_unsaved_changes;
    int[lib1_gv_dECKLIST_LIMIT + 1] lv_card_id;
    int[lib1_gv_dECKLIST_LIMIT + 1] lv_count;
    int lv_button;
    int lv_main_deck_ribbon;
    int lv_main_deck_ribbon_button;
    int lv_delete_icon;
    int lv_delete_button;
    int lv_illegal_deck_icon;
};

struct lib1_gs_Collection {
    int lv_credits_earned;
    int lv_essence_earned;
    int lv_bonus_essence;
    int[lib1_gv_mAX_SET_ID + 1] lv_packs_opened;
    int lv_special_credits;
    int[lib1_gv_mAX_CARD_ID + 1] lv_starter;
    int[lib1_gv_mAX_CARD_ID + 1] lv_unpacked;
    int[lib1_gv_mAX_CARD_ID + 1] lv_bought;
    int[lib1_gv_mAX_CARD_ID + 1] lv_sold;
    lib1_gs_Decklist[3][lib1_gv_dECKLIST_PER_RACE_LIMIT + 1] lv_decklist;
    int[3] lv_default_decklist;
    int lv_current_decklist;
    int lv_scroll_level;
    int[3] lv_add_deck_icon;
    int[3] lv_add_deck_button;
    int[lib1_gv_dECKLIST_LIMIT + 1] lv_decklist_border;
    int[lib1_gv_dECKLIST_LIMIT + 1] lv_decklist_button;
    int[lib1_gv_dECKLIST_LIMIT + 1] lv_decklist_name;
    int[lib1_gv_dECKLIST_LIMIT + 1] lv_decklist_image;
    int[lib1_gv_dECKLIST_LIMIT + 1] lv_decklist_mineral_icon;
    int[lib1_gv_dECKLIST_LIMIT + 1] lv_decklist_gas_icon;
    int[lib1_gv_dECKLIST_LIMIT + 1] lv_decklist_mineral_cost;
    int[lib1_gv_dECKLIST_LIMIT + 1] lv_decklist_gas_cost;
    int[lib1_gv_dECKLIST_LIMIT + 1] lv_decklist_count_text;
    int[8] lv_collection_card_id;
    lib1_gs_CardUI[8] lv_collection_card_ui;
    lib1_gs_CardUI[8] lv_collection_card_count;
    bool[8] lv_collection_card_transformed;
    bool[8] lv_collection_card_enabled;
    int lv_page;
    bool lv_page_change;
    lib1_gs_Filter lv_filter;
    int lv_current_stats_race;
    int lv_trophy_page;
    int lv_pet_page;
    int lv_decoration_page;
    int lv_selected_page_slot_index;
    bool lv_craft;
    bool lv_destroy;
    int lv_card_to_add;
    int lv_card_to_remove;
    int lv_pack_to_purchase;
    int[6] lv_pack_card;
    int lv_deck_race_to_delete;
    int lv_deck_number_to_delete;
    int lv_trophy_to_buy;
    int lv_pet_to_buy;
    int lv_decoration_to_buy;
};

struct lib1_gs_CosmeticTrophy {
    string lv_name;
    string lv_image;
    int lv_cost;
    bool lv_exclusive;
    bool lv_available;
    string[lib1_gv_tROPHY_DOODAD_LIMIT + 1] lv_doodad_type;
};

struct lib1_gs_CosmeticPet {
    string lv_name;
    string lv_image;
    int lv_cost;
    string lv_unit_type;
    bool lv_exclusive;
    bool lv_available;
};

struct lib1_gs_CosmeticDecoration {
    string lv_name;
    string lv_image;
    int lv_cost;
    bool lv_exclusive;
    bool lv_available;
};

struct lib1_gs_PlayerCosmetics {
    bool[lib1_gv_dECORATION_LIMIT + 1] lv_decoration_owned;
    bool[lib1_gv_dECORATION_LIMIT + 1] lv_decoration_enabled;
    bool[lib1_gv_pET_LIMIT + 1] lv_pet_owned;
    int lv_pet_enabled;
    bool[lib1_gv_tROPHY_LIMIT + 1] lv_trophy_owned;
    int lv_trophy_enabled;
};

struct lib1_gs_Player {
    int lv_units_lost;
    int lv_heroes_lost;
    int lv_infested_unit_lost;
    int lv_cards_played_this_turn;
    bool lv_prevent_overdraw_flag;
    bool lv_skip_next_draw_step;
    bool lv_control_overmind;
    fixed lv_button_click_time;
    int lv_cards_to_draw;
    fixed lv_last_draw_time;
    int[3][lib1_gv_mAX_MODE_ID + 1] lv_wins;
    int[3][lib1_gv_mAX_MODE_ID + 1] lv_losses;
    int[3][lib1_gv_mAX_MODE_ID + 1] lv_quits;
    fixed[3] lv_damage_dealt_total;
    fixed[3] lv_damage_received_total;
    int[3] lv_units_killed_total;
    int[3] lv_heroes_killed_total;
    int[3] lv_structures_killed_total;
    int[3] lv_units_created_total;
    int[3] lv_heroes_created_total;
    int[3] lv_structures_created_total;
    fixed[3] lv_damage_dealt;
    fixed[3] lv_damage_received;
    int[3] lv_units_killed;
    int[3] lv_heroes_killed;
    int[3] lv_structures_killed;
    int[3] lv_units_created;
    int[3] lv_heroes_created;
    int[3] lv_structures_created;
    fixed[3] lv_damage_dealt_average;
    fixed[3] lv_damage_received_average;
    int lv_forced_reset_id;
    int[3][lib1_gv_mAX_MODE_ID + 1] lv_wins_reset_point;
    int[3][lib1_gv_mAX_MODE_ID + 1] lv_losses_reset_point;
    int[3][lib1_gv_mAX_MODE_ID + 1] lv_quits_reset_point;
    fixed[3] lv_damage_dealt_reset_point;
    fixed[3] lv_damage_received_reset_point;
    int[3] lv_units_killed_reset_point;
    int[3] lv_heroes_killed_reset_point;
    int[3] lv_structures_killed_reset_point;
    int[3] lv_units_created_reset_point;
    int[3] lv_heroes_created_reset_point;
    int[3] lv_structures_created_reset_point;
    int lv_team;
    bool lv_use_ai;
    lib1_gs_Deck lv_deck;
    lib1_gs_Hand lv_hand;
    lib1_gs_OldDiscard lv_old_discard;
    lib1_gs_NewDiscard lv_new_discard;
    lib1_gs_Resources lv_resources;
    region lv_spawn_region;
    region lv_enemy_spawn_region;
    region lv_structure_region;
    region lv_defense_region;
    region lv_attack_region;
    region lv_aoe_target_region;
    region lv_enemy_build_region;
    region lv_enemy_defense_region;
    region lv_cleanup_region;
    region lv_close_drop_region;
    region lv_far_drop_region;
    region lv_trophy_region;
};

struct lib1_gs_builder {
    unit lv_builder;
    abilcmd lv_build_command;
    string lv_structure_type;
    int lv_attempt_count;
    bool lv_defensive;
};

struct lib1_gs_Effect {
    int lv_player;
    int lv_card_id;
    trigger lv_effect;
    unitgroup lv_units_created;
    bool lv_channel_enabled;
};

// Variable Declarations
lib1_gs_Card[lib1_gv_mAX_CARD_ID + 1] lib1_gv_card;
lib1_gs_Set[lib1_gv_mAX_SET_ID + 1] lib1_gv_set;
int lib1_gv_sTARTING_CREDITS;
int lib1_gv_nEW_PLAYER_BONUS_PER_GAME;
lib1_gs_Collection[lib1_gv_mAX_PLAYERS + 1] lib1_gv_player_collection;
int[lib1_gv_tROPHY_LIMIT + 1] lib1_gv_trophy_store;
lib1_gs_CosmeticTrophy[lib1_gv_tROPHY_LIMIT + 1] lib1_gv_cosmetic_trophy;
int[lib1_gv_pET_LIMIT + 1] lib1_gv_pet_store;
lib1_gs_CosmeticPet[lib1_gv_pET_LIMIT + 1] lib1_gv_cosmetic_pet;
int[lib1_gv_dECORATION_LIMIT + 1] lib1_gv_decoration_store;
lib1_gs_CosmeticDecoration[lib1_gv_dECORATION_LIMIT + 1] lib1_gv_cosmetic_decoration;
lib1_gs_PlayerCosmetics[7] lib1_gv_player_cosmetics;
lib1_gs_Player[lib1_gv_mAX_PLAYERS + 1] lib1_gv_player;
playergroup[2] lib1_gv_team;
unit[2] lib1_gv_keystone;
int[2] lib1_gv_keystone_energy;
int[2] lib1_gv_keystone_channel_text;
lib1_gs_builder[lib1_gv_bUILDER_LIMIT + 1] lib1_gv_builder;
bank[lib1_gv_mAX_PLAYERS + 1] lib1_gv_collection_bank;
bank[lib1_gv_mAX_PLAYERS + 1] lib1_gv_legacy_bank;
bool lib1_gv_tutorial_flag;
bool lib1_gv_uneven_teams;
int lib1_gv_game_mode;
int lib1_gv_win_reward;
int lib1_gv_loss_reward;
int lib1_gv_resource_chooser_dialog;
int lib1_gv_resource_chooser_mineral_icon;
int lib1_gv_resource_chooser_mineral_button;
int lib1_gv_resource_chooser_gas_icon;
int lib1_gv_resource_chooser_gas_button;
int lib1_gv_deck_tracker_dialog;
int lib1_gv_deck_tracker_labels_item;
int lib1_gv_deck_tracker_values_item;
int lib1_gv_deck_tracker_dialog_item;
int lib1_gv_turn_timer_dialog;
int lib1_gv_turn_timer_phase;
int lib1_gv_turn_timer_number;
int lib1_gv_turn_timer_value;
int lib1_gv_end_phase_dialog;
int lib1_gv_end_phase_button;
int lib1_gv_eND_TURN_WIDTH;
int lib1_gv_eND_TURN_HEIGHT;
int lib1_gv_planning_instructions;
int lib1_gv_pLANNING_INSTRUCTION_WIDTH;
int lib1_gv_pLANNING_INSTRUCTION_HEIGHT;
timer[lib1_gv_mAX_PLAYERS + 1] lib1_gv_hover_timer;
int[lib1_gv_mAX_PLAYERS + 1] lib1_gv_last_hovered_hand_index;
int[lib1_gv_mAX_PLAYERS + 1] lib1_gv_card_hover_dialog;
int lib1_gv_unit_panel_additions;
int lib1_gv_unit_panel_structure_cost;
bool[lib1_gv_mAX_PLAYERS + 1] lib1_gv_shift;
int lib1_gv_current_turn;
string lib1_gv_current_phase;
timer lib1_gv_turn_timer;
playergroup lib1_gv_ready_players;
unitgroup lib1_gv_units_created_this_battle_phase;
lib1_gs_Effect[lib1_gv_eF_MAX + 1][lib1_gv_eFFECT_QUEUE_LIMIT + 1] lib1_gv_effect_queue;
int lib1_gv_current_player;
int lib1_gv_current_card_id;
unitgroup lib1_gv_current_units_created;
bool lib1_gv_current_channel_enabled;
int lib1_gv_tutorial_tip_id;
int lib1_gv_tutorial_tip_dialog;
int lib1_gv_tutorial_tip_message;
int lib1_gv_tutorial_tip_button;
unitgroup[lib1_gv_mAX_CARD_ID + 1] lib1_gv_units_from_card;
unitgroup lib1_gv_ready_units;
unitgroup lib1_gv_tinted_units;
unitgroup lib1_gv_one_turn_wait_units;
unitgroup lib1_gv_two_turn_wait_units;
unitgroup lib1_gv_aggressive_units;
unitgroup lib1_gv_defensive_units;
unitgroup lib1_gv_tactical_units;
unitgroup lib1_gv_retreating_units;
unitgroup lib1_gv_leaving_units;
unitgroup lib1_gv_loading_units;
unitgroup lib1_gv_builder_units;
unitgroup lib1_gv_failed_builder_units;
unitgroup lib1_gv_streaming_units;
unitgroup lib1_gv_ready_to_morph;
unitgroup lib1_gv_mutated_units;
unitgroup lib1_gv_merging_units;
unitgroup lib1_gv_psi_emitter_units;
unitgroup lib1_gv_burrow_ambush_units;
point[lib1_gv_mAX_STRUCTURE_PLAN_POINTS + 1] lib1_gv_planned_structure_point;
string[lib1_gv_mAX_STRUCTURE_PLAN_POINTS + 1] lib1_gv_planned_structure_type;
unitgroup lib1_gv_hard_removal_targeted_units;
unitgroup lib1_gv_stun_targeted_units;
unitgroup lib1_gv_splash_targeted_units;
unitgroup lib1_gv_buff_targeted_units;
string lib1_gv_credit_image;
fixed lib1_gv_fADE_OUT_BATTLE_UI_TIME;
fixed lib1_gv_fADE_OUT_DELAY;
fixed lib1_gv_fADE_OUT_BATTLEFIELD;
int lib1_gv_reward_dialog;
int lib1_gv_reward_dialog_message;
int lib1_gv_reward_tutorial_completion_message;
int lib1_gv_reward_dialog_credits;
int lib1_gv_reward_dialog_exit_button;
int lib1_gv_reward_dialog_background_image;
int lib1_gv_reward_dialog_new_player_bonus;
int lib1_gv_reward_dialog_message_new_player_bonus;
int lib1_gv_reward_dialog_credits_new_player_bonus;
int lib1_gv_reward_dialog_exit_button_new_player_bonus;
text lib1_gv_aNNOUNCEMENT;
int lib1_gv_main_menu_dialog;
int lib1_gv_main_menu_fullscreen_dialog;
int lib1_gv_main_menu_collection_button;
int lib1_gv_main_menu_store_button;
int lib1_gv_main_menu_stats_button;
int lib1_gv_main_menu_cosmetics_button;
int lib1_gv_back_to_main_menu_dialog;
int lib1_gv_back_to_main_menu_button;
int lib1_gv_discord;
int lib1_gv_reddit;
int lib1_gv_blog;
int lib1_gv_crowdfunding;
int[lib1_gv_mAX_CARD_ID + 1] lib1_gv_ordered_card;
int lib1_gv_collection_arrow_right_button;
int lib1_gv_collection_arrow_left_button;
int lib1_gv_collection_arrow_right;
int lib1_gv_collection_arrow_left;
int lib1_gv_collection_dialog_bg_p;
int lib1_gv_collection_dialog_bg_z;
int lib1_gv_collection_dialog_bg_t;
int lib1_gv_collection_dialog;
int lib1_gv_deck_dialog;
int lib1_gv_deck_dialog_bg_t;
int lib1_gv_deck_dialog_bg_z;
int lib1_gv_deck_dialog_bg_p;
int lib1_gv_decklist_dialog;
int lib1_gv_decklist_arrow_up_button;
int lib1_gv_decklist_arrow_down_button;
int lib1_gv_decklist_arrow_up;
int lib1_gv_decklist_arrow_down;
int lib1_gv_decklist_card_count;
int lib1_gv_save_deck_button;
int lib1_gv_change_decks_button;
int lib1_gv_current_deck_name;
int lib1_gv_change_deck_name_icon;
int lib1_gv_change_deck_name_button;
int lib1_gv_change_deck_name_edit_box;
int lib1_gv_save_deck_name_icon;
int lib1_gv_save_deck_name_button;
int lib1_gv_crafting_dialog;
int lib1_gv_crafting_dialog_bg_t;
int lib1_gv_crafting_dialog_bg_z;
int lib1_gv_crafting_dialog_bg_p;
int[lib1_gv_mAX_PLAYERS + 1] lib1_gv_crafting_card_dialog;
int lib1_gv_essence_count;
int lib1_gv_craft_button;
int lib1_gv_destroy_button;
int lib1_gv_filter_dialog;
int lib1_gv_filter_dialog_bg_t;
int lib1_gv_filter_dialog_bg_z;
int lib1_gv_filter_dialog_bg_p;
int[lib1_gv_mAX_COST_FILTER_INDEX + 1] lib1_gv_filter_total_cost_icon;
int[lib1_gv_mAX_COST_FILTER_INDEX + 1] lib1_gv_filter_total_cost_button;
int lib1_gv_search_filter;
int lib1_gv_search_button_image;
int lib1_gv_search_button;
int lib1_gv_include_craftable_button_image;
int lib1_gv_include_craftable_button;
int lib1_gv_collection_interaction_dialog;
int[8] lib1_gv_collection_card_button;
int lib1_gv_terran_decks;
int lib1_gv_zerg_decks;
int lib1_gv_protoss_decks;
int lib1_gv_pACK_CARD_SPACE_X;
int lib1_gv_pACK_CARD_SPACE_Y;
int lib1_gv_store_dialog_credits;
int lib1_gv_store_dialog_credits_amount;
int lib1_gv_pack_dialog;
int lib1_gv_pack_finish_button;
int[3] lib1_gv_store_dialog_odd;
int[3] lib1_gv_store_dialog_odd_set_name;
int[3] lib1_gv_store_dialog_odd_set_description;
int[3] lib1_gv_store_dialog_odd_image;
int[3] lib1_gv_store_dialog_odd_icon;
int[3] lib1_gv_store_dialog_odd_button;
int[2] lib1_gv_store_dialog_even;
int[2] lib1_gv_store_dialog_even_set_name;
int[2] lib1_gv_store_dialog_even_set_description;
int[2] lib1_gv_store_dialog_even_image;
int[2] lib1_gv_store_dialog_even_icon;
int[2] lib1_gv_store_dialog_even_button;
int lib1_gv_store_arrow_dialog;
int lib1_gv_store_left_arrow_image;
int lib1_gv_store_left_arrow_button;
int lib1_gv_store_right_arrow_image;
int lib1_gv_store_right_arrow_button;
int lib1_gv_stats_button_dialog;
int lib1_gv_stats_reset_button;
int lib1_gv_stats_terran_button;
int lib1_gv_stats_zerg_button;
int lib1_gv_stats_protoss_button;
int lib1_gv_stats_frame_dialog;
int lib1_gv_stats_frame;
int lib1_gv_stats_current_race;
int lib1_gv_stats_wins;
int lib1_gv_stats_losses;
int lib1_gv_stats_damage_dealt_this;
int lib1_gv_stats_damage_dealt_average;
int lib1_gv_stats_damage_received_this;
int lib1_gv_stats_damage_received_average;
int lib1_gv_stats_units_killed_this;
int lib1_gv_stats_units_killed_average;
int lib1_gv_stats_heroes_killed_this;
int lib1_gv_stats_heroes_killed_average;
int lib1_gv_stats_structures_killed_this;
int lib1_gv_stats_structures_killed_average;
int lib1_gv_stats_units_created_this;
int lib1_gv_stats_units_created_average;
int lib1_gv_stats_heroes_created_this;
int lib1_gv_stats_heroes_created_average;
int lib1_gv_stats_structures_created_this;
int lib1_gv_stats_structures_created_average;
int lib1_gv_cosmetic_store_dialog;
int lib1_gv_cosmetic_store_credits_ui;
int lib1_gv_trophy_dialog;
int[3] lib1_gv_trophy_name;
int[3] lib1_gv_trophy_name_border;
int[3] lib1_gv_trophy_image;
int[3] lib1_gv_trophy_image_border;
int[3] lib1_gv_trophy_button;
int[3] lib1_gv_trophy_enabled_text;
int lib1_gv_trophy_left_arrow;
int lib1_gv_trophy_left_arrow_button;
int lib1_gv_trophy_right_arrow;
int lib1_gv_trophy_right_arrow_button;
int lib1_gv_pet_dialog;
int[3] lib1_gv_pet_name;
int[3] lib1_gv_pet_name_border;
int[3] lib1_gv_pet_image;
int[3] lib1_gv_pet_image_border;
int[3] lib1_gv_pet_button;
int[3] lib1_gv_pet_enabled_text;
int lib1_gv_pet_left_arrow;
int lib1_gv_pet_left_arrow_button;
int lib1_gv_pet_right_arrow;
int lib1_gv_pet_right_arrow_button;
int lib1_gv_decoration_dialog;
int[3] lib1_gv_decoration_name;
int[3] lib1_gv_decoration_name_border;
int[3] lib1_gv_decoration_image;
int[3] lib1_gv_decoration_image_border;
int[3] lib1_gv_decoration_button;
int[3] lib1_gv_decoration_enabled_text;
int lib1_gv_decoration_left_arrow;
int lib1_gv_decoration_left_arrow_button;
int lib1_gv_decoration_right_arrow;
int lib1_gv_decoration_right_arrow_button;
fixed lib1_gv_rESPONSE_TIME;
unitgroup lib1_gv_pets;
int[lib1_gv_mAX_PLAYERS + 1] lib1_gv_trophy_name_text_tag;
bool lib1_gv_debug;
bool lib1_gv_mouse_rotation_on;

// Function Declarations
int lib1_gf_GetCardIDByName (string lp_name);
int lib1_gf_GetRandomCollectibleCardIDWithRace (int lp_race, bool lp_for_ai_deck);
int lib1_gf_GetRandomCardIDWithSubtype (string lp_subtype, bool lp_include_uncollectible);
int lib1_gf_GetRandomCollectibleCardIDWithOnlyUnitType (string lp_unit_type, string lp_equivalent_unit_type_1, string lp_equivalent_unit_type_2);
bool lib1_gf_CardValidForRandomAIDeck (string lp_card_name);
int lib1_gf_TotalCost (int lp_card_id);
void lib1_gf_CalculateDefaultText ();
bool lib1_gf_CardTypesMatch (string lp_type_1, string lp_type_2);
void lib1_gf_DefineCard (int lp_id, int lp_set, int lp_race, string lp_name, string lp_cname, string lp_type, string lp_subtype, int lp_rarity, int lp_mineral, int lp_gas, trigger lp_effect, string lp_base_text, string lp_image, soundlink lp_sound);
void lib1_gf_DefineCardUnit (int lp_id, string lp_type, int lp_count);
void lib1_gf_AddEffecttoCardDefinition (int lp_card_id, int lp_effect_class, trigger lp_effect);
void lib1_gf_AddRushtoCardDefinition (int lp_card_id);
void lib1_gf_AddDelaytoCardDefinition (int lp_card_id);
void lib1_gf_AddHeroictoCardDefinition (int lp_card_id);
void lib1_gf_AddTransformRelationship (string lp_transform_card_name_1, string lp_transform_card_name_2);
void lib1_gf_AddStreamtoCardDefinition (int lp_card_id);
void lib1_gf_AddDetectiontoCardDefinition (int lp_card_id);
void lib1_gf_AddChanneltoCardDefinition (int lp_card_id, int lp_amount);
void lib1_gf_MakeCardPromo (int lp_card_id);
void lib1_gf_AddBuriedtoCardDefinition (int lp_card_id);
int lib1_gf_GetRandomCardWithRarityFromSet (int lp_set_id, int lp_rarity);
void lib1_gf_RaynorEffect (int lp_player);
void lib1_gf_SiegingRavagersEffect (int lp_player, unit lp_ravager);
void lib1_gf_CreepingQueensEffect (int lp_player, unit lp_queen);
void lib1_gf_BarragingDisruptorsEffect (int lp_player, unit lp_disruptor);
void lib1_gf_DarkShrineEffect (int lp_player);
void lib1_gf_FleetBeaconEffect (int lp_player);
void lib1_gf_ArtanisEffect (int lp_player);
void lib1_gf_KerriganEffect (int lp_player);
void lib1_gf_KaraxEffect (int lp_player);
void lib1_gf_NydusNetworkEffect (int lp_player);
void lib1_gf_MothershipCardEffect (int lp_player);
void lib1_gf_UpdateCardPsionicAttraction (int lp_player, int lp_hand_index);
bool lib1_gf_ExiledOnesLegalToPlay (int lp_player);
void lib1_gf_GatheringProtossEffect (int lp_player);
void lib1_gf_RiotHandEffect (int lp_player);
void lib1_gf_InfestationHandEffect (int lp_player);
void lib1_gf_OvermindEffect (int lp_player);
void lib1_gf_ArgusCrystalBuildStart (unit lp_structure);
void lib1_gf_UpdateCardMercilessFinishers (int lp_player, int lp_hand_index);
void lib1_gf_ArtanisFounderEffect (int lp_player);
int lib1_gf_GetPoweredProtossStructureCount (int lp_player);
int lib1_gf_HandLimit (int lp_player);
bool lib1_gf_PlayerHasCardAtHandIndex (int lp_player, int lp_hand_index);
int lib1_gf_FirstEmptyHandSlot (int lp_player);
int lib1_gf_TopofHand (int lp_player);
int lib1_gf_HandCardMineralCost (int lp_player, int lp_hand_index);
int lib1_gf_HandCardGasCost (int lp_player, int lp_hand_index);
int lib1_gf_CurrentSelectionMineralCost (int lp_player);
int lib1_gf_CurrentSelectionGasCost (int lp_player);
int lib1_gf_CountofSelectedCards (int lp_player);
int lib1_gf_HandCardTotalCost (int lp_player, int lp_hand_index);
void lib1_gf_DeselectAllCards (int lp_player);
int lib1_gf_CheapestHandCard (int lp_player, string lp_required_type, bool lp_allow_locked, int lp_excluded_card_id);
int lib1_gf_MostExpensiveHandCard (int lp_player, string lp_required_type, bool lp_allow_locked, bool lp_exclude_affordable);
int lib1_gf_RandomHandCard (int lp_player, string lp_required_type, string lp_required_subtype, int lp_excluded_card_id, string lp_excluded_subtype);
int lib1_gf_CountOfUnitTypesOnHandCard (int lp_player, int lp_hand_index);
int lib1_gf_CountOfUnitsOnHandCardMatchingType (int lp_player, int lp_hand_index, string lp_unit_type);
void lib1_gf_FixDuplicateUnitTypesOnHandCard (int lp_player, int lp_hand_index);
int lib1_gf_FindDuplicateUnitTypeOnHandCard (int lp_player, int lp_hand_index);
bool lib1_gf_PlayerHasCardAtDeckIndex (int lp_player, int lp_deck_index);
int lib1_gf_FirstEmptyDeckSlot (int lp_player);
int lib1_gf_TopofDeck (int lp_player);
int lib1_gf_DeckCardMineralCost (int lp_player, int lp_deck_index);
int lib1_gf_DeckCardGasCost (int lp_player, int lp_deck_index);
void lib1_gf_InitializeDeck (int lp_player);
void lib1_gf_ShuffleDeck (int lp_player);
bool lib1_gf_PlayerHasCardAtDiscardIndex (int lp_player, int lp_discard_index);
int lib1_gf_FirstEmptyDiscardSlot (int lp_player);
int lib1_gf_TopofDiscard (int lp_player);
int lib1_gf_RandomDiscardCardWithType (int lp_player, string lp_type);
int lib1_gf_RandomDiscardCardWithBuried (int lp_player);
void lib1_gf_ShuffleDiscard (int lp_player);
int lib1_gf_MaxMineralIncome (int lp_player);
int lib1_gf_MineralIncome (int lp_player);
int lib1_gf_MaxGasIncome (int lp_player);
int lib1_gf_GasIncome (int lp_player);
int lib1_gf_MineralsSpent (int lp_player);
int lib1_gf_MineralsSpentByPsiDisruptor (int lp_player);
int lib1_gf_GasSpent (int lp_player);
int lib1_gf_MineralsRemaining (int lp_player);
int lib1_gf_GasRemaining (int lp_player);
bool lib1_gf_CardLegaltoPlay (int lp_player, int lp_mineral, int lp_gas, int lp_card_id);
bool lib1_gf_CardAffordabletoPlay (int lp_player, int lp_mineral, int lp_gas, int lp_card_id);
void lib1_gf_ReduceMineralIncome (int lp_player, int lp_amount);
void lib1_gf_ReduceGasIncome (int lp_player, int lp_amount);
bool lib1_gf_AllCostsEnabled (int lp_player);
void lib1_gf_AddCardtoDecklist (int lp_player, int lp_race, int lp_decklist_id, int lp_card_id);
void lib1_gf_RemoveCardfromDecklist (int lp_player, int lp_race, int lp_decklist_id, int lp_card_id);
bool lib1_gf_DecklistEmpty (int lp_player, int lp_race, int lp_decklist_id);
int lib1_gf_CountinDecklist (int lp_player, int lp_race, int lp_decklist_id, int lp_card_id);
int lib1_gf_MaxCountinAnyDecklist (int lp_player, int lp_race, int lp_card_id);
int lib1_gf_DecklistArrayLength (int lp_player, int lp_race, int lp_decklist_id);
int lib1_gf_DecklistTotalCardCount (int lp_player, int lp_race, int lp_decklist_id);
bool lib1_gf_DecklistLegal (int lp_player, int lp_race, int lp_decklist_id);
int lib1_gf_CardOwnedCountCapped (int lp_player, int lp_card_id);
int lib1_gf_CardOwnedCountActual (int lp_player, int lp_card_id);
int lib1_gf_PlayerCredits (int lp_player);
int lib1_gf_NewPlayerBonusCredits (int lp_player);
int lib1_gf_PlayerEssence (int lp_player);
void lib1_gf_CheckforSpecialCredits (int lp_player);
void lib1_gf_AddCardtoStartingCollection (int lp_card_id, int lp_copies);
int lib1_gf_GetTrophyIDByName (string lp_name);
void lib1_gf_DefineTrophyCosmetic (int lp_id, string lp_name, string lp_image, int lp_cost, bool lp_available, bool lp_exclusive);
void lib1_gf_AddDoodadTypetoTrophyCosmetic (int lp_id, string lp_doodad_type);
int lib1_gf_VisibleTrophyCount (int lp_player);
int lib1_gf_GetPetIDByName (string lp_name);
void lib1_gf_DefinePetCosmetic (int lp_id, string lp_name, string lp_image, int lp_cost, string lp_unit_type, bool lp_available, bool lp_exclusive);
int lib1_gf_VisiblePetCount (int lp_player);
bool lib1_gf_TeamCosmeticDecorationDisabled (int lp_cosmetic, int lp_team);
int lib1_gf_GetDecorationIDByName (string lp_name);
void lib1_gf_DefineDecorationCosmetic (int lp_id, string lp_name, string lp_image, int lp_cost, bool lp_available, bool lp_exclusive);
int lib1_gf_VisibleDecoration (int lp_player);
int lib1_gf_GetPlayerRaceID (int lp_player);
unit lib1_gf_PlayersXelnagaStructure (int lp_player);
playergroup lib1_gf_OpposingTeamofPlayer (int lp_player);
int lib1_gf_TotalGames (int lp_player, bool lp_include_reset);
int lib1_gf_CompletedGames (int lp_player, bool lp_include_reset);
bool lib1_gf_TutorialWon (int lp_player);
int lib1_gf_TotalGamesForRace (int lp_player, int lp_race, bool lp_include_reset);
int lib1_gf_TotalWinsforRace (int lp_player, int lp_race, bool lp_include_reset);
int lib1_gf_TotalLossesforRace (int lp_player, int lp_race, bool lp_include_reset);
int lib1_gf_TotalRankedWins (int lp_player, bool lp_include_reset);
int lib1_gf_TotalRankedLosses (int lp_player, bool lp_include_reset);
fixed lib1_gf_MatchmakingRank (int lp_player);
int lib1_gf_GetDamageDealt (int lp_player, int lp_race);
int lib1_gf_GetAverageDamageDealt (int lp_player, int lp_race);
int lib1_gf_GetDamageReceived (int lp_player, int lp_race);
int lib1_gf_GetAverageDamageReceived (int lp_player, int lp_race);
int lib1_gf_GetTotalUnitsKilled (int lp_player, int lp_race, bool lp_include_reset);
int lib1_gf_GetAverageUnitsKilled (int lp_player, int lp_race, bool lp_include_reset);
int lib1_gf_GetTotalHeroesKilled (int lp_player, int lp_race, bool lp_include_reset);
int lib1_gf_GetAverageHeroesKilled (int lp_player, int lp_race, bool lp_include_reset);
int lib1_gf_GetTotalStructuresKilled (int lp_player, int lp_race, bool lp_include_reset);
int lib1_gf_GetAverageStructuresKilled (int lp_player, int lp_race, bool lp_include_reset);
int lib1_gf_GetTotalUnitsCreated (int lp_player, int lp_race, bool lp_include_reset);
int lib1_gf_GetAverageUnitsCreated (int lp_player, int lp_race, bool lp_include_reset);
int lib1_gf_GetTotalHeroesCreated (int lp_player, int lp_race, bool lp_include_reset);
int lib1_gf_GetAverageHeroesCreated (int lp_player, int lp_race, bool lp_include_reset);
int lib1_gf_GetTotalStructuresCreated (int lp_player, int lp_race, bool lp_include_reset);
int lib1_gf_GetAverageStructuresCreated (int lp_player, int lp_race, bool lp_include_reset);
int lib1_gf_KeystoneEnergyRequested (int lp_team);
void lib1_gf_MakeKeystoneEnergyRequestsLegal (int lp_team);
void lib1_gf_AttemptKeystoneEnergyRequestsforTeam (int lp_team);
void lib1_gf_RemoveOneRandomEnergyRequestFromTeam (int lp_team);
void lib1_gf_SetKeystoneEnergy (int lp_team, int lp_amount);
void lib1_gf_UseRequestedKeystoneEnergy (int lp_team);
void lib1_gf_AddEnergytoKeystone (int lp_team, int lp_amount);
void lib1_gf_UpdateKeystoneChannelText (int lp_team);
void lib1_gf_AddBuildertoQueue (unit lp_builder, abilcmd lp_build_command, string lp_structure_type, bool lp_defensive);
void lib1_gf_RemoveBuilderFromQueue (unit lp_builder_to_remove);
void lib1_gf_ReorderBuilder (unit lp_builder_to_order);
void lib1_gf_IncrementBuilderAttemptCount (unit lp_builder_to_increment);
void lib1_gf_ResetBuilderAttemptCounts ();
void lib1_gf_InitializeBanks ();
void lib1_gf_AddBonusEssenceforLegacyPlayer (int lp_player);
void lib1_gf_HandleCorruptedCollection (int lp_player);
void lib1_gf_HandleCorruptedDecklist (int lp_player, int lp_race, int lp_decklist);
void lib1_gf_LoadDecks (int lp_player);
void lib1_gf_CreateStarterDecks (int lp_player);
void lib1_gf_SaveDecktoBank (int lp_player, int lp_race, int lp_deck);
void lib1_gf_SaveDecktoBankCopyFromNextDeck (int lp_player, int lp_race, int lp_deck);
void lib1_gf_DeleteDeckfromBank (int lp_player, int lp_race, int lp_deck);
void lib1_gf_SaveDeckasMainDeck (int lp_player, int lp_race, int lp_deck);
void lib1_gf_SortDeck (int lp_player, int lp_race, int lp_decklist);
int lib1_gf_CountinSavedDecklist (int lp_player, int lp_race, int lp_decklist_id, int lp_card_id);
int lib1_gf_MaxCountinAnySavedDecklist (int lp_player, int lp_race, int lp_card_id);
void lib1_gf_LoadCollection (int lp_player);
void lib1_gf_SaveCollectiontoBank (int lp_player);
void lib1_gf_LoadPlayerVariables (int lp_player);
void lib1_gf_SaveCurrencytoBank (int lp_player);
void lib1_gf_SaveWinsLossestoBank (int lp_player);
void lib1_gf_SaveStatstoBank (int lp_player);
void lib1_gf_SaveStatsResetPointtoBank (int lp_player);
void lib1_gf_SavePackPurchasestoBank (int lp_player, int lp_set_id);
void lib1_gf_SaveMetadatatoBank (int lp_player);
void lib1_gf_RecordAverageDamageFromLegacyBank (int lp_player, int lp_race);
void lib1_gf_LoadCosmetics (int lp_player);
void lib1_gf_SaveCosmeticstoBank (int lp_player);
bool lib1_gf_CollectionValid (int lp_player);
void lib1_gf_CheckIfDecksValid (int lp_player);
bool lib1_gf_RacesMatchForDeckbuilding (int lp_deck_race, int lp_card_race);
void lib1_gf_InitializeStartingHand (int lp_player);
void lib1_gf_InitializeGameModeTeams ();
void lib1_gf_SetTeamsArrangedTeams ();
void lib1_gf_SetTeamsRanked ();
void lib1_gf_SetTeamsTutorial ();
int lib1_gf_HighestRankedPlayerinGroup (playergroup lp_group);
void lib1_gf_DisableSkins (int lp_player);
void lib1_gf_RefreshUIRenderPriority ();
int lib1_gf_UIDistance (int lp_x_1, int lp_y_1, int lp_x_2, int lp_y_2);
int lib1_gf_ReplaceDialogImage (int lp_player, int lp_old_dialog_item, int lp_new_dialog_item, string lp_new_image, fixed lp_time, bool lp_desat);
void lib1_gf_FadeandDestroyDialog (int lp_dialog, fixed lp_time);
void lib1_gf_FadeandDestroyDialogItem (int lp_dialog_item, fixed lp_time);
void lib1_gf_DestroyDialogItemAfterDelay (int lp_dialog_item, fixed lp_delay);
string lib1_gf_GetUnitNameasString (bool lp_plural, string lp_unit_type);
string lib1_gf_GetUnitNamefromPath (string lp_path);
int lib1_gf_PercentofWidth (int lp_dialog, fixed lp_percent);
int lib1_gf_PercentofHeight (int lp_dialog, fixed lp_percent);
void lib1_gf_UpdateCardBackground (int lp_item);
void lib1_gf_UpdateCardNameFrame (int lp_item);
void lib1_gf_UpdateCardName (int lp_item);
void lib1_gf_UpdateCardImageFrame (int lp_item);
void lib1_gf_UpdateCardImage (int lp_item);
void lib1_gf_UpdateCardMineralIcon (int lp_item);
void lib1_gf_UpdateCardMineralCost (int lp_item);
void lib1_gf_UpdateCardGasIcon (int lp_item);
void lib1_gf_UpdateCardGasCost (int lp_item);
void lib1_gf_UpdateCardType (int lp_item);
void lib1_gf_UpdateCardSetIcon (int lp_item);
void lib1_gf_UpdateCardTextFrame (int lp_item);
void lib1_gf_UpdateCardText (int lp_item);
void lib1_gf_UpdateCardRaceBackground (int lp_item);
void lib1_gf_UpdateCardFrame (int lp_item);
void lib1_gf_UpdateCardRarityIcon (int lp_item);
void lib1_gf_UpdateCardSelectedIndicator (int lp_item);
void lib1_gf_UpdateCardSelectedPlanningPhaseIndicator (int lp_item);
text lib1_gf_GetCardText (string lp_unit_text, string lp_base_text, bool lp_rush, bool lp_delay, bool lp_heroic, bool lp_transform, bool lp_stream, bool lp_buried, int lp_set);
string lib1_gf_GetCardString (string lp_unit_text, string lp_base_text, bool lp_rush, bool lp_delay, bool lp_heroic, bool lp_transform, bool lp_stream, bool lp_buried);
string lib1_gf_GetUnitTextForHandCard (int lp_player, int lp_hand_index);
string lib1_gf_GetUnitTextForDeckCard (int lp_player, int lp_deck_index);
string lib1_gf_GetUnitTextForCollectionCard (int lp_card_id);
void lib1_gf_CreateCard (int lp_player, int lp_x, int lp_y, int lp_card_id, string lp_source_option, int lp_source_index, string lp_target_option, int lp_target_index);
void lib1_gf_ResizeHandCard (int lp_player, int lp_hand_index, int lp_size);
void lib1_gf_UpdateCard (int lp_player, int lp_hand_index);
int lib1_gf_HandCardRenderPriority (int lp_hand_index, bool lp_played);
int lib1_gf_HoveredCardRenderPriority ();
void lib1_gf_HandCardPlayAnimation (int lp_player, int lp_hand_index);
void lib1_gf_DisplayLockedWarningArgusCrystal (int lp_player, int lp_hand_index);
void lib1_gf_LockHandCardArgusCrystal (int lp_casting_player, int lp_target_player, int lp_target_hand_index);
void lib1_gf_UnlockHandCardArgusCrystal (int lp_target_player, int lp_target_hand_index);
int lib1_gf_HandPositionX (int lp_player, int lp_hand_index);
int lib1_gf_HandPositionY (int lp_player, int lp_hand_index);
void lib1_gf_MoveCardTowardsPosition (int lp_card, int lp_x, int lp_y);
void lib1_gf_CreateHandOverlay (int lp_player);
void lib1_gf_CreateHandCardButton (int lp_player, int lp_hand_index);
void lib1_gf_DestroyHandCardButton (int lp_player, int lp_hand_index);
void lib1_gf_SetHandCardButtonPosition (int lp_player, int lp_hand_index);
void lib1_gf_UpdateHandCardButtonPositions (int lp_player);
void lib1_gf_EnableAllCardButtons (int lp_player);
void lib1_gf_DisableAllCardButtons (int lp_player);
void lib1_gf_CreateResourceUI (int lp_player);
void lib1_gf_ResizeResourceUI (int lp_player, fixed lp_delay);
void lib1_gf_UpdateResourceIcons (int lp_player);
void lib1_gf_SetMineralIconUnavailable (int lp_player, int lp_icon_index);
void lib1_gf_SetMineralIconUnspent (int lp_player, int lp_icon_index);
void lib1_gf_SetMineralIconUnspentPsiEmitter (int lp_player, int lp_icon_index);
void lib1_gf_SetMineralIconSpent (int lp_player, int lp_icon_index);
void lib1_gf_SetMineralIconSpentPsiEmitter (int lp_player, int lp_icon_index);
void lib1_gf_SetMineralIconSpentByPsiDisruptor (int lp_player, int lp_icon_index);
void lib1_gf_SetGasIconUnavailable (int lp_player, int lp_icon_index);
void lib1_gf_SetGasIconUnspent (int lp_player, int lp_icon_index);
void lib1_gf_SetGasIconSpent (int lp_player, int lp_icon_index);
void lib1_gf_NotEnoughResources (int lp_player, int lp_mineral_cost, int lp_gas_cost);
void lib1_gf_CreateResourceChooserDialog ();
void lib1_gf_SetMineralIconSizeandPosition (int lp_player, fixed lp_size);
void lib1_gf_SetGasIconSizeandPosition (int lp_player, fixed lp_size);
void lib1_gf_CreateDeckUI ();
void lib1_gf_UpdateDeckUI (int lp_player);
void lib1_gf_CreateTurnTimerUI ();
void lib1_gf_UpdateTurnTimer ();
void lib1_gf_CreateEndPhaseButton ();
void lib1_gf_CreatePlanningInstructions ();
void lib1_gf_StartHoverTimer (int lp_player, int lp_index, bool lp_menu);
void lib1_gf_CancelHover (int lp_player);
void lib1_gf_CreateCardHoverDialog (int lp_player, int lp_index, bool lp_menu);
text lib1_gf_GetCardHoverText (int lp_player, int lp_index, bool lp_menu);
string lib1_gf_GetUnitStatsForFiltering (int lp_card_id);
text lib1_gf_GetUnitStatsAsTextForCard (unit lp_unit);
int lib1_gf_GetUnitStatsLineCount (unit lp_unit);
void lib1_gf_HideUnitPanel (int lp_player);
void lib1_gf_CreateUnitPanelAdditions ();
void lib1_gf_CheckSelectedCardsAreLegal (int lp_player);
void lib1_gf_ToggleSelectedPlayPhase (int lp_player, int lp_hand_index);
void lib1_gf_ToggleSelectedPlanningPhase (int lp_player, int lp_hand_index);
void lib1_gf_CopyHandCard (int lp_player, int lp_hand_index_to_copy);
void lib1_gf_CopyOpponentsDeckCard (int lp_player, int lp_opponent, int lp_deck_index_to_copy, bool lp_amon_color);
bool lib1_gf_FetchCardWithUnitTypes (int lp_player, string lp_unit_type_1, string lp_unit_type_2, string lp_unit_type_3, string lp_unit_type_4, string lp_unit_type_5, string lp_unit_type_6);
bool lib1_gf_FetchCardWithType (int lp_player, string lp_type);
bool lib1_gf_FetchCardWithName (int lp_player, string lp_name_1, string lp_name_2);
bool lib1_gf_FetchAffordableCard (int lp_player);
bool lib1_gf_FetchMostExpensiveCardWithType (int lp_player, string lp_type);
bool lib1_gf_FetchLeastExpensiveCardWithType (int lp_player, string lp_type);
bool lib1_gf_FetchCardWithKeyword (int lp_player, bool lp_heroic, bool lp_rush, bool lp_delay);
bool lib1_gf_FetchCardFromDecktoHand (int lp_player, int lp_deck_index);
void lib1_gf_GenerateXenomorphResearchCardforHand (int lp_player);
void lib1_gf_GenerateWarpInCardforHand (int lp_player);
void lib1_gf_GenerateStarWarpCardforHand (int lp_player);
void lib1_gf_GenerateVoidArmyCardforHand (int lp_player);
void lib1_gf_GenerateHeroWarpCardforHand (int lp_player);
void lib1_gf_CombineSpawnCards (int lp_player, string lp_new_card_name, int lp_copies, int lp_multiplier, bool lp_heroic);
void lib1_gf_DiscardAllNovaOpsCards (int lp_player);
void lib1_gf_SetHandCardCost (int lp_player, int lp_hand_index, int lp_new_mineral_cost, int lp_new_gas_cost);
void lib1_gf_SetHandCardMineralCost (int lp_player, int lp_hand_index, int lp_new_mineral_cost);
void lib1_gf_SetHandCardGasCost (int lp_player, int lp_hand_index, int lp_new_gas_cost);
void lib1_gf_AddtoHandCardCost (int lp_player, int lp_hand_index, int lp_mineral_amount, int lp_gas_amount);
void lib1_gf_RemoveUnitFromHandCard (int lp_player, int lp_hand_index, int lp_amount_to_remove, string lp_unit_type);
void lib1_gf_AddUnittoHandCard (int lp_player, int lp_hand_index, int lp_amount_to_add, string lp_unit_type);
void lib1_gf_AddHeroictoHandCard (int lp_player, int lp_hand_index);
void lib1_gf_AddRushtoHandCard (int lp_player, int lp_hand_index);
void lib1_gf_RemoveHeroicFromHandCard (int lp_player, int lp_hand_index);
void lib1_gf_RemoveRushFromHandCard (int lp_player, int lp_hand_index);
void lib1_gf_UpdateHandCardText (int lp_player, int lp_hand_index);
void lib1_gf_DrawCardFromDecktoHand (int lp_player);
void lib1_gf_ReturnCardFromDiscardtoHand (int lp_player, int lp_discard_index);
void lib1_gf_StealCardFromDecktoHand (int lp_stealing_player, int lp_target_player, int lp_deck_index);
void lib1_gf_ShuffleHandCardIntoDeck (int lp_player, int lp_hand_index);
void lib1_gf_ShuffleDiscardCardIntoDeck (int lp_player, int lp_discard_index);
void lib1_gf_GenerateCardToDiscard (int lp_player, int lp_card_id);
void lib1_gf_DiscardCardFromHandtoDiscard (int lp_player, int lp_hand_index_to_remove);
void lib1_gf_DiscardCardFromDecktoDiscard (int lp_player, int lp_deck_index_to_remove);
void lib1_gf_DiscardAllCardsWithName (int lp_player, string lp_card_name);
void lib1_gf_DiscardAllCardsWithType (int lp_player, string lp_type);
void lib1_gf_DiscardFromDeckAllCardsWithType (int lp_player, string lp_type);
void lib1_gf_GenerateCardforHand (int lp_player, int lp_card_id);
void lib1_gf_GenerateCardtoTopofDeck (int lp_player, int lp_card_id);
void lib1_gf_RemoveCardFromHand (int lp_player, int lp_hand_index_to_remove);
void lib1_gf_RemoveCardFromDeck (int lp_player, int lp_deck_index_to_remove);
void lib1_gf_RemoveCardFromDiscard (int lp_player, int lp_discard_index_to_remove);
void lib1_gf_MillCard (int lp_player);
void lib1_gf_FatigueDamage (int lp_player);
void lib1_gf_TransformHandCard (int lp_player, int lp_hand_index);
void lib1_gf_PlayHandCardFromEffect (int lp_player, int lp_hand_index, bool lp_count_as_played_by_player);
void lib1_gf_PlayDeckCardFromEffect (int lp_player, int lp_deck_index, bool lp_count_as_played_by_player);
void lib1_gf_StartPlanningPhase ();
void lib1_gf_EndPlanningPhase ();
void lib1_gf_StartPlayPhase ();
void lib1_gf_StartofTurnDraw (int lp_player);
void lib1_gf_PauseBattle ();
void lib1_gf_PauseMissiles ();
void lib1_gf_AllowCardSelection (int lp_player);
void lib1_gf_DisallowCardSelection (int lp_player);
void lib1_gf_TriggerEachPlayPhasePreDrawEffects ();
void lib1_gf_TriggerEachPlayPhasePostDrawEffects ();
void lib1_gf_UpdateCardPropertiesBasedonGameState (int lp_player, bool lp_start_of_play_phase);
void lib1_gf_ProcessResources (int lp_player);
void lib1_gf_CheckForResourceChoice (int lp_player);
void lib1_gf_FinalizeResourceChoice (int lp_player);
void lib1_gf_GiveAFKPlayerResource (int lp_player);
void lib1_gf_StartBattlePhase ();
void lib1_gf_UnpauseBattle ();
void lib1_gf_ProcessPlayedCards (int lp_player);
void lib1_gf_TriggerWhenPlayedEffectsFromHandCard (int lp_player, int lp_played_hand_index);
void lib1_gf_TriggerWhenPlayedEffectsFromDeckCard (int lp_player, int lp_deck_index);
void lib1_gf_FinishPlayingCardandAnimate (int lp_player, int lp_hand_index);
void lib1_gf_AddEachBattlePhaseEffectstotheQueue ();
void lib1_gf_TriggerEachBattlePhasePostPlayEffectQueueEffects ();
void lib1_gf_TriggerEachBattlePhasePostEffectQueueEffects ();
void lib1_gf_ProcessStasis ();
unitgroup lib1_gf_SummonUnitsFromHandCard (int lp_player, int lp_hand_index);
unitgroup lib1_gf_SummonUnitsFromDeckCard (int lp_player, int lp_deck_index);
string lib1_gf_UnitTypeHeroicConsidered (string lp_type, bool lp_heroic);
void lib1_gf_ApplyWaitingTint (unit lp_unit, bool lp_ignore_conditions);
void lib1_gf_ClearWaitingTint (unit lp_unit);
void lib1_gf_RemoveWaitingToMoveOutBuffs (unit lp_unit);
void lib1_gf_RemoveAllBehaviorsFromTrophiesandPets ();
int lib1_gf_TopofEffectQueue (int lp_effect_class);
int lib1_gf_FirstEmptyEffectQueue (int lp_effect_class);
void lib1_gf_AddEffecttoQueue (int lp_player, int lp_card_id, int lp_effect_class, trigger lp_effect, unitgroup lp_units_created, bool lp_channel_enabled);
void lib1_gf_ExecuteEffectQueue (int lp_effect_class);
bool lib1_gf_EffectInEffectQueueforPlayer (int lp_player, int lp_effect_class, trigger lp_effect);
void lib1_gf_InitializeRandomDeck (int lp_player);
void lib1_gf_AIChooseResource (int lp_ai_player);
void lib1_gf_AISelectCards (int lp_player);
int lib1_gf_AICardPriority (int lp_player, int lp_card_id);
void lib1_gf_CreateTutorialTip (int lp_id, text lp_message, text lp_button_text, int lp_box_height);
void lib1_gf_TutorialPlayPhase ();
void lib1_gf_StartofTurnDrawCardTutorial (int lp_player);
void lib1_gf_InitializeStartingHandTutorial (int lp_player);
void lib1_gf_InitializePlayerTutorialDeck (int lp_player);
void lib1_gf_InitializeEnemyTutorialDeck (int lp_player);
void lib1_gf_OrderAllUnits ();
void lib1_gf_OrderStreamingUnits (unitgroup lp_units, fixed lp_timing);
void lib1_gf_OrderStructurestoTrainUnits ();
void lib1_gf_AddStructurePointtoPlan (point lp_point, string lp_structure_type);
void lib1_gf_RemoveStructurePointFromPlanAfterTime (fixed lp_x, fixed lp_y, fixed lp_time);
point lib1_gf_FindStructureBuildTarget (int lp_player, string lp_equivalent_unit_type, bool lp_defensive);
bool lib1_gf_UnitTypeIsCaster (string lp_unit_type);
int lib1_gf_NumberofHeroicUnitsOwnedByPlayer (int lp_player);
fixed lib1_gf_RandomAngleforSpawn (int lp_unit_owner);
void lib1_gf_RemoveAllStunsFromUnit (unit lp_unit);
unitgroup lib1_gf_GetUnitAIGroup (unit lp_unit);
point lib1_gf_RandomPointInRegionWithOffsetFromPoint (region lp_region, point lp_point, fixed lp_offset);
void lib1_gf_IssueDefaultOrders (unit lp_unit);
void lib1_gf_IssueAttackOrders (unit lp_unit);
void lib1_gf_IssueDefendOrders (unit lp_unit);
void lib1_gf_IssueDefensiveRetreatOrders (unit lp_unit);
void lib1_gf_IssueTacticalRetreatOrders (unit lp_unit);
void lib1_gf_IssueLeaveOrders (unit lp_unit, int lp_option);
void lib1_gf_IssueBuildOrder (unit lp_unit, abilcmd lp_order, point lp_point, fixed lp_radius);
void lib1_gf_IssueCliffAmbushOrders (unit lp_unit);
void lib1_gf_IssueBurrowedAmbushOrders (unit lp_unit, region lp_spawn_region);
void lib1_gf_BuildStructure (int lp_player, int lp_card_id, string lp_builder, abilcmd lp_build_action, string lp_structure_type, bool lp_defensive, fixed lp_structure_value);
void lib1_gf_UnburrowSpawn (int lp_player, unit lp_unit, region lp_region, bool lp_create_new);
void lib1_gf_IssueMutateOrders (unit lp_unit);
void lib1_gf_IssuePickupOrder (unit lp_transport, unitfilter lp_target_filter, bool lp_include_heroic);
void lib1_gf_CleanupUnit (unit lp_unit);
bool lib1_gf_UnitTypeIsProtoss (string lp_unit_type);
fixed lib1_gf_AdjustedToughnessOfUnit (unit lp_unit);
unitgroup lib1_gf_VisibleUnitsFromUnitGroup (int lp_player, unitgroup lp_unit_group);
unitgroup lib1_gf_UntargetedUnitsfromUnitGroup (int lp_player, unitgroup lp_unit_group, unitgroup lp_target_group);
void lib1_gf_ClearRemovalHistory ();
unit lib1_gf_RandomTargetForHardRemoval (int lp_player, unitfilter lp_filter);
unit lib1_gf_ToughestEnemyTargetForHardRemoval (int lp_player, unitfilter lp_filter);
unit lib1_gf_ToughestEnemyTargetForHardRemovalmaxvitalityrestriction (int lp_player, unitfilter lp_filter, int lp_max_vitality);
unit lib1_gf_ToughestEnemyTargetForHardRemovalOrFilters (int lp_player, unitfilter lp_filter_1, unitfilter lp_filter_2);
unit lib1_gf_ToughestTargetForBuff (int lp_player, unitfilter lp_filter, bool lp_no_stack);
unit lib1_gf_WeakestEnemyTargetForHardRemoval (int lp_player, unitfilter lp_filter);
unit lib1_gf_WeakestTargetForHardRemoval (int lp_player, unitfilter lp_filter);
unit lib1_gf_WeakestTargetForHardRemovalNotCaster (int lp_player, unit lp_caster, unitfilter lp_filter);
unit lib1_gf_RandomTargetForStun (int lp_player, unitfilter lp_filter);
unit lib1_gf_RandomDefensiveTargetForStun (int lp_player, unitfilter lp_filter);
unit lib1_gf_BestTargetforSplash (int lp_player, unitfilter lp_filter, fixed lp_splash_radius, bool lp_allow_invisible);
unit lib1_gf_RandomStructureForHardRemovalWithCostRestrictions (int lp_player, int lp_min_cost, int lp_max_cost);
unit lib1_gf_MostExpensiveStructureforRemoval (int lp_player);
unit lib1_gf_MostExpensiveStructureforStun (int lp_player);
unit lib1_gf_NearestTarget (int lp_player, unit lp_caster, unitfilter lp_filter, bool lp_allow_keystone);
void lib1_gf_CreateCargoUnitsWithStatTracking (int lp_count, string lp_unit_type, unit lp_transport);
void lib1_gf_SkiptoEditor ();
void lib1_gf_CreateRewardScreen ();
void lib1_gf_ProcessVictory (int lp_player);
void lib1_gf_ProcessDefeat (int lp_player);
void lib1_gf_CreateMainMenu ();
void lib1_gf_OpenMainMenu (int lp_player);
void lib1_gf_OpenCollectionEditor (int lp_player);
void lib1_gf_CloseCollectionEditor (int lp_player);
int lib1_gf_CollectionWidth ();
int lib1_gf_CollectionWidthwithMargin ();
int lib1_gf_CollectionHeight ();
int lib1_gf_CollectionHeightwithMargin ();
int lib1_gf_CollectionX ();
int lib1_gf_CollectionY ();
int lib1_gf_CollectionCardX (int lp_index);
int lib1_gf_CollectionCardY (int lp_index);
int lib1_gf_DeckHeight ();
int lib1_gf_DeckWidth ();
int lib1_gf_DeckX ();
int lib1_gf_FilterHeight ();
int lib1_gf_FilterY ();
int lib1_gf_DecklistBorderY (int lp_slot_index);
int lib1_gf_DecklistIconY (int lp_slot_index);
void lib1_gf_CalculateCardOrder ();
bool lib1_gf_CardsInOrder (int lp_first_card_id, int lp_second_card_id);
void lib1_gf_CreateCollectionWindow ();
void lib1_gf_OpenCollectionPage (int lp_player, int lp_page);
void lib1_gf_SetCollectionCardEnabledDisabled (int lp_player, int lp_page_slot_index);
void lib1_gf_CloseCurrentCollectionPage (int lp_player);
int lib1_gf_MaxCollectionPage (int lp_player);
void lib1_gf_InitializeCollectionFilters (int lp_player);
void lib1_gf_TransformCollectionCard (int lp_player, int lp_index);
void lib1_gf_EnableCollectionShiftClick (int lp_player);
void lib1_gf_CreateDeckWindow ();
void lib1_gf_OpenDeckWindow (int lp_player);
void lib1_gf_AddCardtoCurrentDeck (int lp_player, int lp_page_slot_index);
void lib1_gf_RemoveCardfromCurrentDeck (int lp_player, int lp_deck_slot_index);
void lib1_gf_UpdateDecklistUI (int lp_player);
void lib1_gf_LoadCurrentDecklist (int lp_player);
void lib1_gf_CloseCurrentDecklist (int lp_player);
void lib1_gf_CreateDecklistCard (int lp_player, int lp_card_id, int lp_decklist_slot);
void lib1_gf_UpdateDecklistCard (int lp_player, int lp_card_id, int lp_decklist_slot);
void lib1_gf_DestroyDecklistCard (int lp_player, int lp_decklist_slot);
void lib1_gf_ShowHideDecklistArrows (int lp_player);
void lib1_gf_ScrollDecklistUp (int lp_player);
void lib1_gf_ScrollDecklistDown (int lp_player);
void lib1_gf_ShowDeckRenamingInterface (int lp_player);
void lib1_gf_SetNewDeckName (int lp_player);
int lib1_gf_CraftingCost (int lp_rarity, int lp_set_id);
int lib1_gf_DestroyReward (int lp_rarity, int lp_set_id);
void lib1_gf_CreateCraftingWindow ();
void lib1_gf_OpenCraftingWindow (int lp_player);
void lib1_gf_SelectCardforCrafting (int lp_player, int lp_page_slot_index);
void lib1_gf_ResetCraftingWindow (int lp_player);
void lib1_gf_CraftCard (int lp_player, int lp_page_slot_index);
void lib1_gf_DestroyCard (int lp_player, int lp_page_slot_index);
void lib1_gf_CreateFilterWindow ();
void lib1_gf_CreateTotalCostFilterButton (int lp_index);
void lib1_gf_DisableAllTotalCostsExcept (int lp_player, int lp_exception);
void lib1_gf_EnableAllTotalCosts (int lp_player);
void lib1_gf_EnableTotalCost (int lp_player, int lp_cost);
void lib1_gf_DisableTotalCost (int lp_player, int lp_cost);
bool lib1_gf_CollectionCardVisible (int lp_player, int lp_card_id);
void lib1_gf_CreateCollectionInteractionLayer ();
int lib1_gf_DeckChooserHeight ();
int lib1_gf_DecklistY (int lp_index);
int lib1_gf_DecklistNewDeckY (int lp_index);
int lib1_gf_DecklistButtonWidth ();
int lib1_gf_DecklistDeleteX (int lp_index);
int lib1_gf_DecklistDeleteY (int lp_index);
int lib1_gf_DecklistEditY (int lp_index);
int lib1_gf_RibbonX (int lp_index);
void lib1_gf_EnableAllDecklistButtons (int lp_player);
void lib1_gf_DisableAllDecklistButtons (int lp_player);
bool lib1_gf_DecklistButtonsAreDisabled (int lp_player);
void lib1_gf_CreateDeckManager ();
void lib1_gf_OpenDeckManager (int lp_player);
void lib1_gf_CloseDeckManager (int lp_player);
void lib1_gf_CreateDecklistUIinManager (int lp_player, int lp_race, int lp_decklist);
void lib1_gf_UpdateDecklistUIinManager (int lp_player, int lp_race, int lp_decklist);
void lib1_gf_CreateNewDeckButton (int lp_player, int lp_race, int lp_decklist);
void lib1_gf_UpdateNewDeckButtons (int lp_player);
void lib1_gf_AddNewDecklistInManager (int lp_player, int lp_race);
void lib1_gf_RemoveDecklistinManager (int lp_player, int lp_race, int lp_decklist);
void lib1_gf_SelectDecklistInManager (int lp_player, int lp_race, int lp_decklist);
void lib1_gf_SetDecklistasMainDecklist (int lp_player, int lp_race, int lp_decklist);
void lib1_gf_MouseEnterDecklist (int lp_player, int lp_race, int lp_decklist);
void lib1_gf_MouseExitDecklist (int lp_player, int lp_race, int lp_decklist);
void lib1_gf_MouseEnterDecklistDelete (int lp_player, int lp_race, int lp_decklist);
void lib1_gf_MouseEnterMainDeckRibbon (int lp_player, int lp_race, int lp_decklist);
void lib1_gf_MouseEnterAddDeckButton (int lp_player, int lp_race);
void lib1_gf_MouseExitAddDeckButton (int lp_player, int lp_race);
int lib1_gf_PackCardX (int lp_index);
int lib1_gf_PackCardY (int lp_index);
void lib1_gf_CreateStore ();
void lib1_gf_OpenStore (int lp_player, int lp_page);
void lib1_gf_CloseStore (int lp_player);
void lib1_gf_UpdatePlayerStoreCredits (int lp_player);
void lib1_gf_DisplaySetinStoreOdd (int lp_player, int lp_set_id, int lp_slot);
void lib1_gf_DisplaySetinStoreEven (int lp_player, int lp_set_id, int lp_slot);
void lib1_gf_BuyPack (int lp_player, int lp_set_id);
void lib1_gf_ClosePack (int lp_player);
void lib1_gf_CreateStatsPage ();
void lib1_gf_OpenStatsPage (int lp_player, int lp_race);
void lib1_gf_CloseStatsPage (int lp_player);
void lib1_gf_ResetStats (int lp_player, int lp_race);
void lib1_gf_OpenTrophyPage (int lp_player, int lp_page);
void lib1_gf_UpdateTrophyStatus (int lp_player, int lp_slot, int lp_cosmetic_id);
void lib1_gf_PressTrophyButton (int lp_player, int lp_slot);
void lib1_gf_OpenPetPage (int lp_player, int lp_page);
void lib1_gf_UpdatePetStatus (int lp_player, int lp_slot, int lp_cosmetic_id);
void lib1_gf_PressPetButton (int lp_player, int lp_slot);
void lib1_gf_OpenDecorationPage (int lp_player, int lp_page);
void lib1_gf_UpdateDecorationStatus (int lp_player, int lp_slot, int lp_cosmetic_id);
void lib1_gf_PressDecorationButton (int lp_player, int lp_slot);
void lib1_gf_CreateCosmeticMenu ();
void lib1_gf_OpenCosmeticMenu (int lp_player);
void lib1_gf_CloseCosmeticMenu (int lp_player);
void lib1_gf_ShowCosmeticInStoreSlot (int lp_player, int lp_slot, int lp_cosmetic_id, int lp_type);
void lib1_gf_UpdateCosmeticStoreCredits (int lp_player);
void lib1_gf_DisableAllCosmeticStoreButtons (int lp_player);
bool lib1_gf_CosmeticStoreButtonsAreDisabled (int lp_player);
bool lib1_gf_WaitingForResponse (int lp_player);
bool lib1_gf_UnitIsPet (unit lp_unit);
void lib1_gf_InitializeTrophyRegions ();
void lib1_gf_FixBackerRewardsfromPatch35bug (int lp_player);
void lib1_gf_InitializeDecorationCosmeticsforTeam (int lp_team);
void lib1_gf_InitializePetandTrophyCosmeticsforPlayer (int lp_player);
void lib1_gf_ShowTrophyForPlayer (int lp_player, int lp_trophy, region lp_region);
void lib1_gf_HideAllTrophiesInRegion (region lp_region);
void lib1_gf_HideTrophyInRegion (int lp_trophy_id, region lp_region);
void lib1_gf_ShowTrophyName (int lp_viewing_player, int lp_owner);
void lib1_gf_HideTrophyName (int lp_viewing_player);
void lib1_gf_GameEndOvermindAnimation (unit lp_overmind_model);
void lib1_gf_InitializeBackerRewards (int lp_player);
void lib1_gf_UnnaturalExperimentsBackerRewards (int lp_player);
void lib1_gf_DesperateAlliancesBackerRewards (int lp_player);
int lib1_gf_MaxNewPlayerBonusGames (int lp_player);
void lib1_gf_InitializeTestCosmeticForPlayer1 ();
void lib1_gf_GivePlayerFullCollection (int lp_player);

// Trigger Declarations
trigger lib1_gt_CommonEffectDraw1;
trigger lib1_gt_CommonEffectDraw2;
trigger lib1_gt_CommonEffectDraw3;
trigger lib1_gt_CommonEffectAddHandSizeBufftoAllCreatedUnits;
trigger lib1_gt_CommonEffectGenerate2WarpInCards;
trigger lib1_gt_CommonEffectRemove1GasIncome;
trigger lib1_gt_CommonEffectUnstableZergUnit;
trigger lib1_gt_CommonEffectPopulateWithInterceptors;
trigger lib1_gt_CommonEffectAdd1MineralIncome;
trigger lib1_gt_CommonEffectAdd1GasIncome;
trigger lib1_gt_CommonEffectDamagedSpawn;
trigger lib1_gt_CommonEffectCliffAmbushSpawn;
trigger lib1_gt_CoreSet;
trigger lib1_gt_CoreTerran;
trigger lib1_gt_CoreZerg;
trigger lib1_gt_CoreProtoss;
trigger lib1_gt_CoreUncollectable;
trigger lib1_gt_EffectBunker;
trigger lib1_gt_EffectTwinTurrets;
trigger lib1_gt_EffectBarracks;
trigger lib1_gt_EffectFactory;
trigger lib1_gt_EffectEngineeringBay;
trigger lib1_gt_EffectYamatoCannon;
trigger lib1_gt_EffectScannerSweep;
trigger lib1_gt_EffectSeekerMissiles;
trigger lib1_gt_EffectStimpack;
trigger lib1_gt_EffectSiegeTanks;
trigger lib1_gt_EffectGhostOperatives;
trigger lib1_gt_EffectRepairCrew;
trigger lib1_gt_EffectMedivacRunners;
trigger lib1_gt_EffectRavenSupport;
trigger lib1_gt_EffectSupplyDepots;
trigger lib1_gt_EffectSensorTower;
trigger lib1_gt_EffectRefinery;
trigger lib1_gt_EffectStarport;
trigger lib1_gt_EffectStrikeCannons;
trigger lib1_gt_EffectReactor;
trigger lib1_gt_EffectSteadyTargeting;
trigger lib1_gt_EffectDoomDrop;
trigger lib1_gt_EffectPerchedArtilleryCargo;
trigger lib1_gt_EffectPerchedArtilleryOrder;
trigger lib1_gt_EffectEntrench;
trigger lib1_gt_EffectFusionCore;
trigger lib1_gt_EffectArmory;
trigger lib1_gt_EffectReconstruction;
trigger lib1_gt_EffectTacticalNuke;
trigger lib1_gt_EffectTechLab;
trigger lib1_gt_EffectHyperion;
trigger lib1_gt_EffectJimRaynor;
trigger lib1_gt_EffectNova;
trigger lib1_gt_EffectBurrowedAmbush;
trigger lib1_gt_EffectSpawningPool;
trigger lib1_gt_EffectRoachWarren;
trigger lib1_gt_EffectHydraliskDen;
trigger lib1_gt_EffectSpineCrawlers;
trigger lib1_gt_EffectSporeCrawlers;
trigger lib1_gt_EffectMetabolicBoost;
trigger lib1_gt_EffectGroovedSpines;
trigger lib1_gt_EffectBindingCreep;
trigger lib1_gt_EffectLarvalQueen;
trigger lib1_gt_EffectExcretingOverseer;
trigger lib1_gt_EffectBanelingNest;
trigger lib1_gt_EffectSpire;
trigger lib1_gt_EffectExtractor;
trigger lib1_gt_EffectEvolutionChamber;
trigger lib1_gt_EffectEvolutionChamberEffect;
trigger lib1_gt_EffectInjectLarva;
trigger lib1_gt_EffectTunnelingRoaches;
trigger lib1_gt_EffectParasiticVipers;
trigger lib1_gt_EffectBanelingBombs;
trigger lib1_gt_EffectUltraliskCavern;
trigger lib1_gt_EffectNydusNetwork;
trigger lib1_gt_EffectGreaterSpire;
trigger lib1_gt_EffectMassMutation;
trigger lib1_gt_EffectNeuralParasite;
trigger lib1_gt_EffectZagara;
trigger lib1_gt_EffectKerrigan;
trigger lib1_gt_EffectDehaka;
trigger lib1_gt_EffectSiegingRavagers;
trigger lib1_gt_EffectGateway;
trigger lib1_gt_EffectPhotonCannons;
trigger lib1_gt_EffectShieldBatteries;
trigger lib1_gt_EffectPylonStructure;
trigger lib1_gt_EffectPylonDrawWarpIn;
trigger lib1_gt_EffectPsionicStorm;
trigger lib1_gt_EffectGravitonBeam;
trigger lib1_gt_EffectStasisWards;
trigger lib1_gt_EffectHallucinationSentries;
trigger lib1_gt_EffectWarpProbe;
trigger lib1_gt_EffectCarrier;
trigger lib1_gt_EffectShieldingSentries;
trigger lib1_gt_EffectDiscerningOracles;
trigger lib1_gt_EffectInfiltratingAdepts;
trigger lib1_gt_EffectNerazimAssassins;
trigger lib1_gt_EffectStargate;
trigger lib1_gt_EffectForge;
trigger lib1_gt_EffectForgeEffect;
trigger lib1_gt_EffectCyberneticsCore;
trigger lib1_gt_EffectAssimilator;
trigger lib1_gt_EffectTwilightCouncil;
trigger lib1_gt_EffectTwilightCouncilPeriodicShuffle;
trigger lib1_gt_EffectFeedback;
trigger lib1_gt_EffectPhotonOvercharge;
trigger lib1_gt_EffectWarpGate;
trigger lib1_gt_EffectGoldenArmada;
trigger lib1_gt_EffectMergingArchons;
trigger lib1_gt_EffectWarpOffensive;
trigger lib1_gt_EffectRoboticsFacility;
trigger lib1_gt_EffectFleetBeacon;
trigger lib1_gt_EffectTemplarArchives;
trigger lib1_gt_EffectDarkShrine;
trigger lib1_gt_EffectVortex;
trigger lib1_gt_EffectReplicate;
trigger lib1_gt_EffectKarax;
trigger lib1_gt_EffectZeratul;
trigger lib1_gt_EffectArtanis;
trigger lib1_gt_EffectMothershipCore;
trigger lib1_gt_EffectCanisterRifleNovaOps;
trigger lib1_gt_EffectHellfireShotgunNovaOps;
trigger lib1_gt_EffectStealthSuitNovaOps;
trigger lib1_gt_EffectAssaultSuitNovaOps;
trigger lib1_gt_EffectVanishNovaOps;
trigger lib1_gt_EffectFlashbangGrenadeNovaOps;
trigger lib1_gt_EffectSwarmThemHiveMind;
trigger lib1_gt_EffectDefendtheHiveHiveMind;
trigger lib1_gt_EffectSetanAmbushHiveMind;
trigger lib1_gt_EffectMothership;
trigger lib1_gt_OdinDies;
trigger lib1_gt_NovaDies;
trigger lib1_gt_HandLimitUnitDies;
trigger lib1_gt_CyberneticsRevive;
trigger lib1_gt_MothershipCoreDies;
trigger lib1_gt_AssassinKills;
trigger lib1_gt_LegacySet;
trigger lib1_gt_LegacyAllRaces;
trigger lib1_gt_EffectOrbitalCommand;
trigger lib1_gt_EffectDesperateOffensive;
trigger lib1_gt_EffectBrutalisk;
trigger lib1_gt_EffectLeapingRaptors;
trigger lib1_gt_EffectInfestationPit;
trigger lib1_gt_EffectChronoProbe;
trigger lib1_gt_EffectPhotonArray;
trigger lib1_gt_EffectUndyingStalker;
trigger lib1_gt_InfestedDies;
trigger lib1_gt_UndyingUnitDies;
trigger lib1_gt_FirstContactSet;
trigger lib1_gt_FirstContactTerran;
trigger lib1_gt_FirstContactZerg;
trigger lib1_gt_FirstContactProtoss;
trigger lib1_gt_FirstContactUncollectible;
trigger lib1_gt_EffectRiot1;
trigger lib1_gt_EffectRiot2;
trigger lib1_gt_EffectRiot3;
trigger lib1_gt_EffectRiot4;
trigger lib1_gt_EffectReconSquad;
trigger lib1_gt_EffectTarsonisTurrets;
trigger lib1_gt_EffectBadlandsGarage;
trigger lib1_gt_EffectSpiderMinefield;
trigger lib1_gt_EffectIrradiate;
trigger lib1_gt_EffectScienceVessels;
trigger lib1_gt_EffectTarsonisSecurity;
trigger lib1_gt_EffectResearchFacility;
trigger lib1_gt_EffectCouncilCorruption;
trigger lib1_gt_EffectMachineShop;
trigger lib1_gt_Effect22ndDivision;
trigger lib1_gt_EffectGhostAcademy;
trigger lib1_gt_EffectBackwaterStationDiscardFromHand;
trigger lib1_gt_EffectBackwaterStationDiscardFromDeck;
trigger lib1_gt_EffectKorhalsDestruction;
trigger lib1_gt_EffectResocialization;
trigger lib1_gt_EffectNoradII;
trigger lib1_gt_EffectKerriganAssassin;
trigger lib1_gt_EffectRaynorRebel;
trigger lib1_gt_EffectSunkenColony;
trigger lib1_gt_EffectFlyerCarapace;
trigger lib1_gt_EffectChitinousPlating;
trigger lib1_gt_EffectDuneRunnerDNA;
trigger lib1_gt_EffectAcidicSpire;
trigger lib1_gt_EffectAerialInvasion;
trigger lib1_gt_EffectEscapedExperiments;
trigger lib1_gt_EffectMetasynapticNode;
trigger lib1_gt_EffectSlothienDNA;
trigger lib1_gt_EffectBlackentheSky;
trigger lib1_gt_EffectCreepColony;
trigger lib1_gt_EffectBrontolithDNA;
trigger lib1_gt_EffectDeepInfestation;
trigger lib1_gt_EffectOvermind;
trigger lib1_gt_EffectTorrasque;
trigger lib1_gt_EffectKerrigansChrysalis;
trigger lib1_gt_EffectPsiMatrix;
trigger lib1_gt_EffectAiurGateway;
trigger lib1_gt_EffectCloakingField;
trigger lib1_gt_EffectCharge;
trigger lib1_gt_EffectStasisField;
trigger lib1_gt_EffectPlanetarySurveyor;
trigger lib1_gt_EffectReaverAdvance;
trigger lib1_gt_EffectWarRobotics;
trigger lib1_gt_EffectShieldMatrix;
trigger lib1_gt_EffectMassRecall;
trigger lib1_gt_EffectStructuralStasis;
trigger lib1_gt_EffectRecallSuits;
trigger lib1_gt_EffectGatheringStorm;
trigger lib1_gt_EffectRoboticsBay;
trigger lib1_gt_EffectConclaveDirective;
trigger lib1_gt_EffectPlanetCracker;
trigger lib1_gt_EffectPraetorFenix;
trigger lib1_gt_EffectGantrithor;
trigger lib1_gt_EffectTassadarInitialization;
trigger lib1_gt_EffectRiot;
trigger lib1_gt_EffectInfestation;
trigger lib1_gt_Effect22ndReinforcements;
trigger lib1_gt_EffectSpiderMines;
trigger lib1_gt_EffectZerglingResearch;
trigger lib1_gt_EffectHydraliskResearch;
trigger lib1_gt_EffectDefilerResearch;
trigger lib1_gt_EffectTassadarPeriodicEffect;
trigger lib1_gt_PersonalRecallRevive;
trigger lib1_gt_TorrasqueDeath;
trigger lib1_gt_PraetorFenixDeath;
trigger lib1_gt_CommanderDies;
trigger lib1_gt_UnnaturalExperimentsSet;
trigger lib1_gt_UnnaturalExperimentsPromo;
trigger lib1_gt_UnnaturalExperimentsTerran;
trigger lib1_gt_UnnaturalExperimentsZerg;
trigger lib1_gt_UnnaturalExperimentsProtoss;
trigger lib1_gt_UnnaturalExperimentsUncollectible;
trigger lib1_gt_EffectPhysicsLab;
trigger lib1_gt_EffectMoebius;
trigger lib1_gt_EffectTerrazineCanister;
trigger lib1_gt_EffectLoadedValkyrie;
trigger lib1_gt_EffectProtossRelicCard;
trigger lib1_gt_EffectProtossRelicCost;
trigger lib1_gt_EffectMoebiusSearchCrew;
trigger lib1_gt_EffectDigForArtifacts;
trigger lib1_gt_EffectOldPsiDisruptor;
trigger lib1_gt_EffectDefensiveMatrix;
trigger lib1_gt_EffectSecretHangar;
trigger lib1_gt_EffectNarudsCreations;
trigger lib1_gt_EffectInterferenceMatrix;
trigger lib1_gt_EffectEgonStetmann;
trigger lib1_gt_EffectStetmannAddict;
trigger lib1_gt_EffectMoebiusHybrid;
trigger lib1_gt_EffectBehemothICannons;
trigger lib1_gt_EffectBehemothIICannons;
trigger lib1_gt_EffectLaboratorySuppliesMakeCards;
trigger lib1_gt_EffectLaboratorySuppliesBuild;
trigger lib1_gt_EffectCloakedAirstrike;
trigger lib1_gt_EffectUndergroundBase;
trigger lib1_gt_EffectExplosiveMutagen;
trigger lib1_gt_EffectBloatedDevourer;
trigger lib1_gt_EffectSwellingEggs;
trigger lib1_gt_EffectOminousEgg;
trigger lib1_gt_EffectMysteriousEgg;
trigger lib1_gt_EffectHybridReaver;
trigger lib1_gt_EffectHybridBehemoth;
trigger lib1_gt_EffectAberration;
trigger lib1_gt_EffectAbathursEvolution;
trigger lib1_gt_EffectBroodlingGestation;
trigger lib1_gt_EffectMutable;
trigger lib1_gt_EffectMutableMorph;
trigger lib1_gt_EffectMutationChamber;
trigger lib1_gt_EffectMutationChamberPeriodicEffect;
trigger lib1_gt_EffectHybridNemesis;
trigger lib1_gt_EffectVoidRiftIncomeLimitSet;
trigger lib1_gt_EffectVoidRiftGasBoost;
trigger lib1_gt_EffectPilotedCorsair;
trigger lib1_gt_EffectVoidShades;
trigger lib1_gt_EffectHybridDestroyers;
trigger lib1_gt_EffectEnduringStasisAbility;
trigger lib1_gt_EffectEnduringStasisDraw;
trigger lib1_gt_EffectKaraxsInvention;
trigger lib1_gt_EffectMurderousAscendance;
trigger lib1_gt_EffectHybridDominator;
trigger lib1_gt_EffectMalashInitialization;
trigger lib1_gt_EffectMalashPeriodicEffect;
trigger lib1_gt_EffectPsionicOrb;
trigger lib1_gt_EffectWarpStargate;
trigger lib1_gt_EffectVoidGate;
trigger lib1_gt_EffectArgusCrystal;
trigger lib1_gt_EffectEnergyCrystal;
trigger lib1_gt_EffectEnergyCrystalEnergy;
trigger lib1_gt_EffectAmonDiscard;
trigger lib1_gt_EffectAmonDraw;
trigger lib1_gt_EffectVoidArmy;
trigger lib1_gt_ArgusCrystalDies;
trigger lib1_gt_DesperateAlliancesSet;
trigger lib1_gt_DesperateAlliancesPromo;
trigger lib1_gt_DesperateAlliancesMixed;
trigger lib1_gt_DesperateAlliancesTerran;
trigger lib1_gt_DesperateAlliancesZerg;
trigger lib1_gt_DesperateAlliancesProtoss;
trigger lib1_gt_DesperateAlliancesUncollectible;
trigger lib1_gt_EffectFromtheShadows;
trigger lib1_gt_EffectDeadlySaboteurs;
trigger lib1_gt_EffectFenixandRaynor;
trigger lib1_gt_EffectFearlessRaiders;
trigger lib1_gt_EffectKerriganandRaszagal;
trigger lib1_gt_EffectSamirDuran;
trigger lib1_gt_EffectProjectBlackFlag;
trigger lib1_gt_EffectPsionicBlackout;
trigger lib1_gt_EffectKorhalGarrison;
trigger lib1_gt_EffectAirSupport;
trigger lib1_gt_EffectTheIronFist;
trigger lib1_gt_EffectEscapeShuttle;
trigger lib1_gt_EffectPsiEmitter;
trigger lib1_gt_PsiEmitterSCVDies;
trigger lib1_gt_EffectOrbitalSupplyDropOverdrawPrevention;
trigger lib1_gt_EffectOrbitalSupplyDropDraw;
trigger lib1_gt_EffectRaidersCache;
trigger lib1_gt_EffectAtlasWing;
trigger lib1_gt_EffectCronusWing;
trigger lib1_gt_EffectConfederateLoyalists;
trigger lib1_gt_EffectColonialConscriptsHandDiscard;
trigger lib1_gt_EffectColonialConscriptsHandAdd;
trigger lib1_gt_EffectColonialConscriptsDeck;
trigger lib1_gt_EffectFuelRaidRemoval;
trigger lib1_gt_EffectFuelRaidVespeneBarrel;
trigger lib1_gt_EffectCommandeerRemoval;
trigger lib1_gt_EffectCommandeerDeckAdditions;
trigger lib1_gt_EffectNeurostimDrugs;
trigger lib1_gt_EffectBurningOutpost;
trigger lib1_gt_EffectCombatDrugs;
trigger lib1_gt_EffectLtMorales;
trigger lib1_gt_EffectEMP;
trigger lib1_gt_EffectRegroup;
trigger lib1_gt_EffectCarapaceContagion;
trigger lib1_gt_EffectSavageContagion;
trigger lib1_gt_EffectEnsnaringQueen;
trigger lib1_gt_EffectMurderousClaws;
trigger lib1_gt_EffectPatientKillers;
trigger lib1_gt_EffectBurrowedSwarm;
trigger lib1_gt_EffectTrueColors;
trigger lib1_gt_EffectOverlordNetwork;
trigger lib1_gt_EffectLurkerAdvance;
trigger lib1_gt_EffectDevouringOne;
trigger lib1_gt_EffectSuddenBetrayal;
trigger lib1_gt_EffectPlaguebringer;
trigger lib1_gt_EffectConsumeDiscard;
trigger lib1_gt_EffectConsumeBuff;
trigger lib1_gt_EffectScourgeBurst;
trigger lib1_gt_EffectSpawnBroodlings;
trigger lib1_gt_EffectLurkerDen;
trigger lib1_gt_EffectANewHomeworld;
trigger lib1_gt_EffectChronoWave;
trigger lib1_gt_EffectTalematrosGridFetch;
trigger lib1_gt_EffectTalematrosGridBuild;
trigger lib1_gt_EffectDaelaamArchitects;
trigger lib1_gt_EffectDragoonShrine;
trigger lib1_gt_EffectArtanisFounder;
trigger lib1_gt_EffectDisruptionWeb;
trigger lib1_gt_EffectMaelstrom;
trigger lib1_gt_EffectMindControl;
trigger lib1_gt_EffectDarkArchonMaelstrom;
trigger lib1_gt_EffectDarkArchonFeedback;
trigger lib1_gt_EffectDarkArchonMindControl;
trigger lib1_gt_EffectAugmentationRecall;
trigger lib1_gt_EffectTassadarsDisciples;
trigger lib1_gt_EffectPoweredGates;
trigger lib1_gt_EffectShadowWalk;
trigger lib1_gt_EffectArchonofJustice;
trigger lib1_gt_EffectAldarisInsurgent;
trigger lib1_gt_EffectRepairStation;
trigger lib1_gt_InitializeCosmeticTrophies;
trigger lib1_gt_InitializeCosmeticPets;
trigger lib1_gt_InitializeCosmeticDecorations;
trigger lib1_gt_InitializeCosmeticStore;
trigger lib1_gt_Initialization;
trigger lib1_gt_PlayerLeaves;
trigger lib1_gt_FixDefaultGUI;
trigger lib1_gt_ShowDamageText;
trigger lib1_gt_HoverTimerExpires;
trigger lib1_gt_ShiftKeyUp;
trigger lib1_gt_ShiftKeyDown;
trigger lib1_gt_SelectCardPlanningPhase;
trigger lib1_gt_SelectCardPlayPhase;
trigger lib1_gt_MouseEnterCard;
trigger lib1_gt_MouseExitCard;
trigger lib1_gt_SelectResource;
trigger lib1_gt_EndPhaseButtonResponse;
trigger lib1_gt_MouseEnterChooseResource;
trigger lib1_gt_MouseExitChooseResource;
trigger lib1_gt_ClickUnit;
trigger lib1_gt_Fatigue;
trigger lib1_gt_PhaseEnds;
trigger lib1_gt_PlayPhaseLoop;
trigger lib1_gt_UpdateTimer;
trigger lib1_gt_GasProducerDies;
trigger lib1_gt_TutorialButtonResponse;
trigger lib1_gt_UnitDies;
trigger lib1_gt_UnitEntersDefensiveArea;
trigger lib1_gt_DamageResponse;
trigger lib1_gt_AttackResponse;
trigger lib1_gt_UnitisCreated;
trigger lib1_gt_UnitFinishesTraining;
trigger lib1_gt_UnitFinishesConstruction;
trigger lib1_gt_MothershipStartsUpgrading;
trigger lib1_gt_MothershipFinishesUpgrading;
trigger lib1_gt_AdeptFinishesTransferring;
trigger lib1_gt_TacticalRetreat;
trigger lib1_gt_DefensiveRetreat;
trigger lib1_gt_Cleanup;
trigger lib1_gt_WaitingUnitFinishesCasting;
trigger lib1_gt_UnloadCargo;
trigger lib1_gt_LoadCargo;
trigger lib1_gt_CleanupAirSupportBC;
trigger lib1_gt_StructureDies;
trigger lib1_gt_StructureUnitPushFail;
trigger lib1_gt_StructureBuildFailAny;
trigger lib1_gt_StructureBuildFinish;
trigger lib1_gt_StructureBuildStart;
trigger lib1_gt_SupplyDepotDies;
trigger lib1_gt_TrackDamage;
trigger lib1_gt_TrackKills;
trigger lib1_gt_TrackCreated;
trigger lib1_gt_PreventLinkEditing;
trigger lib1_gt_CollectionPageUpdateLoop;
trigger lib1_gt_ExitRewardScreenButtonResponse;
trigger lib1_gt_ExitNewPlayerRewardScreenButtonResponse;
trigger lib1_gt_MainMenuCollectionButtonResponse;
trigger lib1_gt_MainMenuStoreButtonResponse;
trigger lib1_gt_MainMenuStatsPageButtonResponse;
trigger lib1_gt_MainMenuCosmeticsPageButtonResponse;
trigger lib1_gt_BacktoMainMenuClicked;
trigger lib1_gt_LeftArrowKeyPressed;
trigger lib1_gt_RightArrowKeyPressed;
trigger lib1_gt_UpArrowKeyPressed;
trigger lib1_gt_DownArrowKeyPressed;
trigger lib1_gt_LeftCollectionArrowMouseEnter;
trigger lib1_gt_RightCollectionArrowMouseEnter;
trigger lib1_gt_LeftCollectionArrowMouseExit;
trigger lib1_gt_RightCollectionArrowMouseExit;
trigger lib1_gt_LeftCollectionArrowClick;
trigger lib1_gt_RightCollectionArrowClick;
trigger lib1_gt_UpDeckArrowMouseEnter;
trigger lib1_gt_DownDeckArrowMouseEnter;
trigger lib1_gt_UpDeckArrowMouseExit;
trigger lib1_gt_DownDeckArrowMouseExit;
trigger lib1_gt_UpDeckArrowClick;
trigger lib1_gt_DownDeckArrowClick;
trigger lib1_gt_TotalCostFilterClick;
trigger lib1_gt_TextFilterInput;
trigger lib1_gt_SearchButtonMouseEnter;
trigger lib1_gt_SearchButtonMouseExit;
trigger lib1_gt_SearchButtonMouseClick;
trigger lib1_gt_CraftingButtonMouseClick;
trigger lib1_gt_CollectionCardClicked;
trigger lib1_gt_CollectionCardStartHover;
trigger lib1_gt_CollectionCardStopHover;
trigger lib1_gt_CraftCard;
trigger lib1_gt_DestroyCard;
trigger lib1_gt_DecklistCardClicked;
trigger lib1_gt_ChangeDecksClicked;
trigger lib1_gt_SaveDeck;
trigger lib1_gt_EditDeckNameMouseEnter;
trigger lib1_gt_EditDeckNameMouseExit;
trigger lib1_gt_EditDeckNameClick;
trigger lib1_gt_SaveDeckNameMouseEnter;
trigger lib1_gt_SaveDeckNameMouseExit;
trigger lib1_gt_SaveDeckNameClick;
trigger lib1_gt_PlayerTypesDeckName;
trigger lib1_gt_DecklistClicked;
trigger lib1_gt_MouseEnterDecklist;
trigger lib1_gt_MouseExitDecklist;
trigger lib1_gt_MouseEnterDecklistDelete;
trigger lib1_gt_MouseExitDecklistDelete;
trigger lib1_gt_MouseClickDecklistDelete;
trigger lib1_gt_MouseEnterRibbon;
trigger lib1_gt_MouseExitRibbon;
trigger lib1_gt_MouseClickRibbon;
trigger lib1_gt_MouseEnterAddDeck;
trigger lib1_gt_MouseExitAddDeck;
trigger lib1_gt_MouseClickAddDeck;
trigger lib1_gt_BuyPackButtonClick;
trigger lib1_gt_BacktoStoreClicked;
trigger lib1_gt_LeftPackArrow;
trigger lib1_gt_RightPackArrow;
trigger lib1_gt_LeftPackArrowMouseEnter;
trigger lib1_gt_LeftPackArrowMouseExit;
trigger lib1_gt_RightPackArrowMouseEnter;
trigger lib1_gt_RightPackArrowMouseExit;
trigger lib1_gt_OpenTerranStats;
trigger lib1_gt_OpenZergStats;
trigger lib1_gt_OpenProtossStats;
trigger lib1_gt_ResetStats;
trigger lib1_gt_PressCosmeticButton;
trigger lib1_gt_LeftTrophyArrow;
trigger lib1_gt_RightTrophyArrow;
trigger lib1_gt_LeftTrophyArrowMouseEnter;
trigger lib1_gt_LeftPetArrowMouseEnter;
trigger lib1_gt_LeftDecorationArrowMouseEnter;
trigger lib1_gt_LeftTrophyArrowMouseExit;
trigger lib1_gt_LeftPetArrowMouseExit;
trigger lib1_gt_LeftDecorationArrowMouseExit;
trigger lib1_gt_RightTrophyArrowMouseEnter;
trigger lib1_gt_RightPetArrowMouseEnter;
trigger lib1_gt_RightDecorationArrowMouseEnter;
trigger lib1_gt_RightTrophyArrowMouseExit;
trigger lib1_gt_RightPetArrowMouseExit;
trigger lib1_gt_RightDecorationArrowMouseExit;
trigger lib1_gt_GameEnd;
trigger lib1_gt_CheckUnitOrigin;
trigger lib1_gt_FreeCamera;
trigger lib1_gt_ShowCommand;
trigger lib1_gt_ToggleDebug;
trigger lib1_gt_CreateandSaveCorruptedDeck;
trigger lib1_gt_HandleCorruptedCollection;
trigger lib1_gt_DecklistCorrupted;
trigger lib1_gt_RemoveBonus;
trigger lib1_gt_WinRate;
trigger lib1_gt_Created;

// Library Initialization
void lib1_InitVariables ();

//--------------------------------------------------------------------------------------------------
// Library: SCCGLibrary
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void lib1_InitLibraries () {
    libNtve_InitVariables();
}

// Variable Initialization
bool lib1_InitVariables_completed = false;

void lib1_InitVariables () {
    int init_i;
    int init_j;
    int init_i1;
    int init_j1;
    int init_i2;

    if (lib1_InitVariables_completed) {
        return;
    }

    lib1_InitVariables_completed = true;

    for (init_i = 0; init_i <= lib1_gv_mAX_CARD_ID; init_i += 1) {
        lib1_gv_card[init_i].lv_id = -1;
        lib1_gv_card[init_i].lv_set = -1;
        lib1_gv_card[init_i].lv_race = -1;
        lib1_gv_card[init_i].lv_name = "";
        lib1_gv_card[init_i].lv_type = "";
        lib1_gv_card[init_i].lv_subtype = "";
        lib1_gv_card[init_i].lv_rarity = -1;
        lib1_gv_card[init_i].lv_sound = SoundLink("EditorDefaultSound", -1);
        lib1_gv_card[init_i].lv_base_text = "";
        lib1_gv_card[init_i].lv_default_text = "";
        lib1_gv_card[init_i].lv_transform = -1;
        lib1_gv_card[init_i].lv_ui.lv_size = 100;
        lib1_gv_card[init_i].lv_ui.lv_dialog = c_invalidDialogId;
        lib1_gv_card[init_i].lv_ui.lv_background = c_invalidDialogControlId;
        lib1_gv_card[init_i].lv_ui.lv_name_frame = c_invalidDialogControlId;
        lib1_gv_card[init_i].lv_ui.lv_name = c_invalidDialogControlId;
        lib1_gv_card[init_i].lv_ui.lv_image = c_invalidDialogControlId;
        lib1_gv_card[init_i].lv_ui.lv_image_frame = c_invalidDialogControlId;
        lib1_gv_card[init_i].lv_ui.lv_mineral_icon = c_invalidDialogControlId;
        lib1_gv_card[init_i].lv_ui.lv_mineral_cost = c_invalidDialogControlId;
        lib1_gv_card[init_i].lv_ui.lv_gas_icon = c_invalidDialogControlId;
        lib1_gv_card[init_i].lv_ui.lv_gas_cost = c_invalidDialogControlId;
        lib1_gv_card[init_i].lv_ui.lv_type = c_invalidDialogControlId;
        lib1_gv_card[init_i].lv_ui.lv_set_icon = c_invalidDialogControlId;
        lib1_gv_card[init_i].lv_ui.lv_text_frame = c_invalidDialogControlId;
        lib1_gv_card[init_i].lv_ui.lv_race_background = c_invalidDialogControlId;
        lib1_gv_card[init_i].lv_ui.lv_text = c_invalidDialogControlId;
        lib1_gv_card[init_i].lv_ui.lv_border = c_invalidDialogControlId;
        lib1_gv_card[init_i].lv_ui.lv_rarity_icon = c_invalidDialogControlId;
        lib1_gv_card[init_i].lv_ui.lv_selected_indicator = c_invalidDialogControlId;
        lib1_gv_card[init_i].lv_ui.lv_selected_indicator_planning = c_invalidDialogControlId;
        lib1_gv_card[init_i].lv_ui.lv_channel_indicator = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= lib1_gv_mAX_SET_ID; init_i += 1) {
        lib1_gv_set[init_i].lv_name = "";
        lib1_gv_set[init_i].lv_description = "";
        lib1_gv_set[init_i].lv_price = 15;
        lib1_gv_set[init_i].lv_common_cost = 25;
        lib1_gv_set[init_i].lv_uncommon_cost = 50;
        lib1_gv_set[init_i].lv_rare_cost = 200;
        lib1_gv_set[init_i].lv_unique_cost = 600;
        lib1_gv_set[init_i].lv_common_sell = 10;
        lib1_gv_set[init_i].lv_uncommon_sell = 25;
        lib1_gv_set[init_i].lv_rare_sell = 100;
        lib1_gv_set[init_i].lv_unique_sell = 300;
    }
    lib1_gv_sTARTING_CREDITS = 500;
    lib1_gv_nEW_PLAYER_BONUS_PER_GAME = 100;
    for (init_i = 0; init_i <= lib1_gv_mAX_PLAYERS; init_i += 1) {
        for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
            for (init_j1 = 0; init_j1 <= lib1_gv_dECKLIST_PER_RACE_LIMIT; init_j1 += 1) {
                lib1_gv_player_collection[init_i].lv_decklist[init_i1][init_j1].lv_name = "";
                for (init_i2 = 0; init_i2 <= lib1_gv_dECKLIST_LIMIT; init_i2 += 1) {
                    lib1_gv_player_collection[init_i].lv_decklist[init_i1][init_j1].lv_card_id[init_i2] = -1;
                }
                lib1_gv_player_collection[init_i].lv_decklist[init_i1][init_j1].lv_button = c_invalidDialogControlId;
                lib1_gv_player_collection[init_i].lv_decklist[init_i1][init_j1].lv_main_deck_ribbon = c_invalidDialogControlId;
                lib1_gv_player_collection[init_i].lv_decklist[init_i1][init_j1].lv_main_deck_ribbon_button = c_invalidDialogControlId;
                lib1_gv_player_collection[init_i].lv_decklist[init_i1][init_j1].lv_delete_icon = c_invalidDialogControlId;
                lib1_gv_player_collection[init_i].lv_decklist[init_i1][init_j1].lv_delete_button = c_invalidDialogControlId;
                lib1_gv_player_collection[init_i].lv_decklist[init_i1][init_j1].lv_illegal_deck_icon = c_invalidDialogControlId;
            }
        }
        for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
            lib1_gv_player_collection[init_i].lv_add_deck_icon[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
            lib1_gv_player_collection[init_i].lv_add_deck_button[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= lib1_gv_dECKLIST_LIMIT; init_i1 += 1) {
            lib1_gv_player_collection[init_i].lv_decklist_border[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= lib1_gv_dECKLIST_LIMIT; init_i1 += 1) {
            lib1_gv_player_collection[init_i].lv_decklist_button[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= lib1_gv_dECKLIST_LIMIT; init_i1 += 1) {
            lib1_gv_player_collection[init_i].lv_decklist_name[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= lib1_gv_dECKLIST_LIMIT; init_i1 += 1) {
            lib1_gv_player_collection[init_i].lv_decklist_image[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= lib1_gv_dECKLIST_LIMIT; init_i1 += 1) {
            lib1_gv_player_collection[init_i].lv_decklist_mineral_icon[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= lib1_gv_dECKLIST_LIMIT; init_i1 += 1) {
            lib1_gv_player_collection[init_i].lv_decklist_gas_icon[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= lib1_gv_dECKLIST_LIMIT; init_i1 += 1) {
            lib1_gv_player_collection[init_i].lv_decklist_mineral_cost[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= lib1_gv_dECKLIST_LIMIT; init_i1 += 1) {
            lib1_gv_player_collection[init_i].lv_decklist_gas_cost[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= lib1_gv_dECKLIST_LIMIT; init_i1 += 1) {
            lib1_gv_player_collection[init_i].lv_decklist_count_text[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= 7; init_i1 += 1) {
            lib1_gv_player_collection[init_i].lv_collection_card_ui[init_i1].lv_size = 100;
            lib1_gv_player_collection[init_i].lv_collection_card_ui[init_i1].lv_dialog = c_invalidDialogId;
            lib1_gv_player_collection[init_i].lv_collection_card_ui[init_i1].lv_background = c_invalidDialogControlId;
            lib1_gv_player_collection[init_i].lv_collection_card_ui[init_i1].lv_name_frame = c_invalidDialogControlId;
            lib1_gv_player_collection[init_i].lv_collection_card_ui[init_i1].lv_name = c_invalidDialogControlId;
            lib1_gv_player_collection[init_i].lv_collection_card_ui[init_i1].lv_image = c_invalidDialogControlId;
            lib1_gv_player_collection[init_i].lv_collection_card_ui[init_i1].lv_image_frame = c_invalidDialogControlId;
            lib1_gv_player_collection[init_i].lv_collection_card_ui[init_i1].lv_mineral_icon = c_invalidDialogControlId;
            lib1_gv_player_collection[init_i].lv_collection_card_ui[init_i1].lv_mineral_cost = c_invalidDialogControlId;
            lib1_gv_player_collection[init_i].lv_collection_card_ui[init_i1].lv_gas_icon = c_invalidDialogControlId;
            lib1_gv_player_collection[init_i].lv_collection_card_ui[init_i1].lv_gas_cost = c_invalidDialogControlId;
            lib1_gv_player_collection[init_i].lv_collection_card_ui[init_i1].lv_type = c_invalidDialogControlId;
            lib1_gv_player_collection[init_i].lv_collection_card_ui[init_i1].lv_set_icon = c_invalidDialogControlId;
            lib1_gv_player_collection[init_i].lv_collection_card_ui[init_i1].lv_text_frame = c_invalidDialogControlId;
            lib1_gv_player_collection[init_i].lv_collection_card_ui[init_i1].lv_race_background = c_invalidDialogControlId;
            lib1_gv_player_collection[init_i].lv_collection_card_ui[init_i1].lv_text = c_invalidDialogControlId;
            lib1_gv_player_collection[init_i].lv_collection_card_ui[init_i1].lv_border = c_invalidDialogControlId;
            lib1_gv_player_collection[init_i].lv_collection_card_ui[init_i1].lv_rarity_icon = c_invalidDialogControlId;
            lib1_gv_player_collection[init_i].lv_collection_card_ui[init_i1].lv_selected_indicator = c_invalidDialogControlId;
            lib1_gv_player_collection[init_i].lv_collection_card_ui[init_i1].lv_selected_indicator_planning = c_invalidDialogControlId;
            lib1_gv_player_collection[init_i].lv_collection_card_ui[init_i1].lv_channel_indicator = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= 7; init_i1 += 1) {
            lib1_gv_player_collection[init_i].lv_collection_card_count[init_i1].lv_size = 100;
            lib1_gv_player_collection[init_i].lv_collection_card_count[init_i1].lv_dialog = c_invalidDialogId;
            lib1_gv_player_collection[init_i].lv_collection_card_count[init_i1].lv_background = c_invalidDialogControlId;
            lib1_gv_player_collection[init_i].lv_collection_card_count[init_i1].lv_name_frame = c_invalidDialogControlId;
            lib1_gv_player_collection[init_i].lv_collection_card_count[init_i1].lv_name = c_invalidDialogControlId;
            lib1_gv_player_collection[init_i].lv_collection_card_count[init_i1].lv_image = c_invalidDialogControlId;
            lib1_gv_player_collection[init_i].lv_collection_card_count[init_i1].lv_image_frame = c_invalidDialogControlId;
            lib1_gv_player_collection[init_i].lv_collection_card_count[init_i1].lv_mineral_icon = c_invalidDialogControlId;
            lib1_gv_player_collection[init_i].lv_collection_card_count[init_i1].lv_mineral_cost = c_invalidDialogControlId;
            lib1_gv_player_collection[init_i].lv_collection_card_count[init_i1].lv_gas_icon = c_invalidDialogControlId;
            lib1_gv_player_collection[init_i].lv_collection_card_count[init_i1].lv_gas_cost = c_invalidDialogControlId;
            lib1_gv_player_collection[init_i].lv_collection_card_count[init_i1].lv_type = c_invalidDialogControlId;
            lib1_gv_player_collection[init_i].lv_collection_card_count[init_i1].lv_set_icon = c_invalidDialogControlId;
            lib1_gv_player_collection[init_i].lv_collection_card_count[init_i1].lv_text_frame = c_invalidDialogControlId;
            lib1_gv_player_collection[init_i].lv_collection_card_count[init_i1].lv_race_background = c_invalidDialogControlId;
            lib1_gv_player_collection[init_i].lv_collection_card_count[init_i1].lv_text = c_invalidDialogControlId;
            lib1_gv_player_collection[init_i].lv_collection_card_count[init_i1].lv_border = c_invalidDialogControlId;
            lib1_gv_player_collection[init_i].lv_collection_card_count[init_i1].lv_rarity_icon = c_invalidDialogControlId;
            lib1_gv_player_collection[init_i].lv_collection_card_count[init_i1].lv_selected_indicator = c_invalidDialogControlId;
            lib1_gv_player_collection[init_i].lv_collection_card_count[init_i1].lv_selected_indicator_planning = c_invalidDialogControlId;
            lib1_gv_player_collection[init_i].lv_collection_card_count[init_i1].lv_channel_indicator = c_invalidDialogControlId;
        }
        lib1_gv_player_collection[init_i].lv_filter.lv_race = -1;
        for (init_i2 = 0; init_i2 <= lib1_gv_mAX_COST_FILTER_INDEX; init_i2 += 1) {
            lib1_gv_player_collection[init_i].lv_filter.lv_total_cost[init_i2] = true;
        }
        lib1_gv_player_collection[init_i].lv_filter.lv_text_search = "";
        lib1_gv_player_collection[init_i].lv_selected_page_slot_index = -1;
        lib1_gv_player_collection[init_i].lv_card_to_add = -1;
        lib1_gv_player_collection[init_i].lv_card_to_remove = -1;
        lib1_gv_player_collection[init_i].lv_pack_to_purchase = -1;
        for (init_i1 = 0; init_i1 <= 5; init_i1 += 1) {
            lib1_gv_player_collection[init_i].lv_pack_card[init_i1] = c_invalidDialogId;
        }
        lib1_gv_player_collection[init_i].lv_deck_race_to_delete = -1;
        lib1_gv_player_collection[init_i].lv_deck_number_to_delete = -1;
        lib1_gv_player_collection[init_i].lv_trophy_to_buy = -1;
        lib1_gv_player_collection[init_i].lv_pet_to_buy = -1;
        lib1_gv_player_collection[init_i].lv_decoration_to_buy = -1;
    }
    for (init_i = 0; init_i <= lib1_gv_tROPHY_LIMIT; init_i += 1) {
        lib1_gv_trophy_store[init_i] = -1;
    }
    for (init_i = 0; init_i <= lib1_gv_tROPHY_LIMIT; init_i += 1) {
        lib1_gv_cosmetic_trophy[init_i].lv_name = "";
    }
    for (init_i = 0; init_i <= lib1_gv_pET_LIMIT; init_i += 1) {
        lib1_gv_pet_store[init_i] = -1;
    }
    for (init_i = 0; init_i <= lib1_gv_pET_LIMIT; init_i += 1) {
        lib1_gv_cosmetic_pet[init_i].lv_name = "";
    }
    for (init_i = 0; init_i <= lib1_gv_dECORATION_LIMIT; init_i += 1) {
        lib1_gv_decoration_store[init_i] = -1;
    }
    for (init_i = 0; init_i <= lib1_gv_dECORATION_LIMIT; init_i += 1) {
        lib1_gv_cosmetic_decoration[init_i].lv_name = "";
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        lib1_gv_player_cosmetics[init_i].lv_pet_enabled = -1;
        lib1_gv_player_cosmetics[init_i].lv_trophy_enabled = -1;
    }
    for (init_i = 0; init_i <= lib1_gv_mAX_PLAYERS; init_i += 1) {
        for (init_i2 = 0; init_i2 <= lib1_gv_dECK_LIMIT; init_i2 += 1) {
            lib1_gv_player[init_i].lv_deck.lv_card[init_i2].lv_id = -1;
            lib1_gv_player[init_i].lv_deck.lv_card[init_i2].lv_set = -1;
            lib1_gv_player[init_i].lv_deck.lv_card[init_i2].lv_race = -1;
            lib1_gv_player[init_i].lv_deck.lv_card[init_i2].lv_name = "";
            lib1_gv_player[init_i].lv_deck.lv_card[init_i2].lv_type = "";
            lib1_gv_player[init_i].lv_deck.lv_card[init_i2].lv_subtype = "";
            lib1_gv_player[init_i].lv_deck.lv_card[init_i2].lv_rarity = -1;
            lib1_gv_player[init_i].lv_deck.lv_card[init_i2].lv_sound = SoundLink("EditorDefaultSound", -1);
            lib1_gv_player[init_i].lv_deck.lv_card[init_i2].lv_base_text = "";
            lib1_gv_player[init_i].lv_deck.lv_card[init_i2].lv_default_text = "";
            lib1_gv_player[init_i].lv_deck.lv_card[init_i2].lv_transform = -1;
            lib1_gv_player[init_i].lv_deck.lv_card[init_i2].lv_ui.lv_size = 100;
            lib1_gv_player[init_i].lv_deck.lv_card[init_i2].lv_ui.lv_dialog = c_invalidDialogId;
            lib1_gv_player[init_i].lv_deck.lv_card[init_i2].lv_ui.lv_background = c_invalidDialogControlId;
            lib1_gv_player[init_i].lv_deck.lv_card[init_i2].lv_ui.lv_name_frame = c_invalidDialogControlId;
            lib1_gv_player[init_i].lv_deck.lv_card[init_i2].lv_ui.lv_name = c_invalidDialogControlId;
            lib1_gv_player[init_i].lv_deck.lv_card[init_i2].lv_ui.lv_image = c_invalidDialogControlId;
            lib1_gv_player[init_i].lv_deck.lv_card[init_i2].lv_ui.lv_image_frame = c_invalidDialogControlId;
            lib1_gv_player[init_i].lv_deck.lv_card[init_i2].lv_ui.lv_mineral_icon = c_invalidDialogControlId;
            lib1_gv_player[init_i].lv_deck.lv_card[init_i2].lv_ui.lv_mineral_cost = c_invalidDialogControlId;
            lib1_gv_player[init_i].lv_deck.lv_card[init_i2].lv_ui.lv_gas_icon = c_invalidDialogControlId;
            lib1_gv_player[init_i].lv_deck.lv_card[init_i2].lv_ui.lv_gas_cost = c_invalidDialogControlId;
            lib1_gv_player[init_i].lv_deck.lv_card[init_i2].lv_ui.lv_type = c_invalidDialogControlId;
            lib1_gv_player[init_i].lv_deck.lv_card[init_i2].lv_ui.lv_set_icon = c_invalidDialogControlId;
            lib1_gv_player[init_i].lv_deck.lv_card[init_i2].lv_ui.lv_text_frame = c_invalidDialogControlId;
            lib1_gv_player[init_i].lv_deck.lv_card[init_i2].lv_ui.lv_race_background = c_invalidDialogControlId;
            lib1_gv_player[init_i].lv_deck.lv_card[init_i2].lv_ui.lv_text = c_invalidDialogControlId;
            lib1_gv_player[init_i].lv_deck.lv_card[init_i2].lv_ui.lv_border = c_invalidDialogControlId;
            lib1_gv_player[init_i].lv_deck.lv_card[init_i2].lv_ui.lv_rarity_icon = c_invalidDialogControlId;
            lib1_gv_player[init_i].lv_deck.lv_card[init_i2].lv_ui.lv_selected_indicator = c_invalidDialogControlId;
            lib1_gv_player[init_i].lv_deck.lv_card[init_i2].lv_ui.lv_selected_indicator_planning = c_invalidDialogControlId;
            lib1_gv_player[init_i].lv_deck.lv_card[init_i2].lv_ui.lv_channel_indicator = c_invalidDialogControlId;
        }
        for (init_i2 = 0; init_i2 <= lib1_gv_bOOSTED_HAND_LIMIT; init_i2 += 1) {
            lib1_gv_player[init_i].lv_hand.lv_card[init_i2].lv_id = -1;
            lib1_gv_player[init_i].lv_hand.lv_card[init_i2].lv_set = -1;
            lib1_gv_player[init_i].lv_hand.lv_card[init_i2].lv_race = -1;
            lib1_gv_player[init_i].lv_hand.lv_card[init_i2].lv_name = "";
            lib1_gv_player[init_i].lv_hand.lv_card[init_i2].lv_type = "";
            lib1_gv_player[init_i].lv_hand.lv_card[init_i2].lv_subtype = "";
            lib1_gv_player[init_i].lv_hand.lv_card[init_i2].lv_rarity = -1;
            lib1_gv_player[init_i].lv_hand.lv_card[init_i2].lv_sound = SoundLink("EditorDefaultSound", -1);
            lib1_gv_player[init_i].lv_hand.lv_card[init_i2].lv_base_text = "";
            lib1_gv_player[init_i].lv_hand.lv_card[init_i2].lv_default_text = "";
            lib1_gv_player[init_i].lv_hand.lv_card[init_i2].lv_transform = -1;
            lib1_gv_player[init_i].lv_hand.lv_card[init_i2].lv_ui.lv_size = 100;
            lib1_gv_player[init_i].lv_hand.lv_card[init_i2].lv_ui.lv_dialog = c_invalidDialogId;
            lib1_gv_player[init_i].lv_hand.lv_card[init_i2].lv_ui.lv_background = c_invalidDialogControlId;
            lib1_gv_player[init_i].lv_hand.lv_card[init_i2].lv_ui.lv_name_frame = c_invalidDialogControlId;
            lib1_gv_player[init_i].lv_hand.lv_card[init_i2].lv_ui.lv_name = c_invalidDialogControlId;
            lib1_gv_player[init_i].lv_hand.lv_card[init_i2].lv_ui.lv_image = c_invalidDialogControlId;
            lib1_gv_player[init_i].lv_hand.lv_card[init_i2].lv_ui.lv_image_frame = c_invalidDialogControlId;
            lib1_gv_player[init_i].lv_hand.lv_card[init_i2].lv_ui.lv_mineral_icon = c_invalidDialogControlId;
            lib1_gv_player[init_i].lv_hand.lv_card[init_i2].lv_ui.lv_mineral_cost = c_invalidDialogControlId;
            lib1_gv_player[init_i].lv_hand.lv_card[init_i2].lv_ui.lv_gas_icon = c_invalidDialogControlId;
            lib1_gv_player[init_i].lv_hand.lv_card[init_i2].lv_ui.lv_gas_cost = c_invalidDialogControlId;
            lib1_gv_player[init_i].lv_hand.lv_card[init_i2].lv_ui.lv_type = c_invalidDialogControlId;
            lib1_gv_player[init_i].lv_hand.lv_card[init_i2].lv_ui.lv_set_icon = c_invalidDialogControlId;
            lib1_gv_player[init_i].lv_hand.lv_card[init_i2].lv_ui.lv_text_frame = c_invalidDialogControlId;
            lib1_gv_player[init_i].lv_hand.lv_card[init_i2].lv_ui.lv_race_background = c_invalidDialogControlId;
            lib1_gv_player[init_i].lv_hand.lv_card[init_i2].lv_ui.lv_text = c_invalidDialogControlId;
            lib1_gv_player[init_i].lv_hand.lv_card[init_i2].lv_ui.lv_border = c_invalidDialogControlId;
            lib1_gv_player[init_i].lv_hand.lv_card[init_i2].lv_ui.lv_rarity_icon = c_invalidDialogControlId;
            lib1_gv_player[init_i].lv_hand.lv_card[init_i2].lv_ui.lv_selected_indicator = c_invalidDialogControlId;
            lib1_gv_player[init_i].lv_hand.lv_card[init_i2].lv_ui.lv_selected_indicator_planning = c_invalidDialogControlId;
            lib1_gv_player[init_i].lv_hand.lv_card[init_i2].lv_ui.lv_channel_indicator = c_invalidDialogControlId;
        }
        lib1_gv_player[init_i].lv_hand.lv_hidden_overlay = c_invalidDialogId;
        for (init_i2 = 0; init_i2 <= lib1_gv_bOOSTED_HAND_LIMIT; init_i2 += 1) {
            lib1_gv_player[init_i].lv_hand.lv_card_button[init_i2] = c_invalidDialogControlId;
        }
        for (init_i2 = 0; init_i2 <= lib1_gv_dISCARD_LIMIT; init_i2 += 1) {
            lib1_gv_player[init_i].lv_old_discard.lv_card_id[init_i2] = -1;
        }
        for (init_i2 = 0; init_i2 <= lib1_gv_dISCARD_LIMIT; init_i2 += 1) {
            lib1_gv_player[init_i].lv_new_discard.lv_card[init_i2].lv_id = -1;
            lib1_gv_player[init_i].lv_new_discard.lv_card[init_i2].lv_set = -1;
            lib1_gv_player[init_i].lv_new_discard.lv_card[init_i2].lv_race = -1;
            lib1_gv_player[init_i].lv_new_discard.lv_card[init_i2].lv_name = "";
            lib1_gv_player[init_i].lv_new_discard.lv_card[init_i2].lv_type = "";
            lib1_gv_player[init_i].lv_new_discard.lv_card[init_i2].lv_subtype = "";
            lib1_gv_player[init_i].lv_new_discard.lv_card[init_i2].lv_rarity = -1;
            lib1_gv_player[init_i].lv_new_discard.lv_card[init_i2].lv_sound = SoundLink("EditorDefaultSound", -1);
            lib1_gv_player[init_i].lv_new_discard.lv_card[init_i2].lv_base_text = "";
            lib1_gv_player[init_i].lv_new_discard.lv_card[init_i2].lv_default_text = "";
            lib1_gv_player[init_i].lv_new_discard.lv_card[init_i2].lv_transform = -1;
            lib1_gv_player[init_i].lv_new_discard.lv_card[init_i2].lv_ui.lv_size = 100;
            lib1_gv_player[init_i].lv_new_discard.lv_card[init_i2].lv_ui.lv_dialog = c_invalidDialogId;
            lib1_gv_player[init_i].lv_new_discard.lv_card[init_i2].lv_ui.lv_background = c_invalidDialogControlId;
            lib1_gv_player[init_i].lv_new_discard.lv_card[init_i2].lv_ui.lv_name_frame = c_invalidDialogControlId;
            lib1_gv_player[init_i].lv_new_discard.lv_card[init_i2].lv_ui.lv_name = c_invalidDialogControlId;
            lib1_gv_player[init_i].lv_new_discard.lv_card[init_i2].lv_ui.lv_image = c_invalidDialogControlId;
            lib1_gv_player[init_i].lv_new_discard.lv_card[init_i2].lv_ui.lv_image_frame = c_invalidDialogControlId;
            lib1_gv_player[init_i].lv_new_discard.lv_card[init_i2].lv_ui.lv_mineral_icon = c_invalidDialogControlId;
            lib1_gv_player[init_i].lv_new_discard.lv_card[init_i2].lv_ui.lv_mineral_cost = c_invalidDialogControlId;
            lib1_gv_player[init_i].lv_new_discard.lv_card[init_i2].lv_ui.lv_gas_icon = c_invalidDialogControlId;
            lib1_gv_player[init_i].lv_new_discard.lv_card[init_i2].lv_ui.lv_gas_cost = c_invalidDialogControlId;
            lib1_gv_player[init_i].lv_new_discard.lv_card[init_i2].lv_ui.lv_type = c_invalidDialogControlId;
            lib1_gv_player[init_i].lv_new_discard.lv_card[init_i2].lv_ui.lv_set_icon = c_invalidDialogControlId;
            lib1_gv_player[init_i].lv_new_discard.lv_card[init_i2].lv_ui.lv_text_frame = c_invalidDialogControlId;
            lib1_gv_player[init_i].lv_new_discard.lv_card[init_i2].lv_ui.lv_race_background = c_invalidDialogControlId;
            lib1_gv_player[init_i].lv_new_discard.lv_card[init_i2].lv_ui.lv_text = c_invalidDialogControlId;
            lib1_gv_player[init_i].lv_new_discard.lv_card[init_i2].lv_ui.lv_border = c_invalidDialogControlId;
            lib1_gv_player[init_i].lv_new_discard.lv_card[init_i2].lv_ui.lv_rarity_icon = c_invalidDialogControlId;
            lib1_gv_player[init_i].lv_new_discard.lv_card[init_i2].lv_ui.lv_selected_indicator = c_invalidDialogControlId;
            lib1_gv_player[init_i].lv_new_discard.lv_card[init_i2].lv_ui.lv_selected_indicator_planning = c_invalidDialogControlId;
            lib1_gv_player[init_i].lv_new_discard.lv_card[init_i2].lv_ui.lv_channel_indicator = c_invalidDialogControlId;
        }
        lib1_gv_player[init_i].lv_resources.lv_max_mineral_income = lib1_gv_mAX_MINERAL_INCOME;
        lib1_gv_player[init_i].lv_resources.lv_max_gas_income = lib1_gv_mAX_GAS_INCOME;
        lib1_gv_player[init_i].lv_resources.lv_mineral_income = 1;
        lib1_gv_player[init_i].lv_resources.lv_dialog = c_invalidDialogId;
        lib1_gv_player[init_i].lv_resources.lv_background = c_invalidDialogControlId;
        lib1_gv_player[init_i].lv_resources.lv_mineral_text = c_invalidDialogControlId;
        lib1_gv_player[init_i].lv_resources.lv_gas_text = c_invalidDialogControlId;
        for (init_i2 = 0; init_i2 <= lib1_gv_mINERAL_LIMIT; init_i2 += 1) {
            lib1_gv_player[init_i].lv_resources.lv_mineral_icon[init_i2] = c_invalidDialogControlId;
        }
        for (init_i2 = 0; init_i2 <= lib1_gv_gAS_LIMIT; init_i2 += 1) {
            lib1_gv_player[init_i].lv_resources.lv_gas_icon[init_i2] = c_invalidDialogControlId;
        }
        lib1_gv_player[init_i].lv_resources.lv_resource_chosen = "unchosen";
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        lib1_gv_team[init_i] = PlayerGroupEmpty();
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        lib1_gv_keystone_channel_text[init_i] = c_textTagNone;
    }
    lib1_gv_resource_chooser_dialog = c_invalidDialogId;
    lib1_gv_resource_chooser_mineral_icon = c_invalidDialogControlId;
    lib1_gv_resource_chooser_mineral_button = c_invalidDialogControlId;
    lib1_gv_resource_chooser_gas_icon = c_invalidDialogControlId;
    lib1_gv_resource_chooser_gas_button = c_invalidDialogControlId;
    lib1_gv_deck_tracker_dialog = c_invalidDialogId;
    lib1_gv_deck_tracker_labels_item = c_invalidDialogControlId;
    lib1_gv_deck_tracker_values_item = c_invalidDialogControlId;
    lib1_gv_deck_tracker_dialog_item = c_invalidDialogControlId;
    lib1_gv_turn_timer_dialog = c_invalidDialogId;
    lib1_gv_turn_timer_phase = c_invalidDialogControlId;
    lib1_gv_turn_timer_number = c_invalidDialogControlId;
    lib1_gv_end_phase_dialog = c_invalidDialogId;
    lib1_gv_end_phase_button = c_invalidDialogControlId;
    lib1_gv_eND_TURN_WIDTH = 175;
    lib1_gv_eND_TURN_HEIGHT = 60;
    lib1_gv_planning_instructions = c_invalidDialogId;
    lib1_gv_pLANNING_INSTRUCTION_WIDTH = 750;
    lib1_gv_pLANNING_INSTRUCTION_HEIGHT = 60;
    for (init_i = 0; init_i <= lib1_gv_mAX_PLAYERS; init_i += 1) {
        lib1_gv_hover_timer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= lib1_gv_mAX_PLAYERS; init_i += 1) {
        lib1_gv_card_hover_dialog[init_i] = c_invalidDialogId;
    }
    lib1_gv_unit_panel_additions = c_invalidDialogId;
    lib1_gv_unit_panel_structure_cost = c_invalidDialogControlId;
    lib1_gv_current_phase = "";
    lib1_gv_turn_timer = TimerCreate();
    lib1_gv_ready_players = PlayerGroupEmpty();
    lib1_gv_units_created_this_battle_phase = UnitGroupEmpty();
    for (init_i = 0; init_i <= lib1_gv_eF_MAX; init_i += 1) {
        for (init_j = 0; init_j <= lib1_gv_eFFECT_QUEUE_LIMIT; init_j += 1) {
            lib1_gv_effect_queue[init_i][init_j].lv_card_id = -1;
            lib1_gv_effect_queue[init_i][init_j].lv_units_created = UnitGroupEmpty();
        }
    }
    lib1_gv_current_units_created = UnitGroupEmpty();
    lib1_gv_tutorial_tip_dialog = c_invalidDialogId;
    lib1_gv_tutorial_tip_message = c_invalidDialogControlId;
    lib1_gv_tutorial_tip_button = c_invalidDialogControlId;
    for (init_i = 0; init_i <= lib1_gv_mAX_CARD_ID; init_i += 1) {
        lib1_gv_units_from_card[init_i] = UnitGroupEmpty();
    }
    lib1_gv_ready_units = UnitGroupEmpty();
    lib1_gv_tinted_units = UnitGroupEmpty();
    lib1_gv_one_turn_wait_units = UnitGroupEmpty();
    lib1_gv_two_turn_wait_units = UnitGroupEmpty();
    lib1_gv_aggressive_units = UnitGroupEmpty();
    lib1_gv_defensive_units = UnitGroupEmpty();
    lib1_gv_tactical_units = UnitGroupEmpty();
    lib1_gv_retreating_units = UnitGroupEmpty();
    lib1_gv_leaving_units = UnitGroupEmpty();
    lib1_gv_loading_units = UnitGroupEmpty();
    lib1_gv_builder_units = UnitGroupEmpty();
    lib1_gv_failed_builder_units = UnitGroupEmpty();
    lib1_gv_streaming_units = UnitGroupEmpty();
    lib1_gv_ready_to_morph = UnitGroupEmpty();
    lib1_gv_mutated_units = UnitGroupEmpty();
    lib1_gv_merging_units = UnitGroupEmpty();
    lib1_gv_psi_emitter_units = UnitGroupEmpty();
    lib1_gv_burrow_ambush_units = UnitGroupEmpty();
    lib1_gv_hard_removal_targeted_units = UnitGroupEmpty();
    lib1_gv_stun_targeted_units = UnitGroupEmpty();
    lib1_gv_splash_targeted_units = UnitGroupEmpty();
    lib1_gv_buff_targeted_units = UnitGroupEmpty();
    lib1_gv_credit_image = "Assets\\Textures\\btn-tips-credit.dds";
    lib1_gv_fADE_OUT_BATTLE_UI_TIME = 0.5;
    lib1_gv_fADE_OUT_DELAY = 2.0;
    lib1_gv_fADE_OUT_BATTLEFIELD = 3.0;
    lib1_gv_reward_dialog = c_invalidDialogId;
    lib1_gv_reward_dialog_message = c_invalidDialogControlId;
    lib1_gv_reward_tutorial_completion_message = c_invalidDialogControlId;
    lib1_gv_reward_dialog_credits = c_invalidDialogControlId;
    lib1_gv_reward_dialog_exit_button = c_invalidDialogControlId;
    lib1_gv_reward_dialog_background_image = c_invalidDialogControlId;
    lib1_gv_reward_dialog_new_player_bonus = c_invalidDialogId;
    lib1_gv_reward_dialog_message_new_player_bonus = c_invalidDialogControlId;
    lib1_gv_reward_dialog_credits_new_player_bonus = c_invalidDialogControlId;
    lib1_gv_reward_dialog_exit_button_new_player_bonus = c_invalidDialogControlId;
    lib1_gv_aNNOUNCEMENT = StringExternal("Param/Value/lib_1_859446F1");
    lib1_gv_main_menu_dialog = c_invalidDialogId;
    lib1_gv_main_menu_fullscreen_dialog = c_invalidDialogId;
    lib1_gv_main_menu_collection_button = c_invalidDialogControlId;
    lib1_gv_main_menu_store_button = c_invalidDialogControlId;
    lib1_gv_main_menu_stats_button = c_invalidDialogControlId;
    lib1_gv_main_menu_cosmetics_button = c_invalidDialogControlId;
    lib1_gv_back_to_main_menu_dialog = c_invalidDialogId;
    lib1_gv_back_to_main_menu_button = c_invalidDialogControlId;
    lib1_gv_discord = c_invalidDialogControlId;
    lib1_gv_reddit = c_invalidDialogControlId;
    lib1_gv_blog = c_invalidDialogControlId;
    lib1_gv_crowdfunding = c_invalidDialogControlId;
    for (init_i = 0; init_i <= lib1_gv_mAX_CARD_ID; init_i += 1) {
        lib1_gv_ordered_card[init_i] = -1;
    }
    lib1_gv_collection_arrow_right_button = c_invalidDialogControlId;
    lib1_gv_collection_arrow_left_button = c_invalidDialogControlId;
    lib1_gv_collection_arrow_right = c_invalidDialogControlId;
    lib1_gv_collection_arrow_left = c_invalidDialogControlId;
    lib1_gv_collection_dialog_bg_p = c_invalidDialogControlId;
    lib1_gv_collection_dialog_bg_z = c_invalidDialogControlId;
    lib1_gv_collection_dialog_bg_t = c_invalidDialogControlId;
    lib1_gv_collection_dialog = c_invalidDialogId;
    lib1_gv_deck_dialog = c_invalidDialogId;
    lib1_gv_deck_dialog_bg_t = c_invalidDialogControlId;
    lib1_gv_deck_dialog_bg_z = c_invalidDialogControlId;
    lib1_gv_deck_dialog_bg_p = c_invalidDialogControlId;
    lib1_gv_decklist_dialog = c_invalidDialogId;
    lib1_gv_decklist_arrow_up_button = c_invalidDialogControlId;
    lib1_gv_decklist_arrow_down_button = c_invalidDialogControlId;
    lib1_gv_decklist_arrow_up = c_invalidDialogControlId;
    lib1_gv_decklist_arrow_down = c_invalidDialogControlId;
    lib1_gv_decklist_card_count = c_invalidDialogControlId;
    lib1_gv_save_deck_button = c_invalidDialogControlId;
    lib1_gv_change_decks_button = c_invalidDialogControlId;
    lib1_gv_current_deck_name = c_invalidDialogControlId;
    lib1_gv_change_deck_name_icon = c_invalidDialogControlId;
    lib1_gv_change_deck_name_button = c_invalidDialogControlId;
    lib1_gv_change_deck_name_edit_box = c_invalidDialogControlId;
    lib1_gv_save_deck_name_icon = c_invalidDialogControlId;
    lib1_gv_save_deck_name_button = c_invalidDialogControlId;
    lib1_gv_crafting_dialog = c_invalidDialogId;
    lib1_gv_crafting_dialog_bg_t = c_invalidDialogControlId;
    lib1_gv_crafting_dialog_bg_z = c_invalidDialogControlId;
    lib1_gv_crafting_dialog_bg_p = c_invalidDialogControlId;
    for (init_i = 0; init_i <= lib1_gv_mAX_PLAYERS; init_i += 1) {
        lib1_gv_crafting_card_dialog[init_i] = c_invalidDialogId;
    }
    lib1_gv_essence_count = c_invalidDialogControlId;
    lib1_gv_craft_button = c_invalidDialogControlId;
    lib1_gv_destroy_button = c_invalidDialogControlId;
    lib1_gv_filter_dialog = c_invalidDialogId;
    lib1_gv_filter_dialog_bg_t = c_invalidDialogControlId;
    lib1_gv_filter_dialog_bg_z = c_invalidDialogControlId;
    lib1_gv_filter_dialog_bg_p = c_invalidDialogControlId;
    for (init_i = 0; init_i <= lib1_gv_mAX_COST_FILTER_INDEX; init_i += 1) {
        lib1_gv_filter_total_cost_icon[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= lib1_gv_mAX_COST_FILTER_INDEX; init_i += 1) {
        lib1_gv_filter_total_cost_button[init_i] = c_invalidDialogControlId;
    }
    lib1_gv_search_filter = c_invalidDialogControlId;
    lib1_gv_search_button_image = c_invalidDialogControlId;
    lib1_gv_search_button = c_invalidDialogControlId;
    lib1_gv_include_craftable_button_image = c_invalidDialogControlId;
    lib1_gv_include_craftable_button = c_invalidDialogControlId;
    lib1_gv_collection_interaction_dialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 7; init_i += 1) {
        lib1_gv_collection_card_button[init_i] = c_invalidDialogControlId;
    }
    lib1_gv_terran_decks = c_invalidDialogId;
    lib1_gv_zerg_decks = c_invalidDialogId;
    lib1_gv_protoss_decks = c_invalidDialogId;
    lib1_gv_pACK_CARD_SPACE_X = 40;
    lib1_gv_pACK_CARD_SPACE_Y = 10;
    lib1_gv_store_dialog_credits = c_invalidDialogId;
    lib1_gv_store_dialog_credits_amount = c_invalidDialogControlId;
    lib1_gv_pack_dialog = c_invalidDialogId;
    lib1_gv_pack_finish_button = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib1_gv_store_dialog_odd[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib1_gv_store_dialog_odd_set_name[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib1_gv_store_dialog_odd_set_description[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib1_gv_store_dialog_odd_image[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib1_gv_store_dialog_odd_icon[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib1_gv_store_dialog_odd_button[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        lib1_gv_store_dialog_even[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        lib1_gv_store_dialog_even_set_name[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        lib1_gv_store_dialog_even_set_description[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        lib1_gv_store_dialog_even_image[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        lib1_gv_store_dialog_even_icon[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        lib1_gv_store_dialog_even_button[init_i] = c_invalidDialogControlId;
    }
    lib1_gv_store_arrow_dialog = c_invalidDialogId;
    lib1_gv_store_left_arrow_image = c_invalidDialogControlId;
    lib1_gv_store_left_arrow_button = c_invalidDialogControlId;
    lib1_gv_store_right_arrow_image = c_invalidDialogControlId;
    lib1_gv_store_right_arrow_button = c_invalidDialogControlId;
    lib1_gv_stats_button_dialog = c_invalidDialogId;
    lib1_gv_stats_reset_button = c_invalidDialogControlId;
    lib1_gv_stats_terran_button = c_invalidDialogControlId;
    lib1_gv_stats_zerg_button = c_invalidDialogControlId;
    lib1_gv_stats_protoss_button = c_invalidDialogControlId;
    lib1_gv_stats_frame_dialog = c_invalidDialogId;
    lib1_gv_stats_frame = c_invalidDialogControlId;
    lib1_gv_stats_current_race = c_invalidDialogControlId;
    lib1_gv_stats_wins = c_invalidDialogControlId;
    lib1_gv_stats_losses = c_invalidDialogControlId;
    lib1_gv_stats_damage_dealt_this = c_invalidDialogControlId;
    lib1_gv_stats_damage_dealt_average = c_invalidDialogControlId;
    lib1_gv_stats_damage_received_this = c_invalidDialogControlId;
    lib1_gv_stats_damage_received_average = c_invalidDialogControlId;
    lib1_gv_stats_units_killed_this = c_invalidDialogControlId;
    lib1_gv_stats_units_killed_average = c_invalidDialogControlId;
    lib1_gv_stats_heroes_killed_this = c_invalidDialogControlId;
    lib1_gv_stats_heroes_killed_average = c_invalidDialogControlId;
    lib1_gv_stats_structures_killed_this = c_invalidDialogControlId;
    lib1_gv_stats_structures_killed_average = c_invalidDialogControlId;
    lib1_gv_stats_units_created_this = c_invalidDialogControlId;
    lib1_gv_stats_units_created_average = c_invalidDialogControlId;
    lib1_gv_stats_heroes_created_this = c_invalidDialogControlId;
    lib1_gv_stats_heroes_created_average = c_invalidDialogControlId;
    lib1_gv_stats_structures_created_this = c_invalidDialogControlId;
    lib1_gv_stats_structures_created_average = c_invalidDialogControlId;
    lib1_gv_cosmetic_store_dialog = c_invalidDialogId;
    lib1_gv_cosmetic_store_credits_ui = c_invalidDialogControlId;
    lib1_gv_trophy_dialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib1_gv_trophy_name[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib1_gv_trophy_name_border[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib1_gv_trophy_image[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib1_gv_trophy_image_border[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib1_gv_trophy_button[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib1_gv_trophy_enabled_text[init_i] = c_invalidDialogControlId;
    }
    lib1_gv_trophy_left_arrow = c_invalidDialogControlId;
    lib1_gv_trophy_left_arrow_button = c_invalidDialogControlId;
    lib1_gv_trophy_right_arrow = c_invalidDialogControlId;
    lib1_gv_trophy_right_arrow_button = c_invalidDialogControlId;
    lib1_gv_pet_dialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib1_gv_pet_name[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib1_gv_pet_name_border[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib1_gv_pet_image[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib1_gv_pet_image_border[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib1_gv_pet_button[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib1_gv_pet_enabled_text[init_i] = c_invalidDialogControlId;
    }
    lib1_gv_pet_left_arrow = c_invalidDialogControlId;
    lib1_gv_pet_left_arrow_button = c_invalidDialogControlId;
    lib1_gv_pet_right_arrow = c_invalidDialogControlId;
    lib1_gv_pet_right_arrow_button = c_invalidDialogControlId;
    lib1_gv_decoration_dialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib1_gv_decoration_name[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib1_gv_decoration_name_border[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib1_gv_decoration_image[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib1_gv_decoration_image_border[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib1_gv_decoration_button[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib1_gv_decoration_enabled_text[init_i] = c_invalidDialogControlId;
    }
    lib1_gv_decoration_left_arrow = c_invalidDialogControlId;
    lib1_gv_decoration_left_arrow_button = c_invalidDialogControlId;
    lib1_gv_decoration_right_arrow = c_invalidDialogControlId;
    lib1_gv_decoration_right_arrow_button = c_invalidDialogControlId;
    lib1_gv_rESPONSE_TIME = 0.5;
    lib1_gv_pets = UnitGroupEmpty();
    for (init_i = 0; init_i <= lib1_gv_mAX_PLAYERS; init_i += 1) {
        lib1_gv_trophy_name_text_tag[init_i] = c_textTagNone;
    }
}

// Presets
// Functions
int lib1_gf_GetCardIDByName (string lp_name) {
    // Variable Declarations
    int lv_card_id;

    // Automatic Variable Declarations
    const int auto8E18E390_ae = lib1_gv_mAX_CARD_ID;
    const int auto8E18E390_ai = 1;

    // Variable Initialization

    // Implementation
    lv_card_id = 0;
    for ( ; ( (auto8E18E390_ai >= 0 && lv_card_id <= auto8E18E390_ae) || (auto8E18E390_ai < 0 && lv_card_id >= auto8E18E390_ae) ) ; lv_card_id += auto8E18E390_ai ) {
        if ((lib1_gv_card[lv_card_id].lv_name == lp_name)) {
            return lv_card_id;
        }

    }
    return -1;
}

int lib1_gf_GetRandomCollectibleCardIDWithRace (int lp_race, bool lp_for_ai_deck) {
    // Variable Declarations
    int lv_card_id;
    int[lib1_gv_mAX_CARD_ID + 1] lv_possible_card_id;
    int lv_possible_card_count;

    // Automatic Variable Declarations
    const int autoF5063115_ae = lib1_gv_mAX_CARD_ID;
    const int autoF5063115_ai = 1;

    // Variable Initialization

    // Implementation
    lv_card_id = 0;
    for ( ; ( (autoF5063115_ai >= 0 && lv_card_id <= autoF5063115_ae) || (autoF5063115_ai < 0 && lv_card_id >= autoF5063115_ae) ) ; lv_card_id += autoF5063115_ai ) {
        if ((lib1_gf_RacesMatchForDeckbuilding(lp_race, lib1_gv_card[lv_card_id].lv_race) == true) && (lib1_gv_card[lv_card_id].lv_set != lib1_gv_uNCOLLECTIBLE) && ((lib1_gv_test_mode == true) || (lib1_gv_set[lib1_gv_card[lv_card_id].lv_set].lv_state == lib1_gv_aVAILABLE)) && ((lp_for_ai_deck == false) || (lib1_gf_CardValidForRandomAIDeck(lib1_gv_card[lv_card_id].lv_name) == true))) {
            lv_possible_card_id[lv_possible_card_count] = lv_card_id;
            lv_possible_card_count = (lv_possible_card_count + 1);
        }

    }
    if ((lv_possible_card_count >= 1)) {
        return lv_possible_card_id[RandomInt(0, (lv_possible_card_count - 1))];
    }
    else {
        return -1;
    }
}

int lib1_gf_GetRandomCardIDWithSubtype (string lp_subtype, bool lp_include_uncollectible) {
    // Variable Declarations
    int lv_card_id;
    int[lib1_gv_mAX_CARD_ID + 1] lv_possible_card_id;
    int lv_possible_card_count;

    // Automatic Variable Declarations
    const int autoEFD02EB8_ae = lib1_gv_mAX_CARD_ID;
    const int autoEFD02EB8_ai = 1;

    // Variable Initialization

    // Implementation
    lv_card_id = 0;
    for ( ; ( (autoEFD02EB8_ai >= 0 && lv_card_id <= autoEFD02EB8_ae) || (autoEFD02EB8_ai < 0 && lv_card_id >= autoEFD02EB8_ae) ) ; lv_card_id += autoEFD02EB8_ai ) {
        if ((lib1_gv_card[lv_card_id].lv_subtype == lp_subtype) && ((lib1_gv_card[lv_card_id].lv_set != lib1_gv_uNCOLLECTIBLE) || (lp_include_uncollectible == true)) && (lib1_gv_card[lv_card_id].lv_name != "Larval Spawn") && (lib1_gv_card[lv_card_id].lv_name != "Zagara's Spawn")) {
            lv_possible_card_id[lv_possible_card_count] = lv_card_id;
            lv_possible_card_count = (lv_possible_card_count + 1);
        }

    }
    if ((lv_possible_card_count >= 1)) {
        return lv_possible_card_id[RandomInt(0, (lv_possible_card_count - 1))];
    }
    else {
        return -1;
    }
}

int lib1_gf_GetRandomCollectibleCardIDWithOnlyUnitType (string lp_unit_type, string lp_equivalent_unit_type_1, string lp_equivalent_unit_type_2) {
    // Variable Declarations
    int lv_card_id;
    int[lib1_gv_mAX_CARD_ID + 1] lv_possible_card_id;
    int lv_possible_card_count;

    // Automatic Variable Declarations
    const int auto896C7C94_ae = lib1_gv_mAX_CARD_ID;
    const int auto896C7C94_ai = 1;

    // Variable Initialization

    // Implementation
    lv_card_id = 0;
    for ( ; ( (auto896C7C94_ai >= 0 && lv_card_id <= auto896C7C94_ae) || (auto896C7C94_ai < 0 && lv_card_id >= auto896C7C94_ae) ) ; lv_card_id += auto896C7C94_ai ) {
        if ((lib1_gv_card[lv_card_id].lv_unit_count[0] >= 1) && (lib1_gv_card[lv_card_id].lv_unit_count[1] == 0) && ((lib1_gv_card[lv_card_id].lv_unit_type[0] == lp_unit_type) || (lib1_gv_card[lv_card_id].lv_unit_type[0] == lp_equivalent_unit_type_1) || (lib1_gv_card[lv_card_id].lv_unit_type[0] == lp_equivalent_unit_type_2)) && (lib1_gv_card[lv_card_id].lv_set != lib1_gv_uNCOLLECTIBLE) && ((lib1_gv_test_mode == true) || (lib1_gv_set[lib1_gv_card[lv_card_id].lv_set].lv_state == lib1_gv_aVAILABLE))) {
            lv_possible_card_id[lv_possible_card_count] = lv_card_id;
            lv_possible_card_count = (lv_possible_card_count + 1);
        }

    }
    if ((lv_possible_card_count >= 1)) {
        return lv_possible_card_id[RandomInt(0, (lv_possible_card_count - 1))];
    }
    else {
        return -1;
    }
}

bool lib1_gf_CardValidForRandomAIDeck (string lp_card_name) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_card_name == "Amon") || (lp_card_name == "Project Black Flag") || (lp_card_name == "Tactical Nuke") || (lp_card_name == "Council Corruption") || (lp_card_name == "Resocialization") || (lp_card_name == "Backwater Station") || (lp_card_name == "Korhal's Destruction") || (lp_card_name == "Terrazine Canister") || (lp_card_name == "Protoss Relic") || (lp_card_name == "Dig For Artifacts") || (lp_card_name == "Secret Hangar") || (lp_card_name == "Deserted Diamondbacks") || (lp_card_name == "Narud's Creations") || (lp_card_name == "Moebius Hybrid") || (lp_card_name == "Psi Emitter") || (lp_card_name == "Regroup") || (lp_card_name == "Psionic Attraction") || (lp_card_name == "Blacken the Sky") || (lp_card_name == "Swarmlings") || (lp_card_name == "Mutable Mutalisks") || (lp_card_name == "Hybrid Nemesis") || (lp_card_name == "Hybrid Reaver") || (lp_card_name == "Hybrid Behemoth") || (lp_card_name == "Ominous Egg") || (lp_card_name == "Mysterious Egg") || (lp_card_name == "Swelling Eggs") || (lp_card_name == "Larval Queens") || (lp_card_name == "Inject Larva") || (lp_card_name == "Zagara") || (lp_card_name == "Dune Runner DNA") || (lp_card_name == "Slothien DNA") || (lp_card_name == "Brontolith DNA") || (lp_card_name == "Project Black Flag") || (lp_card_name == "Feral Zerglings") || (lp_card_name == "Feral Ultralisk") || (lp_card_name == "Murderous Claws") || (lp_card_name == "True Colors") || (lp_card_name == "Merciless Finishers") || (lp_card_name == "Devouring One") || (lp_card_name == "Consume") || (lp_card_name == "Scourge Burst") || (lp_card_name == "Warp Probe") || (lp_card_name == "Fleet Beacon") || (lp_card_name == "Vortex") || (lp_card_name == "Exiled Ones") || (lp_card_name == "Mass Recall") || (lp_card_name == "Conclave Directive") || (lp_card_name == "Gathering Fleet") || (lp_card_name == "Planet Cracker") || (lp_card_name == "Void Rift") || (lp_card_name == "Void Shades") || (lp_card_name == "Hybrid Destroyers") || (lp_card_name == "Hybrid Dominator") || (lp_card_name == "Structural Stasis") || (lp_card_name == "Murderous Ascendance") || (lp_card_name == "Ma'lash") || (lp_card_name == "Void Gate") || (lp_card_name == "Energy Crystal") || (lp_card_name == "A New Homeworld") || (lp_card_name == "Loyal Legion") || (lp_card_name == "Augmentation Recall") || (lp_card_name == "Powered Gates"))) {
        return false;
    }

    return true;
}

int lib1_gf_TotalCost (int lp_card_id) {
    // Automatic Variable Declarations
    // Implementation
    return (MaxI(lib1_gv_card[lp_card_id].lv_mineral, 0) + MaxI(lib1_gv_card[lp_card_id].lv_gas, 0));
}

void lib1_gf_CalculateDefaultText () {
    // Variable Declarations
    int lv_card_id;
    bool lv_transform;

    // Automatic Variable Declarations
    const int auto35C923A2_ae = lib1_gv_mAX_CARD_ID;
    const int auto35C923A2_ai = 1;

    // Variable Initialization

    // Implementation
    lv_card_id = 0;
    for ( ; ( (auto35C923A2_ai >= 0 && lv_card_id <= auto35C923A2_ae) || (auto35C923A2_ai < 0 && lv_card_id >= auto35C923A2_ae) ) ; lv_card_id += auto35C923A2_ai ) {
        if ((lib1_gv_card[lv_card_id].lv_name != "")) {
            if ((lib1_gv_card[lv_card_id].lv_transform >= 0)) {
                lv_transform = true;
            }
            else {
                lv_transform = false;
            }
            lib1_gv_card[lv_card_id].lv_default_text = lib1_gf_GetCardString(lib1_gf_GetUnitTextForCollectionCard(lv_card_id), lib1_gv_card[lv_card_id].lv_base_text, lib1_gv_card[lv_card_id].lv_rush, lib1_gv_card[lv_card_id].lv_delay, lib1_gv_card[lv_card_id].lv_heroic, lv_transform, lib1_gv_card[lv_card_id].lv_stream, lib1_gv_card[lv_card_id].lv_buried);
        }

    }
}

bool lib1_gf_CardTypesMatch (string lp_type_1, string lp_type_2) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_type_1 == lp_type_2)) {
        return true;
    }
    else if ((lp_type_1 == lib1_gv_uNIT) && ((lp_type_2 == lib1_gv_aGGRESSIVE) || (lp_type_2 == lib1_gv_tACTICAL) || (lp_type_2 == lib1_gv_dEFENSIVE))) {
        return true;
    }
    else if ((lp_type_2 == lib1_gv_uNIT) && ((lp_type_1 == lib1_gv_aGGRESSIVE) || (lp_type_1 == lib1_gv_tACTICAL) || (lp_type_1 == lib1_gv_dEFENSIVE))) {
        return true;
    }
    return false;
}

void lib1_gf_DefineCard (int lp_id, int lp_set, int lp_race, string lp_name, string lp_cname, string lp_type, string lp_subtype, int lp_rarity, int lp_mineral, int lp_gas, trigger lp_effect, string lp_base_text, string lp_image, soundlink lp_sound) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gv_card[lp_id].lv_id = lp_id;
    lib1_gv_card[lp_id].lv_set = lp_set;
    lib1_gv_card[lp_id].lv_race = lp_race;
    lib1_gv_card[lp_id].lv_name = lp_name;
    lib1_gv_card[lp_id].lv_cname = lp_cname;
    lib1_gv_card[lp_id].lv_type = lp_type;
    lib1_gv_card[lp_id].lv_subtype = lp_subtype;
    lib1_gv_card[lp_id].lv_rarity = lp_rarity;
    lib1_gv_card[lp_id].lv_mineral = lp_mineral;
    lib1_gv_card[lp_id].lv_gas = lp_gas;
    lib1_gv_card[lp_id].lv_default_effect = lp_effect;
    lib1_gv_card[lp_id].lv_base_text = lp_base_text;
    lib1_gv_card[lp_id].lv_image = lp_image;
    lib1_gv_card[lp_id].lv_sound = lp_sound;
}

void lib1_gf_DefineCardUnit (int lp_id, string lp_type, int lp_count) {
    // Variable Declarations
    int lv_unit_index;

    // Automatic Variable Declarations
    const int autoD11CFB6B_ae = lib1_gv_mAX_UNIT_TYPE_PER_CARD;
    const int autoD11CFB6B_ai = 1;

    // Variable Initialization

    // Implementation
    lv_unit_index = 0;
    for ( ; ( (autoD11CFB6B_ai >= 0 && lv_unit_index <= autoD11CFB6B_ae) || (autoD11CFB6B_ai < 0 && lv_unit_index >= autoD11CFB6B_ae) ) ; lv_unit_index += autoD11CFB6B_ai ) {
        if ((lib1_gv_card[lp_id].lv_unit_type[lv_unit_index] == null)) {
            lib1_gv_card[lp_id].lv_unit_type[lv_unit_index] = lp_type;
            lib1_gv_card[lp_id].lv_unit_count[lv_unit_index] = lp_count;
            break;
        }

    }
}

void lib1_gf_AddEffecttoCardDefinition (int lp_card_id, int lp_effect_class, trigger lp_effect) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gv_card[lp_card_id].lv_effect[lp_effect_class] = lp_effect;
}

void lib1_gf_AddRushtoCardDefinition (int lp_card_id) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gv_card[lp_card_id].lv_rush = true;
}

void lib1_gf_AddDelaytoCardDefinition (int lp_card_id) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gv_card[lp_card_id].lv_delay = true;
}

void lib1_gf_AddHeroictoCardDefinition (int lp_card_id) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gv_card[lp_card_id].lv_heroic = true;
}

void lib1_gf_AddTransformRelationship (string lp_transform_card_name_1, string lp_transform_card_name_2) {
    // Variable Declarations
    int lv_transform_card_id_1;
    int lv_transform_card_id_2;

    // Automatic Variable Declarations
    const int auto774B232F_ae = lib1_gv_mAX_CARD_ID;
    const int auto774B232F_ai = 1;
    const int auto89E7A204_ae = lib1_gv_mAX_CARD_ID;
    const int auto89E7A204_ai = 1;

    // Variable Initialization

    // Implementation
    lv_transform_card_id_1 = 0;
    for ( ; ( (auto774B232F_ai >= 0 && lv_transform_card_id_1 <= auto774B232F_ae) || (auto774B232F_ai < 0 && lv_transform_card_id_1 >= auto774B232F_ae) ) ; lv_transform_card_id_1 += auto774B232F_ai ) {
        if ((lib1_gv_card[lv_transform_card_id_1].lv_name == lp_transform_card_name_1)) {
            lv_transform_card_id_2 = 0;
            for ( ; ( (auto89E7A204_ai >= 0 && lv_transform_card_id_2 <= auto89E7A204_ae) || (auto89E7A204_ai < 0 && lv_transform_card_id_2 >= auto89E7A204_ae) ) ; lv_transform_card_id_2 += auto89E7A204_ai ) {
                if ((lib1_gv_card[lv_transform_card_id_2].lv_name == lp_transform_card_name_2)) {
                    lib1_gv_card[lv_transform_card_id_1].lv_transform = lv_transform_card_id_2;
                    lib1_gv_card[lv_transform_card_id_2].lv_transform = lv_transform_card_id_1;
                    break;
                }

            }
        }

    }
}

void lib1_gf_AddStreamtoCardDefinition (int lp_card_id) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gv_card[lp_card_id].lv_stream = true;
}

void lib1_gf_AddDetectiontoCardDefinition (int lp_card_id) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gv_card[lp_card_id].lv_detection = true;
}

void lib1_gf_AddChanneltoCardDefinition (int lp_card_id, int lp_amount) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gv_card[lp_card_id].lv_channel = lp_amount;
}

void lib1_gf_MakeCardPromo (int lp_card_id) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gv_card[lp_card_id].lv_promo = true;
}

void lib1_gf_AddBuriedtoCardDefinition (int lp_card_id) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gv_card[lp_card_id].lv_buried = true;
}

int lib1_gf_GetRandomCardWithRarityFromSet (int lp_set_id, int lp_rarity) {
    // Variable Declarations
    int[200] lv_possible_card_id;
    int lv_possible_card_count;
    int lv_card_id;

    // Automatic Variable Declarations
    int auto68E1A5F6_ae;
    const int auto68E1A5F6_ai = 1;

    // Variable Initialization

    // Implementation
    auto68E1A5F6_ae = lib1_gv_set[lp_set_id].lv_end_id;
    lv_card_id = lib1_gv_set[lp_set_id].lv_start_id;
    for ( ; ( (auto68E1A5F6_ai >= 0 && lv_card_id <= auto68E1A5F6_ae) || (auto68E1A5F6_ai < 0 && lv_card_id >= auto68E1A5F6_ae) ) ; lv_card_id += auto68E1A5F6_ai ) {
        if ((lib1_gv_card[lv_card_id].lv_rarity == lp_rarity)) {
            lv_possible_card_id[lv_possible_card_count] = lv_card_id;
            lv_possible_card_count = (lv_possible_card_count + 1);
        }

    }
    return lv_possible_card_id[RandomInt(0, (lv_possible_card_count - 1))];
}

void lib1_gf_RaynorEffect (int lp_player) {
    int init_i;

    // Variable Declarations
    int[lib1_gv_bOOSTED_HAND_LIMIT + 1] lv_possible_hand_indexes;
    int lv_hand_index;
    int lv_option_count;
    int lv_chosen_option;

    // Automatic Variable Declarations
    int autoCD6DB066_ae;
    const int autoCD6DB066_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= lib1_gv_bOOSTED_HAND_LIMIT; init_i += 1) {
        lv_possible_hand_indexes[init_i] = -1;
    }

    // Implementation
    autoCD6DB066_ae = lib1_gf_HandLimit(lp_player);
    lv_hand_index = 0;
    for ( ; ( (autoCD6DB066_ai >= 0 && lv_hand_index <= autoCD6DB066_ae) || (autoCD6DB066_ai < 0 && lv_hand_index >= autoCD6DB066_ae) ) ; lv_hand_index += autoCD6DB066_ai ) {
        if ((lib1_gf_PlayerHasCardAtHandIndex(lp_player, lv_hand_index) == true) && (lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_mineral > 0) && ((lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_type == lib1_gv_aGGRESSIVE) || (lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_type == lib1_gv_tACTICAL) || (lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_type == lib1_gv_dEFENSIVE))) {
            lv_possible_hand_indexes[lv_option_count] = lv_hand_index;
            lv_option_count = (lv_option_count + 1);
        }

    }
    if ((lv_option_count > 0)) {
        lv_chosen_option = lv_possible_hand_indexes[RandomInt(0, (lv_option_count - 1))];
        lib1_gf_SetHandCardMineralCost(lp_player, lv_chosen_option, 0);
    }

}

trigger auto_lib1_gf_SiegingRavagersEffect_Trigger = null;
int auto_lib1_gf_SiegingRavagersEffect_lp_player;
unit auto_lib1_gf_SiegingRavagersEffect_lp_ravager;

void lib1_gf_SiegingRavagersEffect (int lp_player, unit lp_ravager) {
    auto_lib1_gf_SiegingRavagersEffect_lp_player = lp_player;
    auto_lib1_gf_SiegingRavagersEffect_lp_ravager = lp_ravager;

    if (auto_lib1_gf_SiegingRavagersEffect_Trigger == null) {
        auto_lib1_gf_SiegingRavagersEffect_Trigger = TriggerCreate("auto_lib1_gf_SiegingRavagersEffect_TriggerFunc");
    }

    TriggerExecute(auto_lib1_gf_SiegingRavagersEffect_Trigger, false, false);
}

bool auto_lib1_gf_SiegingRavagersEffect_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_lib1_gf_SiegingRavagersEffect_lp_player;
    unit lp_ravager = auto_lib1_gf_SiegingRavagersEffect_lp_ravager;

    // Variable Declarations
    unit lv_target;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_target = lib1_gf_NearestTarget(lp_player, lp_ravager, UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterInvulnerable - 32))), true);
    if ((lv_target != null)) {
        if ((UnitHasBehavior2(lp_ravager, "WaitingToMoveOut") == true)) {
            if ((UnitHasBehavior2(lp_ravager, "WaitingToMoveOut") == true)) {
                UnitBehaviorRemove(lp_ravager, "WaitingToMoveOut", c_unitBehaviorCountAll);
                UnitBehaviorAdd(lp_ravager, "CasterWaitingToMoveOut", lp_ravager, 1);
            }

            UnitIssueOrder(lp_ravager, OrderTargetingPoint(AbilityCommand("RavagerCorrosiveBile", 0), UnitGetPosition(lv_target)), c_orderQueueReplace);
            Wait(1.0, c_timeGame);
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_ravager), c_animNameDefault, "Stand Default", c_animFlagPlayForever | c_animFlagRandomStartOffset, 0.0);
            UnitClearCooldowns(lp_ravager, true);
            UnitIssueOrder(lp_ravager, OrderSetAutoCast(AbilityCommand("RavagerCorrosiveBile", 0), false), c_orderQueueAddToFront);
        }
        else {
            UnitIssueOrder(lp_ravager, OrderTargetingPoint(AbilityCommand("RavagerCorrosiveBile", 0), UnitGetPosition(lv_target)), c_orderQueueAddToFront);
        }
    }

    return true;
}

trigger auto_lib1_gf_CreepingQueensEffect_Trigger = null;
int auto_lib1_gf_CreepingQueensEffect_lp_player;
unit auto_lib1_gf_CreepingQueensEffect_lp_queen;

void lib1_gf_CreepingQueensEffect (int lp_player, unit lp_queen) {
    auto_lib1_gf_CreepingQueensEffect_lp_player = lp_player;
    auto_lib1_gf_CreepingQueensEffect_lp_queen = lp_queen;

    if (auto_lib1_gf_CreepingQueensEffect_Trigger == null) {
        auto_lib1_gf_CreepingQueensEffect_Trigger = TriggerCreate("auto_lib1_gf_CreepingQueensEffect_TriggerFunc");
    }

    TriggerExecute(auto_lib1_gf_CreepingQueensEffect_Trigger, false, false);
}

bool auto_lib1_gf_CreepingQueensEffect_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_lib1_gf_CreepingQueensEffect_lp_player;
    unit lp_queen = auto_lib1_gf_CreepingQueensEffect_lp_queen;

    // Automatic Variable Declarations
    // Implementation
    if ((UnitGetPropertyFixed(lp_queen, c_unitPropEnergy, c_unitPropCurrent) < 25.0)) {
        UnitSetPropertyFixed(lp_queen, c_unitPropEnergy, 25.0);
    }

    UnitIssueOrder(lp_queen, OrderTargetingPoint(AbilityCommand("QueenBuild", 0), UnitTypePlacementFromUnit("CreepTumorQueen", lp_player, lp_queen, 3.0)), c_orderQueueAddToFront);
    return true;
}

trigger auto_lib1_gf_BarragingDisruptorsEffect_Trigger = null;
int auto_lib1_gf_BarragingDisruptorsEffect_lp_player;
unit auto_lib1_gf_BarragingDisruptorsEffect_lp_disruptor;

void lib1_gf_BarragingDisruptorsEffect (int lp_player, unit lp_disruptor) {
    auto_lib1_gf_BarragingDisruptorsEffect_lp_player = lp_player;
    auto_lib1_gf_BarragingDisruptorsEffect_lp_disruptor = lp_disruptor;

    if (auto_lib1_gf_BarragingDisruptorsEffect_Trigger == null) {
        auto_lib1_gf_BarragingDisruptorsEffect_Trigger = TriggerCreate("auto_lib1_gf_BarragingDisruptorsEffect_TriggerFunc");
    }

    TriggerExecute(auto_lib1_gf_BarragingDisruptorsEffect_Trigger, false, false);
}

bool auto_lib1_gf_BarragingDisruptorsEffect_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_lib1_gf_BarragingDisruptorsEffect_lp_player;
    unit lp_disruptor = auto_lib1_gf_BarragingDisruptorsEffect_lp_disruptor;

    // Automatic Variable Declarations
    // Implementation
    Wait(10.0, c_timeGame);
    UnitIssueOrder(lp_disruptor, OrderTargetingPoint(AbilityCommand("PurificationNovaTargeted", 0), RegionRandomPoint(lib1_gv_player[lp_player].lv_enemy_defense_region)), c_orderQueueAddToFront);
    return true;
}

void lib1_gf_DarkShrineEffect (int lp_player) {
    int init_i;

    // Variable Declarations
    int[lib1_gv_bOOSTED_HAND_LIMIT + 1] lv_possible_hand_indexes;
    int lv_hand_index;
    int lv_unit_type_index;
    int lv_option_count;
    int lv_chosen_hand_index;
    int[lib1_gv_mAX_UNIT_TYPE_PER_CARD + 1] lv_valid_unit_count;
    int lv_valid_unit_count_total;
    int lv_chosen_unit_number;
    string lv_chosen_unit_type;
    int lv_find_chosen_unit_number;

    // Automatic Variable Declarations
    int auto1C58FC5C_ae;
    const int auto1C58FC5C_ai = 1;
    const int auto5E88533C_ae = lib1_gv_mAX_UNIT_TYPE_PER_CARD;
    const int auto5E88533C_ai = 1;
    const int autoCFCA1A7D_ae = lib1_gv_mAX_UNIT_TYPE_PER_CARD;
    const int autoCFCA1A7D_ai = 1;
    const int autoB557E238_ae = lib1_gv_mAX_UNIT_TYPE_PER_CARD;
    const int autoB557E238_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= lib1_gv_bOOSTED_HAND_LIMIT; init_i += 1) {
        lv_possible_hand_indexes[init_i] = -1;
    }

    // Implementation
    auto1C58FC5C_ae = lib1_gf_HandLimit(lp_player);
    lv_hand_index = 0;
    for ( ; ( (auto1C58FC5C_ai >= 0 && lv_hand_index <= auto1C58FC5C_ae) || (auto1C58FC5C_ai < 0 && lv_hand_index >= auto1C58FC5C_ae) ) ; lv_hand_index += auto1C58FC5C_ai ) {
        if ((lib1_gf_PlayerHasCardAtHandIndex(lp_player, lv_hand_index) == true) && ((lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_type == lib1_gv_aGGRESSIVE) || (lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_type == lib1_gv_tACTICAL) || (lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_type == lib1_gv_dEFENSIVE))) {
            lv_unit_type_index = 0;
            for ( ; ( (auto5E88533C_ai >= 0 && lv_unit_type_index <= auto5E88533C_ae) || (auto5E88533C_ai < 0 && lv_unit_type_index >= auto5E88533C_ae) ) ; lv_unit_type_index += auto5E88533C_ai ) {
                if ((lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_unit_count[lv_unit_type_index] >= 1) && (UnitTypeTestAttribute(lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_unit_type[lv_unit_type_index], c_unitAttributeBiological) == true) && (lib1_gf_UnitTypeIsProtoss(lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_unit_type[lv_unit_type_index]) == true) && (lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_unit_type[lv_unit_type_index] != "DarkTemplar") && (lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_unit_type[lv_unit_type_index] != "Zeratul") && (lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_unit_type[lv_unit_type_index] != "DarkTemplarHero") && (lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_unit_type[lv_unit_type_index] != "DarkTemplarRaszagal")) {
                    lv_possible_hand_indexes[lv_option_count] = lv_hand_index;
                    lv_option_count = (lv_option_count + 1);
                    break;
                }

            }
        }

    }
    if ((lv_option_count > 0)) {
        lv_chosen_hand_index = lv_possible_hand_indexes[RandomInt(0, (lv_option_count - 1))];
        lv_unit_type_index = 0;
        for ( ; ( (autoCFCA1A7D_ai >= 0 && lv_unit_type_index <= autoCFCA1A7D_ae) || (autoCFCA1A7D_ai < 0 && lv_unit_type_index >= autoCFCA1A7D_ae) ) ; lv_unit_type_index += autoCFCA1A7D_ai ) {
            if ((lib1_gv_player[lp_player].lv_hand.lv_card[lv_chosen_hand_index].lv_unit_count[lv_unit_type_index] >= 1) && (UnitTypeTestAttribute(lib1_gv_player[lp_player].lv_hand.lv_card[lv_chosen_hand_index].lv_unit_type[lv_unit_type_index], c_unitAttributeBiological) == true) && (lib1_gf_UnitTypeIsProtoss(lib1_gv_player[lp_player].lv_hand.lv_card[lv_chosen_hand_index].lv_unit_type[lv_unit_type_index]) == true) && (lib1_gv_player[lp_player].lv_hand.lv_card[lv_chosen_hand_index].lv_unit_type[lv_unit_type_index] != "DarkTemplar") && (lib1_gv_player[lp_player].lv_hand.lv_card[lv_chosen_hand_index].lv_unit_type[lv_unit_type_index] != "Zeratul") && (lib1_gv_player[lp_player].lv_hand.lv_card[lv_chosen_hand_index].lv_unit_type[lv_unit_type_index] != "DarkTemplarHero") && (lib1_gv_player[lp_player].lv_hand.lv_card[lv_chosen_hand_index].lv_unit_type[lv_unit_type_index] != "DarkTemplarRaszagal")) {
                lv_valid_unit_count[lv_unit_type_index] = lib1_gv_player[lp_player].lv_hand.lv_card[lv_chosen_hand_index].lv_unit_count[lv_unit_type_index];
                lv_valid_unit_count_total = (lv_valid_unit_count_total + lv_valid_unit_count[lv_unit_type_index]);
            }

        }
        lv_chosen_unit_number = RandomInt(1, lv_valid_unit_count_total);
        lv_valid_unit_count_total = 0;
        lv_unit_type_index = 0;
        for ( ; ( (autoB557E238_ai >= 0 && lv_unit_type_index <= autoB557E238_ae) || (autoB557E238_ai < 0 && lv_unit_type_index >= autoB557E238_ae) ) ; lv_unit_type_index += autoB557E238_ai ) {
            lv_valid_unit_count_total = (lv_valid_unit_count_total + lv_valid_unit_count[lv_unit_type_index]);
            if ((lv_chosen_unit_number <= lv_valid_unit_count_total)) {
                lv_chosen_unit_type = lib1_gv_player[lp_player].lv_hand.lv_card[lv_chosen_hand_index].lv_unit_type[lv_unit_type_index];
                break;
            }

        }
        lib1_gf_RemoveUnitFromHandCard(lp_player, lv_chosen_hand_index, 1, lv_chosen_unit_type);
        if ((lib1_gv_player[lp_player].lv_hand.lv_card[lv_chosen_hand_index].lv_heroic == true)) {
            lib1_gf_AddUnittoHandCard(lp_player, lv_chosen_hand_index, 1, "DarkTemplarHero");
        }
        else {
            lib1_gf_AddUnittoHandCard(lp_player, lv_chosen_hand_index, 1, "DarkTemplar");
        }
    }

}

void lib1_gf_FleetBeaconEffect (int lp_player) {
    // Variable Declarations
    bool lv_fetch_success;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_fetch_success = lib1_gf_FetchCardWithUnitTypes(lp_player, "Carrier", "Tempest", "TempestHeroPurifier", "CarrierGantrithor", "InvisibleTargetDummy", "InvisibleTargetDummy");
    if ((lv_fetch_success == true)) {
        lib1_gv_player[lp_player].lv_skip_next_draw_step = true;
    }

}

void lib1_gf_ArtanisEffect (int lp_player) {
    // Variable Declarations
    bool lv_fetch_success;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_fetch_success = lib1_gf_FetchCardWithKeyword(lp_player, true, false, false);
    if ((lv_fetch_success == true)) {
        lib1_gv_player[lp_player].lv_skip_next_draw_step = true;
    }

}

void lib1_gf_KerriganEffect (int lp_player) {
    // Variable Declarations
    int[3] lv_possible_card_id;
    int lv_possible_card_count;
    int lv_card_id;
    int lv_hand_index;
    bool lv_found_match;

    // Automatic Variable Declarations
    int auto05C10077_ae;
    const int auto05C10077_ai = 1;
    int autoDF1BCE2A_ae;
    const int autoDF1BCE2A_ai = 1;

    // Variable Initialization

    // Implementation
    auto05C10077_ae = lib1_gf_GetCardIDByName("Set an Ambush");
    lv_card_id = lib1_gf_GetCardIDByName("Swarm Them");
    for ( ; ( (auto05C10077_ai >= 0 && lv_card_id <= auto05C10077_ae) || (auto05C10077_ai < 0 && lv_card_id >= auto05C10077_ae) ) ; lv_card_id += auto05C10077_ai ) {
        lv_found_match = false;
        autoDF1BCE2A_ae = lib1_gf_TopofHand(lp_player);
        lv_hand_index = 0;
        for ( ; ( (autoDF1BCE2A_ai >= 0 && lv_hand_index <= autoDF1BCE2A_ae) || (autoDF1BCE2A_ai < 0 && lv_hand_index >= autoDF1BCE2A_ae) ) ; lv_hand_index += autoDF1BCE2A_ai ) {
            if ((lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_id == lv_card_id)) {
                lv_found_match = true;
            }

        }
        if ((lv_found_match == false)) {
            lv_possible_card_id[lv_possible_card_count] = lv_card_id;
            lv_possible_card_count = (lv_possible_card_count + 1);
        }

    }
    if ((lv_possible_card_count >= 1)) {
        lib1_gf_GenerateCardforHand(lp_player, lv_possible_card_id[RandomInt(0, (lv_possible_card_count - 1))]);
    }

}

void lib1_gf_KaraxEffect (int lp_player) {
    // Variable Declarations
    unitgroup lv_mech_units;
    unit lv_unit;
    int lv_card_id;
    bool lv_card_generated;

    // Automatic Variable Declarations
    const int auto1E79A85E_ae = lib1_gv_mAX_CARD_ID;
    const int auto1E79A85E_ai = 1;

    // Variable Initialization
    lv_mech_units = UnitGroupEmpty();

    // Implementation
    if ((lib1_gf_TopofHand(lp_player) <= lib1_gf_HandLimit(lp_player))) {
        lv_mech_units = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterMechanical) | (1 << c_targetFilterVisible), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32))), 0);
        while ((UnitGroupCount(lv_mech_units, c_unitCountAlive) >= 1)) {
            lv_unit = UnitGroupRandomUnit(lv_mech_units, c_unitCountAlive);
            lv_card_id = 0;
            for ( ; ( (auto1E79A85E_ai >= 0 && lv_card_id <= auto1E79A85E_ae) || (auto1E79A85E_ai < 0 && lv_card_id >= auto1E79A85E_ae) ) ; lv_card_id += auto1E79A85E_ai ) {
                if ((lib1_gv_card[lv_card_id].lv_type != lib1_gv_sTRUCTURE) && (lib1_gv_card[lv_card_id].lv_type != lib1_gv_aCTION) && (UnitGroupHasUnit(lib1_gv_units_from_card[lv_card_id], lv_unit) == true)) {
                    if ((lv_card_id == lib1_gf_GetCardIDByName("Warp In"))) {
                        lib1_gf_GenerateWarpInCardforHand(lp_player);
                        lv_card_generated = true;
                    }
                    else if ((lv_card_id == lib1_gf_GetCardIDByName("Hero Warp"))) {
                        lib1_gf_GenerateHeroWarpCardforHand(lp_player);
                        lv_card_generated = true;
                    }
                    else if ((lv_card_id == lib1_gf_GetCardIDByName("Star Warp"))) {
                        lib1_gf_GenerateStarWarpCardforHand(lp_player);
                        lv_card_generated = true;
                    }
                    else if ((lv_card_id == lib1_gf_GetCardIDByName("Void Army"))) {
                        lib1_gf_GenerateVoidArmyCardforHand(lp_player);
                        lv_card_generated = true;
                    }
                    else if ((lv_card_id == lib1_gf_GetCardIDByName("Shakuras Patrol"))) {
                        lib1_gf_GenerateCardforHand(lp_player, lv_card_id);
                        lib1_gf_AddUnittoHandCard(lp_player, lib1_gf_TopofHand(lp_player), 1, "Dragoon");
                        lib1_gf_AddUnittoHandCard(lp_player, lib1_gf_TopofHand(lp_player), 1, "DarkTemplar");
                        lib1_gf_AddUnittoHandCard(lp_player, lib1_gf_TopofHand(lp_player), 1, "ScoutMP");
                        lv_card_generated = true;
                    }
                    else if ((lv_card_id == lib1_gf_GetCardIDByName("Augmented Warriors"))) {
                        lib1_gf_GenerateCardforHand(lp_player, lv_card_id);
                        lib1_gf_AddUnittoHandCard(lp_player, lib1_gf_TopofHand(lp_player), 1, "DragoonVeteran");
                        lib1_gf_AddUnittoHandCard(lp_player, lib1_gf_TopofHand(lp_player), 1, "StalkerHeroic");
                        lib1_gf_AddUnittoHandCard(lp_player, lib1_gf_TopofHand(lp_player), 1, "ImmortalHero");
                        lv_card_generated = true;
                    }
                    else if (true) {
                        lib1_gf_GenerateCardforHand(lp_player, lv_card_id);
                        lv_card_generated = true;
                    }
                    lv_mech_units = UnitGroupEmpty();
                    break;
                }

            }
            UnitGroupRemove(lv_mech_units, lv_unit);
        }
    }

    if ((lv_card_generated == true)) {
        lib1_gv_player[lp_player].lv_skip_next_draw_step = true;
    }

}

void lib1_gf_NydusNetworkEffect (int lp_player) {
    // Variable Declarations
    unit lv_unit;
    unit lv_nydus;

    // Automatic Variable Declarations
    unitgroup autoC9D13A8D_g;
    int autoC9D13A8D_u;

    // Variable Initialization

    // Implementation
    autoC9D13A8D_g = lib1_gv_units_created_this_battle_phase;
    autoC9D13A8D_u = UnitGroupCount(autoC9D13A8D_g, c_unitCountAll);
    for (;; autoC9D13A8D_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoC9D13A8D_g, autoC9D13A8D_u);
        if (lv_unit == null) { break; }
        if ((UnitGetOwner(lv_unit) == lp_player) && (UnitFilterMatch(lv_unit, lp_player, UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) == true) && ((UnitGroupHasUnit(lib1_gv_aggressive_units, lv_unit) == true) || (UnitGroupHasUnit(lib1_gv_tactical_units, lv_unit) == true) || (UnitGroupHasUnit(lib1_gv_defensive_units, lv_unit) == true))) {
            UnitGroupRemove(lib1_gv_two_turn_wait_units, lv_unit);
            UnitGroupRemove(lib1_gv_one_turn_wait_units, lv_unit);
            UnitGroupRemove(lib1_gv_ready_units, lv_unit);
            UnitBehaviorRemove(lv_unit, "WaitingToMoveOut", c_unitBehaviorCountAll);
            UnitBehaviorRemove(lv_unit, "Waiting1Turn", c_unitBehaviorCountAll);
            UnitBehaviorRemove(lv_unit, "Waiting2Turns", c_unitBehaviorCountAll);
            UnitBehaviorRemove(lv_unit, "2BattlePhaseDisappear", c_unitBehaviorCountAll);
            UnitBehaviorRemove(lv_unit, "CasterWaitingToMoveOut", c_unitBehaviorCountAll);
            lv_nydus = UnitGroupRandomUnit(UnitGroup("NydusNetwork", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
            UnitIssueOrder(lv_nydus, OrderTargetingUnit(AbilityCommand("NydusCanalTransport", 0), lv_unit), c_orderQueueReplace);
            UnitIssueOrder(lv_nydus, Order(AbilityCommand("NydusCanalTransport", 1)), c_orderQueueReplace);
        }

    }
}

void lib1_gf_MothershipCardEffect (int lp_player) {
    // Variable Declarations
    int lv_hand_index;
    int lv_top_of_hand;

    // Automatic Variable Declarations
    int auto53F76C45_ae;
    const int auto53F76C45_ai = 1;

    // Variable Initialization

    // Implementation
    lv_top_of_hand = lib1_gf_TopofHand(lp_player);
    lv_hand_index = 0;
    auto53F76C45_ae = lv_top_of_hand;
    lv_hand_index = 0;
    for ( ; ( (auto53F76C45_ai >= 0 && lv_hand_index <= auto53F76C45_ae) || (auto53F76C45_ai < 0 && lv_hand_index >= auto53F76C45_ae) ) ; lv_hand_index += auto53F76C45_ai ) {
        if ((lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_id == lib1_gf_GetCardIDByName("Mothership"))) {
            lib1_gf_AddtoHandCardCost(lp_player, lv_hand_index, -1, 0);
        }

    }
}

void lib1_gf_UpdateCardPsionicAttraction (int lp_player, int lp_hand_index) {
    // Variable Declarations
    int lv_unit_type_index;
    unit lv_enemy_unit;
    int lv_random;
    int lv_count;
    int lv_energy_unit_count;
    int lv_zergling_count;
    int lv_mutalisk_count;
    int lv_hydralisk_count;

    // Automatic Variable Declarations
    const int auto7161428B_ae = 2;
    const int auto7161428B_ai = 1;
    unitgroup auto88497DA5_g;
    int auto88497DA5_u;
    int auto5CF04946_ae;
    const int auto5CF04946_ai = 1;
    int auto7DA0F5BC_ae;
    const int auto7DA0F5BC_ai = 1;
    int auto9D65DBE2_ae;
    const int auto9D65DBE2_ai = 1;
    int auto9ED02740_ae;
    const int auto9ED02740_ai = 1;

    // Variable Initialization

    // Implementation
    lv_unit_type_index = 0;
    for ( ; ( (auto7161428B_ai >= 0 && lv_unit_type_index <= auto7161428B_ae) || (auto7161428B_ai < 0 && lv_unit_type_index >= auto7161428B_ae) ) ; lv_unit_type_index += auto7161428B_ai ) {
        lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_unit_count[lv_unit_type_index] = 0;
        lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_unit_type[lv_unit_type_index] = null;
    }
    auto88497DA5_g = UnitGroupAlliance(lp_player, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter((1 << c_targetFilterCanHaveEnergy), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto88497DA5_u = UnitGroupCount(auto88497DA5_g, c_unitCountAll);
    for (;; auto88497DA5_u -= 1) {
        lv_enemy_unit = UnitGroupUnitFromEnd(auto88497DA5_g, auto88497DA5_u);
        if (lv_enemy_unit == null) { break; }
        if (((UnitGroupHasUnit(lib1_gv_aggressive_units, lv_enemy_unit) == true) || (UnitGroupHasUnit(lib1_gv_defensive_units, lv_enemy_unit) == true) || (UnitGroupHasUnit(lib1_gv_tactical_units, lv_enemy_unit) == true))) {
            lv_energy_unit_count = (lv_energy_unit_count + 1);
        }

    }
    if ((lv_energy_unit_count == 0)) {
        lib1_gf_AddUnittoHandCard(lp_player, lp_hand_index, 0, "Zergling");
    }
    else {
        auto5CF04946_ae = lv_energy_unit_count;
        lv_count = 1;
        for ( ; ( (auto5CF04946_ai >= 0 && lv_count <= auto5CF04946_ae) || (auto5CF04946_ai < 0 && lv_count >= auto5CF04946_ae) ) ; lv_count += auto5CF04946_ai ) {
            lv_random = RandomInt(1, 3);
            if ((lv_random == 1)) {
                lv_zergling_count = (lv_zergling_count + 1);
            }
            else if ((lv_random == 2)) {
                lv_mutalisk_count = (lv_mutalisk_count + 1);
            }
            else if ((lv_random == 3)) {
                lv_hydralisk_count = (lv_hydralisk_count + 1);
            }
        }
        auto7DA0F5BC_ae = lv_zergling_count;
        lv_count = 1;
        for ( ; ( (auto7DA0F5BC_ai >= 0 && lv_count <= auto7DA0F5BC_ae) || (auto7DA0F5BC_ai < 0 && lv_count >= auto7DA0F5BC_ae) ) ; lv_count += auto7DA0F5BC_ai ) {
            lib1_gf_AddUnittoHandCard(lp_player, lp_hand_index, 6, "Zergling");
        }
        auto9D65DBE2_ae = lv_mutalisk_count;
        lv_count = 1;
        for ( ; ( (auto9D65DBE2_ai >= 0 && lv_count <= auto9D65DBE2_ae) || (auto9D65DBE2_ai < 0 && lv_count >= auto9D65DBE2_ae) ) ; lv_count += auto9D65DBE2_ai ) {
            lib1_gf_AddUnittoHandCard(lp_player, lp_hand_index, 2, "Mutalisk");
        }
        auto9ED02740_ae = lv_hydralisk_count;
        lv_count = 1;
        for ( ; ( (auto9ED02740_ai >= 0 && lv_count <= auto9ED02740_ae) || (auto9ED02740_ai < 0 && lv_count >= auto9ED02740_ae) ) ; lv_count += auto9ED02740_ai ) {
            lib1_gf_AddUnittoHandCard(lp_player, lp_hand_index, 1, "Hydralisk");
        }
    }
}

bool lib1_gf_ExiledOnesLegalToPlay (int lp_player) {
    // Variable Declarations
    unit lv_unit;
    unitgroup lv_uncloaked_units;

    // Automatic Variable Declarations
    unitgroup autoB4EE3D10_g;
    int autoB4EE3D10_u;

    // Variable Initialization
    lv_uncloaked_units = UnitGroupEmpty();

    // Implementation
    lv_uncloaked_units = UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32))), 0);
    autoB4EE3D10_g = lv_uncloaked_units;
    autoB4EE3D10_u = UnitGroupCount(autoB4EE3D10_g, c_unitCountAll);
    for (;; autoB4EE3D10_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoB4EE3D10_g, autoB4EE3D10_u);
        if (lv_unit == null) { break; }
        if ((UnitGroupHasUnit(lib1_gv_aggressive_units, lv_unit) == false) && (UnitGroupHasUnit(lib1_gv_defensive_units, lv_unit) == false) && (UnitGroupHasUnit(lib1_gv_tactical_units, lv_unit) == false)) {
            UnitGroupRemove(lv_uncloaked_units, lv_unit);
        }
        else if (((UnitGetType(lv_unit) == "DarkTemplarHero") || (UnitGetType(lv_unit) == "Zeratul") || (UnitGetType(lv_unit) == "DarkTemplar") || (UnitGetType(lv_unit) == "Observer") || (UnitGetType(lv_unit) == "ObserverSiegeMode") || (UnitGetType(lv_unit) == "OracleStasisTrap") || (UnitHasBehavior2(lv_unit, "PermanentlyCloaked") == true)) && ((UnitHasBehavior2(lv_unit, "WaitingToMoveOut") == true) || (UnitHasBehavior2(lv_unit, "CasterWaitingToMoveOut") == true))) {
            UnitGroupRemove(lv_uncloaked_units, lv_unit);
        }
    }
    if ((UnitGroupCount(lv_uncloaked_units, c_unitCountAlive) >= 1)) {
        return false;
    }
    else {
        return true;
    }
}

void lib1_gf_GatheringProtossEffect (int lp_player) {
    // Variable Declarations
    int lv_hand_index;

    // Automatic Variable Declarations
    int autoF293137B_ae;
    const int autoF293137B_ai = 1;

    // Variable Initialization

    // Implementation
    autoF293137B_ae = lib1_gf_TopofHand(lp_player);
    lv_hand_index = 0;
    for ( ; ( (autoF293137B_ai >= 0 && lv_hand_index <= autoF293137B_ae) || (autoF293137B_ai < 0 && lv_hand_index >= autoF293137B_ae) ) ; lv_hand_index += autoF293137B_ai ) {
        if ((lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_id == lib1_gf_GetCardIDByName("Gathering Warriors"))) {
            lib1_gf_AddUnittoHandCard(lp_player, lv_hand_index, 2, "Zealot");
        }
        else if ((lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_id == lib1_gf_GetCardIDByName("Gathering Fleet"))) {
            lib1_gf_AddUnittoHandCard(lp_player, lv_hand_index, 1, "ScoutMP");
        }
        else if ((lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_id == lib1_gf_GetCardIDByName("Gathering Storm"))) {
            lib1_gf_AddUnittoHandCard(lp_player, lv_hand_index, 1, "HighTemplar");
        }
        else if ((lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_id == lib1_gf_GetCardIDByName("Gantrithor"))) {
            if ((lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_mineral > 0) && (lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_gas > 0)) {
                if ((RandomInt(0, 1) == 1)) {
                    lib1_gf_AddtoHandCardCost(lp_player, lv_hand_index, -1, 0);
                }
                else {
                    lib1_gf_AddtoHandCardCost(lp_player, lv_hand_index, 0, -1);
                }
            }
            else if ((lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_mineral > 0)) {
                lib1_gf_AddtoHandCardCost(lp_player, lv_hand_index, -1, 0);
            }
            else if (true) {
                lib1_gf_AddtoHandCardCost(lp_player, lv_hand_index, 0, -1);
            }
        }
    }
}

void lib1_gf_RiotHandEffect (int lp_player) {
    // Variable Declarations
    playergroup lv_opposing_team;
    int lv_opponent;
    int lv_possible_opponent_count;
    int[lib1_gv_mAX_PLAYERS + 1] lv_possible_opponents;
    int lv_marine_count;

    // Automatic Variable Declarations
    playergroup auto11F00221_g;
    playergroup auto1639A63C_g;
    const int autoF07D5939_ae = 2;
    const int autoF07D5939_ai = 1;

    // Variable Initialization
    lv_opposing_team = PlayerGroupEmpty();

    // Implementation
    if ((PlayerGroupHasPlayer(lib1_gv_team[0], lp_player) == true)) {
        lv_opposing_team = lib1_gv_team[1];
    }
    else {
        lv_opposing_team = lib1_gv_team[0];
    }
    auto11F00221_g = lv_opposing_team;
    lv_opponent = -1;
    while (true) {
        lv_opponent = PlayerGroupNextPlayer(auto11F00221_g, lv_opponent);
        if (lv_opponent < 0) { break; }
        if ((PlayerStatus(lv_opponent) == c_playerStatusActive) && (PlayerType(lv_opponent) == c_playerTypeUser)) {
            lv_possible_opponents[lv_possible_opponent_count] = lv_opponent;
            lv_possible_opponent_count = (lv_possible_opponent_count + 1);
        }

    }
    if ((lv_possible_opponent_count == 0)) {
        auto1639A63C_g = lv_opposing_team;
        lv_opponent = -1;
        while (true) {
            lv_opponent = PlayerGroupNextPlayer(auto1639A63C_g, lv_opponent);
            if (lv_opponent < 0) { break; }
            lv_possible_opponents[lv_possible_opponent_count] = lv_opponent;
            lv_possible_opponent_count = (lv_possible_opponent_count + 1);
        }
    }

    if ((lv_possible_opponent_count > 0)) {
        lv_opponent = lv_possible_opponents[RandomInt(0, (lv_possible_opponent_count - 1))];
        lv_marine_count = 1;
        for ( ; ( (autoF07D5939_ai >= 0 && lv_marine_count <= autoF07D5939_ae) || (autoF07D5939_ai < 0 && lv_marine_count >= autoF07D5939_ae) ) ; lv_marine_count += autoF07D5939_ai ) {
            UnitCreate(1, "Marine", 0, lv_opponent, RegionRandomPoint(lib1_gv_player[lv_opponent].lv_spawn_region), libNtve_gf_RandomAngle());
            UnitGroupAdd(lib1_gv_one_turn_wait_units, UnitLastCreated());
            UnitGroupAdd(lib1_gv_aggressive_units, UnitLastCreated());
            UnitBehaviorAdd(UnitLastCreated(), "PermanentlyUncommandable", UnitLastCreated(), 1);
            UnitBehaviorAdd(UnitLastCreated(), "WaitingToMoveOut", UnitLastCreated(), 1);
            UnitBehaviorAdd(UnitLastCreated(), "Waiting1Turn", UnitLastCreated(), 1);
        }
    }

}

void lib1_gf_InfestationHandEffect (int lp_player) {
    // Variable Declarations
    playergroup lv_opposing_team;
    int lv_opponent;
    int lv_possible_opponent_count;
    int[lib1_gv_mAX_PLAYERS + 1] lv_possible_opponents;
    int lv_zerg_unit_count;

    // Automatic Variable Declarations
    playergroup autoE19E333D_g;
    playergroup auto0D1B5D31_g;
    const int auto32E6CAED_ae = 4;
    const int auto32E6CAED_ai = 1;
    const int auto1B7A7BC3_ae = 1;
    const int auto1B7A7BC3_ai = 1;

    // Variable Initialization
    lv_opposing_team = PlayerGroupEmpty();

    // Implementation
    if ((PlayerGroupHasPlayer(lib1_gv_team[0], lp_player) == true)) {
        lv_opposing_team = lib1_gv_team[1];
    }
    else {
        lv_opposing_team = lib1_gv_team[0];
    }
    autoE19E333D_g = lv_opposing_team;
    lv_opponent = -1;
    while (true) {
        lv_opponent = PlayerGroupNextPlayer(autoE19E333D_g, lv_opponent);
        if (lv_opponent < 0) { break; }
        if ((PlayerStatus(lv_opponent) == c_playerStatusActive) && (PlayerType(lv_opponent) == c_playerTypeUser)) {
            lv_possible_opponents[lv_possible_opponent_count] = lv_opponent;
            lv_possible_opponent_count = (lv_possible_opponent_count + 1);
        }

    }
    if ((lv_possible_opponent_count == 0)) {
        auto0D1B5D31_g = lv_opposing_team;
        lv_opponent = -1;
        while (true) {
            lv_opponent = PlayerGroupNextPlayer(auto0D1B5D31_g, lv_opponent);
            if (lv_opponent < 0) { break; }
            lv_possible_opponents[lv_possible_opponent_count] = lv_opponent;
            lv_possible_opponent_count = (lv_possible_opponent_count + 1);
        }
    }

    if ((lv_possible_opponent_count > 0)) {
        lv_opponent = lv_possible_opponents[RandomInt(0, (lv_possible_opponent_count - 1))];
        lv_zerg_unit_count = 1;
        for ( ; ( (auto32E6CAED_ai >= 0 && lv_zerg_unit_count <= auto32E6CAED_ae) || (auto32E6CAED_ai < 0 && lv_zerg_unit_count >= auto32E6CAED_ae) ) ; lv_zerg_unit_count += auto32E6CAED_ai ) {
            UnitCreate(1, "Zergling", 0, lv_opponent, RegionRandomPoint(lib1_gv_player[lv_opponent].lv_spawn_region), libNtve_gf_RandomAngle());
            UnitGroupAdd(lib1_gv_one_turn_wait_units, UnitLastCreated());
            UnitGroupAdd(lib1_gv_aggressive_units, UnitLastCreated());
            UnitBehaviorAdd(UnitLastCreated(), "PermanentlyUncommandable", UnitLastCreated(), 1);
            UnitBehaviorAdd(UnitLastCreated(), "WaitingToMoveOut", UnitLastCreated(), 1);
            UnitBehaviorAdd(UnitLastCreated(), "Waiting1Turn", UnitLastCreated(), 1);
        }
        lv_zerg_unit_count = 1;
        for ( ; ( (auto1B7A7BC3_ai >= 0 && lv_zerg_unit_count <= auto1B7A7BC3_ae) || (auto1B7A7BC3_ai < 0 && lv_zerg_unit_count >= auto1B7A7BC3_ae) ) ; lv_zerg_unit_count += auto1B7A7BC3_ai ) {
            UnitCreate(1, "Hydralisk", 0, lv_opponent, RegionRandomPoint(lib1_gv_player[lv_opponent].lv_spawn_region), libNtve_gf_RandomAngle());
            UnitGroupAdd(lib1_gv_one_turn_wait_units, UnitLastCreated());
            UnitGroupAdd(lib1_gv_aggressive_units, UnitLastCreated());
            UnitBehaviorAdd(UnitLastCreated(), "PermanentlyUncommandable", UnitLastCreated(), 1);
            UnitBehaviorAdd(UnitLastCreated(), "WaitingToMoveOut", UnitLastCreated(), 1);
            UnitBehaviorAdd(UnitLastCreated(), "Waiting1Turn", UnitLastCreated(), 1);
        }
    }

}

void lib1_gf_OvermindEffect (int lp_player) {
    // Variable Declarations
    int lv_draw_slot;
    int lv_unit_type_index;

    // Automatic Variable Declarations
    const int auto18E123AF_ae = lib1_gv_mAX_UNIT_TYPE_PER_CARD;
    const int auto18E123AF_ai = 1;

    // Variable Initialization

    // Implementation
    lv_draw_slot = lib1_gf_FirstEmptyHandSlot(lp_player);
    if ((lv_draw_slot <= lib1_gf_HandLimit(lp_player))) {
        lib1_gf_GenerateCardforHand(lp_player, lib1_gf_GetRandomCardIDWithSubtype(lib1_gv_sPAWN, true));
        lv_unit_type_index = 0;
        for ( ; ( (auto18E123AF_ai >= 0 && lv_unit_type_index <= auto18E123AF_ae) || (auto18E123AF_ai < 0 && lv_unit_type_index >= auto18E123AF_ae) ) ; lv_unit_type_index += auto18E123AF_ai ) {
            lib1_gv_player[lp_player].lv_hand.lv_card[lv_draw_slot].lv_unit_count[lv_unit_type_index] = (lib1_gv_player[lp_player].lv_hand.lv_card[lv_draw_slot].lv_unit_count[lv_unit_type_index] * 2);
        }
        lib1_gf_UpdateHandCardText(lp_player, lv_draw_slot);
    }

}

void lib1_gf_ArgusCrystalBuildStart (unit lp_structure) {
    // Variable Declarations
    int lv_player;
    int lv_opponent;
    int lv_hand_index;
    int lv_highest_cost;
    int[51] lv_possible_opponent;
    int[51] lv_possible_hand_index;
    int lv_possibility_count;
    int lv_choice;

    // Automatic Variable Declarations
    playergroup autoBF43E9F3_g;
    const int autoE083F57A_ae = lib1_gv_bOOSTED_HAND_LIMIT;
    const int autoE083F57A_ai = 1;

    // Variable Initialization
    lv_highest_cost = -1;

    // Implementation
    lv_player = UnitGetOwner(lp_structure);
    autoBF43E9F3_g = lib1_gf_OpposingTeamofPlayer(lv_player);
    lv_opponent = -1;
    while (true) {
        lv_opponent = PlayerGroupNextPlayer(autoBF43E9F3_g, lv_opponent);
        if (lv_opponent < 0) { break; }
        lv_hand_index = 0;
        for ( ; ( (autoE083F57A_ai >= 0 && lv_hand_index <= autoE083F57A_ae) || (autoE083F57A_ai < 0 && lv_hand_index >= autoE083F57A_ae) ) ; lv_hand_index += autoE083F57A_ai ) {
            if ((lib1_gf_PlayerHasCardAtHandIndex(lv_opponent, lv_hand_index) == true) && (lib1_gf_HandCardTotalCost(lv_opponent, lv_hand_index) > lv_highest_cost) && (lib1_gv_player[lv_opponent].lv_hand.lv_card[lv_hand_index].lv_locked_by_player == 0) && ((lib1_gv_player[lv_opponent].lv_hand.lv_card[lv_hand_index].lv_type == lib1_gv_aGGRESSIVE) || (lib1_gv_player[lv_opponent].lv_hand.lv_card[lv_hand_index].lv_type == lib1_gv_dEFENSIVE) || (lib1_gv_player[lv_opponent].lv_hand.lv_card[lv_hand_index].lv_type == lib1_gv_tACTICAL))) {
                lv_possible_opponent[0] = lv_opponent;
                lv_possible_hand_index[0] = lv_hand_index;
                lv_possibility_count = 1;
                lv_highest_cost = lib1_gf_HandCardTotalCost(lv_opponent, lv_hand_index);
            }
            else if ((lib1_gf_PlayerHasCardAtHandIndex(lv_opponent, lv_hand_index) == true) && (lib1_gf_HandCardTotalCost(lv_opponent, lv_hand_index) == lv_highest_cost) && (lib1_gv_player[lv_opponent].lv_hand.lv_card[lv_hand_index].lv_locked_by_player == 0) && ((lib1_gv_player[lv_opponent].lv_hand.lv_card[lv_hand_index].lv_type == lib1_gv_aGGRESSIVE) || (lib1_gv_player[lv_opponent].lv_hand.lv_card[lv_hand_index].lv_type == lib1_gv_dEFENSIVE) || (lib1_gv_player[lv_opponent].lv_hand.lv_card[lv_hand_index].lv_type == lib1_gv_tACTICAL))) {
                lv_possible_opponent[lv_possibility_count] = lv_opponent;
                lv_possible_hand_index[lv_possibility_count] = lv_hand_index;
                lv_possibility_count = (lv_possibility_count + 1);
            }
        }
    }
    if ((lv_highest_cost >= 0)) {
        lv_choice = RandomInt(0, (lv_possibility_count - 1));
        lib1_gf_LockHandCardArgusCrystal(lv_player, lv_possible_opponent[lv_choice], lv_possible_hand_index[lv_choice]);
        UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaChat, (StringExternal("Param/Value/lib_1_2EF15C4B") + PlayerName(lv_possible_opponent[lv_choice]) + StringExternal("Param/Value/lib_1_90368C6B") + StringToText(lib1_gv_player[lv_possible_opponent[lv_choice]].lv_hand.lv_card[lv_possible_hand_index[lv_choice]].lv_name) + StringExternal("Param/Value/lib_1_C214CB0D")));
    }

}

void lib1_gf_UpdateCardMercilessFinishers (int lp_player, int lp_hand_index) {
    // Variable Declarations
    int lv_unit_type_index;
    unit lv_burrowed_unit;

    // Automatic Variable Declarations
    const int autoEC37FD15_ae = lib1_gv_mAX_UNIT_TYPE_PER_CARD;
    const int autoEC37FD15_ai = 1;
    unitgroup auto8AD12AD9_g;
    int auto8AD12AD9_u;

    // Variable Initialization

    // Implementation
    lv_unit_type_index = 0;
    for ( ; ( (autoEC37FD15_ai >= 0 && lv_unit_type_index <= autoEC37FD15_ae) || (autoEC37FD15_ai < 0 && lv_unit_type_index >= autoEC37FD15_ae) ) ; lv_unit_type_index += autoEC37FD15_ai ) {
        lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_unit_count[lv_unit_type_index] = 0;
        lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_unit_type[lv_unit_type_index] = null;
    }
    auto8AD12AD9_g = UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter((1 << c_targetFilterBuried), 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8AD12AD9_u = UnitGroupCount(auto8AD12AD9_g, c_unitCountAll);
    for (;; auto8AD12AD9_u -= 1) {
        lv_burrowed_unit = UnitGroupUnitFromEnd(auto8AD12AD9_g, auto8AD12AD9_u);
        if (lv_burrowed_unit == null) { break; }
        if ((StringContains(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lv_burrowed_unit), "Name", c_playerAny), "Zergling", c_stringAnywhere, c_stringCase) == true)) {
            lib1_gf_AddUnittoHandCard(lp_player, lp_hand_index, 1, "Zergling");
        }
        else if ((StringContains(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lv_burrowed_unit), "Name", c_playerAny), "Roach", c_stringAnywhere, c_stringCase) == true)) {
            lib1_gf_AddUnittoHandCard(lp_player, lp_hand_index, 1, "Roach");
        }
        else if ((StringContains(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lv_burrowed_unit), "Name", c_playerAny), "Hydralisk", c_stringAnywhere, c_stringCase) == true)) {
            lib1_gf_AddUnittoHandCard(lp_player, lp_hand_index, 1, "Hydralisk");
        }
        else if ((StringContains(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lv_burrowed_unit), "Name", c_playerAny), "Ultralisk", c_stringAnywhere, c_stringCase) == true)) {
            lib1_gf_AddUnittoHandCard(lp_player, lp_hand_index, 1, "Ultralisk");
        }
        else if ((StringContains(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lv_burrowed_unit), "Name", c_playerAny), "Baneling", c_stringAnywhere, c_stringCase) == true)) {
            lib1_gf_AddUnittoHandCard(lp_player, lp_hand_index, 1, "Baneling");
        }
        else if ((StringContains(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lv_burrowed_unit), "Name", c_playerAny), "Lurker", c_stringAnywhere, c_stringCase) == true)) {
            lib1_gf_AddUnittoHandCard(lp_player, lp_hand_index, 1, "LurkerMP");
        }
        else if ((StringContains(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lv_burrowed_unit), "Name", c_playerAny), "SwarmHost", c_stringAnywhere, c_stringCase) == true)) {
            lib1_gf_AddUnittoHandCard(lp_player, lp_hand_index, 1, "SwarmHostMP");
        }
        else if ((StringContains(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lv_burrowed_unit), "Name", c_playerAny), "Infestor", c_stringAnywhere, c_stringCase) == true)) {
            lib1_gf_AddUnittoHandCard(lp_player, lp_hand_index, 1, "Infestor");
        }
    }
}

void lib1_gf_ArtanisFounderEffect (int lp_player) {
    // Variable Declarations
    bool lv_fetch_success;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_fetch_success = lib1_gf_FetchLeastExpensiveCardWithType(lp_player, lib1_gv_sTRUCTURE);
    if ((lv_fetch_success == true)) {
        lib1_gv_player[lp_player].lv_skip_next_draw_step = true;
    }

}

int lib1_gf_GetPoweredProtossStructureCount (int lp_player) {
    // Variable Declarations
    int lv_count;
    unit lv_structure;

    // Automatic Variable Declarations
    unitgroup autoF4163832_g;
    int autoF4163832_u;

    // Variable Initialization

    // Implementation
    autoF4163832_g = UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF4163832_u = UnitGroupCount(autoF4163832_g, c_unitCountAll);
    for (;; autoF4163832_u -= 1) {
        lv_structure = UnitGroupUnitFromEnd(autoF4163832_g, autoF4163832_u);
        if (lv_structure == null) { break; }
        if ((PowerLevel(lp_player, UnitGetPosition(lv_structure), "PowerSource") >= 1) && ((UnitHasBehavior2(lv_structure, "FastEnablerPowerUser") == true) || (UnitHasBehavior2(lv_structure, "PowerUserBaseDefenseSmall") == true) || (UnitHasBehavior2(lv_structure, "PowerUserQueueSmall") == true) || (UnitHasBehavior2(lv_structure, "PowerUserQueue") == true) || (UnitHasBehavior2(lv_structure, "PowerSource") == true))) {
            lv_count = (lv_count + 1);
        }

    }
    return lv_count;
}

int lib1_gf_HandLimit (int lp_player) {
    // Variable Declarations
    unit lv_unit;
    int lv_hand_boost;

    // Automatic Variable Declarations
    unitgroup autoD7E4AC55_g;
    int autoD7E4AC55_u;

    // Variable Initialization

    // Implementation
    autoD7E4AC55_g = UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD7E4AC55_u = UnitGroupCount(autoD7E4AC55_g, c_unitCountAll);
    for (;; autoD7E4AC55_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoD7E4AC55_g, autoD7E4AC55_u);
        if (lv_unit == null) { break; }
        if ((UnitHasBehavior2(lv_unit, "HandSize1") == true)) {
            lv_hand_boost = (lv_hand_boost + 1);
        }

    }
    return MinI((lib1_gv_hAND_LIMIT + lv_hand_boost), lib1_gv_bOOSTED_HAND_LIMIT);
}

bool lib1_gf_PlayerHasCardAtHandIndex (int lp_player, int lp_hand_index) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_hand_index < 0) || (lp_hand_index > lib1_gv_bOOSTED_HAND_LIMIT) || (lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_name == ""))) {
        return false;
    }
    else {
        return true;
    }
}

int lib1_gf_FirstEmptyHandSlot (int lp_player) {
    // Variable Declarations
    int lv_hand_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while ((lib1_gf_PlayerHasCardAtHandIndex(lp_player, lv_hand_index) == true)) {
        lv_hand_index = (lv_hand_index + 1);
    }
    return lv_hand_index;
}

int lib1_gf_TopofHand (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return (lib1_gf_FirstEmptyHandSlot(lp_player) - 1);
}

int lib1_gf_HandCardMineralCost (int lp_player, int lp_hand_index) {
    // Automatic Variable Declarations
    // Implementation
    return MaxI((lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_mineral + lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_mineral_adjustment), 0);
}

int lib1_gf_HandCardGasCost (int lp_player, int lp_hand_index) {
    // Automatic Variable Declarations
    // Implementation
    return MaxI((lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_gas + lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_gas_adjustment), 0);
}

int lib1_gf_CurrentSelectionMineralCost (int lp_player) {
    // Variable Declarations
    int lv_hand_index;
    int lv_cost;

    // Automatic Variable Declarations
    int auto3FD390BB_ae;
    const int auto3FD390BB_ai = 1;

    // Variable Initialization

    // Implementation
    auto3FD390BB_ae = lib1_gf_HandLimit(lp_player);
    lv_hand_index = 0;
    for ( ; ( (auto3FD390BB_ai >= 0 && lv_hand_index <= auto3FD390BB_ae) || (auto3FD390BB_ai < 0 && lv_hand_index >= auto3FD390BB_ae) ) ; lv_hand_index += auto3FD390BB_ai ) {
        if ((lib1_gv_player[lp_player].lv_hand.lv_selected[lv_hand_index] == true) && (lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_mineral >= 0)) {
            lv_cost = (lv_cost + lib1_gf_HandCardMineralCost(lp_player, lv_hand_index));
        }

    }
    return lv_cost;
}

int lib1_gf_CurrentSelectionGasCost (int lp_player) {
    // Variable Declarations
    int lv_hand_index;
    int lv_cost;

    // Automatic Variable Declarations
    int auto6E1F477E_ae;
    const int auto6E1F477E_ai = 1;

    // Variable Initialization

    // Implementation
    auto6E1F477E_ae = lib1_gf_HandLimit(lp_player);
    lv_hand_index = 0;
    for ( ; ( (auto6E1F477E_ai >= 0 && lv_hand_index <= auto6E1F477E_ae) || (auto6E1F477E_ai < 0 && lv_hand_index >= auto6E1F477E_ae) ) ; lv_hand_index += auto6E1F477E_ai ) {
        if ((lib1_gv_player[lp_player].lv_hand.lv_selected[lv_hand_index] == true) && (lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_gas >= 0)) {
            lv_cost = (lv_cost + lib1_gf_HandCardGasCost(lp_player, lv_hand_index));
        }

    }
    return lv_cost;
}

int lib1_gf_CountofSelectedCards (int lp_player) {
    // Variable Declarations
    int lv_hand_index;
    int lv_count;

    // Automatic Variable Declarations
    int auto5D0F123B_ae;
    const int auto5D0F123B_ai = 1;

    // Variable Initialization

    // Implementation
    auto5D0F123B_ae = lib1_gf_HandLimit(lp_player);
    lv_hand_index = 0;
    for ( ; ( (auto5D0F123B_ai >= 0 && lv_hand_index <= auto5D0F123B_ae) || (auto5D0F123B_ai < 0 && lv_hand_index >= auto5D0F123B_ae) ) ; lv_hand_index += auto5D0F123B_ai ) {
        if ((lib1_gv_player[lp_player].lv_hand.lv_selected[lv_hand_index] == true)) {
            lv_count = (lv_count + 1);
        }

    }
    return lv_count;
}

int lib1_gf_HandCardTotalCost (int lp_player, int lp_hand_index) {
    // Automatic Variable Declarations
    // Implementation
    return (lib1_gf_HandCardMineralCost(lp_player, lp_hand_index) + lib1_gf_HandCardGasCost(lp_player, lp_hand_index));
}

void lib1_gf_DeselectAllCards (int lp_player) {
    // Variable Declarations
    int lv_hand_index;

    // Automatic Variable Declarations
    int auto281E363A_ae;
    const int auto281E363A_ai = 1;

    // Variable Initialization

    // Implementation
    auto281E363A_ae = lib1_gf_TopofHand(lp_player);
    lv_hand_index = 0;
    for ( ; ( (auto281E363A_ai >= 0 && lv_hand_index <= auto281E363A_ae) || (auto281E363A_ai < 0 && lv_hand_index >= auto281E363A_ae) ) ; lv_hand_index += auto281E363A_ai ) {
        lib1_gv_player[lp_player].lv_hand.lv_selected[lv_hand_index] = false;
    }
}

int lib1_gf_CheapestHandCard (int lp_player, string lp_required_type, bool lp_allow_locked, int lp_excluded_card_id) {
    // Variable Declarations
    int lv_lowest_cost;
    int lv_hand_index;
    int[lib1_gv_bOOSTED_HAND_LIMIT + 1] lv_possible_hand_index;
    int lv_possible_hand_index_count;
    int lv_integer;

    // Automatic Variable Declarations
    int auto8FEC13B9_ae;
    const int auto8FEC13B9_ai = 1;

    // Variable Initialization
    lv_lowest_cost = 99999;

    // Implementation
    auto8FEC13B9_ae = lib1_gf_TopofHand(lp_player);
    lv_hand_index = 0;
    for ( ; ( (auto8FEC13B9_ai >= 0 && lv_hand_index <= auto8FEC13B9_ae) || (auto8FEC13B9_ai < 0 && lv_hand_index >= auto8FEC13B9_ae) ) ; lv_hand_index += auto8FEC13B9_ai ) {
        if (((lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_locked_by_player == 0) || (lp_allow_locked == true)) && ((lp_required_type == "") || (lp_required_type == lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_type) || ((lp_required_type == lib1_gv_uNIT) && ((lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_type == lib1_gv_aGGRESSIVE) || (lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_type == lib1_gv_dEFENSIVE) || (lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_type == lib1_gv_tACTICAL)))) && ((lp_excluded_card_id == -1) || (lp_excluded_card_id != lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_id))) {
            if ((lib1_gf_HandCardTotalCost(lp_player, lv_hand_index) == lv_lowest_cost)) {
                lv_possible_hand_index[lv_possible_hand_index_count] = lv_hand_index;
                lv_possible_hand_index_count = (lv_possible_hand_index_count + 1);
            }
            else if ((lib1_gf_HandCardTotalCost(lp_player, lv_hand_index) < lv_lowest_cost)) {
                lv_lowest_cost = lib1_gf_HandCardTotalCost(lp_player, lv_hand_index);
                lv_possible_hand_index[0] = lv_hand_index;
                lv_possible_hand_index_count = 1;
            }
        }

    }
    if ((lv_possible_hand_index_count > 0)) {
        return lv_possible_hand_index[RandomInt(0, (lv_possible_hand_index_count - 1))];
    }
    else {
        return -1;
    }
}

int lib1_gf_MostExpensiveHandCard (int lp_player, string lp_required_type, bool lp_allow_locked, bool lp_exclude_affordable) {
    // Variable Declarations
    int lv_highest_cost;
    int lv_hand_index;
    int[lib1_gv_bOOSTED_HAND_LIMIT + 1] lv_possible_hand_index;
    int lv_possible_hand_index_count;
    int lv_integer;

    // Automatic Variable Declarations
    int auto89751F90_ae;
    const int auto89751F90_ai = 1;

    // Variable Initialization

    // Implementation
    auto89751F90_ae = lib1_gf_TopofHand(lp_player);
    lv_hand_index = 0;
    for ( ; ( (auto89751F90_ai >= 0 && lv_hand_index <= auto89751F90_ae) || (auto89751F90_ai < 0 && lv_hand_index >= auto89751F90_ae) ) ; lv_hand_index += auto89751F90_ai ) {
        if (((lib1_gf_HandCardMineralCost(lp_player, lv_hand_index) > lib1_gf_MineralIncome(lp_player)) || (lib1_gf_HandCardGasCost(lp_player, lv_hand_index) > lib1_gf_GasIncome(lp_player)) || (lp_exclude_affordable == false)) && ((lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_locked_by_player == 0) || (lp_allow_locked == true)) && ((lp_required_type == "") || (lp_required_type == lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_type) || ((lp_required_type == lib1_gv_uNIT) && ((lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_type == lib1_gv_aGGRESSIVE) || (lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_type == lib1_gv_dEFENSIVE) || (lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_type == lib1_gv_tACTICAL))))) {
            if ((lib1_gf_HandCardTotalCost(lp_player, lv_hand_index) == lv_highest_cost)) {
                lv_possible_hand_index[lv_possible_hand_index_count] = lv_hand_index;
                lv_possible_hand_index_count = (lv_possible_hand_index_count + 1);
            }
            else if ((lib1_gf_HandCardTotalCost(lp_player, lv_hand_index) > lv_highest_cost)) {
                lv_highest_cost = lib1_gf_HandCardTotalCost(lp_player, lv_hand_index);
                lv_possible_hand_index[0] = lv_hand_index;
                lv_possible_hand_index_count = 1;
            }
        }

    }
    if ((lv_possible_hand_index_count >= 1)) {
        return lv_possible_hand_index[RandomInt(0, (lv_possible_hand_index_count - 1))];
    }
    else {
        return -1;
    }
}

int lib1_gf_RandomHandCard (int lp_player, string lp_required_type, string lp_required_subtype, int lp_excluded_card_id, string lp_excluded_subtype) {
    // Variable Declarations
    int lv_hand_index;
    int[lib1_gv_bOOSTED_HAND_LIMIT + 1] lv_possible_hand_index;
    int lv_possible_hand_index_count;
    int lv_integer;

    // Automatic Variable Declarations
    int auto923A0CE8_ae;
    const int auto923A0CE8_ai = 1;

    // Variable Initialization

    // Implementation
    auto923A0CE8_ae = lib1_gf_TopofHand(lp_player);
    lv_hand_index = 0;
    for ( ; ( (auto923A0CE8_ai >= 0 && lv_hand_index <= auto923A0CE8_ae) || (auto923A0CE8_ai < 0 && lv_hand_index >= auto923A0CE8_ae) ) ; lv_hand_index += auto923A0CE8_ai ) {
        if (((lp_required_type == "") || (lp_required_type == lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_type) || ((lp_required_type == lib1_gv_uNIT) && ((lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_type == lib1_gv_aGGRESSIVE) || (lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_type == lib1_gv_dEFENSIVE) || (lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_type == lib1_gv_tACTICAL)))) && ((lp_required_subtype == "") || (lp_required_subtype == lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_subtype)) && ((lp_excluded_subtype == "") || (lp_excluded_subtype != lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_subtype)) && ((lp_excluded_card_id == -1) || (lp_excluded_card_id != lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_id))) {
            lv_possible_hand_index[lv_possible_hand_index_count] = lv_hand_index;
            lv_possible_hand_index_count = (lv_possible_hand_index_count + 1);
        }

    }
    if ((lv_possible_hand_index_count >= 1)) {
        return lv_possible_hand_index[RandomInt(0, (lv_possible_hand_index_count - 1))];
    }
    else {
        return -1;
    }
}

int lib1_gf_CountOfUnitTypesOnHandCard (int lp_player, int lp_hand_index) {
    // Variable Declarations
    int lv_unit_type_index;
    int lv_count;

    // Automatic Variable Declarations
    const int auto1692FDA8_ae = lib1_gv_mAX_UNIT_TYPE_PER_CARD;
    const int auto1692FDA8_ai = 1;

    // Variable Initialization

    // Implementation
    lv_unit_type_index = 0;
    for ( ; ( (auto1692FDA8_ai >= 0 && lv_unit_type_index <= auto1692FDA8_ae) || (auto1692FDA8_ai < 0 && lv_unit_type_index >= auto1692FDA8_ae) ) ; lv_unit_type_index += auto1692FDA8_ai ) {
        if ((lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_unit_count[lv_unit_type_index] > 0)) {
            lv_count = (lv_count + 1);
        }
        else {
            break;
        }
    }
    return lv_count;
}

int lib1_gf_CountOfUnitsOnHandCardMatchingType (int lp_player, int lp_hand_index, string lp_unit_type) {
    // Variable Declarations
    int lv_unit_type_index;
    int lv_count;

    // Automatic Variable Declarations
    const int auto2408903B_ae = lib1_gv_mAX_UNIT_TYPE_PER_CARD;
    const int auto2408903B_ai = 1;

    // Variable Initialization

    // Implementation
    lv_unit_type_index = 0;
    for ( ; ( (auto2408903B_ai >= 0 && lv_unit_type_index <= auto2408903B_ae) || (auto2408903B_ai < 0 && lv_unit_type_index >= auto2408903B_ae) ) ; lv_unit_type_index += auto2408903B_ai ) {
        if (((lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_unit_type[lv_unit_type_index] == lp_unit_type) || (lp_unit_type == null))) {
            lv_count = (lv_count + lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_unit_count[lv_unit_type_index]);
        }

    }
    return lv_count;
}

void lib1_gf_FixDuplicateUnitTypesOnHandCard (int lp_player, int lp_hand_index) {
    // Variable Declarations
    int lv_unit_type_duplicate_slot;
    int lv_unit_type_index;

    // Automatic Variable Declarations
    const int auto9566A070_ae = lib1_gv_mAX_UNIT_TYPE_PER_CARD;
    const int auto9566A070_ai = 1;

    // Variable Initialization

    // Implementation
    lv_unit_type_duplicate_slot = lib1_gf_FindDuplicateUnitTypeOnHandCard(lp_player, lp_hand_index);
    while ((lv_unit_type_duplicate_slot >= 0)) {
        lv_unit_type_index = (lv_unit_type_duplicate_slot + 1);
        for ( ; ( (auto9566A070_ai >= 0 && lv_unit_type_index <= auto9566A070_ae) || (auto9566A070_ai < 0 && lv_unit_type_index >= auto9566A070_ae) ) ; lv_unit_type_index += auto9566A070_ai ) {
            if ((lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_unit_type[lv_unit_type_duplicate_slot] == lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_unit_type[lv_unit_type_index]) && (lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_unit_count[lv_unit_type_duplicate_slot] > 0) && (lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_unit_count[lv_unit_type_index] > 0)) {
                lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_unit_count[lv_unit_type_duplicate_slot] = (lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_unit_count[lv_unit_type_duplicate_slot] + lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_unit_count[lv_unit_type_index]);
                lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_unit_type[lv_unit_type_index] = "InvisibleTargetDummy";
                lib1_gf_RemoveUnitFromHandCard(lp_player, lp_hand_index, 9999, "InvisibleTargetDummy");
            }

        }
        lv_unit_type_duplicate_slot = lib1_gf_FindDuplicateUnitTypeOnHandCard(lp_player, lp_hand_index);
    }
}

int lib1_gf_FindDuplicateUnitTypeOnHandCard (int lp_player, int lp_hand_index) {
    // Variable Declarations
    int lv_unit_type_index_1;
    int lv_unit_type_index_2;

    // Automatic Variable Declarations
    const int autoC7DF1734_ae = lib1_gv_mAX_UNIT_TYPE_PER_CARD;
    const int autoC7DF1734_ai = 1;
    const int autoA6D601D5_ae = lib1_gv_mAX_UNIT_TYPE_PER_CARD;
    const int autoA6D601D5_ai = 1;

    // Variable Initialization

    // Implementation
    lv_unit_type_index_1 = 0;
    for ( ; ( (autoC7DF1734_ai >= 0 && lv_unit_type_index_1 <= autoC7DF1734_ae) || (autoC7DF1734_ai < 0 && lv_unit_type_index_1 >= autoC7DF1734_ae) ) ; lv_unit_type_index_1 += autoC7DF1734_ai ) {
        lv_unit_type_index_2 = (lv_unit_type_index_1 + 1);
        for ( ; ( (autoA6D601D5_ai >= 0 && lv_unit_type_index_2 <= autoA6D601D5_ae) || (autoA6D601D5_ai < 0 && lv_unit_type_index_2 >= autoA6D601D5_ae) ) ; lv_unit_type_index_2 += autoA6D601D5_ai ) {
            if (((lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_unit_count[lv_unit_type_index_1] == 0) || (lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_unit_count[lv_unit_type_index_2] == 0))) {
                break;
            }
            else if ((lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_unit_type[lv_unit_type_index_1] == lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_unit_type[lv_unit_type_index_2]) && (lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_unit_count[lv_unit_type_index_1] > 0) && (lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_unit_count[lv_unit_type_index_2] > 0)) {
                return lv_unit_type_index_1;
            }
        }
    }
    return -1;
}

bool lib1_gf_PlayerHasCardAtDeckIndex (int lp_player, int lp_deck_index) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_deck_index < 0) || (lp_deck_index > lib1_gv_dECK_LIMIT) || (lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index].lv_name == ""))) {
        return false;
    }
    else {
        return true;
    }
}

int lib1_gf_FirstEmptyDeckSlot (int lp_player) {
    // Variable Declarations
    int lv_deck_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while ((lib1_gf_PlayerHasCardAtDeckIndex(lp_player, lv_deck_index) == true)) {
        lv_deck_index = (lv_deck_index + 1);
    }
    return lv_deck_index;
}

int lib1_gf_TopofDeck (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return (lib1_gf_FirstEmptyDeckSlot(lp_player) - 1);
}

int lib1_gf_DeckCardMineralCost (int lp_player, int lp_deck_index) {
    // Automatic Variable Declarations
    // Implementation
    return MaxI((lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index].lv_mineral + lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index].lv_mineral_adjustment), 0);
}

int lib1_gf_DeckCardGasCost (int lp_player, int lp_deck_index) {
    // Automatic Variable Declarations
    // Implementation
    return MaxI((lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index].lv_gas + lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index].lv_gas_adjustment), 0);
}

void lib1_gf_InitializeDeck (int lp_player) {
    // Variable Declarations
    int lv_race;
    int lv_decklist_index;
    int lv_count;

    // Automatic Variable Declarations
    const int auto15DA6ED4_ae = lib1_gv_dECKLIST_LIMIT;
    const int auto15DA6ED4_ai = 1;

    // Variable Initialization

    // Implementation
    if ((lib1_gv_tutorial_flag == true)) {
        lib1_gf_InitializePlayerTutorialDeck(lp_player);
    }
    else {
        if ((PlayerRace(lp_player) == "Terr")) {
            lv_race = lib1_gv_tERRAN;
        }
        else if ((PlayerRace(lp_player) == "Zerg")) {
            lv_race = lib1_gv_zERG;
        }
        else if ((PlayerRace(lp_player) == "Prot")) {
            lv_race = lib1_gv_pROTOSS;
        }
        lv_decklist_index = 0;
        for ( ; ( (auto15DA6ED4_ai >= 0 && lv_decklist_index <= auto15DA6ED4_ae) || (auto15DA6ED4_ai < 0 && lv_decklist_index >= auto15DA6ED4_ae) ) ; lv_decklist_index += auto15DA6ED4_ai ) {
            if ((lib1_gv_player_collection[lp_player].lv_decklist[lv_race][lib1_gv_player_collection[lp_player].lv_default_decklist[lv_race]].lv_count[lv_decklist_index] == 2)) {
                if ((lib1_gv_card[lib1_gv_player_collection[lp_player].lv_decklist[lv_race][lib1_gv_player_collection[lp_player].lv_default_decklist[lv_race]].lv_card_id[lv_decklist_index]].lv_buried == true)) {
                    lib1_gf_GenerateCardToDiscard(lp_player, lib1_gv_player_collection[lp_player].lv_decklist[lv_race][lib1_gv_player_collection[lp_player].lv_default_decklist[lv_race]].lv_card_id[lv_decklist_index]);
                    lib1_gf_GenerateCardToDiscard(lp_player, lib1_gv_player_collection[lp_player].lv_decklist[lv_race][lib1_gv_player_collection[lp_player].lv_default_decklist[lv_race]].lv_card_id[lv_decklist_index]);
                }
                else {
                    lib1_gf_GenerateCardtoTopofDeck(lp_player, lib1_gv_player_collection[lp_player].lv_decklist[lv_race][lib1_gv_player_collection[lp_player].lv_default_decklist[lv_race]].lv_card_id[lv_decklist_index]);
                    lib1_gf_GenerateCardtoTopofDeck(lp_player, lib1_gv_player_collection[lp_player].lv_decklist[lv_race][lib1_gv_player_collection[lp_player].lv_default_decklist[lv_race]].lv_card_id[lv_decklist_index]);
                }
            }
            else if ((lib1_gv_player_collection[lp_player].lv_decklist[lv_race][lib1_gv_player_collection[lp_player].lv_default_decklist[lv_race]].lv_count[lv_decklist_index] == 1)) {
                if ((lib1_gv_card[lib1_gv_player_collection[lp_player].lv_decklist[lv_race][lib1_gv_player_collection[lp_player].lv_default_decklist[lv_race]].lv_card_id[lv_decklist_index]].lv_buried == true)) {
                    lib1_gf_GenerateCardToDiscard(lp_player, lib1_gv_player_collection[lp_player].lv_decklist[lv_race][lib1_gv_player_collection[lp_player].lv_default_decklist[lv_race]].lv_card_id[lv_decklist_index]);
                }
                else {
                    lib1_gf_GenerateCardtoTopofDeck(lp_player, lib1_gv_player_collection[lp_player].lv_decklist[lv_race][lib1_gv_player_collection[lp_player].lv_default_decklist[lv_race]].lv_card_id[lv_decklist_index]);
                }
            }
        }
    }
}

void lib1_gf_ShuffleDeck (int lp_player) {
    // Variable Declarations
    int lv_top_of_deck;
    int lv_i;
    int lv_j;
    lib1_gs_Card lv_card;
    int lv_index;

    // Automatic Variable Declarations
    int autoB85904A2_ae;
    const int autoB85904A2_ai = 1;
    const int autoD552D3E0_ae = lib1_gv_mAX_UNIT_TYPE_PER_CARD;
    const int autoD552D3E0_ai = 1;
    const int auto423ECCC1_ae = lib1_gv_eF_MAX;
    const int auto423ECCC1_ai = 1;
    const int auto7CFAEC7E_ae = lib1_gv_mAX_UNIT_TYPE_PER_CARD;
    const int auto7CFAEC7E_ai = 1;
    const int autoB58E2CFE_ae = lib1_gv_eF_MAX;
    const int autoB58E2CFE_ai = 1;
    const int auto543EEBDB_ae = lib1_gv_mAX_UNIT_TYPE_PER_CARD;
    const int auto543EEBDB_ai = 1;
    const int auto0138CD74_ae = lib1_gv_eF_MAX;
    const int auto0138CD74_ai = 1;

    // Variable Initialization
    lv_card.lv_id = -1;
    lv_card.lv_set = -1;
    lv_card.lv_race = -1;
    lv_card.lv_name = "";
    lv_card.lv_type = "";
    lv_card.lv_subtype = "";
    lv_card.lv_rarity = -1;
    lv_card.lv_sound = SoundLink("EditorDefaultSound", -1);
    lv_card.lv_base_text = "";
    lv_card.lv_default_text = "";
    lv_card.lv_transform = -1;
    lv_card.lv_ui.lv_size = 100;
    lv_card.lv_ui.lv_dialog = c_invalidDialogId;
    lv_card.lv_ui.lv_background = c_invalidDialogControlId;
    lv_card.lv_ui.lv_name_frame = c_invalidDialogControlId;
    lv_card.lv_ui.lv_name = c_invalidDialogControlId;
    lv_card.lv_ui.lv_image = c_invalidDialogControlId;
    lv_card.lv_ui.lv_image_frame = c_invalidDialogControlId;
    lv_card.lv_ui.lv_mineral_icon = c_invalidDialogControlId;
    lv_card.lv_ui.lv_mineral_cost = c_invalidDialogControlId;
    lv_card.lv_ui.lv_gas_icon = c_invalidDialogControlId;
    lv_card.lv_ui.lv_gas_cost = c_invalidDialogControlId;
    lv_card.lv_ui.lv_type = c_invalidDialogControlId;
    lv_card.lv_ui.lv_set_icon = c_invalidDialogControlId;
    lv_card.lv_ui.lv_text_frame = c_invalidDialogControlId;
    lv_card.lv_ui.lv_race_background = c_invalidDialogControlId;
    lv_card.lv_ui.lv_text = c_invalidDialogControlId;
    lv_card.lv_ui.lv_border = c_invalidDialogControlId;
    lv_card.lv_ui.lv_rarity_icon = c_invalidDialogControlId;
    lv_card.lv_ui.lv_selected_indicator = c_invalidDialogControlId;
    lv_card.lv_ui.lv_selected_indicator_planning = c_invalidDialogControlId;
    lv_card.lv_ui.lv_channel_indicator = c_invalidDialogControlId;

    // Implementation
    lv_top_of_deck = lib1_gf_TopofDeck(lp_player);
    autoB85904A2_ae = lv_top_of_deck;
    lv_i = 0;
    for ( ; ( (autoB85904A2_ai >= 0 && lv_i <= autoB85904A2_ae) || (autoB85904A2_ai < 0 && lv_i >= autoB85904A2_ae) ) ; lv_i += autoB85904A2_ai ) {
        lv_j = RandomInt(0, lv_i);
        lv_card.lv_default_effect = lib1_gv_player[lp_player].lv_deck.lv_card[lv_j].lv_default_effect;
        lv_card.lv_gas = lib1_gv_player[lp_player].lv_deck.lv_card[lv_j].lv_gas;
        lv_card.lv_gas_adjustment = lib1_gv_player[lp_player].lv_deck.lv_card[lv_j].lv_gas_adjustment;
        lv_card.lv_id = lib1_gv_player[lp_player].lv_deck.lv_card[lv_j].lv_id;
        lv_card.lv_image = lib1_gv_player[lp_player].lv_deck.lv_card[lv_j].lv_image;
        lv_card.lv_mineral = lib1_gv_player[lp_player].lv_deck.lv_card[lv_j].lv_mineral;
        lv_card.lv_mineral_adjustment = lib1_gv_player[lp_player].lv_deck.lv_card[lv_j].lv_mineral_adjustment;
        lv_card.lv_name = lib1_gv_player[lp_player].lv_deck.lv_card[lv_j].lv_name;
        lv_card.lv_race = lib1_gv_player[lp_player].lv_deck.lv_card[lv_j].lv_race;
        lv_card.lv_rarity = lib1_gv_player[lp_player].lv_deck.lv_card[lv_j].lv_rarity;
        lv_card.lv_rush = lib1_gv_player[lp_player].lv_deck.lv_card[lv_j].lv_rush;
        lv_card.lv_set = lib1_gv_player[lp_player].lv_deck.lv_card[lv_j].lv_set;
        lv_card.lv_sound = lib1_gv_player[lp_player].lv_deck.lv_card[lv_j].lv_sound;
        lv_card.lv_subtype = lib1_gv_player[lp_player].lv_deck.lv_card[lv_j].lv_subtype;
        lv_card.lv_base_text = lib1_gv_player[lp_player].lv_deck.lv_card[lv_j].lv_base_text;
        lv_card.lv_type = lib1_gv_player[lp_player].lv_deck.lv_card[lv_j].lv_type;
        lv_card.lv_delay = lib1_gv_player[lp_player].lv_deck.lv_card[lv_j].lv_delay;
        lv_card.lv_heroic = lib1_gv_player[lp_player].lv_deck.lv_card[lv_j].lv_heroic;
        lv_card.lv_transform = lib1_gv_player[lp_player].lv_deck.lv_card[lv_j].lv_transform;
        lv_card.lv_detection = lib1_gv_player[lp_player].lv_deck.lv_card[lv_j].lv_detection;
        lv_card.lv_stream = lib1_gv_player[lp_player].lv_deck.lv_card[lv_j].lv_stream;
        lv_card.lv_channel = lib1_gv_player[lp_player].lv_deck.lv_card[lv_j].lv_channel;
        lv_index = 0;
        for ( ; ( (autoD552D3E0_ai >= 0 && lv_index <= autoD552D3E0_ae) || (autoD552D3E0_ai < 0 && lv_index >= autoD552D3E0_ae) ) ; lv_index += autoD552D3E0_ai ) {
            lv_card.lv_unit_count[lv_index] = lib1_gv_player[lp_player].lv_deck.lv_card[lv_j].lv_unit_count[lv_index];
            lv_card.lv_unit_type[lv_index] = lib1_gv_player[lp_player].lv_deck.lv_card[lv_j].lv_unit_type[lv_index];
        }
        lv_index = 0;
        for ( ; ( (auto423ECCC1_ai >= 0 && lv_index <= auto423ECCC1_ae) || (auto423ECCC1_ai < 0 && lv_index >= auto423ECCC1_ae) ) ; lv_index += auto423ECCC1_ai ) {
            lv_card.lv_effect[lv_index] = lib1_gv_player[lp_player].lv_deck.lv_card[lv_j].lv_effect[lv_index];
        }
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_j].lv_default_effect = lib1_gv_player[lp_player].lv_deck.lv_card[lv_i].lv_default_effect;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_j].lv_gas = lib1_gv_player[lp_player].lv_deck.lv_card[lv_i].lv_gas;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_j].lv_gas_adjustment = lib1_gv_player[lp_player].lv_deck.lv_card[lv_i].lv_gas_adjustment;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_j].lv_id = lib1_gv_player[lp_player].lv_deck.lv_card[lv_i].lv_id;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_j].lv_image = lib1_gv_player[lp_player].lv_deck.lv_card[lv_i].lv_image;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_j].lv_mineral = lib1_gv_player[lp_player].lv_deck.lv_card[lv_i].lv_mineral;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_j].lv_mineral_adjustment = lib1_gv_player[lp_player].lv_deck.lv_card[lv_i].lv_mineral_adjustment;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_j].lv_name = lib1_gv_player[lp_player].lv_deck.lv_card[lv_i].lv_name;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_j].lv_race = lib1_gv_player[lp_player].lv_deck.lv_card[lv_i].lv_race;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_j].lv_rarity = lib1_gv_player[lp_player].lv_deck.lv_card[lv_i].lv_rarity;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_j].lv_rush = lib1_gv_player[lp_player].lv_deck.lv_card[lv_i].lv_rush;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_j].lv_set = lib1_gv_player[lp_player].lv_deck.lv_card[lv_i].lv_set;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_j].lv_sound = lib1_gv_player[lp_player].lv_deck.lv_card[lv_i].lv_sound;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_j].lv_subtype = lib1_gv_player[lp_player].lv_deck.lv_card[lv_i].lv_subtype;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_j].lv_base_text = lib1_gv_player[lp_player].lv_deck.lv_card[lv_i].lv_base_text;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_j].lv_type = lib1_gv_player[lp_player].lv_deck.lv_card[lv_i].lv_type;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_j].lv_delay = lib1_gv_player[lp_player].lv_deck.lv_card[lv_i].lv_delay;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_j].lv_heroic = lib1_gv_player[lp_player].lv_deck.lv_card[lv_i].lv_heroic;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_j].lv_transform = lib1_gv_player[lp_player].lv_deck.lv_card[lv_i].lv_transform;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_j].lv_detection = lib1_gv_player[lp_player].lv_deck.lv_card[lv_i].lv_detection;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_j].lv_stream = lib1_gv_player[lp_player].lv_deck.lv_card[lv_i].lv_stream;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_j].lv_channel = lib1_gv_player[lp_player].lv_deck.lv_card[lv_i].lv_channel;
        lv_index = 0;
        for ( ; ( (auto7CFAEC7E_ai >= 0 && lv_index <= auto7CFAEC7E_ae) || (auto7CFAEC7E_ai < 0 && lv_index >= auto7CFAEC7E_ae) ) ; lv_index += auto7CFAEC7E_ai ) {
            lib1_gv_player[lp_player].lv_deck.lv_card[lv_j].lv_unit_count[lv_index] = lib1_gv_player[lp_player].lv_deck.lv_card[lv_i].lv_unit_count[lv_index];
            lib1_gv_player[lp_player].lv_deck.lv_card[lv_j].lv_unit_type[lv_index] = lib1_gv_player[lp_player].lv_deck.lv_card[lv_i].lv_unit_type[lv_index];
        }
        lv_index = 0;
        for ( ; ( (autoB58E2CFE_ai >= 0 && lv_index <= autoB58E2CFE_ae) || (autoB58E2CFE_ai < 0 && lv_index >= autoB58E2CFE_ae) ) ; lv_index += autoB58E2CFE_ai ) {
            lib1_gv_player[lp_player].lv_deck.lv_card[lv_j].lv_effect[lv_index] = lib1_gv_player[lp_player].lv_deck.lv_card[lv_i].lv_effect[lv_index];
        }
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_i].lv_default_effect = lv_card.lv_default_effect;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_i].lv_gas = lv_card.lv_gas;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_i].lv_gas_adjustment = lv_card.lv_gas_adjustment;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_i].lv_id = lv_card.lv_id;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_i].lv_image = lv_card.lv_image;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_i].lv_mineral = lv_card.lv_mineral;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_i].lv_mineral_adjustment = lv_card.lv_mineral_adjustment;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_i].lv_name = lv_card.lv_name;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_i].lv_race = lv_card.lv_race;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_i].lv_rarity = lv_card.lv_rarity;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_i].lv_rush = lv_card.lv_rush;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_i].lv_set = lv_card.lv_set;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_i].lv_sound = lv_card.lv_sound;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_i].lv_subtype = lv_card.lv_subtype;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_i].lv_base_text = lv_card.lv_base_text;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_i].lv_type = lv_card.lv_type;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_i].lv_delay = lv_card.lv_delay;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_i].lv_heroic = lv_card.lv_heroic;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_i].lv_transform = lv_card.lv_transform;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_i].lv_detection = lv_card.lv_detection;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_i].lv_stream = lv_card.lv_stream;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_i].lv_channel = lv_card.lv_channel;
        lv_index = 0;
        for ( ; ( (auto543EEBDB_ai >= 0 && lv_index <= auto543EEBDB_ae) || (auto543EEBDB_ai < 0 && lv_index >= auto543EEBDB_ae) ) ; lv_index += auto543EEBDB_ai ) {
            lib1_gv_player[lp_player].lv_deck.lv_card[lv_i].lv_unit_count[lv_index] = lv_card.lv_unit_count[lv_index];
            lib1_gv_player[lp_player].lv_deck.lv_card[lv_i].lv_unit_type[lv_index] = lv_card.lv_unit_type[lv_index];
        }
        lv_index = 0;
        for ( ; ( (auto0138CD74_ai >= 0 && lv_index <= auto0138CD74_ae) || (auto0138CD74_ai < 0 && lv_index >= auto0138CD74_ae) ) ; lv_index += auto0138CD74_ai ) {
            lib1_gv_player[lp_player].lv_deck.lv_card[lv_i].lv_effect[lv_index] = lv_card.lv_effect[lv_index];
        }
    }
}

bool lib1_gf_PlayerHasCardAtDiscardIndex (int lp_player, int lp_discard_index) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_discard_index < 0) || (lp_discard_index > lib1_gv_dISCARD_LIMIT) || (lib1_gv_player[lp_player].lv_new_discard.lv_card[lp_discard_index].lv_id < 0))) {
        return false;
    }
    else {
        return true;
    }
}

int lib1_gf_FirstEmptyDiscardSlot (int lp_player) {
    // Variable Declarations
    int lv_discard_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while ((lib1_gf_PlayerHasCardAtDiscardIndex(lp_player, lv_discard_index) == true)) {
        lv_discard_index = (lv_discard_index + 1);
    }
    return lv_discard_index;
}

int lib1_gf_TopofDiscard (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return (lib1_gf_FirstEmptyDiscardSlot(lp_player) - 1);
}

int lib1_gf_RandomDiscardCardWithType (int lp_player, string lp_type) {
    // Variable Declarations
    int lv_discard_index;

    // Automatic Variable Declarations
    const int auto1C0138AB_ae = lib1_gv_dISCARD_LIMIT;
    const int auto1C0138AB_ai = 1;

    // Variable Initialization

    // Implementation
    lib1_gf_ShuffleDiscard(lp_player);
    lv_discard_index = 0;
    for ( ; ( (auto1C0138AB_ai >= 0 && lv_discard_index <= auto1C0138AB_ae) || (auto1C0138AB_ai < 0 && lv_discard_index >= auto1C0138AB_ae) ) ; lv_discard_index += auto1C0138AB_ai ) {
        if ((lib1_gf_PlayerHasCardAtDiscardIndex(lp_player, lv_discard_index) == true)) {
            if ((lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_index].lv_type == lp_type)) {
                return lv_discard_index;
            }

        }
        else {
            return -1;
        }
    }
    return -1;
}

int lib1_gf_RandomDiscardCardWithBuried (int lp_player) {
    // Variable Declarations
    int lv_discard_index;

    // Automatic Variable Declarations
    const int autoA0606DD8_ae = lib1_gv_dISCARD_LIMIT;
    const int autoA0606DD8_ai = 1;

    // Variable Initialization

    // Implementation
    lib1_gf_ShuffleDiscard(lp_player);
    lv_discard_index = 0;
    for ( ; ( (autoA0606DD8_ai >= 0 && lv_discard_index <= autoA0606DD8_ae) || (autoA0606DD8_ai < 0 && lv_discard_index >= autoA0606DD8_ae) ) ; lv_discard_index += autoA0606DD8_ai ) {
        if ((lib1_gf_PlayerHasCardAtDiscardIndex(lp_player, lv_discard_index) == true)) {
            if ((lib1_gv_card[lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_index].lv_id].lv_buried == true)) {
                return lv_discard_index;
            }

        }
        else {
            return -1;
        }
    }
    return -1;
}

void lib1_gf_ShuffleDiscard (int lp_player) {
    // Variable Declarations
    int lv_top_of_discard;
    int lv_i;
    int lv_j;
    lib1_gs_Card lv_card;
    int lv_card_id;
    int lv_index;

    // Automatic Variable Declarations
    int auto5D780772_ae;
    const int auto5D780772_ai = 1;
    const int auto77EF9F94_ae = lib1_gv_mAX_UNIT_TYPE_PER_CARD;
    const int auto77EF9F94_ai = 1;
    const int auto77CA5A31_ae = lib1_gv_eF_MAX;
    const int auto77CA5A31_ai = 1;
    const int autoC83D37F8_ae = lib1_gv_mAX_UNIT_TYPE_PER_CARD;
    const int autoC83D37F8_ai = 1;
    const int auto7475BF0C_ae = lib1_gv_eF_MAX;
    const int auto7475BF0C_ai = 1;
    const int auto3212FD75_ae = lib1_gv_mAX_UNIT_TYPE_PER_CARD;
    const int auto3212FD75_ai = 1;
    const int auto8565203A_ae = lib1_gv_eF_MAX;
    const int auto8565203A_ai = 1;

    // Variable Initialization
    lv_card.lv_id = -1;
    lv_card.lv_set = -1;
    lv_card.lv_race = -1;
    lv_card.lv_name = "";
    lv_card.lv_type = "";
    lv_card.lv_subtype = "";
    lv_card.lv_rarity = -1;
    lv_card.lv_sound = SoundLink("EditorDefaultSound", -1);
    lv_card.lv_base_text = "";
    lv_card.lv_default_text = "";
    lv_card.lv_transform = -1;
    lv_card.lv_ui.lv_size = 100;
    lv_card.lv_ui.lv_dialog = c_invalidDialogId;
    lv_card.lv_ui.lv_background = c_invalidDialogControlId;
    lv_card.lv_ui.lv_name_frame = c_invalidDialogControlId;
    lv_card.lv_ui.lv_name = c_invalidDialogControlId;
    lv_card.lv_ui.lv_image = c_invalidDialogControlId;
    lv_card.lv_ui.lv_image_frame = c_invalidDialogControlId;
    lv_card.lv_ui.lv_mineral_icon = c_invalidDialogControlId;
    lv_card.lv_ui.lv_mineral_cost = c_invalidDialogControlId;
    lv_card.lv_ui.lv_gas_icon = c_invalidDialogControlId;
    lv_card.lv_ui.lv_gas_cost = c_invalidDialogControlId;
    lv_card.lv_ui.lv_type = c_invalidDialogControlId;
    lv_card.lv_ui.lv_set_icon = c_invalidDialogControlId;
    lv_card.lv_ui.lv_text_frame = c_invalidDialogControlId;
    lv_card.lv_ui.lv_race_background = c_invalidDialogControlId;
    lv_card.lv_ui.lv_text = c_invalidDialogControlId;
    lv_card.lv_ui.lv_border = c_invalidDialogControlId;
    lv_card.lv_ui.lv_rarity_icon = c_invalidDialogControlId;
    lv_card.lv_ui.lv_selected_indicator = c_invalidDialogControlId;
    lv_card.lv_ui.lv_selected_indicator_planning = c_invalidDialogControlId;
    lv_card.lv_ui.lv_channel_indicator = c_invalidDialogControlId;

    // Implementation
    lv_top_of_discard = lib1_gf_TopofDiscard(lp_player);
    auto5D780772_ae = lv_top_of_discard;
    lv_i = 0;
    for ( ; ( (auto5D780772_ai >= 0 && lv_i <= auto5D780772_ae) || (auto5D780772_ai < 0 && lv_i >= auto5D780772_ae) ) ; lv_i += auto5D780772_ai ) {
        lv_j = RandomInt(0, lv_i);
        lv_card.lv_default_effect = lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_j].lv_default_effect;
        lv_card.lv_gas = lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_j].lv_gas;
        lv_card.lv_gas_adjustment = lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_j].lv_gas_adjustment;
        lv_card.lv_id = lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_j].lv_id;
        lv_card.lv_image = lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_j].lv_image;
        lv_card.lv_mineral = lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_j].lv_mineral;
        lv_card.lv_mineral_adjustment = lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_j].lv_mineral_adjustment;
        lv_card.lv_name = lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_j].lv_name;
        lv_card.lv_race = lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_j].lv_race;
        lv_card.lv_rarity = lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_j].lv_rarity;
        lv_card.lv_rush = lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_j].lv_rush;
        lv_card.lv_set = lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_j].lv_set;
        lv_card.lv_sound = lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_j].lv_sound;
        lv_card.lv_subtype = lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_j].lv_subtype;
        lv_card.lv_base_text = lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_j].lv_base_text;
        lv_card.lv_type = lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_j].lv_type;
        lv_card.lv_delay = lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_j].lv_delay;
        lv_card.lv_heroic = lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_j].lv_heroic;
        lv_card.lv_transform = lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_j].lv_transform;
        lv_card.lv_detection = lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_j].lv_detection;
        lv_card.lv_stream = lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_j].lv_stream;
        lv_card.lv_channel = lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_j].lv_channel;
        lv_index = 0;
        for ( ; ( (auto77EF9F94_ai >= 0 && lv_index <= auto77EF9F94_ae) || (auto77EF9F94_ai < 0 && lv_index >= auto77EF9F94_ae) ) ; lv_index += auto77EF9F94_ai ) {
            lv_card.lv_unit_count[lv_index] = lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_j].lv_unit_count[lv_index];
            lv_card.lv_unit_type[lv_index] = lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_j].lv_unit_type[lv_index];
        }
        lv_index = 0;
        for ( ; ( (auto77CA5A31_ai >= 0 && lv_index <= auto77CA5A31_ae) || (auto77CA5A31_ai < 0 && lv_index >= auto77CA5A31_ae) ) ; lv_index += auto77CA5A31_ai ) {
            lv_card.lv_effect[lv_index] = lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_j].lv_effect[lv_index];
        }
        lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_j].lv_default_effect = lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_i].lv_default_effect;
        lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_j].lv_gas = lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_i].lv_gas;
        lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_j].lv_gas_adjustment = lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_i].lv_gas_adjustment;
        lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_j].lv_id = lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_i].lv_id;
        lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_j].lv_image = lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_i].lv_image;
        lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_j].lv_mineral = lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_i].lv_mineral;
        lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_j].lv_mineral_adjustment = lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_i].lv_mineral_adjustment;
        lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_j].lv_name = lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_i].lv_name;
        lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_j].lv_race = lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_i].lv_race;
        lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_j].lv_rarity = lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_i].lv_rarity;
        lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_j].lv_rush = lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_i].lv_rush;
        lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_j].lv_set = lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_i].lv_set;
        lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_j].lv_sound = lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_i].lv_sound;
        lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_j].lv_subtype = lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_i].lv_subtype;
        lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_j].lv_base_text = lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_i].lv_base_text;
        lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_j].lv_type = lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_i].lv_type;
        lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_j].lv_delay = lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_i].lv_delay;
        lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_j].lv_heroic = lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_i].lv_heroic;
        lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_j].lv_transform = lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_i].lv_transform;
        lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_j].lv_detection = lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_i].lv_detection;
        lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_j].lv_stream = lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_i].lv_stream;
        lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_j].lv_channel = lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_i].lv_channel;
        lv_index = 0;
        for ( ; ( (autoC83D37F8_ai >= 0 && lv_index <= autoC83D37F8_ae) || (autoC83D37F8_ai < 0 && lv_index >= autoC83D37F8_ae) ) ; lv_index += autoC83D37F8_ai ) {
            lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_j].lv_unit_count[lv_index] = lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_i].lv_unit_count[lv_index];
            lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_j].lv_unit_type[lv_index] = lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_i].lv_unit_type[lv_index];
        }
        lv_index = 0;
        for ( ; ( (auto7475BF0C_ai >= 0 && lv_index <= auto7475BF0C_ae) || (auto7475BF0C_ai < 0 && lv_index >= auto7475BF0C_ae) ) ; lv_index += auto7475BF0C_ai ) {
            lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_j].lv_effect[lv_index] = lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_i].lv_effect[lv_index];
        }
        lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_i].lv_default_effect = lv_card.lv_default_effect;
        lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_i].lv_gas = lv_card.lv_gas;
        lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_i].lv_gas_adjustment = lv_card.lv_gas_adjustment;
        lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_i].lv_id = lv_card.lv_id;
        lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_i].lv_image = lv_card.lv_image;
        lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_i].lv_mineral = lv_card.lv_mineral;
        lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_i].lv_mineral_adjustment = lv_card.lv_mineral_adjustment;
        lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_i].lv_name = lv_card.lv_name;
        lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_i].lv_race = lv_card.lv_race;
        lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_i].lv_rarity = lv_card.lv_rarity;
        lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_i].lv_rush = lv_card.lv_rush;
        lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_i].lv_set = lv_card.lv_set;
        lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_i].lv_sound = lv_card.lv_sound;
        lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_i].lv_subtype = lv_card.lv_subtype;
        lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_i].lv_base_text = lv_card.lv_base_text;
        lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_i].lv_type = lv_card.lv_type;
        lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_i].lv_delay = lv_card.lv_delay;
        lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_i].lv_heroic = lv_card.lv_heroic;
        lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_i].lv_transform = lv_card.lv_transform;
        lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_i].lv_detection = lv_card.lv_detection;
        lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_i].lv_stream = lv_card.lv_stream;
        lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_i].lv_channel = lv_card.lv_channel;
        lv_index = 0;
        for ( ; ( (auto3212FD75_ai >= 0 && lv_index <= auto3212FD75_ae) || (auto3212FD75_ai < 0 && lv_index >= auto3212FD75_ae) ) ; lv_index += auto3212FD75_ai ) {
            lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_i].lv_unit_count[lv_index] = lv_card.lv_unit_count[lv_index];
            lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_i].lv_unit_type[lv_index] = lv_card.lv_unit_type[lv_index];
        }
        lv_index = 0;
        for ( ; ( (auto8565203A_ai >= 0 && lv_index <= auto8565203A_ae) || (auto8565203A_ai < 0 && lv_index >= auto8565203A_ae) ) ; lv_index += auto8565203A_ai ) {
            lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_i].lv_effect[lv_index] = lv_card.lv_effect[lv_index];
        }
    }
}

int lib1_gf_MaxMineralIncome (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return (lib1_gv_player[lp_player].lv_resources.lv_max_mineral_income + UnitGroupCount(lib1_gv_psi_emitter_units, c_unitCountAlive));
}

int lib1_gf_MineralIncome (int lp_player) {
    // Variable Declarations
    int lv_income;
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    return MinI(lib1_gv_mINERAL_LIMIT, lib1_gv_player[lp_player].lv_resources.lv_mineral_income);
}

int lib1_gf_MaxGasIncome (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return MinI(lib1_gv_gAS_LIMIT, (lib1_gv_player[lp_player].lv_resources.lv_max_gas_income + UnitGroupCount(UnitGroup("Refinery", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterDazed - 32))), 0), c_unitCountAlive) + UnitGroupCount(UnitGroup("Assimilator", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterDazed - 32))), 0), c_unitCountAlive) + UnitGroupCount(UnitGroup("Extractor", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterDazed - 32))), 0), c_unitCountAlive)));
}

int lib1_gf_GasIncome (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return lib1_gv_player[lp_player].lv_resources.lv_gas_income;
}

int lib1_gf_MineralsSpent (int lp_player) {
    // Variable Declarations
    int lv_upkeep;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((UnitGroupCount(UnitGroup("RoboticsBay", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterDazed - 32))), 0), c_unitCountAlive) >= 1)) {
        lv_upkeep = 0;
    }
    else {
        lv_upkeep = TechTreeBehaviorCount(lp_player, "MineralUpkeep", c_techCountQueuedOrBetter);
    }
    lv_upkeep = (lv_upkeep + UnitGroupCount(UnitGroupFilterAlliance(UnitGroup("PsiDisruptor", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterDazed - 32))), 0), lp_player, c_unitAllianceEnemy, 0), c_unitCountAlive));
    return (lib1_gv_player[lp_player].lv_resources.lv_minerals_used + lv_upkeep);
}

int lib1_gf_MineralsSpentByPsiDisruptor (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return UnitGroupCount(UnitGroupFilterAlliance(UnitGroup("PsiDisruptor", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterDazed - 32))), 0), lp_player, c_unitAllianceEnemy, 0), c_unitCountAlive);
}

int lib1_gf_GasSpent (int lp_player) {
    // Variable Declarations
    int lv_upkeep;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((UnitGroupCount(UnitGroup("RoboticsBay", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterDazed - 32))), 0), c_unitCountAlive) >= 1)) {
        lv_upkeep = 0;
    }
    else {
        lv_upkeep = TechTreeBehaviorCount(lp_player, "GasUpkeep", c_techCountQueuedOrBetter);
    }
    return (lib1_gv_player[lp_player].lv_resources.lv_gas_used + lv_upkeep);
}

int lib1_gf_MineralsRemaining (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return (lib1_gf_MineralIncome(lp_player) - lib1_gf_MineralsSpent(lp_player));
}

int lib1_gf_GasRemaining (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return (lib1_gf_GasIncome(lp_player) - lib1_gf_GasSpent(lp_player));
}

bool lib1_gf_CardLegaltoPlay (int lp_player, int lp_mineral, int lp_gas, int lp_card_id) {
    // Automatic Variable Declarations
    // Implementation
    if ((((lp_mineral + lib1_gf_MineralsSpent(lp_player)) <= lib1_gf_MineralIncome(lp_player)) || (lp_mineral <= 0)) && (((lp_gas + lib1_gf_GasSpent(lp_player)) <= lib1_gf_GasIncome(lp_player)) || (lp_gas <= 0)) && ((lp_card_id != lib1_gf_GetCardIDByName("Exiled Ones")) || (lib1_gf_ExiledOnesLegalToPlay(lp_player) == true)) && (((lp_card_id != lib1_gf_GetCardIDByName("Feral Zerglings")) && (lp_card_id != lib1_gf_GetCardIDByName("Feral Ultralisk"))) || (UnitGroupCount(UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter((1 << c_targetFilterCanHaveEnergy), 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
        return true;
    }
    else {
        return false;
    }
}

bool lib1_gf_CardAffordabletoPlay (int lp_player, int lp_mineral, int lp_gas, int lp_card_id) {
    // Automatic Variable Declarations
    // Implementation
    if ((((lp_mineral + lib1_gf_MineralsSpent(lp_player)) <= lib1_gf_MineralIncome(lp_player)) || (lp_mineral <= 0)) && (((lp_gas + lib1_gf_GasSpent(lp_player)) <= lib1_gf_GasIncome(lp_player)) || (lp_gas <= 0))) {
        return true;
    }
    else {
        return false;
    }
}

void lib1_gf_ReduceMineralIncome (int lp_player, int lp_amount) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gv_player[lp_player].lv_resources.lv_mineral_income = MaxI((lib1_gv_player[lp_player].lv_resources.lv_mineral_income - lp_amount), 0);
}

void lib1_gf_ReduceGasIncome (int lp_player, int lp_amount) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gv_player[lp_player].lv_resources.lv_gas_income = MaxI((lib1_gv_player[lp_player].lv_resources.lv_gas_income - lp_amount), 0);
}

bool lib1_gf_AllCostsEnabled (int lp_player) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto33192831_ae = lib1_gv_mAX_COST_FILTER_INDEX;
    const int auto33192831_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = 0;
    for ( ; ( (auto33192831_ai >= 0 && lv_index <= auto33192831_ae) || (auto33192831_ai < 0 && lv_index >= auto33192831_ae) ) ; lv_index += auto33192831_ai ) {
        if ((lib1_gv_player_collection[lp_player].lv_filter.lv_total_cost[lv_index] == false)) {
            return false;
        }

    }
    return true;
}

void lib1_gf_AddCardtoDecklist (int lp_player, int lp_race, int lp_decklist_id, int lp_card_id) {
    // Variable Declarations
    int lv_insert_candidate;
    int lv_deck_index;

    // Automatic Variable Declarations
    const int auto11F356EA_ae = lib1_gv_dECKLIST_LIMIT;
    const int auto11F356EA_ai = 1;
    int auto0C4FAD37_ae;
    const int auto0C4FAD37_ai = -1;

    // Variable Initialization

    // Implementation
    lv_insert_candidate = 0;
    for ( ; ( (auto11F356EA_ai >= 0 && lv_insert_candidate <= auto11F356EA_ae) || (auto11F356EA_ai < 0 && lv_insert_candidate >= auto11F356EA_ae) ) ; lv_insert_candidate += auto11F356EA_ai ) {
        if ((lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist_id].lv_card_id[lv_insert_candidate] == lp_card_id)) {
            lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist_id].lv_count[lv_insert_candidate] = MinI((lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist_id].lv_count[lv_insert_candidate] + 1), lib1_gf_CardOwnedCountCapped(lp_player, lp_card_id));
            break;
        }
        else if ((lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist_id].lv_card_id[lv_insert_candidate] == -1)) {
            lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist_id].lv_card_id[lv_insert_candidate] = lp_card_id;
            lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist_id].lv_count[lv_insert_candidate] = 1;
            break;
        }
        else if ((lib1_gf_CardsInOrder(lp_card_id, lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist_id].lv_card_id[lv_insert_candidate]) == true)) {
            auto0C4FAD37_ae = lv_insert_candidate;
            lv_deck_index = (lib1_gv_dECKLIST_LIMIT - 1);
            for ( ; ( (auto0C4FAD37_ai >= 0 && lv_deck_index <= auto0C4FAD37_ae) || (auto0C4FAD37_ai < 0 && lv_deck_index >= auto0C4FAD37_ae) ) ; lv_deck_index += auto0C4FAD37_ai ) {
                lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist_id].lv_card_id[(lv_deck_index + 1)] = lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist_id].lv_card_id[lv_deck_index];
                lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist_id].lv_count[(lv_deck_index + 1)] = lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist_id].lv_count[lv_deck_index];
            }
            lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist_id].lv_card_id[lv_insert_candidate] = lp_card_id;
            lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist_id].lv_count[lv_insert_candidate] = 1;
            break;
        }
    }
}

void lib1_gf_RemoveCardfromDecklist (int lp_player, int lp_race, int lp_decklist_id, int lp_card_id) {
    // Variable Declarations
    int lv_removal_candidate;
    int lv_deck_index;

    // Automatic Variable Declarations
    const int autoB14ECE13_ae = lib1_gv_dECKLIST_LIMIT;
    const int autoB14ECE13_ai = 1;
    int autoA2756C14_ae;
    const int autoA2756C14_ai = 1;

    // Variable Initialization

    // Implementation
    lv_removal_candidate = 0;
    for ( ; ( (autoB14ECE13_ai >= 0 && lv_removal_candidate <= autoB14ECE13_ae) || (autoB14ECE13_ai < 0 && lv_removal_candidate >= autoB14ECE13_ae) ) ; lv_removal_candidate += autoB14ECE13_ai ) {
        if ((lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist_id].lv_card_id[lv_removal_candidate] == lp_card_id)) {
            lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist_id].lv_count[lv_removal_candidate] = MaxI((lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist_id].lv_count[lv_removal_candidate] - 1), 0);
            if ((lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist_id].lv_count[lv_removal_candidate] == 0)) {
                if ((lv_removal_candidate <= (lib1_gv_dECKLIST_LIMIT - 1))) {
                    autoA2756C14_ae = (lib1_gv_dECKLIST_LIMIT - 1);
                    lv_deck_index = lv_removal_candidate;
                    for ( ; ( (autoA2756C14_ai >= 0 && lv_deck_index <= autoA2756C14_ae) || (autoA2756C14_ai < 0 && lv_deck_index >= autoA2756C14_ae) ) ; lv_deck_index += autoA2756C14_ai ) {
                        lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist_id].lv_count[lv_deck_index] = lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist_id].lv_count[(lv_deck_index + 1)];
                        lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist_id].lv_card_id[lv_deck_index] = lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist_id].lv_card_id[(lv_deck_index + 1)];
                    }
                }

                lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist_id].lv_count[lib1_gv_dECKLIST_LIMIT] = 0;
                lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist_id].lv_card_id[lib1_gv_dECKLIST_LIMIT] = -1;
            }

            break;
        }

    }
}

bool lib1_gf_DecklistEmpty (int lp_player, int lp_race, int lp_decklist_id) {
    // Automatic Variable Declarations
    // Implementation
    if ((lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist_id].lv_card_id[0] == -1) && (lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist_id].lv_name == "")) {
        return true;
    }
    else {
        return false;
    }
}

int lib1_gf_CountinDecklist (int lp_player, int lp_race, int lp_decklist_id, int lp_card_id) {
    // Variable Declarations
    int lv_decklist_index;

    // Automatic Variable Declarations
    const int auto1BE0985C_ae = lib1_gv_dECKLIST_LIMIT;
    const int auto1BE0985C_ai = 1;

    // Variable Initialization

    // Implementation
    lv_decklist_index = 0;
    for ( ; ( (auto1BE0985C_ai >= 0 && lv_decklist_index <= auto1BE0985C_ae) || (auto1BE0985C_ai < 0 && lv_decklist_index >= auto1BE0985C_ae) ) ; lv_decklist_index += auto1BE0985C_ai ) {
        if ((lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist_id].lv_card_id[lv_decklist_index] == lp_card_id)) {
            return lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist_id].lv_count[lv_decklist_index];
        }

    }
    return 0;
}

int lib1_gf_MaxCountinAnyDecklist (int lp_player, int lp_race, int lp_card_id) {
    // Variable Declarations
    int lv_decklist_index;
    int lv_max_count;
    int lv_count;

    // Automatic Variable Declarations
    const int auto0C163CCD_ae = lib1_gv_dECKLIST_PER_RACE_LIMIT;
    const int auto0C163CCD_ai = 1;

    // Variable Initialization

    // Implementation
    lv_decklist_index = 0;
    for ( ; ( (auto0C163CCD_ai >= 0 && lv_decklist_index <= auto0C163CCD_ae) || (auto0C163CCD_ai < 0 && lv_decklist_index >= auto0C163CCD_ae) ) ; lv_decklist_index += auto0C163CCD_ai ) {
        lv_count = lib1_gf_CountinDecklist(lp_player, lp_race, lv_decklist_index, lp_card_id);
        if ((lv_count == 2)) {
            return lv_count;
        }
        else if ((lv_count > lv_max_count)) {
            lv_max_count = lv_count;
        }
    }
    return lv_max_count;
}

int lib1_gf_DecklistArrayLength (int lp_player, int lp_race, int lp_decklist_id) {
    // Variable Declarations
    int lv_decklist_index;
    int lv_count;

    // Automatic Variable Declarations
    const int autoD74A0B2C_ae = lib1_gv_dECKLIST_LIMIT;
    const int autoD74A0B2C_ai = 1;

    // Variable Initialization

    // Implementation
    lv_decklist_index = 0;
    for ( ; ( (autoD74A0B2C_ai >= 0 && lv_decklist_index <= autoD74A0B2C_ae) || (autoD74A0B2C_ai < 0 && lv_decklist_index >= autoD74A0B2C_ae) ) ; lv_decklist_index += autoD74A0B2C_ai ) {
        if ((lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist_id].lv_card_id[lv_decklist_index] >= 0)) {
            lv_count = (lv_count + 1);
        }

    }
    return lv_count;
}

int lib1_gf_DecklistTotalCardCount (int lp_player, int lp_race, int lp_decklist_id) {
    // Variable Declarations
    int lv_decklist_index;
    int lv_count;

    // Automatic Variable Declarations
    const int auto046DED1D_ae = lib1_gv_dECKLIST_LIMIT;
    const int auto046DED1D_ai = 1;

    // Variable Initialization

    // Implementation
    lv_decklist_index = 0;
    for ( ; ( (auto046DED1D_ai >= 0 && lv_decklist_index <= auto046DED1D_ae) || (auto046DED1D_ai < 0 && lv_decklist_index >= auto046DED1D_ae) ) ; lv_decklist_index += auto046DED1D_ai ) {
        lv_count = (lv_count + lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist_id].lv_count[lv_decklist_index]);
    }
    return lv_count;
}

bool lib1_gf_DecklistLegal (int lp_player, int lp_race, int lp_decklist_id) {
    // Variable Declarations
    int lv_deck_index;
    int lv_card_race;

    // Automatic Variable Declarations
    const int autoF4E12563_ae = lib1_gv_dECKLIST_LIMIT;
    const int autoF4E12563_ai = 1;

    // Variable Initialization

    // Implementation
    if ((lib1_gf_DecklistTotalCardCount(lp_player, lp_race, lp_decklist_id) != (lib1_gv_dECKLIST_LIMIT + 1))) {
        return false;
    }

    lv_deck_index = 0;
    for ( ; ( (autoF4E12563_ai >= 0 && lv_deck_index <= autoF4E12563_ae) || (autoF4E12563_ai < 0 && lv_deck_index >= autoF4E12563_ae) ) ; lv_deck_index += autoF4E12563_ai ) {
        if ((lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist_id].lv_card_id[lv_deck_index] >= 0) && (lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist_id].lv_count[lv_deck_index] > 0)) {
            lv_card_race = lib1_gv_card[lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist_id].lv_card_id[lv_deck_index]].lv_race;
            if ((((lp_race == lib1_gv_tERRAN) && (lv_card_race != lib1_gv_tERRAN) && (lv_card_race != lib1_gv_tERRAN_ZERG_UED) && (lv_card_race != lib1_gv_pROTOSS_TERRAN_FENIX) && (lv_card_race != lib1_gv_vOID)) || ((lp_race == lib1_gv_zERG) && (lv_card_race != lib1_gv_zERG) && (lv_card_race != lib1_gv_tERRAN_ZERG_UED) && (lv_card_race != lib1_gv_zERG_PROTOSS_KERRIGAN) && (lv_card_race != lib1_gv_vOID)) || ((lp_race == lib1_gv_pROTOSS) && (lv_card_race != lib1_gv_pROTOSS) && (lv_card_race != lib1_gv_pROTOSS_TERRAN_FENIX) && (lv_card_race != lib1_gv_zERG_PROTOSS_KERRIGAN) && (lv_card_race != lib1_gv_vOID)))) {
                return false;
            }
        }

    }
    return true;
}

int lib1_gf_CardOwnedCountCapped (int lp_player, int lp_card_id) {
    // Automatic Variable Declarations
    // Implementation
    if ((lib1_gv_card[lp_card_id].lv_rarity == lib1_gv_uNIQUE)) {
        return MinI(((lib1_gv_player_collection[lp_player].lv_starter[lp_card_id] + lib1_gv_player_collection[lp_player].lv_unpacked[lp_card_id] + lib1_gv_player_collection[lp_player].lv_bought[lp_card_id]) - lib1_gv_player_collection[lp_player].lv_sold[lp_card_id]), 1);
    }
    else {
        return MinI(((lib1_gv_player_collection[lp_player].lv_starter[lp_card_id] + lib1_gv_player_collection[lp_player].lv_unpacked[lp_card_id] + lib1_gv_player_collection[lp_player].lv_bought[lp_card_id]) - lib1_gv_player_collection[lp_player].lv_sold[lp_card_id]), 2);
    }
}

int lib1_gf_CardOwnedCountActual (int lp_player, int lp_card_id) {
    // Automatic Variable Declarations
    // Implementation
    return ((lib1_gv_player_collection[lp_player].lv_starter[lp_card_id] + lib1_gv_player_collection[lp_player].lv_unpacked[lp_card_id] + lib1_gv_player_collection[lp_player].lv_bought[lp_card_id]) - lib1_gv_player_collection[lp_player].lv_sold[lp_card_id]);
}

int lib1_gf_PlayerCredits (int lp_player) {
    // Variable Declarations
    int lv_credits;
    int lv_set_id;
    int lv_cosmetic_id;

    // Automatic Variable Declarations
    const int auto418CA174_ae = lib1_gv_mAX_SET_ID;
    const int auto418CA174_ai = 1;
    const int auto390DB2A4_ae = lib1_gv_tROPHY_LIMIT;
    const int auto390DB2A4_ai = 1;
    const int auto4DA26A46_ae = lib1_gv_pET_LIMIT;
    const int auto4DA26A46_ai = 1;
    const int auto4670AD1F_ae = lib1_gv_dECORATION_LIMIT;
    const int auto4670AD1F_ai = 1;

    // Variable Initialization

    // Implementation
    lv_credits = (lib1_gv_sTARTING_CREDITS + lib1_gv_player_collection[lp_player].lv_credits_earned);
    lv_credits = (lv_credits + lib1_gv_player_collection[lp_player].lv_special_credits);
    lv_credits = (lv_credits + lib1_gf_NewPlayerBonusCredits(lp_player));
    lv_set_id = 0;
    for ( ; ( (auto418CA174_ai >= 0 && lv_set_id <= auto418CA174_ae) || (auto418CA174_ai < 0 && lv_set_id >= auto418CA174_ae) ) ; lv_set_id += auto418CA174_ai ) {
        lv_credits = (lv_credits - (lib1_gv_player_collection[lp_player].lv_packs_opened[lv_set_id] * lib1_gv_set[lv_set_id].lv_price));
    }
    lv_cosmetic_id = 0;
    for ( ; ( (auto390DB2A4_ai >= 0 && lv_cosmetic_id <= auto390DB2A4_ae) || (auto390DB2A4_ai < 0 && lv_cosmetic_id >= auto390DB2A4_ae) ) ; lv_cosmetic_id += auto390DB2A4_ai ) {
        if ((lib1_gv_player_cosmetics[lp_player].lv_trophy_owned[lv_cosmetic_id] == true)) {
            lv_credits = (lv_credits - lib1_gv_cosmetic_trophy[lv_cosmetic_id].lv_cost);
        }

    }
    lv_cosmetic_id = 0;
    for ( ; ( (auto4DA26A46_ai >= 0 && lv_cosmetic_id <= auto4DA26A46_ae) || (auto4DA26A46_ai < 0 && lv_cosmetic_id >= auto4DA26A46_ae) ) ; lv_cosmetic_id += auto4DA26A46_ai ) {
        if ((lib1_gv_player_cosmetics[lp_player].lv_pet_owned[lv_cosmetic_id] == true)) {
            lv_credits = (lv_credits - lib1_gv_cosmetic_pet[lv_cosmetic_id].lv_cost);
        }

    }
    lv_cosmetic_id = 0;
    for ( ; ( (auto4670AD1F_ai >= 0 && lv_cosmetic_id <= auto4670AD1F_ae) || (auto4670AD1F_ai < 0 && lv_cosmetic_id >= auto4670AD1F_ae) ) ; lv_cosmetic_id += auto4670AD1F_ai ) {
        if ((lib1_gv_player_cosmetics[lp_player].lv_decoration_owned[lv_cosmetic_id] == true)) {
            lv_credits = (lv_credits - lib1_gv_cosmetic_decoration[lv_cosmetic_id].lv_cost);
        }

    }
    return lv_credits;
}

int lib1_gf_NewPlayerBonusCredits (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return (lib1_gv_nEW_PLAYER_BONUS_PER_GAME * MinI(lib1_gf_MaxNewPlayerBonusGames(lp_player), lib1_gf_CompletedGames(lp_player, false)));
}

int lib1_gf_PlayerEssence (int lp_player) {
    // Variable Declarations
    int lv_credits;
    int lv_set_id;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    return (lib1_gv_player_collection[lp_player].lv_essence_earned + lib1_gv_player_collection[lp_player].lv_bonus_essence);
}

void lib1_gf_CheckforSpecialCredits (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if (((PlayerHandle(lp_player) == "1-S2-1-7417629") || (PlayerHandle(lp_player) == "1-S2-1-9633665"))) {
        lib1_gv_player_collection[lp_player].lv_special_credits = 5000;
    }

    if (((PlayerHandle(lp_player) == "1-S2-1-724648"))) {
        lib1_gv_player_collection[lp_player].lv_special_credits = 8000;
    }

    if (((PlayerHandle(lp_player) == "1-S2-1-358714") || (PlayerHandle(lp_player) == "2-S2-1-7093593"))) {
        lib1_gv_player_collection[lp_player].lv_special_credits = 10000;
    }

    if (((PlayerHandle(lp_player) == "2-S2-1-5527704"))) {
        lib1_gv_player_collection[lp_player].lv_special_credits = 12000;
    }

    if (((PlayerHandle(lp_player) == "2-S2-1-1810289"))) {
        lib1_gv_player_collection[lp_player].lv_special_credits = 75000;
    }

}

void lib1_gf_AddCardtoStartingCollection (int lp_card_id, int lp_copies) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    const int auto3EAF895F_ae = 6;
    const int auto3EAF895F_ai = 1;

    // Variable Initialization

    // Implementation
    lv_player = 1;
    for ( ; ( (auto3EAF895F_ai >= 0 && lv_player <= auto3EAF895F_ae) || (auto3EAF895F_ai < 0 && lv_player >= auto3EAF895F_ae) ) ; lv_player += auto3EAF895F_ai ) {
        lib1_gv_player_collection[lv_player].lv_starter[lp_card_id] = lp_copies;
    }
}

int lib1_gf_GetTrophyIDByName (string lp_name) {
    // Variable Declarations
    int lv_id;

    // Automatic Variable Declarations
    const int auto3F66A4FB_ae = lib1_gv_tROPHY_LIMIT;
    const int auto3F66A4FB_ai = 1;

    // Variable Initialization

    // Implementation
    lv_id = 0;
    for ( ; ( (auto3F66A4FB_ai >= 0 && lv_id <= auto3F66A4FB_ae) || (auto3F66A4FB_ai < 0 && lv_id >= auto3F66A4FB_ae) ) ; lv_id += auto3F66A4FB_ai ) {
        if ((lib1_gv_cosmetic_trophy[lv_id].lv_name == lp_name)) {
            return lv_id;
        }

    }
    return -1;
}

void lib1_gf_DefineTrophyCosmetic (int lp_id, string lp_name, string lp_image, int lp_cost, bool lp_available, bool lp_exclusive) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gv_cosmetic_trophy[lp_id].lv_name = lp_name;
    lib1_gv_cosmetic_trophy[lp_id].lv_image = lp_image;
    lib1_gv_cosmetic_trophy[lp_id].lv_cost = lp_cost;
    lib1_gv_cosmetic_trophy[lp_id].lv_available = lp_available;
    lib1_gv_cosmetic_trophy[lp_id].lv_exclusive = lp_exclusive;
}

void lib1_gf_AddDoodadTypetoTrophyCosmetic (int lp_id, string lp_doodad_type) {
    // Variable Declarations
    int lv_doodad_index;

    // Automatic Variable Declarations
    const int auto55E65DD9_ae = lib1_gv_tROPHY_DOODAD_LIMIT;
    const int auto55E65DD9_ai = 1;

    // Variable Initialization

    // Implementation
    lv_doodad_index = 0;
    for ( ; ( (auto55E65DD9_ai >= 0 && lv_doodad_index <= auto55E65DD9_ae) || (auto55E65DD9_ai < 0 && lv_doodad_index >= auto55E65DD9_ae) ) ; lv_doodad_index += auto55E65DD9_ai ) {
        if ((lib1_gv_cosmetic_trophy[lp_id].lv_doodad_type[lv_doodad_index] == null)) {
            lib1_gv_cosmetic_trophy[lp_id].lv_doodad_type[lv_doodad_index] = lp_doodad_type;
            break;
        }

    }
}

int lib1_gf_VisibleTrophyCount (int lp_player) {
    // Variable Declarations
    int lv_id;
    int lv_count;

    // Automatic Variable Declarations
    const int auto9BEF55D4_ae = lib1_gv_tROPHY_LIMIT;
    const int auto9BEF55D4_ai = 1;

    // Variable Initialization

    // Implementation
    lv_id = 0;
    for ( ; ( (auto9BEF55D4_ai >= 0 && lv_id <= auto9BEF55D4_ae) || (auto9BEF55D4_ai < 0 && lv_id >= auto9BEF55D4_ae) ) ; lv_id += auto9BEF55D4_ai ) {
        if ((lib1_gv_cosmetic_trophy[lv_id].lv_available == true) && ((lib1_gv_cosmetic_trophy[lv_id].lv_exclusive == false) || (lib1_gv_player_cosmetics[lp_player].lv_trophy_owned[lv_id] == true))) {
            lv_count = (lv_count + 1);
        }

    }
    return lv_count;
}

int lib1_gf_GetPetIDByName (string lp_name) {
    // Variable Declarations
    int lv_id;

    // Automatic Variable Declarations
    const int auto38C47815_ae = lib1_gv_pET_LIMIT;
    const int auto38C47815_ai = 1;

    // Variable Initialization

    // Implementation
    lv_id = 0;
    for ( ; ( (auto38C47815_ai >= 0 && lv_id <= auto38C47815_ae) || (auto38C47815_ai < 0 && lv_id >= auto38C47815_ae) ) ; lv_id += auto38C47815_ai ) {
        if ((lib1_gv_cosmetic_pet[lv_id].lv_name == lp_name)) {
            return lv_id;
        }

    }
    return -1;
}

void lib1_gf_DefinePetCosmetic (int lp_id, string lp_name, string lp_image, int lp_cost, string lp_unit_type, bool lp_available, bool lp_exclusive) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gv_cosmetic_pet[lp_id].lv_name = lp_name;
    lib1_gv_cosmetic_pet[lp_id].lv_image = lp_image;
    lib1_gv_cosmetic_pet[lp_id].lv_cost = lp_cost;
    lib1_gv_cosmetic_pet[lp_id].lv_unit_type = lp_unit_type;
    lib1_gv_cosmetic_pet[lp_id].lv_available = lp_available;
    lib1_gv_cosmetic_pet[lp_id].lv_exclusive = lp_exclusive;
}

int lib1_gf_VisiblePetCount (int lp_player) {
    // Variable Declarations
    int lv_id;
    int lv_count;

    // Automatic Variable Declarations
    const int auto779F4C6E_ae = lib1_gv_pET_LIMIT;
    const int auto779F4C6E_ai = 1;

    // Variable Initialization

    // Implementation
    lv_id = 0;
    for ( ; ( (auto779F4C6E_ai >= 0 && lv_id <= auto779F4C6E_ae) || (auto779F4C6E_ai < 0 && lv_id >= auto779F4C6E_ae) ) ; lv_id += auto779F4C6E_ai ) {
        if ((lib1_gv_cosmetic_pet[lv_id].lv_available == true) && ((lib1_gv_cosmetic_pet[lv_id].lv_exclusive == false) || (lib1_gv_player_cosmetics[lp_player].lv_pet_owned[lv_id] == true))) {
            lv_count = (lv_count + 1);
        }

    }
    return lv_count;
}

bool lib1_gf_TeamCosmeticDecorationDisabled (int lp_cosmetic, int lp_team) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    playergroup autoA4ABCC76_g;

    // Variable Initialization

    // Implementation
    autoA4ABCC76_g = lib1_gv_team[lp_team];
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoA4ABCC76_g, lv_player);
        if (lv_player < 0) { break; }
        if ((lib1_gv_player_cosmetics[lv_player].lv_decoration_owned[lp_cosmetic] == true) && (lib1_gv_player_cosmetics[lv_player].lv_decoration_enabled[lp_cosmetic] == true)) {
            return false;
        }

    }
    return true;
}

int lib1_gf_GetDecorationIDByName (string lp_name) {
    // Variable Declarations
    int lv_id;

    // Automatic Variable Declarations
    const int auto90A637F3_ae = lib1_gv_dECORATION_LIMIT;
    const int auto90A637F3_ai = 1;

    // Variable Initialization

    // Implementation
    lv_id = 0;
    for ( ; ( (auto90A637F3_ai >= 0 && lv_id <= auto90A637F3_ae) || (auto90A637F3_ai < 0 && lv_id >= auto90A637F3_ae) ) ; lv_id += auto90A637F3_ai ) {
        if ((lib1_gv_cosmetic_decoration[lv_id].lv_name == lp_name)) {
            return lv_id;
        }

    }
    return -1;
}

void lib1_gf_DefineDecorationCosmetic (int lp_id, string lp_name, string lp_image, int lp_cost, bool lp_available, bool lp_exclusive) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gv_cosmetic_decoration[lp_id].lv_name = lp_name;
    lib1_gv_cosmetic_decoration[lp_id].lv_image = lp_image;
    lib1_gv_cosmetic_decoration[lp_id].lv_cost = lp_cost;
    lib1_gv_cosmetic_decoration[lp_id].lv_available = lp_available;
    lib1_gv_cosmetic_decoration[lp_id].lv_exclusive = lp_exclusive;
}

int lib1_gf_VisibleDecoration (int lp_player) {
    // Variable Declarations
    int lv_id;
    int lv_count;

    // Automatic Variable Declarations
    const int auto0D118D20_ae = lib1_gv_dECORATION_LIMIT;
    const int auto0D118D20_ai = 1;

    // Variable Initialization

    // Implementation
    lv_id = 0;
    for ( ; ( (auto0D118D20_ai >= 0 && lv_id <= auto0D118D20_ae) || (auto0D118D20_ai < 0 && lv_id >= auto0D118D20_ae) ) ; lv_id += auto0D118D20_ai ) {
        if ((lib1_gv_cosmetic_decoration[lv_id].lv_available == true) && ((lib1_gv_cosmetic_decoration[lv_id].lv_exclusive == false) || (lib1_gv_player_cosmetics[lp_player].lv_decoration_owned[lv_id] == true))) {
            lv_count = (lv_count + 1);
        }

    }
    return lv_count;
}

int lib1_gf_GetPlayerRaceID (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((PlayerRace(lp_player) == "Terr")) {
        return lib1_gv_tERRAN;
    }
    else if ((PlayerRace(lp_player) == "Zerg")) {
        return lib1_gv_zERG;
    }
    return lib1_gv_pROTOSS;
}

unit lib1_gf_PlayersXelnagaStructure (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return lib1_gv_keystone[lib1_gv_player[lp_player].lv_team];
}

playergroup lib1_gf_OpposingTeamofPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((lib1_gv_player[lp_player].lv_team == 0)) {
        return lib1_gv_team[1];
    }
    else {
        return lib1_gv_team[0];
    }
}

int lib1_gf_TotalGames (int lp_player, bool lp_include_reset) {
    // Variable Declarations
    int lv_race;
    int lv_mode;
    int lv_total_games;

    // Automatic Variable Declarations
    const int auto3227892E_ae = 2;
    const int auto3227892E_ai = 1;
    const int autoF78984A7_ae = lib1_gv_mAX_MODE_ID;
    const int autoF78984A7_ai = 1;

    // Variable Initialization

    // Implementation
    lv_race = 0;
    for ( ; ( (auto3227892E_ai >= 0 && lv_race <= auto3227892E_ae) || (auto3227892E_ai < 0 && lv_race >= auto3227892E_ae) ) ; lv_race += auto3227892E_ai ) {
        lv_mode = 0;
        for ( ; ( (autoF78984A7_ai >= 0 && lv_mode <= autoF78984A7_ae) || (autoF78984A7_ai < 0 && lv_mode >= autoF78984A7_ae) ) ; lv_mode += autoF78984A7_ai ) {
            lv_total_games = (lv_total_games + lib1_gv_player[lp_player].lv_wins[lv_race][lv_mode]);
            lv_total_games = (lv_total_games + lib1_gv_player[lp_player].lv_losses[lv_race][lv_mode]);
            lv_total_games = (lv_total_games + lib1_gv_player[lp_player].lv_quits[lv_race][lv_mode]);
            if ((lp_include_reset == true)) {
                lv_total_games = (lv_total_games - lib1_gv_player[lp_player].lv_wins_reset_point[lv_race][lv_mode]);
                lv_total_games = (lv_total_games - lib1_gv_player[lp_player].lv_losses_reset_point[lv_race][lv_mode]);
                lv_total_games = (lv_total_games - lib1_gv_player[lp_player].lv_quits_reset_point[lv_race][lv_mode]);
            }

        }
    }
    return lv_total_games;
}

int lib1_gf_CompletedGames (int lp_player, bool lp_include_reset) {
    // Variable Declarations
    int lv_race;
    int lv_mode;
    int lv_completed_games;

    // Automatic Variable Declarations
    const int autoE96D7412_ae = 2;
    const int autoE96D7412_ai = 1;
    const int autoFE462E98_ae = lib1_gv_mAX_MODE_ID;
    const int autoFE462E98_ai = 1;

    // Variable Initialization

    // Implementation
    lv_race = 0;
    for ( ; ( (autoE96D7412_ai >= 0 && lv_race <= autoE96D7412_ae) || (autoE96D7412_ai < 0 && lv_race >= autoE96D7412_ae) ) ; lv_race += autoE96D7412_ai ) {
        lv_mode = 0;
        for ( ; ( (autoFE462E98_ai >= 0 && lv_mode <= autoFE462E98_ae) || (autoFE462E98_ai < 0 && lv_mode >= autoFE462E98_ae) ) ; lv_mode += autoFE462E98_ai ) {
            lv_completed_games = (lv_completed_games + lib1_gv_player[lp_player].lv_wins[lv_race][lv_mode]);
            lv_completed_games = (lv_completed_games + lib1_gv_player[lp_player].lv_losses[lv_race][lv_mode]);
            if ((lp_include_reset == true)) {
                lv_completed_games = (lv_completed_games - lib1_gv_player[lp_player].lv_wins_reset_point[lv_race][lv_mode]);
                lv_completed_games = (lv_completed_games - lib1_gv_player[lp_player].lv_losses_reset_point[lv_race][lv_mode]);
            }

        }
    }
    return lv_completed_games;
}

bool lib1_gf_TutorialWon (int lp_player) {
    // Variable Declarations
    int lv_race;
    int lv_mode;
    int lv_total_games;

    // Automatic Variable Declarations
    const int auto169326AE_ae = 2;
    const int auto169326AE_ai = 1;

    // Variable Initialization

    // Implementation
    lv_race = 0;
    for ( ; ( (auto169326AE_ai >= 0 && lv_race <= auto169326AE_ae) || (auto169326AE_ai < 0 && lv_race >= auto169326AE_ae) ) ; lv_race += auto169326AE_ai ) {
        if ((lib1_gv_player[lp_player].lv_wins[lv_race][lib1_gv_tUTORIAL] >= 1)) {
            return true;
        }

    }
    return false;
}

int lib1_gf_TotalGamesForRace (int lp_player, int lp_race, bool lp_include_reset) {
    // Variable Declarations
    int lv_mode;
    int lv_total_games;

    // Automatic Variable Declarations
    const int auto4062800B_ae = lib1_gv_mAX_MODE_ID;
    const int auto4062800B_ai = 1;

    // Variable Initialization

    // Implementation
    lv_mode = 0;
    for ( ; ( (auto4062800B_ai >= 0 && lv_mode <= auto4062800B_ae) || (auto4062800B_ai < 0 && lv_mode >= auto4062800B_ae) ) ; lv_mode += auto4062800B_ai ) {
        lv_total_games = (lv_total_games + lib1_gv_player[lp_player].lv_wins[lp_race][lv_mode]);
        lv_total_games = (lv_total_games + lib1_gv_player[lp_player].lv_losses[lp_race][lv_mode]);
        lv_total_games = (lv_total_games + lib1_gv_player[lp_player].lv_quits[lp_race][lv_mode]);
        if ((lp_include_reset == true)) {
            lv_total_games = (lv_total_games - lib1_gv_player[lp_player].lv_wins_reset_point[lp_race][lv_mode]);
            lv_total_games = (lv_total_games - lib1_gv_player[lp_player].lv_losses_reset_point[lp_race][lv_mode]);
            lv_total_games = (lv_total_games - lib1_gv_player[lp_player].lv_quits_reset_point[lp_race][lv_mode]);
        }

    }
    return lv_total_games;
}

int lib1_gf_TotalWinsforRace (int lp_player, int lp_race, bool lp_include_reset) {
    // Variable Declarations
    int lv_mode;
    int lv_total_wins;

    // Automatic Variable Declarations
    const int auto2DB291DE_ae = lib1_gv_mAX_MODE_ID;
    const int auto2DB291DE_ai = 1;

    // Variable Initialization

    // Implementation
    lv_mode = 0;
    for ( ; ( (auto2DB291DE_ai >= 0 && lv_mode <= auto2DB291DE_ae) || (auto2DB291DE_ai < 0 && lv_mode >= auto2DB291DE_ae) ) ; lv_mode += auto2DB291DE_ai ) {
        lv_total_wins = (lv_total_wins + lib1_gv_player[lp_player].lv_wins[lp_race][lv_mode]);
        if ((lp_include_reset == true)) {
            lv_total_wins = (lv_total_wins - lib1_gv_player[lp_player].lv_wins_reset_point[lp_race][lv_mode]);
        }

    }
    return lv_total_wins;
}

int lib1_gf_TotalLossesforRace (int lp_player, int lp_race, bool lp_include_reset) {
    // Variable Declarations
    int lv_mode;
    int lv_total_losses;

    // Automatic Variable Declarations
    const int auto64187DE0_ae = lib1_gv_mAX_MODE_ID;
    const int auto64187DE0_ai = 1;

    // Variable Initialization

    // Implementation
    lv_mode = 0;
    for ( ; ( (auto64187DE0_ai >= 0 && lv_mode <= auto64187DE0_ae) || (auto64187DE0_ai < 0 && lv_mode >= auto64187DE0_ae) ) ; lv_mode += auto64187DE0_ai ) {
        lv_total_losses = (lv_total_losses + lib1_gv_player[lp_player].lv_losses[lp_race][lv_mode]);
        lv_total_losses = (lv_total_losses + lib1_gv_player[lp_player].lv_quits[lp_race][lv_mode]);
        if ((lp_include_reset == true)) {
            lv_total_losses = (lv_total_losses - lib1_gv_player[lp_player].lv_losses_reset_point[lp_race][lv_mode]);
            lv_total_losses = (lv_total_losses - lib1_gv_player[lp_player].lv_quits_reset_point[lp_race][lv_mode]);
        }

    }
    return lv_total_losses;
}

int lib1_gf_TotalRankedWins (int lp_player, bool lp_include_reset) {
    // Variable Declarations
    int lv_race;
    int lv_total_wins;

    // Automatic Variable Declarations
    const int auto4B09E3EF_ae = 2;
    const int auto4B09E3EF_ai = 1;

    // Variable Initialization

    // Implementation
    lv_race = 0;
    for ( ; ( (auto4B09E3EF_ai >= 0 && lv_race <= auto4B09E3EF_ae) || (auto4B09E3EF_ai < 0 && lv_race >= auto4B09E3EF_ae) ) ; lv_race += auto4B09E3EF_ai ) {
        lv_total_wins = (lv_total_wins + lib1_gv_player[lp_player].lv_wins[lv_race][lib1_gv_rANKED3V3]);
        if ((lp_include_reset == true)) {
            lv_total_wins = (lv_total_wins - lib1_gv_player[lp_player].lv_wins_reset_point[lv_race][lib1_gv_rANKED3V3]);
        }

    }
    return lv_total_wins;
}

int lib1_gf_TotalRankedLosses (int lp_player, bool lp_include_reset) {
    // Variable Declarations
    int lv_race;
    int lv_total_losses;

    // Automatic Variable Declarations
    const int autoC1F9D90C_ae = 2;
    const int autoC1F9D90C_ai = 1;

    // Variable Initialization

    // Implementation
    lv_race = 0;
    for ( ; ( (autoC1F9D90C_ai >= 0 && lv_race <= autoC1F9D90C_ae) || (autoC1F9D90C_ai < 0 && lv_race >= autoC1F9D90C_ae) ) ; lv_race += autoC1F9D90C_ai ) {
        lv_total_losses = (lv_total_losses + lib1_gv_player[lp_player].lv_losses[lv_race][lib1_gv_rANKED3V3]);
        lv_total_losses = (lv_total_losses + lib1_gv_player[lp_player].lv_quits[lv_race][lib1_gv_rANKED3V3]);
        if ((lp_include_reset == true)) {
            lv_total_losses = (lv_total_losses - lib1_gv_player[lp_player].lv_losses_reset_point[lv_race][lib1_gv_rANKED3V3]);
            lv_total_losses = (lv_total_losses - lib1_gv_player[lp_player].lv_quits_reset_point[lv_race][lib1_gv_rANKED3V3]);
        }

    }
    return lv_total_losses;
}

fixed lib1_gf_MatchmakingRank (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((lib1_gf_TotalRankedWins(lp_player, false) == 0) && (lib1_gf_TotalRankedLosses(lp_player, false) == 0)) {
        return 0.0;
    }
    else {
        return (IntToFixed(lib1_gf_TotalRankedWins(lp_player, false)) / (IntToFixed(lib1_gf_TotalRankedWins(lp_player, false)) + IntToFixed(lib1_gf_TotalRankedLosses(lp_player, false)) + 1.0));
    }
}

int lib1_gf_GetDamageDealt (int lp_player, int lp_race) {
    // Automatic Variable Declarations
    // Implementation
    return FixedToInt(Round(lib1_gv_player[lp_player].lv_damage_dealt[lp_race]));
}

int lib1_gf_GetAverageDamageDealt (int lp_player, int lp_race) {
    // Variable Declarations
    fixed lv_average;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lib1_gf_TotalGamesForRace(lp_player, lp_race, true) > 0)) {
        lv_average = lib1_gv_player[lp_player].lv_damage_dealt_average[lp_race];
    }
    else {
        lv_average = 0.0;
    }
    return FixedToInt(Round(lv_average));
}

int lib1_gf_GetDamageReceived (int lp_player, int lp_race) {
    // Automatic Variable Declarations
    // Implementation
    return FixedToInt(Round(lib1_gv_player[lp_player].lv_damage_received[lp_race]));
}

int lib1_gf_GetAverageDamageReceived (int lp_player, int lp_race) {
    // Variable Declarations
    fixed lv_average;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lib1_gf_TotalGamesForRace(lp_player, lp_race, true) > 0)) {
        lv_average = lib1_gv_player[lp_player].lv_damage_received_average[lp_race];
    }
    else {
        lv_average = 0.0;
    }
    return FixedToInt(Round(lv_average));
}

int lib1_gf_GetTotalUnitsKilled (int lp_player, int lp_race, bool lp_include_reset) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_include_reset == true)) {
        return (lib1_gv_player[lp_player].lv_units_killed_total[lp_race] - lib1_gv_player[lp_player].lv_units_killed_reset_point[lp_race]);
    }
    else {
        return lib1_gv_player[lp_player].lv_units_killed_total[lp_race];
    }
}

int lib1_gf_GetAverageUnitsKilled (int lp_player, int lp_race, bool lp_include_reset) {
    // Variable Declarations
    fixed lv_average;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lib1_gf_TotalGamesForRace(lp_player, lp_race, lp_include_reset) > 0)) {
        lv_average = (IntToFixed(lib1_gf_GetTotalUnitsKilled(lp_player, lp_race, lp_include_reset)) / IntToFixed(lib1_gf_TotalGamesForRace(lp_player, lp_race, lp_include_reset)));
    }
    else {
        lv_average = 0.0;
    }
    return FixedToInt(Round(lv_average));
}

int lib1_gf_GetTotalHeroesKilled (int lp_player, int lp_race, bool lp_include_reset) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_include_reset == true)) {
        return (lib1_gv_player[lp_player].lv_heroes_killed_total[lp_race] - lib1_gv_player[lp_player].lv_heroes_killed_reset_point[lp_race]);
    }
    else {
        return lib1_gv_player[lp_player].lv_heroes_killed_total[lp_race];
    }
}

int lib1_gf_GetAverageHeroesKilled (int lp_player, int lp_race, bool lp_include_reset) {
    // Variable Declarations
    fixed lv_average;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lib1_gf_TotalGamesForRace(lp_player, lp_race, lp_include_reset) > 0)) {
        lv_average = (IntToFixed(lib1_gf_GetTotalHeroesKilled(lp_player, lp_race, lp_include_reset)) / IntToFixed(lib1_gf_TotalGamesForRace(lp_player, lp_race, lp_include_reset)));
    }
    else {
        lv_average = 0.0;
    }
    return FixedToInt(Round(lv_average));
}

int lib1_gf_GetTotalStructuresKilled (int lp_player, int lp_race, bool lp_include_reset) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_include_reset == true)) {
        return (lib1_gv_player[lp_player].lv_structures_killed_total[lp_race] - lib1_gv_player[lp_player].lv_structures_killed_reset_point[lp_race]);
    }
    else {
        return lib1_gv_player[lp_player].lv_structures_killed_total[lp_race];
    }
}

int lib1_gf_GetAverageStructuresKilled (int lp_player, int lp_race, bool lp_include_reset) {
    // Variable Declarations
    fixed lv_average;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lib1_gf_TotalGamesForRace(lp_player, lp_race, lp_include_reset) > 0)) {
        lv_average = (IntToFixed(lib1_gf_GetTotalStructuresKilled(lp_player, lp_race, lp_include_reset)) / IntToFixed(lib1_gf_TotalGamesForRace(lp_player, lp_race, lp_include_reset)));
    }
    else {
        lv_average = 0.0;
    }
    return FixedToInt(Round(lv_average));
}

int lib1_gf_GetTotalUnitsCreated (int lp_player, int lp_race, bool lp_include_reset) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_include_reset == true)) {
        return (lib1_gv_player[lp_player].lv_units_created_total[lp_race] - lib1_gv_player[lp_player].lv_units_created_reset_point[lp_race]);
    }
    else {
        return lib1_gv_player[lp_player].lv_units_created_total[lp_race];
    }
}

int lib1_gf_GetAverageUnitsCreated (int lp_player, int lp_race, bool lp_include_reset) {
    // Variable Declarations
    fixed lv_average;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lib1_gf_TotalGamesForRace(lp_player, lp_race, lp_include_reset) > 0)) {
        lv_average = (IntToFixed(lib1_gf_GetTotalUnitsCreated(lp_player, lp_race, lp_include_reset)) / IntToFixed(lib1_gf_TotalGamesForRace(lp_player, lp_race, lp_include_reset)));
    }
    else {
        lv_average = 0.0;
    }
    return FixedToInt(Round(lv_average));
}

int lib1_gf_GetTotalHeroesCreated (int lp_player, int lp_race, bool lp_include_reset) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_include_reset == true)) {
        return (lib1_gv_player[lp_player].lv_heroes_created_total[lp_race] - lib1_gv_player[lp_player].lv_heroes_created_reset_point[lp_race]);
    }
    else {
        return lib1_gv_player[lp_player].lv_heroes_created_total[lp_race];
    }
}

int lib1_gf_GetAverageHeroesCreated (int lp_player, int lp_race, bool lp_include_reset) {
    // Variable Declarations
    fixed lv_average;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lib1_gf_TotalGamesForRace(lp_player, lp_race, lp_include_reset) > 0)) {
        lv_average = (IntToFixed(lib1_gf_GetTotalHeroesCreated(lp_player, lp_race, lp_include_reset)) / IntToFixed(lib1_gf_TotalGamesForRace(lp_player, lp_race, lp_include_reset)));
    }
    else {
        lv_average = 0.0;
    }
    return FixedToInt(Round(lv_average));
}

int lib1_gf_GetTotalStructuresCreated (int lp_player, int lp_race, bool lp_include_reset) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_include_reset == true)) {
        return (lib1_gv_player[lp_player].lv_structures_created_total[lp_race] - lib1_gv_player[lp_player].lv_structures_created_reset_point[lp_race]);
    }
    else {
        return lib1_gv_player[lp_player].lv_structures_created_total[lp_race];
    }
}

int lib1_gf_GetAverageStructuresCreated (int lp_player, int lp_race, bool lp_include_reset) {
    // Variable Declarations
    fixed lv_average;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lib1_gf_TotalGamesForRace(lp_player, lp_race, lp_include_reset) > 0)) {
        lv_average = (IntToFixed(lib1_gf_GetTotalStructuresCreated(lp_player, lp_race, lp_include_reset)) / IntToFixed(lib1_gf_TotalGamesForRace(lp_player, lp_race, lp_include_reset)));
    }
    else {
        lv_average = 0.0;
    }
    return FixedToInt(Round(lv_average));
}

int lib1_gf_KeystoneEnergyRequested (int lp_team) {
    // Variable Declarations
    int lv_player;
    int lv_hand_index;
    int lv_energy_requested;

    // Automatic Variable Declarations
    playergroup auto52C30509_g;
    int auto6F14D7B9_ae;
    const int auto6F14D7B9_ai = 1;

    // Variable Initialization

    // Implementation
    auto52C30509_g = lib1_gv_team[lp_team];
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto52C30509_g, lv_player);
        if (lv_player < 0) { break; }
        auto6F14D7B9_ae = lib1_gf_TopofHand(lv_player);
        lv_hand_index = 0;
        for ( ; ( (auto6F14D7B9_ai >= 0 && lv_hand_index <= auto6F14D7B9_ae) || (auto6F14D7B9_ai < 0 && lv_hand_index >= auto6F14D7B9_ae) ) ; lv_hand_index += auto6F14D7B9_ai ) {
            if ((lib1_gv_player[lv_player].lv_hand.lv_channel_enabled[lv_hand_index] == true)) {
                lv_energy_requested = (lv_energy_requested + lib1_gv_player[lv_player].lv_hand.lv_card[lv_hand_index].lv_channel);
            }

        }
    }
    return lv_energy_requested;
}

void lib1_gf_MakeKeystoneEnergyRequestsLegal (int lp_team) {
    // Automatic Variable Declarations
    // Implementation
    while ((lib1_gf_KeystoneEnergyRequested(lp_team) > lib1_gv_keystone_energy[lp_team])) {
        lib1_gf_RemoveOneRandomEnergyRequestFromTeam(lp_team);
    }
}

void lib1_gf_AttemptKeystoneEnergyRequestsforTeam (int lp_team) {
    // Variable Declarations
    int lv_player;
    int lv_hand_index;

    // Automatic Variable Declarations
    playergroup auto82AA04A4_g;
    int autoC7B6E9D6_ae;
    const int autoC7B6E9D6_ai = 1;

    // Variable Initialization

    // Implementation
    auto82AA04A4_g = lib1_gv_team[lp_team];
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto82AA04A4_g, lv_player);
        if (lv_player < 0) { break; }
        autoC7B6E9D6_ae = lib1_gf_TopofHand(lv_player);
        lv_hand_index = 0;
        for ( ; ( (autoC7B6E9D6_ai >= 0 && lv_hand_index <= autoC7B6E9D6_ae) || (autoC7B6E9D6_ai < 0 && lv_hand_index >= autoC7B6E9D6_ae) ) ; lv_hand_index += autoC7B6E9D6_ai ) {
            if ((lib1_gv_player[lv_player].lv_hand.lv_selected[lv_hand_index] == true) && (lib1_gv_player[lv_player].lv_hand.lv_channel_enabled[lv_hand_index] == false) && (lib1_gv_player[lv_player].lv_hand.lv_card[lv_hand_index].lv_channel > 0) && ((lib1_gf_KeystoneEnergyRequested(lp_team) + lib1_gv_player[lv_player].lv_hand.lv_card[lv_hand_index].lv_channel) <= lib1_gv_keystone_energy[lp_team])) {
                lib1_gv_player[lv_player].lv_hand.lv_channel_enabled[lv_hand_index] = true;
                DialogControlFadeTransparency(lib1_gv_player[lv_player].lv_hand.lv_card[lv_hand_index].lv_ui.lv_channel_indicator, PlayerGroupAll(), 0.5, lib1_gv_cHANNEL_ENERGY_TRANSPARENCY);
            }

        }
    }
}

void lib1_gf_RemoveOneRandomEnergyRequestFromTeam (int lp_team) {
    // Variable Declarations
    int lv_player;
    int lv_hand_index;
    int lv_chosen_request;
    int lv_possible_request_count;
    int[50] lv_possible_request_player;
    int[50] lv_possible_request_hand_index;

    // Automatic Variable Declarations
    playergroup autoA490D897_g;
    int autoC847F809_ae;
    const int autoC847F809_ai = 1;

    // Variable Initialization

    // Implementation
    autoA490D897_g = lib1_gv_team[lp_team];
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoA490D897_g, lv_player);
        if (lv_player < 0) { break; }
        autoC847F809_ae = lib1_gf_TopofHand(lv_player);
        lv_hand_index = 0;
        for ( ; ( (autoC847F809_ai >= 0 && lv_hand_index <= autoC847F809_ae) || (autoC847F809_ai < 0 && lv_hand_index >= autoC847F809_ae) ) ; lv_hand_index += autoC847F809_ai ) {
            if ((lib1_gv_player[lv_player].lv_hand.lv_channel_enabled[lv_hand_index] == true)) {
                lv_possible_request_player[lv_possible_request_count] = lv_player;
                lv_possible_request_hand_index[lv_possible_request_count] = lv_hand_index;
                lv_possible_request_count = (lv_possible_request_count + 1);
            }

        }
    }
    lv_chosen_request = RandomInt(0, (lv_possible_request_count - 1));
    lib1_gv_player[lv_possible_request_player[lv_chosen_request]].lv_hand.lv_channel_enabled[lv_possible_request_hand_index[lv_chosen_request]] = false;
    DialogControlFadeTransparency(lib1_gv_player[lv_possible_request_player[lv_chosen_request]].lv_hand.lv_card[lv_possible_request_hand_index[lv_chosen_request]].lv_ui.lv_channel_indicator, PlayerGroupAll(), 0.5, 100.0);
}

void lib1_gf_SetKeystoneEnergy (int lp_team, int lp_amount) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gv_keystone_energy[lp_team] = lp_amount;
    UnitSetPropertyFixed(lib1_gv_keystone[lp_team], c_unitPropEnergy, lp_amount);
}

void lib1_gf_UseRequestedKeystoneEnergy (int lp_team) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_SetKeystoneEnergy(lp_team, MaxI((lib1_gv_keystone_energy[lp_team] - lib1_gf_KeystoneEnergyRequested(lp_team)), 0));
}

void lib1_gf_AddEnergytoKeystone (int lp_team, int lp_amount) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_SetKeystoneEnergy(lp_team, MinI((lib1_gv_keystone_energy[lp_team] + lp_amount), lib1_gv_mAX_KEYSTONE_ENERGY));
}

trigger auto_lib1_gf_UpdateKeystoneChannelText_Trigger = null;
int auto_lib1_gf_UpdateKeystoneChannelText_lp_team;

void lib1_gf_UpdateKeystoneChannelText (int lp_team) {
    auto_lib1_gf_UpdateKeystoneChannelText_lp_team = lp_team;

    if (auto_lib1_gf_UpdateKeystoneChannelText_Trigger == null) {
        auto_lib1_gf_UpdateKeystoneChannelText_Trigger = TriggerCreate("auto_lib1_gf_UpdateKeystoneChannelText_TriggerFunc");
    }

    TriggerExecute(auto_lib1_gf_UpdateKeystoneChannelText_Trigger, false, false);
}

bool auto_lib1_gf_UpdateKeystoneChannelText_TriggerFunc (bool testConds, bool runActions) {
    int lp_team = auto_lib1_gf_UpdateKeystoneChannelText_lp_team;

    // Variable Declarations
    int lv_player;
    int lv_hand_index;
    bool lv_at_least_one_channel_card;
    text lv_channel_text2;
    int lv_text_tag_to_delete;

    // Automatic Variable Declarations
    playergroup autoF085747B_g;
    int auto1EF6FB24_ae;
    const int auto1EF6FB24_ai = 1;

    // Variable Initialization
    lv_text_tag_to_delete = c_textTagNone;

    // Implementation
    autoF085747B_g = lib1_gv_team[lp_team];
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoF085747B_g, lv_player);
        if (lv_player < 0) { break; }
        auto1EF6FB24_ae = lib1_gf_TopofHand(lv_player);
        lv_hand_index = 0;
        for ( ; ( (auto1EF6FB24_ai >= 0 && lv_hand_index <= auto1EF6FB24_ae) || (auto1EF6FB24_ai < 0 && lv_hand_index >= auto1EF6FB24_ae) ) ; lv_hand_index += auto1EF6FB24_ai ) {
            if ((lib1_gv_player[lv_player].lv_hand.lv_channel_enabled[lv_hand_index] == true)) {
                if ((lv_at_least_one_channel_card == true)) {
                    lv_channel_text2 = (lv_channel_text2 + StringExternal("Param/Value/lib_1_397CD135"));
                }

                lv_channel_text2 = (lv_channel_text2 + StringToText(lib1_gv_player[lv_player].lv_hand.lv_card[lv_hand_index].lv_cname) + StringExternal("Param/Value/lib_1_CD11C361") + IntToText(lib1_gv_player[lv_player].lv_hand.lv_card[lv_hand_index].lv_channel) + StringExternal("Param/Value/lib_1_7573DA24") + PlayerName(lv_player) + StringExternal("Param/Value/lib_1_D4F48159"));
                lv_at_least_one_channel_card = true;
            }

        }
    }
    if ((lv_at_least_one_channel_card == true)) {
        if ((lib1_gv_keystone_channel_text[lp_team] == c_textTagNone)) {
            TextTagCreate(lv_channel_text2, 24, UnitGetPosition(lib1_gv_keystone[lp_team]), 1.0, true, false, lib1_gv_team[lp_team]);
            TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 100.00, 100.00));
            lib1_gv_keystone_channel_text[lp_team] = TextTagLastCreated();
        }
        else {
            TextTagSetText(lib1_gv_keystone_channel_text[lp_team], lv_channel_text2);
        }
    }
    else {
        lv_text_tag_to_delete = lib1_gv_keystone_channel_text[lp_team];
        lib1_gv_keystone_channel_text[lp_team] = c_textTagNone;
        TextTagSetTime(lv_text_tag_to_delete, c_textTagTimeCurrent, 0.0);
        TextTagSetTime(lv_text_tag_to_delete, c_textTagTimeDuration, 1.0);
        Wait(1.0, c_timeGame);
        TextTagDestroy(lv_text_tag_to_delete);
    }
    return true;
}

void lib1_gf_AddBuildertoQueue (unit lp_builder, abilcmd lp_build_command, string lp_structure_type, bool lp_defensive) {
    // Variable Declarations
    int lv_builder_id;

    // Automatic Variable Declarations
    const int auto1873AE4D_ae = lib1_gv_bUILDER_LIMIT;
    const int auto1873AE4D_ai = 1;

    // Variable Initialization

    // Implementation
    lv_builder_id = 0;
    for ( ; ( (auto1873AE4D_ai >= 0 && lv_builder_id <= auto1873AE4D_ae) || (auto1873AE4D_ai < 0 && lv_builder_id >= auto1873AE4D_ae) ) ; lv_builder_id += auto1873AE4D_ai ) {
        if ((lib1_gv_builder[lv_builder_id].lv_builder == null)) {
            lib1_gv_builder[lv_builder_id].lv_builder = lp_builder;
            lib1_gv_builder[lv_builder_id].lv_build_command = lp_build_command;
            lib1_gv_builder[lv_builder_id].lv_structure_type = lp_structure_type;
            lib1_gv_builder[lv_builder_id].lv_defensive = lp_defensive;
            break;
        }

    }
}

void lib1_gf_RemoveBuilderFromQueue (unit lp_builder_to_remove) {
    // Variable Declarations
    int lv_builder_id;

    // Automatic Variable Declarations
    const int auto8C21AF67_ae = lib1_gv_bUILDER_LIMIT;
    const int auto8C21AF67_ai = 1;

    // Variable Initialization

    // Implementation
    lv_builder_id = 0;
    for ( ; ( (auto8C21AF67_ai >= 0 && lv_builder_id <= auto8C21AF67_ae) || (auto8C21AF67_ai < 0 && lv_builder_id >= auto8C21AF67_ae) ) ; lv_builder_id += auto8C21AF67_ai ) {
        if ((lib1_gv_builder[lv_builder_id].lv_builder == lp_builder_to_remove)) {
            lib1_gv_builder[lv_builder_id].lv_builder = null;
        }

    }
}

void lib1_gf_ReorderBuilder (unit lp_builder_to_order) {
    // Variable Declarations
    int lv_builder_id;
    point lv_build_point;

    // Automatic Variable Declarations
    const int auto38451247_ae = lib1_gv_bUILDER_LIMIT;
    const int auto38451247_ai = 1;

    // Variable Initialization

    // Implementation
    lv_builder_id = 0;
    for ( ; ( (auto38451247_ai >= 0 && lv_builder_id <= auto38451247_ae) || (auto38451247_ai < 0 && lv_builder_id >= auto38451247_ae) ) ; lv_builder_id += auto38451247_ai ) {
        if ((lib1_gv_builder[lv_builder_id].lv_builder == lp_builder_to_order)) {
            if ((lib1_gv_builder[lv_builder_id].lv_attempt_count <= lib1_gv_mAX_REBUILD_ATTEMPTS_PER_TURN)) {
                UnitIssueOrder(lp_builder_to_order, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(lib1_gv_player[UnitGetOwner(lp_builder_to_order)].lv_spawn_region)), c_orderQueueReplace);
                lv_build_point = lib1_gf_FindStructureBuildTarget(UnitGetOwner(lp_builder_to_order), lib1_gv_builder[lv_builder_id].lv_structure_type, lib1_gv_builder[lv_builder_id].lv_defensive);
                lib1_gf_IssueBuildOrder(lp_builder_to_order, lib1_gv_builder[lv_builder_id].lv_build_command, lv_build_point, UnitTypeGetProperty(lib1_gv_builder[lv_builder_id].lv_structure_type, c_unitPropRadius));
            }
            else {
                UnitGroupAdd(lib1_gv_failed_builder_units, lp_builder_to_order);
                UnitIssueOrder(lp_builder_to_order, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(lib1_gv_player[UnitGetOwner(lp_builder_to_order)].lv_spawn_region)), c_orderQueueReplace);
                TextTagCreate(StringExternal("Param/Value/lib_1_4B61D04A"), 16, UnitGetPosition(lp_builder_to_order), 1.0, true, false, PlayerGroupSingle(UnitGetOwner(lp_builder_to_order)));
                TextTagAttachToUnit(TextTagLastCreated(), lp_builder_to_order, 1.0);
                TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 5.0);
            }
        }

    }
}

void lib1_gf_IncrementBuilderAttemptCount (unit lp_builder_to_increment) {
    // Variable Declarations
    int lv_builder_id;

    // Automatic Variable Declarations
    const int auto672B00B5_ae = lib1_gv_bUILDER_LIMIT;
    const int auto672B00B5_ai = 1;

    // Variable Initialization

    // Implementation
    lv_builder_id = 0;
    for ( ; ( (auto672B00B5_ai >= 0 && lv_builder_id <= auto672B00B5_ae) || (auto672B00B5_ai < 0 && lv_builder_id >= auto672B00B5_ae) ) ; lv_builder_id += auto672B00B5_ai ) {
        if ((lib1_gv_builder[lv_builder_id].lv_builder == lp_builder_to_increment)) {
            lib1_gv_builder[lv_builder_id].lv_attempt_count = (lib1_gv_builder[lv_builder_id].lv_attempt_count + 1);
            break;
        }

    }
}

void lib1_gf_ResetBuilderAttemptCounts () {
    // Variable Declarations
    int lv_builder_id;

    // Automatic Variable Declarations
    const int autoB783D538_ae = lib1_gv_bUILDER_LIMIT;
    const int autoB783D538_ai = 1;

    // Variable Initialization

    // Implementation
    lv_builder_id = 0;
    for ( ; ( (autoB783D538_ai >= 0 && lv_builder_id <= autoB783D538_ae) || (autoB783D538_ai < 0 && lv_builder_id >= autoB783D538_ae) ) ; lv_builder_id += autoB783D538_ai ) {
        lib1_gv_builder[lv_builder_id].lv_attempt_count = 0;
    }
}

void lib1_gf_InitializeBanks () {
    // Variable Declarations
    const int lv_mAX_BACKUP_BANKS = 100;
    int lv_player;
    int lv_count;

    // Automatic Variable Declarations
    const int autoF7A7041F_ae = 0;
    const int autoF7A7041F_ai = -1;
    const int auto5FB99114_ae = 0;
    const int auto5FB99114_ai = -1;
    const int auto8649902C_ae = 0;
    const int auto8649902C_ai = -1;
    const int auto3FF8F4EF_ae = 0;
    const int auto3FF8F4EF_ai = -1;
    const int auto310004EE_ae = 0;
    const int auto310004EE_ai = -1;
    const int auto9D83A12E_ae = 0;
    const int auto9D83A12E_ai = -1;
    const int auto4B829454_ae = 6;
    const int auto4B829454_ai = 1;

    // Variable Initialization

    // Implementation
    if ((lib1_gv_test_mode == true)) {
        if ((PlayerType(1) == c_playerTypeUser) && (PlayerStatus(1) == c_playerStatusActive)) {
            BankLoad("sccgtest7", 1);
            BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
            lib1_gv_collection_bank[1] = BankLastCreated();
        }

        if ((PlayerType(2) == c_playerTypeUser) && (PlayerStatus(2) == c_playerStatusActive)) {
            BankLoad("sccgtest7", 2);
            BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
            lib1_gv_collection_bank[2] = BankLastCreated();
        }

        if ((PlayerType(3) == c_playerTypeUser) && (PlayerStatus(3) == c_playerStatusActive)) {
            BankLoad("sccgtest7", 3);
            BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
            lib1_gv_collection_bank[3] = BankLastCreated();
        }

        if ((PlayerType(4) == c_playerTypeUser) && (PlayerStatus(4) == c_playerStatusActive)) {
            BankLoad("sccgtest7", 4);
            BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
            lib1_gv_collection_bank[4] = BankLastCreated();
        }

        if ((PlayerType(5) == c_playerTypeUser) && (PlayerStatus(5) == c_playerStatusActive)) {
            BankLoad("sccgtest7", 5);
            BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
            lib1_gv_collection_bank[5] = BankLastCreated();
        }

        if ((PlayerType(6) == c_playerTypeUser) && (PlayerStatus(6) == c_playerStatusActive)) {
            BankLoad("sccgtest7", 6);
            BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
            lib1_gv_collection_bank[6] = BankLastCreated();
        }

    }
    else {
        if ((PlayerType(1) == c_playerTypeUser) && (PlayerStatus(1) == c_playerStatusActive)) {
            BankLoad("kscg", 1);
            BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
            lib1_gv_collection_bank[1] = BankLastCreated();
            BankBackup(lib1_gv_collection_bank[1], 1);
            lv_count = 0;
            lv_count = (BankBackupGetLatestId(lib1_gv_collection_bank[1]) - lv_mAX_BACKUP_BANKS);
            for ( ; ( (autoF7A7041F_ai >= 0 && lv_count <= autoF7A7041F_ae) || (autoF7A7041F_ai < 0 && lv_count >= autoF7A7041F_ae) ) ; lv_count += autoF7A7041F_ai ) {
                BankBackupRemove(lib1_gv_collection_bank[1], lv_count, 1);
            }
        }

        if ((PlayerType(2) == c_playerTypeUser) && (PlayerStatus(2) == c_playerStatusActive)) {
            BankLoad("kscg", 2);
            BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
            lib1_gv_collection_bank[2] = BankLastCreated();
            BankBackup(lib1_gv_collection_bank[2], 2);
            lv_count = 0;
            lv_count = (BankBackupGetLatestId(lib1_gv_collection_bank[2]) - lv_mAX_BACKUP_BANKS);
            for ( ; ( (auto5FB99114_ai >= 0 && lv_count <= auto5FB99114_ae) || (auto5FB99114_ai < 0 && lv_count >= auto5FB99114_ae) ) ; lv_count += auto5FB99114_ai ) {
                BankBackupRemove(lib1_gv_collection_bank[2], lv_count, 2);
            }
        }

        if ((PlayerType(3) == c_playerTypeUser) && (PlayerStatus(3) == c_playerStatusActive)) {
            BankLoad("kscg", 3);
            BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
            lib1_gv_collection_bank[3] = BankLastCreated();
            BankBackup(lib1_gv_collection_bank[3], 3);
            lv_count = 0;
            lv_count = (BankBackupGetLatestId(lib1_gv_collection_bank[3]) - lv_mAX_BACKUP_BANKS);
            for ( ; ( (auto8649902C_ai >= 0 && lv_count <= auto8649902C_ae) || (auto8649902C_ai < 0 && lv_count >= auto8649902C_ae) ) ; lv_count += auto8649902C_ai ) {
                BankBackupRemove(lib1_gv_collection_bank[3], lv_count, 3);
            }
        }

        if ((PlayerType(4) == c_playerTypeUser) && (PlayerStatus(4) == c_playerStatusActive)) {
            BankLoad("kscg", 4);
            BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
            lib1_gv_collection_bank[4] = BankLastCreated();
            BankBackup(lib1_gv_collection_bank[4], 4);
            lv_count = 0;
            lv_count = (BankBackupGetLatestId(lib1_gv_collection_bank[4]) - lv_mAX_BACKUP_BANKS);
            for ( ; ( (auto3FF8F4EF_ai >= 0 && lv_count <= auto3FF8F4EF_ae) || (auto3FF8F4EF_ai < 0 && lv_count >= auto3FF8F4EF_ae) ) ; lv_count += auto3FF8F4EF_ai ) {
                BankBackupRemove(lib1_gv_collection_bank[4], lv_count, 4);
            }
        }

        if ((PlayerType(5) == c_playerTypeUser) && (PlayerStatus(5) == c_playerStatusActive)) {
            BankLoad("kscg", 5);
            BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
            lib1_gv_collection_bank[5] = BankLastCreated();
            BankBackup(lib1_gv_collection_bank[5], 5);
            lv_count = 0;
            lv_count = (BankBackupGetLatestId(lib1_gv_collection_bank[5]) - lv_mAX_BACKUP_BANKS);
            for ( ; ( (auto310004EE_ai >= 0 && lv_count <= auto310004EE_ae) || (auto310004EE_ai < 0 && lv_count >= auto310004EE_ae) ) ; lv_count += auto310004EE_ai ) {
                BankBackupRemove(lib1_gv_collection_bank[5], lv_count, 5);
            }
        }

        if ((PlayerType(6) == c_playerTypeUser) && (PlayerStatus(6) == c_playerStatusActive)) {
            BankLoad("kscg", 6);
            BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
            lib1_gv_collection_bank[6] = BankLastCreated();
            BankBackup(lib1_gv_collection_bank[6], 6);
            lv_count = 0;
            lv_count = (BankBackupGetLatestId(lib1_gv_collection_bank[6]) - lv_mAX_BACKUP_BANKS);
            for ( ; ( (auto9D83A12E_ai >= 0 && lv_count <= auto9D83A12E_ae) || (auto9D83A12E_ai < 0 && lv_count >= auto9D83A12E_ae) ) ; lv_count += auto9D83A12E_ai ) {
                BankBackupRemove(lib1_gv_collection_bank[6], lv_count, 6);
            }
        }

    }
    if ((PlayerType(1) == c_playerTypeUser) && (PlayerStatus(1) == c_playerStatusActive)) {
        BankLoad("bfcgbank1", 1);
        lib1_gv_legacy_bank[1] = BankLastCreated();
    }

    if ((PlayerType(2) == c_playerTypeUser) && (PlayerStatus(2) == c_playerStatusActive)) {
        BankLoad("bfcgbank1", 2);
        lib1_gv_legacy_bank[2] = BankLastCreated();
    }

    if ((PlayerType(3) == c_playerTypeUser) && (PlayerStatus(3) == c_playerStatusActive)) {
        BankLoad("bfcgbank1", 3);
        lib1_gv_legacy_bank[3] = BankLastCreated();
    }

    if ((PlayerType(4) == c_playerTypeUser) && (PlayerStatus(4) == c_playerStatusActive)) {
        BankLoad("bfcgbank1", 4);
        lib1_gv_legacy_bank[4] = BankLastCreated();
    }

    if ((PlayerType(5) == c_playerTypeUser) && (PlayerStatus(5) == c_playerStatusActive)) {
        BankLoad("bfcgbank1", 5);
        lib1_gv_legacy_bank[5] = BankLastCreated();
    }

    if ((PlayerType(6) == c_playerTypeUser) && (PlayerStatus(6) == c_playerStatusActive)) {
        BankLoad("bfcgbank1", 6);
        lib1_gv_legacy_bank[6] = BankLastCreated();
    }

    lv_player = 1;
    for ( ; ( (auto4B829454_ai >= 0 && lv_player <= auto4B829454_ae) || (auto4B829454_ai < 0 && lv_player >= auto4B829454_ae) ) ; lv_player += auto4B829454_ai ) {
        if ((PlayerType(lv_player) == c_playerTypeUser) && (PlayerStatus(lv_player) == c_playerStatusActive) && (BankSectionCount(lib1_gv_collection_bank[lv_player]) > 0) && (BankVerify(lib1_gv_collection_bank[lv_player]) == false)) {
            lib1_gf_HandleCorruptedCollection(lv_player);
        }

    }
}

void lib1_gf_AddBonusEssenceforLegacyPlayer (int lp_player) {
    // Variable Declarations
    int lv_legacy_card_id;
    int lv_bonus_essence;
    const int lv_bONUS_PER_LEGACY_CARD = 20;

    // Automatic Variable Declarations
    const int autoC82FA8F1_ae = 83;
    const int autoC82FA8F1_ai = 1;
    const int auto83A2C9F3_ae = 1083;
    const int auto83A2C9F3_ai = 1;
    const int auto5D9F2290_ae = 2083;
    const int auto5D9F2290_ai = 1;

    // Variable Initialization

    // Implementation
    if ((BankSectionExists(lib1_gv_legacy_bank[lp_player], "3") == true)) {
        lv_legacy_card_id = 0;
        for ( ; ( (autoC82FA8F1_ai >= 0 && lv_legacy_card_id <= autoC82FA8F1_ae) || (autoC82FA8F1_ai < 0 && lv_legacy_card_id >= autoC82FA8F1_ae) ) ; lv_legacy_card_id += autoC82FA8F1_ai ) {
            if ((BankKeyExists(lib1_gv_legacy_bank[lp_player], "3", IntToString(lv_legacy_card_id)) == true) && (BankValueGetAsFlag(lib1_gv_legacy_bank[lp_player], "3", IntToString(lv_legacy_card_id)) == true)) {
                lv_bonus_essence = (lv_bonus_essence + lv_bONUS_PER_LEGACY_CARD);
            }

        }
        lv_legacy_card_id = 1000;
        for ( ; ( (auto83A2C9F3_ai >= 0 && lv_legacy_card_id <= auto83A2C9F3_ae) || (auto83A2C9F3_ai < 0 && lv_legacy_card_id >= auto83A2C9F3_ae) ) ; lv_legacy_card_id += auto83A2C9F3_ai ) {
            if ((BankKeyExists(lib1_gv_legacy_bank[lp_player], "3", IntToString(lv_legacy_card_id)) == true) && (BankValueGetAsFlag(lib1_gv_legacy_bank[lp_player], "3", IntToString(lv_legacy_card_id)) == true)) {
                lv_bonus_essence = (lv_bonus_essence + lv_bONUS_PER_LEGACY_CARD);
            }

        }
        lv_legacy_card_id = 2000;
        for ( ; ( (auto5D9F2290_ai >= 0 && lv_legacy_card_id <= auto5D9F2290_ae) || (auto5D9F2290_ai < 0 && lv_legacy_card_id >= auto5D9F2290_ae) ) ; lv_legacy_card_id += auto5D9F2290_ai ) {
            if ((BankKeyExists(lib1_gv_legacy_bank[lp_player], "3", IntToString(lv_legacy_card_id)) == true) && (BankValueGetAsFlag(lib1_gv_legacy_bank[lp_player], "3", IntToString(lv_legacy_card_id)) == true)) {
                lv_bonus_essence = (lv_bonus_essence + lv_bONUS_PER_LEGACY_CARD);
            }

        }
    }

    if ((lv_bonus_essence > 0)) {
        lv_bonus_essence = MaxI((lv_bonus_essence - (84 * lv_bONUS_PER_LEGACY_CARD)), 0);
    }

    if ((lv_bonus_essence > lib1_gv_player_collection[lp_player].lv_bonus_essence)) {
        lib1_gv_player_collection[lp_player].lv_bonus_essence = lv_bonus_essence;
        lib1_gf_SaveCurrencytoBank(lp_player);
    }

}

void lib1_gf_HandleCorruptedCollection (int lp_player) {
    // // Variable Declarations
    // int lv_int1;
    // int lv_int2;

    // // Automatic Variable Declarations
    // const int autoEBCC5F76_ae = 2;
    // const int autoEBCC5F76_ai = 1;
    // const int auto89C9783F_ae = lib1_gv_mAX_MODE_ID;
    // const int auto89C9783F_ai = 1;
    // const int autoEABF89C7_ae = lib1_gv_mAX_SET_ID;
    // const int autoEABF89C7_ai = 1;
    // const int auto804BE0EE_ae = lib1_gv_mAX_CARD_ID;
    // const int auto804BE0EE_ai = 1;
    // const int auto79F1EB61_ae = 2;
    // const int auto79F1EB61_ai = 1;
    // const int auto0C69B7BF_ae = lib1_gv_dECKLIST_PER_RACE_LIMIT;
    // const int auto0C69B7BF_ai = 1;

    // // Variable Initialization

    // // Implementation
    // BankBackup(lib1_gv_collection_bank[lp_player], lp_player);
    // UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_F25E85FB"));
    // lv_int1 = 0;
    // for ( ; ( (autoEBCC5F76_ai >= 0 && lv_int1 <= autoEBCC5F76_ae) || (autoEBCC5F76_ai < 0 && lv_int1 >= autoEBCC5F76_ae) ) ; lv_int1 += autoEBCC5F76_ai ) {
    //     lv_int2 = 0;
    //     for ( ; ( (auto89C9783F_ai >= 0 && lv_int2 <= auto89C9783F_ae) || (auto89C9783F_ai < 0 && lv_int2 >= auto89C9783F_ae) ) ; lv_int2 += auto89C9783F_ai ) {
    //         lib1_gv_player[lp_player].lv_wins[lv_int1][lv_int2] = 0;
    //         lib1_gv_player[lp_player].lv_losses[lv_int1][lv_int2] = 0;
    //         lib1_gv_player[lp_player].lv_quits[lv_int1][lv_int2] = 0;
    //     }
    // }
    // lib1_gf_SaveWinsLossestoBank(lp_player);
    // lib1_gv_player_collection[lp_player].lv_credits_earned = 0;
    // lib1_gv_player_collection[lp_player].lv_essence_earned = 0;
    // lib1_gv_player_collection[lp_player].lv_bonus_essence = 0;
    // lib1_gf_SaveCurrencytoBank(lp_player);
    // lv_int1 = 0;
    // for ( ; ( (autoEABF89C7_ai >= 0 && lv_int1 <= autoEABF89C7_ae) || (autoEABF89C7_ai < 0 && lv_int1 >= autoEABF89C7_ae) ) ; lv_int1 += autoEABF89C7_ai ) {
    //     lib1_gv_player_collection[lp_player].lv_packs_opened[lv_int1] = 0;
    //     lib1_gf_SavePackPurchasestoBank(lp_player, lv_int1);
    // }
    // lv_int1 = 0;
    // for ( ; ( (auto804BE0EE_ai >= 0 && lv_int1 <= auto804BE0EE_ae) || (auto804BE0EE_ai < 0 && lv_int1 >= auto804BE0EE_ae) ) ; lv_int1 += auto804BE0EE_ai ) {
    //     lib1_gv_player_collection[lp_player].lv_unpacked[lv_int1] = 0;
    //     lib1_gv_player_collection[lp_player].lv_bought[lv_int1] = 0;
    //     lib1_gv_player_collection[lp_player].lv_sold[lv_int1] = 0;
    // }
    // lib1_gf_SaveCollectiontoBank(lp_player);
    // lv_int1 = 0;
    // for ( ; ( (auto79F1EB61_ai >= 0 && lv_int1 <= auto79F1EB61_ae) || (auto79F1EB61_ai < 0 && lv_int1 >= auto79F1EB61_ae) ) ; lv_int1 += auto79F1EB61_ai ) {
    //     lv_int2 = 0;
    //     for ( ; ( (auto0C69B7BF_ai >= 0 && lv_int2 <= auto0C69B7BF_ae) || (auto0C69B7BF_ai < 0 && lv_int2 >= auto0C69B7BF_ae) ) ; lv_int2 += auto0C69B7BF_ai ) {
    //         if ((BankSectionExists(lib1_gv_collection_bank[lp_player], ("d" + IntToString(lv_int1) + IntToString(lv_int2))) == true)) {
    //             BankSectionRemove(lib1_gv_collection_bank[lp_player], ("d" + IntToString(lv_int1) + IntToString(lv_int2)));
    //         }

    //     }
    // }
    // if ((BankSectionExists(lib1_gv_collection_bank[lp_player], "d") == true)) {
    //     BankSectionRemove(lib1_gv_collection_bank[lp_player], "d");
    // }

    // lib1_gf_LoadDecks(lp_player);
    // lib1_gf_AddBonusEssenceforLegacyPlayer(lp_player);
}

void lib1_gf_HandleCorruptedDecklist (int lp_player, int lp_race, int lp_decklist) {
    // Variable Declarations
    int lv_decklist_count;
    int lv_decklist_index;
    int lv_card_id;

    // Automatic Variable Declarations
    const int auto0C3E9A2B_ae = lib1_gv_dECKLIST_LIMIT;
    const int auto0C3E9A2B_ai = 1;

    // Variable Initialization

    // Implementation
    UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_D5801BD2"));
    lv_decklist_index = 0;
    for ( ; ( (auto0C3E9A2B_ai >= 0 && lv_decklist_index <= auto0C3E9A2B_ae) || (auto0C3E9A2B_ai < 0 && lv_decklist_index >= auto0C3E9A2B_ae) ) ; lv_decklist_index += auto0C3E9A2B_ai ) {
        lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist].lv_card_id[lv_decklist_index] = -1;
        lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist].lv_count[lv_decklist_index] = 0;
    }
    lv_decklist_index = 0;
    lv_decklist_count = 0;
    lv_card_id = 0;
    while ((lv_decklist_count <= lib1_gv_dECKLIST_LIMIT)) {
        if ((lib1_gv_card[lv_card_id].lv_race == lp_race) && (lib1_gf_CardOwnedCountCapped(lp_player, lv_card_id) >= 1)) {
            lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist].lv_card_id[lv_decklist_index] = lv_card_id;
            if ((lv_decklist_count == lib1_gv_dECKLIST_LIMIT)) {
                lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist].lv_count[lv_decklist_index] = 1;
                lv_decklist_count = (lv_decklist_count + 1);
            }
            else {
                lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist].lv_count[lv_decklist_index] = lib1_gf_CardOwnedCountCapped(lp_player, lv_card_id);
                lv_decklist_count = (lv_decklist_count + lib1_gf_CardOwnedCountCapped(lp_player, lv_card_id));
            }
            lv_decklist_index = (lv_decklist_index + 1);
        }

        lv_card_id = (lv_card_id + 1);
    }
    lib1_gf_SaveDecktoBank(lp_player, lp_race, lp_decklist);
}

void lib1_gf_LoadDecks (int lp_player) {
    // Variable Declarations
    int lv_race;
    int lv_deck;
    int lv_card;

    // Automatic Variable Declarations
    const int auto180EA3C5_ae = 2;
    const int auto180EA3C5_ai = 1;
    const int autoE12C4B0C_ae = lib1_gv_dECKLIST_PER_RACE_LIMIT;
    const int autoE12C4B0C_ai = 1;
    const int auto89EE2916_ae = lib1_gv_dECKLIST_LIMIT;
    const int auto89EE2916_ai = 1;

    // Variable Initialization

    // Implementation
    lv_race = 0;
    for ( ; ( (auto180EA3C5_ai >= 0 && lv_race <= auto180EA3C5_ae) || (auto180EA3C5_ai < 0 && lv_race >= auto180EA3C5_ae) ) ; lv_race += auto180EA3C5_ai ) {
        lv_deck = 0;
        for ( ; ( (autoE12C4B0C_ai >= 0 && lv_deck <= autoE12C4B0C_ae) || (autoE12C4B0C_ai < 0 && lv_deck >= autoE12C4B0C_ae) ) ; lv_deck += autoE12C4B0C_ai ) {
            if ((BankSectionExists(lib1_gv_collection_bank[lp_player], ("d" + IntToString(lv_race) + IntToString(lv_deck))) == true)) {
                lv_card = 0;
                for ( ; ( (auto89EE2916_ai >= 0 && lv_card <= auto89EE2916_ae) || (auto89EE2916_ai < 0 && lv_card >= auto89EE2916_ae) ) ; lv_card += auto89EE2916_ai ) {
                    lib1_gv_player_collection[lp_player].lv_decklist[lv_race][lv_deck].lv_count[lv_card] = StringToInt(StringWord(BankValueGetAsString(lib1_gv_collection_bank[lp_player], ("d" + IntToString(lv_race) + IntToString(lv_deck)), IntToString(lv_card)), 1));
                    lib1_gv_player_collection[lp_player].lv_decklist[lv_race][lv_deck].lv_card_id[lv_card] = StringToInt(StringWord(BankValueGetAsString(lib1_gv_collection_bank[lp_player], ("d" + IntToString(lv_race) + IntToString(lv_deck)), IntToString(lv_card)), 2));
                }
                lib1_gv_player_collection[lp_player].lv_decklist[lv_race][lv_deck].lv_name = BankValueGetAsString(lib1_gv_collection_bank[lp_player], ("d" + IntToString(lv_race) + IntToString(lv_deck)), "n");
                lib1_gf_SortDeck(lp_player, lv_race, lv_deck);
            }

        }
    }
    if (((BankSectionExists(lib1_gv_collection_bank[lp_player], "d00") == false) || (BankSectionExists(lib1_gv_collection_bank[lp_player], "d10") == false) || (BankSectionExists(lib1_gv_collection_bank[lp_player], "d20") == false))) {
        lib1_gf_CreateStarterDecks(lp_player);
        lib1_gf_SaveDecktoBank(lp_player, lib1_gv_tERRAN, 0);
        lib1_gf_SaveDecktoBank(lp_player, lib1_gv_zERG, 0);
        lib1_gf_SaveDecktoBank(lp_player, lib1_gv_pROTOSS, 0);
    }

    if ((BankSectionExists(lib1_gv_collection_bank[lp_player], "d") == true)) {
        lib1_gv_player_collection[lp_player].lv_default_decklist[lib1_gv_tERRAN] = BankValueGetAsInt(lib1_gv_collection_bank[lp_player], "d", IntToString(lib1_gv_tERRAN));
        lib1_gv_player_collection[lp_player].lv_default_decklist[lib1_gv_zERG] = BankValueGetAsInt(lib1_gv_collection_bank[lp_player], "d", IntToString(lib1_gv_zERG));
        lib1_gv_player_collection[lp_player].lv_default_decklist[lib1_gv_pROTOSS] = BankValueGetAsInt(lib1_gv_collection_bank[lp_player], "d", IntToString(lib1_gv_pROTOSS));
        if ((PlayerRace(lp_player) == "Terr")) {
            lib1_gv_player_collection[lp_player].lv_current_decklist = lib1_gv_player_collection[lp_player].lv_default_decklist[lib1_gv_tERRAN];
        }
        else if ((PlayerRace(lp_player) == "Zerg")) {
            lib1_gv_player_collection[lp_player].lv_current_decklist = lib1_gv_player_collection[lp_player].lv_default_decklist[lib1_gv_zERG];
        }
        else if ((PlayerRace(lp_player) == "Prot")) {
            lib1_gv_player_collection[lp_player].lv_current_decklist = lib1_gv_player_collection[lp_player].lv_default_decklist[lib1_gv_pROTOSS];
        }
    }

}

void lib1_gf_CreateStarterDecks (int lp_player) {
    // Variable Declarations
    int lv_count;
    int lv_id;

    // Automatic Variable Declarations
    const int auto5A0C049B_ae = 2;
    const int auto5A0C049B_ai = 1;
    const int autoFA1DAFE7_ae = 2;
    const int autoFA1DAFE7_ai = 1;
    const int autoD8F6D511_ae = 2;
    const int autoD8F6D511_ai = 1;

    // Variable Initialization

    // Implementation
    lib1_gv_player_collection[lp_player].lv_decklist[lib1_gv_tERRAN][0].lv_name = "Terran Starter";
    lib1_gf_AddCardtoDecklist(lp_player, lib1_gv_tERRAN, 0, lib1_gf_GetCardIDByName("MULE"));
    lib1_gf_AddCardtoDecklist(lp_player, lib1_gv_tERRAN, 0, lib1_gf_GetCardIDByName("Repair Crew"));
    lib1_gf_AddCardtoDecklist(lp_player, lib1_gv_tERRAN, 0, lib1_gf_GetCardIDByName("Tactical Nuke"));
    lib1_gf_AddCardtoDecklist(lp_player, lib1_gv_tERRAN, 0, lib1_gf_GetCardIDByName("Battlecruiser"));
    lib1_gf_AddCardtoDecklist(lp_player, lib1_gv_tERRAN, 0, lib1_gf_GetCardIDByName("Doom Drop"));
    lib1_gf_AddCardtoDecklist(lp_player, lib1_gv_tERRAN, 0, lib1_gf_GetCardIDByName("Reconstruction"));
    lv_count = 1;
    for ( ; ( (auto5A0C049B_ai >= 0 && lv_count <= auto5A0C049B_ae) || (auto5A0C049B_ai < 0 && lv_count >= auto5A0C049B_ae) ) ; lv_count += auto5A0C049B_ai ) {
        lib1_gf_AddCardtoDecklist(lp_player, lib1_gv_tERRAN, 0, lib1_gf_GetCardIDByName("Marine Squad"));
        lib1_gf_AddCardtoDecklist(lp_player, lib1_gv_tERRAN, 0, lib1_gf_GetCardIDByName("Thor"));
        lib1_gf_AddCardtoDecklist(lp_player, lib1_gv_tERRAN, 0, lib1_gf_GetCardIDByName("Reaper Gang"));
        lib1_gf_AddCardtoDecklist(lp_player, lib1_gv_tERRAN, 0, lib1_gf_GetCardIDByName("Marine Blitz"));
        lib1_gf_AddCardtoDecklist(lp_player, lib1_gv_tERRAN, 0, lib1_gf_GetCardIDByName("Barracks"));
        lib1_gf_AddCardtoDecklist(lp_player, lib1_gv_tERRAN, 0, lib1_gf_GetCardIDByName("Bunker"));
        lib1_gf_AddCardtoDecklist(lp_player, lib1_gv_tERRAN, 0, lib1_gf_GetCardIDByName("Yamato Cannon"));
        lib1_gf_AddCardtoDecklist(lp_player, lib1_gv_tERRAN, 0, lib1_gf_GetCardIDByName("Supply Drop"));
        lib1_gf_AddCardtoDecklist(lp_player, lib1_gv_tERRAN, 0, lib1_gf_GetCardIDByName("Scanner Sweep"));
        lib1_gf_AddCardtoDecklist(lp_player, lib1_gv_tERRAN, 0, lib1_gf_GetCardIDByName("Twin Turrets"));
        lib1_gf_AddCardtoDecklist(lp_player, lib1_gv_tERRAN, 0, lib1_gf_GetCardIDByName("Seeker Missiles"));
        lib1_gf_AddCardtoDecklist(lp_player, lib1_gv_tERRAN, 0, lib1_gf_GetCardIDByName("Starport"));
        lib1_gf_AddCardtoDecklist(lp_player, lib1_gv_tERRAN, 0, lib1_gf_GetCardIDByName("Strike Cannons"));
        lib1_gf_AddCardtoDecklist(lp_player, lib1_gv_tERRAN, 0, lib1_gf_GetCardIDByName("Widow Mines"));
        lib1_gf_AddCardtoDecklist(lp_player, lib1_gv_tERRAN, 0, lib1_gf_GetCardIDByName("Medivac Runners"));
        lib1_gf_AddCardtoDecklist(lp_player, lib1_gv_tERRAN, 0, lib1_gf_GetCardIDByName("Siege Tanks"));
        lib1_gf_AddCardtoDecklist(lp_player, lib1_gv_tERRAN, 0, lib1_gf_GetCardIDByName("Operation Clearsky"));
    }
    lib1_gv_player_collection[lp_player].lv_decklist[lib1_gv_zERG][0].lv_name = "Zerg Starter";
    lib1_gf_AddCardtoDecklist(lp_player, lib1_gv_zERG, 0, lib1_gf_GetCardIDByName("Spire"));
    lib1_gf_AddCardtoDecklist(lp_player, lib1_gv_zERG, 0, lib1_gf_GetCardIDByName("Unstable Broodlings"));
    lib1_gf_AddCardtoDecklist(lp_player, lib1_gv_zERG, 0, lib1_gf_GetCardIDByName("Tunneling Roaches"));
    lib1_gf_AddCardtoDecklist(lp_player, lib1_gv_zERG, 0, lib1_gf_GetCardIDByName("Baneling Bombs"));
    lib1_gf_AddCardtoDecklist(lp_player, lib1_gv_zERG, 0, lib1_gf_GetCardIDByName("Neural Parasite"));
    lib1_gf_AddCardtoDecklist(lp_player, lib1_gv_zERG, 0, lib1_gf_GetCardIDByName("Ultralisk Cavern"));
    lv_count = 1;
    for ( ; ( (autoFA1DAFE7_ai >= 0 && lv_count <= autoFA1DAFE7_ae) || (autoFA1DAFE7_ai < 0 && lv_count >= autoFA1DAFE7_ae) ) ; lv_count += autoFA1DAFE7_ai ) {
        lib1_gf_AddCardtoDecklist(lp_player, lib1_gv_zERG, 0, lib1_gf_GetCardIDByName("Spawning Pool"));
        lib1_gf_AddCardtoDecklist(lp_player, lib1_gv_zERG, 0, lib1_gf_GetCardIDByName("Hydralisk Den"));
        lib1_gf_AddCardtoDecklist(lp_player, lib1_gv_zERG, 0, lib1_gf_GetCardIDByName("Spore Crawlers"));
        lib1_gf_AddCardtoDecklist(lp_player, lib1_gv_zERG, 0, lib1_gf_GetCardIDByName("Metabolic Boost"));
        lib1_gf_AddCardtoDecklist(lp_player, lib1_gv_zERG, 0, lib1_gf_GetCardIDByName("Zergling Pack"));
        lib1_gf_AddCardtoDecklist(lp_player, lib1_gv_zERG, 0, lib1_gf_GetCardIDByName("Overseer"));
        lib1_gf_AddCardtoDecklist(lp_player, lib1_gv_zERG, 0, lib1_gf_GetCardIDByName("Burrowed Ambush"));
        lib1_gf_AddCardtoDecklist(lp_player, lib1_gv_zERG, 0, lib1_gf_GetCardIDByName("Savage Ultralisks"));
        lib1_gf_AddCardtoDecklist(lp_player, lib1_gv_zERG, 0, lib1_gf_GetCardIDByName("Hydralisk Cluster"));
        lib1_gf_AddCardtoDecklist(lp_player, lib1_gv_zERG, 0, lib1_gf_GetCardIDByName("Roach Cluster"));
        lib1_gf_AddCardtoDecklist(lp_player, lib1_gv_zERG, 0, lib1_gf_GetCardIDByName("Rolling Banelings"));
        lib1_gf_AddCardtoDecklist(lp_player, lib1_gv_zERG, 0, lib1_gf_GetCardIDByName("Frenzied Zerglings"));
        lib1_gf_AddCardtoDecklist(lp_player, lib1_gv_zERG, 0, lib1_gf_GetCardIDByName("Caustic Corruptors"));
        lib1_gf_AddCardtoDecklist(lp_player, lib1_gv_zERG, 0, lib1_gf_GetCardIDByName("Overlord"));
        lib1_gf_AddCardtoDecklist(lp_player, lib1_gv_zERG, 0, lib1_gf_GetCardIDByName("Brood Lords"));
        lib1_gf_AddCardtoDecklist(lp_player, lib1_gv_zERG, 0, lib1_gf_GetCardIDByName("Larval Queens"));
        lib1_gf_AddCardtoDecklist(lp_player, lib1_gv_zERG, 0, lib1_gf_GetCardIDByName("Sieging Ravagers"));
    }
    lib1_gv_player_collection[lp_player].lv_decklist[lib1_gv_pROTOSS][0].lv_name = "Protoss Starter";
    lib1_gf_AddCardtoDecklist(lp_player, lib1_gv_pROTOSS, 0, lib1_gf_GetCardIDByName("High Templar"));
    lib1_gf_AddCardtoDecklist(lp_player, lib1_gv_pROTOSS, 0, lib1_gf_GetCardIDByName("Nerazim Assassins"));
    lib1_gf_AddCardtoDecklist(lp_player, lib1_gv_pROTOSS, 0, lib1_gf_GetCardIDByName("Vortex"));
    lib1_gf_AddCardtoDecklist(lp_player, lib1_gv_pROTOSS, 0, lib1_gf_GetCardIDByName("Warp Offensive"));
    lib1_gf_AddCardtoDecklist(lp_player, lib1_gv_pROTOSS, 0, lib1_gf_GetCardIDByName("Robotics Facility"));
    lib1_gf_AddCardtoDecklist(lp_player, lib1_gv_pROTOSS, 0, lib1_gf_GetCardIDByName("Barraging Disruptors"));
    lv_count = 1;
    for ( ; ( (autoD8F6D511_ai >= 0 && lv_count <= autoD8F6D511_ae) || (autoD8F6D511_ai < 0 && lv_count >= autoD8F6D511_ae) ) ; lv_count += autoD8F6D511_ai ) {
        lib1_gf_AddCardtoDecklist(lp_player, lib1_gv_pROTOSS, 0, lib1_gf_GetCardIDByName("Gateway"));
        lib1_gf_AddCardtoDecklist(lp_player, lib1_gv_pROTOSS, 0, lib1_gf_GetCardIDByName("Photon Cannons"));
        lib1_gf_AddCardtoDecklist(lp_player, lib1_gv_pROTOSS, 0, lib1_gf_GetCardIDByName("Psionic Storm"));
        lib1_gf_AddCardtoDecklist(lp_player, lib1_gv_pROTOSS, 0, lib1_gf_GetCardIDByName("Chrono Boost"));
        lib1_gf_AddCardtoDecklist(lp_player, lib1_gv_pROTOSS, 0, lib1_gf_GetCardIDByName("Graviton Beam"));
        lib1_gf_AddCardtoDecklist(lp_player, lib1_gv_pROTOSS, 0, lib1_gf_GetCardIDByName("Warp Prism"));
        lib1_gf_AddCardtoDecklist(lp_player, lib1_gv_pROTOSS, 0, lib1_gf_GetCardIDByName("Observer"));
        lib1_gf_AddCardtoDecklist(lp_player, lib1_gv_pROTOSS, 0, lib1_gf_GetCardIDByName("Ardent Zealots"));
        lib1_gf_AddCardtoDecklist(lp_player, lib1_gv_pROTOSS, 0, lib1_gf_GetCardIDByName("Blinking Stalkers"));
        lib1_gf_AddCardtoDecklist(lp_player, lib1_gv_pROTOSS, 0, lib1_gf_GetCardIDByName("Immortal Phalanx"));
        lib1_gf_AddCardtoDecklist(lp_player, lib1_gv_pROTOSS, 0, lib1_gf_GetCardIDByName("Void Rays"));
        lib1_gf_AddCardtoDecklist(lp_player, lib1_gv_pROTOSS, 0, lib1_gf_GetCardIDByName("Carrier"));
        lib1_gf_AddCardtoDecklist(lp_player, lib1_gv_pROTOSS, 0, lib1_gf_GetCardIDByName("Impending Tempests"));
        lib1_gf_AddCardtoDecklist(lp_player, lib1_gv_pROTOSS, 0, lib1_gf_GetCardIDByName("Stargate"));
        lib1_gf_AddCardtoDecklist(lp_player, lib1_gv_pROTOSS, 0, lib1_gf_GetCardIDByName("Photon Overcharge"));
        lib1_gf_AddCardtoDecklist(lp_player, lib1_gv_pROTOSS, 0, lib1_gf_GetCardIDByName("Dark Templar"));
        lib1_gf_AddCardtoDecklist(lp_player, lib1_gv_pROTOSS, 0, lib1_gf_GetCardIDByName("Infiltrating Adepts"));
    }
}

void lib1_gf_SaveDecktoBank (int lp_player, int lp_race, int lp_deck) {
    // Variable Declarations
    int lv_card_index;

    // Automatic Variable Declarations
    const int autoD6CA3A21_ae = lib1_gv_dECKLIST_LIMIT;
    const int autoD6CA3A21_ai = 1;

    // Variable Initialization

    // Implementation
    if ((BankSectionExists(lib1_gv_collection_bank[lp_player], ("d" + IntToString(lp_race) + IntToString(lp_deck))) == false)) {
        BankSectionCreate(lib1_gv_collection_bank[lp_player], ("d" + IntToString(lp_race) + IntToString(lp_deck)));
    }

    lv_card_index = 0;
    for ( ; ( (autoD6CA3A21_ai >= 0 && lv_card_index <= autoD6CA3A21_ae) || (autoD6CA3A21_ai < 0 && lv_card_index >= autoD6CA3A21_ae) ) ; lv_card_index += autoD6CA3A21_ai ) {
        BankValueSetFromString(lib1_gv_collection_bank[lp_player], ("d" + IntToString(lp_race) + IntToString(lp_deck)), IntToString(lv_card_index), (IntToString(lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_deck].lv_count[lv_card_index]) + " " + IntToString(lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_deck].lv_card_id[lv_card_index])));
    }
    BankValueSetFromString(lib1_gv_collection_bank[lp_player], ("d" + IntToString(lp_race) + IntToString(lp_deck)), "n", lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_deck].lv_name);
    BankSave(lib1_gv_collection_bank[lp_player]);
}

void lib1_gf_SaveDecktoBankCopyFromNextDeck (int lp_player, int lp_race, int lp_deck) {
    // Variable Declarations
    int lv_card_index;

    // Automatic Variable Declarations
    const int auto8C7EFE36_ae = lib1_gv_dECKLIST_LIMIT;
    const int auto8C7EFE36_ai = 1;

    // Variable Initialization

    // Implementation
    if ((BankSectionExists(lib1_gv_collection_bank[lp_player], ("d" + IntToString(lp_race) + IntToString(lp_deck))) == false)) {
        BankSectionCreate(lib1_gv_collection_bank[lp_player], ("d" + IntToString(lp_race) + IntToString(lp_deck)));
    }

    lv_card_index = 0;
    for ( ; ( (auto8C7EFE36_ai >= 0 && lv_card_index <= auto8C7EFE36_ae) || (auto8C7EFE36_ai < 0 && lv_card_index >= auto8C7EFE36_ae) ) ; lv_card_index += auto8C7EFE36_ai ) {
        BankValueSetFromString(lib1_gv_collection_bank[lp_player], ("d" + IntToString(lp_race) + IntToString(lp_deck)), IntToString(lv_card_index), BankValueGetAsString(lib1_gv_collection_bank[lp_player], ("d" + IntToString(lp_race) + IntToString((lp_deck + 1))), IntToString(lv_card_index)));
    }
    BankValueSetFromString(lib1_gv_collection_bank[lp_player], ("d" + IntToString(lp_race) + IntToString(lp_deck)), "n", BankValueGetAsString(lib1_gv_collection_bank[lp_player], ("d" + IntToString(lp_race) + IntToString((lp_deck + 1))), "n"));
    BankSave(lib1_gv_collection_bank[lp_player]);
}

void lib1_gf_DeleteDeckfromBank (int lp_player, int lp_race, int lp_deck) {
    // Variable Declarations
    int lv_card_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    BankSectionRemove(lib1_gv_collection_bank[lp_player], ("d" + IntToString(lp_race) + IntToString(lp_deck)));
    BankSave(lib1_gv_collection_bank[lp_player]);
}

void lib1_gf_SaveDeckasMainDeck (int lp_player, int lp_race, int lp_deck) {
    // Automatic Variable Declarations
    // Implementation
    if ((BankSectionExists(lib1_gv_collection_bank[lp_player], "d") == false)) {
        BankSectionCreate(lib1_gv_collection_bank[lp_player], "d");
    }

    BankValueSetFromInt(lib1_gv_collection_bank[lp_player], "d", IntToString(lp_race), lp_deck);
    BankSave(lib1_gv_collection_bank[lp_player]);
}

void lib1_gf_SortDeck (int lp_player, int lp_race, int lp_decklist) {
    // Variable Declarations
    int lv_card_id;
    int lv_count;
    int lv_sort_index;
    int lv_max_sort_index;
    bool lv_sorted;

    // Automatic Variable Declarations
    const int autoFB03EEB5_ae = lib1_gv_dECKLIST_LIMIT;
    const int autoFB03EEB5_ai = 1;
    int autoF917A195_ae;
    const int autoF917A195_ai = 1;

    // Variable Initialization
    lv_max_sort_index = -1;

    // Implementation
    lv_sort_index = 0;
    for ( ; ( (autoFB03EEB5_ai >= 0 && lv_sort_index <= autoFB03EEB5_ae) || (autoFB03EEB5_ai < 0 && lv_sort_index >= autoFB03EEB5_ae) ) ; lv_sort_index += autoFB03EEB5_ai ) {
        if ((lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist].lv_count[lv_sort_index] > 0) && (lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist].lv_card_id[lv_sort_index] >= 0)) {
            lv_max_sort_index = (lv_max_sort_index + 1);
        }

    }
    while ((lv_sorted == false)) {
        lv_sorted = true;
        autoF917A195_ae = (lv_max_sort_index - 1);
        lv_sort_index = 0;
        for ( ; ( (autoF917A195_ai >= 0 && lv_sort_index <= autoF917A195_ae) || (autoF917A195_ai < 0 && lv_sort_index >= autoF917A195_ae) ) ; lv_sort_index += autoF917A195_ai ) {
            if ((lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist].lv_card_id[lv_sort_index] >= 0) && (lib1_gf_CardsInOrder(lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist].lv_card_id[lv_sort_index], lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist].lv_card_id[(lv_sort_index + 1)]) == false)) {
                lv_sorted = false;
                lv_card_id = lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist].lv_card_id[lv_sort_index];
                lv_count = lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist].lv_count[lv_sort_index];
                lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist].lv_card_id[lv_sort_index] = lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist].lv_card_id[(lv_sort_index + 1)];
                lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist].lv_count[lv_sort_index] = lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist].lv_count[(lv_sort_index + 1)];
                lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist].lv_card_id[(lv_sort_index + 1)] = lv_card_id;
                lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist].lv_count[(lv_sort_index + 1)] = lv_count;
            }

        }
    }
}

int lib1_gf_CountinSavedDecklist (int lp_player, int lp_race, int lp_decklist_id, int lp_card_id) {
    // Variable Declarations
    int lv_decklist_index;

    // Automatic Variable Declarations
    const int autoC1297279_ae = lib1_gv_dECKLIST_LIMIT;
    const int autoC1297279_ai = 1;

    // Variable Initialization

    // Implementation
    if ((BankSectionExists(lib1_gv_collection_bank[lp_player], ("d" + IntToString(lp_race) + IntToString(lp_decklist_id))) == true)) {
        lv_decklist_index = 0;
        for ( ; ( (autoC1297279_ai >= 0 && lv_decklist_index <= autoC1297279_ae) || (autoC1297279_ai < 0 && lv_decklist_index >= autoC1297279_ae) ) ; lv_decklist_index += autoC1297279_ai ) {
            if ((StringWord(BankValueGetAsString(lib1_gv_collection_bank[lp_player], ("d" + IntToString(lp_race) + IntToString(lp_decklist_id)), IntToString(lv_decklist_index)), 2) == IntToString(lp_card_id))) {
                return StringToInt(StringWord(BankValueGetAsString(lib1_gv_collection_bank[lp_player], ("d" + IntToString(lp_race) + IntToString(lp_decklist_id)), IntToString(lv_decklist_index)), 1));
            }

        }
    }

    return 0;
}

int lib1_gf_MaxCountinAnySavedDecklist (int lp_player, int lp_race, int lp_card_id) {
    // Variable Declarations
    int lv_decklist_index;
    int lv_max_count;
    int lv_count;

    // Automatic Variable Declarations
    const int auto4D4653AA_ae = lib1_gv_dECKLIST_PER_RACE_LIMIT;
    const int auto4D4653AA_ai = 1;

    // Variable Initialization

    // Implementation
    lv_decklist_index = 0;
    for ( ; ( (auto4D4653AA_ai >= 0 && lv_decklist_index <= auto4D4653AA_ae) || (auto4D4653AA_ai < 0 && lv_decklist_index >= auto4D4653AA_ae) ) ; lv_decklist_index += auto4D4653AA_ai ) {
        lv_count = lib1_gf_CountinSavedDecklist(lp_player, lp_race, lv_decklist_index, lp_card_id);
        if ((lv_count == 2)) {
            return lv_count;
        }
        else if ((lv_count > lv_max_count)) {
            lv_max_count = lv_count;
        }
    }
    return lv_max_count;
}

void lib1_gf_LoadCollection (int lp_player) {
    // Variable Declarations
    int lv_card_id;

    // Automatic Variable Declarations
    const int auto5D90EEB2_ae = lib1_gv_mAX_CARD_ID;
    const int auto5D90EEB2_ai = 1;

    // Variable Initialization

    // Implementation
    if ((BankSectionExists(lib1_gv_collection_bank[lp_player], "cu") == true) && (BankSectionExists(lib1_gv_collection_bank[lp_player], "cb") == true) && (BankSectionExists(lib1_gv_collection_bank[lp_player], "cs") == true)) {
        lv_card_id = 0;
        for ( ; ( (auto5D90EEB2_ai >= 0 && lv_card_id <= auto5D90EEB2_ae) || (auto5D90EEB2_ai < 0 && lv_card_id >= auto5D90EEB2_ae) ) ; lv_card_id += auto5D90EEB2_ai ) {
            lib1_gv_player_collection[lp_player].lv_unpacked[lv_card_id] = BankValueGetAsInt(lib1_gv_collection_bank[lp_player], "cu", IntToString(lv_card_id));
            lib1_gv_player_collection[lp_player].lv_bought[lv_card_id] = BankValueGetAsInt(lib1_gv_collection_bank[lp_player], "cb", IntToString(lv_card_id));
            lib1_gv_player_collection[lp_player].lv_sold[lv_card_id] = BankValueGetAsInt(lib1_gv_collection_bank[lp_player], "cs", IntToString(lv_card_id));
        }
    }

}

void lib1_gf_SaveCollectiontoBank (int lp_player) {
    // Variable Declarations
    int lv_card_id;

    // Automatic Variable Declarations
    const int auto737E88FE_ae = lib1_gv_mAX_CARD_ID;
    const int auto737E88FE_ai = 1;

    // Variable Initialization

    // Implementation
    if ((BankSectionExists(lib1_gv_collection_bank[lp_player], "cu") == false)) {
        BankSectionCreate(lib1_gv_collection_bank[lp_player], "cu");
    }

    if ((BankSectionExists(lib1_gv_collection_bank[lp_player], "cb") == false)) {
        BankSectionCreate(lib1_gv_collection_bank[lp_player], "cb");
    }

    if ((BankSectionExists(lib1_gv_collection_bank[lp_player], "cs") == false)) {
        BankSectionCreate(lib1_gv_collection_bank[lp_player], "cs");
    }

    lv_card_id = 0;
    for ( ; ( (auto737E88FE_ai >= 0 && lv_card_id <= auto737E88FE_ae) || (auto737E88FE_ai < 0 && lv_card_id >= auto737E88FE_ae) ) ; lv_card_id += auto737E88FE_ai ) {
        if ((lib1_gv_card[lv_card_id].lv_set >= 0)) {
            BankValueSetFromInt(lib1_gv_collection_bank[lp_player], "cu", IntToString(lv_card_id), lib1_gv_player_collection[lp_player].lv_unpacked[lv_card_id]);
            BankValueSetFromInt(lib1_gv_collection_bank[lp_player], "cb", IntToString(lv_card_id), lib1_gv_player_collection[lp_player].lv_bought[lv_card_id]);
            BankValueSetFromInt(lib1_gv_collection_bank[lp_player], "cs", IntToString(lv_card_id), lib1_gv_player_collection[lp_player].lv_sold[lv_card_id]);
        }

    }
    BankSave(lib1_gv_collection_bank[lp_player]);
}

void lib1_gf_LoadPlayerVariables (int lp_player) {
    // Variable Declarations
    int lv_race;
    int lv_mode;
    int lv_set;

    // Automatic Variable Declarations
    const int autoFE0D3E3A_ae = 2;
    const int autoFE0D3E3A_ai = 1;
    const int auto7A5049B1_ae = lib1_gv_mAX_MODE_ID;
    const int auto7A5049B1_ai = 1;
    const int auto50579854_ae = lib1_gv_mAX_SET_ID;
    const int auto50579854_ai = 1;

    // Variable Initialization

    // Implementation
    if ((BankSectionExists(lib1_gv_collection_bank[lp_player], "r") == true)) {
        lib1_gv_player_collection[lp_player].lv_credits_earned = BankValueGetAsInt(lib1_gv_collection_bank[lp_player], "r", "c");
        lib1_gv_player_collection[lp_player].lv_essence_earned = BankValueGetAsInt(lib1_gv_collection_bank[lp_player], "r", "e");
        lib1_gv_player_collection[lp_player].lv_bonus_essence = BankValueGetAsInt(lib1_gv_collection_bank[lp_player], "r", "be");
    }

    if ((BankSectionExists(lib1_gv_collection_bank[lp_player], "s") == true)) {
        lib1_gv_player[lp_player].lv_forced_reset_id = BankValueGetAsInt(lib1_gv_collection_bank[lp_player], "s", "rid");
        lv_race = 0;
        for ( ; ( (autoFE0D3E3A_ai >= 0 && lv_race <= autoFE0D3E3A_ae) || (autoFE0D3E3A_ai < 0 && lv_race >= autoFE0D3E3A_ae) ) ; lv_race += autoFE0D3E3A_ai ) {
            lib1_gv_player[lp_player].lv_damage_dealt_average[lv_race] = BankValueGetAsInt(lib1_gv_collection_bank[lp_player], "s", ("dda" + IntToString(lv_race)));
            lib1_gv_player[lp_player].lv_damage_received_average[lv_race] = BankValueGetAsInt(lib1_gv_collection_bank[lp_player], "s", ("dra" + IntToString(lv_race)));
            lib1_gv_player[lp_player].lv_units_killed_total[lv_race] = BankValueGetAsInt(lib1_gv_collection_bank[lp_player], "s", ("uk" + IntToString(lv_race)));
            lib1_gv_player[lp_player].lv_heroes_killed_total[lv_race] = BankValueGetAsInt(lib1_gv_collection_bank[lp_player], "s", ("hk" + IntToString(lv_race)));
            lib1_gv_player[lp_player].lv_structures_killed_total[lv_race] = BankValueGetAsInt(lib1_gv_collection_bank[lp_player], "s", ("sk" + IntToString(lv_race)));
            lib1_gv_player[lp_player].lv_units_created_total[lv_race] = BankValueGetAsInt(lib1_gv_collection_bank[lp_player], "s", ("uc" + IntToString(lv_race)));
            lib1_gv_player[lp_player].lv_heroes_created_total[lv_race] = BankValueGetAsInt(lib1_gv_collection_bank[lp_player], "s", ("hc" + IntToString(lv_race)));
            lib1_gv_player[lp_player].lv_structures_created_total[lv_race] = BankValueGetAsInt(lib1_gv_collection_bank[lp_player], "s", ("sc" + IntToString(lv_race)));
            lib1_gv_player[lp_player].lv_units_killed_reset_point[lv_race] = BankValueGetAsInt(lib1_gv_collection_bank[lp_player], "s", ("ukr" + IntToString(lv_race)));
            lib1_gv_player[lp_player].lv_heroes_killed_reset_point[lv_race] = BankValueGetAsInt(lib1_gv_collection_bank[lp_player], "s", ("hkr" + IntToString(lv_race)));
            lib1_gv_player[lp_player].lv_structures_killed_reset_point[lv_race] = BankValueGetAsInt(lib1_gv_collection_bank[lp_player], "s", ("skr" + IntToString(lv_race)));
            lib1_gv_player[lp_player].lv_units_created_reset_point[lv_race] = BankValueGetAsInt(lib1_gv_collection_bank[lp_player], "s", ("ucr" + IntToString(lv_race)));
            lib1_gv_player[lp_player].lv_heroes_created_reset_point[lv_race] = BankValueGetAsInt(lib1_gv_collection_bank[lp_player], "s", ("hcr" + IntToString(lv_race)));
            lib1_gv_player[lp_player].lv_structures_created_reset_point[lv_race] = BankValueGetAsInt(lib1_gv_collection_bank[lp_player], "s", ("scr" + IntToString(lv_race)));
            lv_mode = 0;
            for ( ; ( (auto7A5049B1_ai >= 0 && lv_mode <= auto7A5049B1_ae) || (auto7A5049B1_ai < 0 && lv_mode >= auto7A5049B1_ae) ) ; lv_mode += auto7A5049B1_ai ) {
                lib1_gv_player[lp_player].lv_wins[lv_race][lv_mode] = BankValueGetAsInt(lib1_gv_collection_bank[lp_player], "s", (IntToString(lv_race) + IntToString(lv_mode) + "w"));
                lib1_gv_player[lp_player].lv_losses[lv_race][lv_mode] = BankValueGetAsInt(lib1_gv_collection_bank[lp_player], "s", (IntToString(lv_race) + IntToString(lv_mode) + "l"));
                lib1_gv_player[lp_player].lv_quits[lv_race][lv_mode] = BankValueGetAsInt(lib1_gv_collection_bank[lp_player], "s", (IntToString(lv_race) + IntToString(lv_mode) + "q"));
                lib1_gv_player[lp_player].lv_wins_reset_point[lv_race][lv_mode] = BankValueGetAsInt(lib1_gv_collection_bank[lp_player], "s", (IntToString(lv_race) + IntToString(lv_mode) + "wr"));
                lib1_gv_player[lp_player].lv_losses_reset_point[lv_race][lv_mode] = BankValueGetAsInt(lib1_gv_collection_bank[lp_player], "s", (IntToString(lv_race) + IntToString(lv_mode) + "lr"));
                lib1_gv_player[lp_player].lv_quits_reset_point[lv_race][lv_mode] = BankValueGetAsInt(lib1_gv_collection_bank[lp_player], "s", (IntToString(lv_race) + IntToString(lv_mode) + "qr"));
            }
        }
    }

    if ((BankSectionExists(lib1_gv_collection_bank[lp_player], "p") == true)) {
        lv_set = 0;
        for ( ; ( (auto50579854_ai >= 0 && lv_set <= auto50579854_ae) || (auto50579854_ai < 0 && lv_set >= auto50579854_ae) ) ; lv_set += auto50579854_ai ) {
            lib1_gv_player_collection[lp_player].lv_packs_opened[lv_set] = BankValueGetAsInt(lib1_gv_collection_bank[lp_player], "p", IntToString(lv_set));
        }
    }

}

void lib1_gf_SaveCurrencytoBank (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((BankSectionExists(lib1_gv_collection_bank[lp_player], "r") == false)) {
        BankSectionCreate(lib1_gv_collection_bank[lp_player], "r");
    }

    BankValueSetFromInt(lib1_gv_collection_bank[lp_player], "r", "c", lib1_gv_player_collection[lp_player].lv_credits_earned);
    BankValueSetFromInt(lib1_gv_collection_bank[lp_player], "r", "e", lib1_gv_player_collection[lp_player].lv_essence_earned);
    BankValueSetFromInt(lib1_gv_collection_bank[lp_player], "r", "be", lib1_gv_player_collection[lp_player].lv_bonus_essence);
    BankSave(lib1_gv_collection_bank[lp_player]);
}

void lib1_gf_SaveWinsLossestoBank (int lp_player) {
    // Variable Declarations
    int lv_race;
    int lv_mode;

    // Automatic Variable Declarations
    const int autoAC89AE2B_ae = 2;
    const int autoAC89AE2B_ai = 1;
    const int auto658AF111_ae = lib1_gv_mAX_MODE_ID;
    const int auto658AF111_ai = 1;

    // Variable Initialization

    // Implementation
    if ((BankSectionExists(lib1_gv_collection_bank[lp_player], "s") == false)) {
        BankSectionCreate(lib1_gv_collection_bank[lp_player], "s");
    }

    lv_race = 0;
    for ( ; ( (autoAC89AE2B_ai >= 0 && lv_race <= autoAC89AE2B_ae) || (autoAC89AE2B_ai < 0 && lv_race >= autoAC89AE2B_ae) ) ; lv_race += autoAC89AE2B_ai ) {
        lv_mode = 0;
        for ( ; ( (auto658AF111_ai >= 0 && lv_mode <= auto658AF111_ae) || (auto658AF111_ai < 0 && lv_mode >= auto658AF111_ae) ) ; lv_mode += auto658AF111_ai ) {
            BankValueSetFromInt(lib1_gv_collection_bank[lp_player], "s", (IntToString(lv_race) + IntToString(lv_mode) + "w"), lib1_gv_player[lp_player].lv_wins[lv_race][lv_mode]);
            BankValueSetFromInt(lib1_gv_collection_bank[lp_player], "s", (IntToString(lv_race) + IntToString(lv_mode) + "l"), lib1_gv_player[lp_player].lv_losses[lv_race][lv_mode]);
            BankValueSetFromInt(lib1_gv_collection_bank[lp_player], "s", (IntToString(lv_race) + IntToString(lv_mode) + "q"), lib1_gv_player[lp_player].lv_quits[lv_race][lv_mode]);
        }
    }
    BankSave(lib1_gv_collection_bank[lp_player]);
}

void lib1_gf_SaveStatstoBank (int lp_player) {
    // Variable Declarations
    int lv_race;
    int lv_mode;
    fixed lv_old_average;
    fixed lv_new_value;
    fixed lv_new_game_count;

    // Automatic Variable Declarations
    const int auto3CCABD66_ae = 2;
    const int auto3CCABD66_ai = 1;
    const int auto04D87038_ae = 2;
    const int auto04D87038_ai = 1;

    // Variable Initialization

    // Implementation
    if ((BankKeyExists(lib1_gv_collection_bank[lp_player], "s", "dd0") == true)) {
        lv_race = 0;
        for ( ; ( (auto3CCABD66_ai >= 0 && lv_race <= auto3CCABD66_ae) || (auto3CCABD66_ai < 0 && lv_race >= auto3CCABD66_ae) ) ; lv_race += auto3CCABD66_ai ) {
            lib1_gf_RecordAverageDamageFromLegacyBank(lp_player, lv_race);
            BankKeyRemove(lib1_gv_collection_bank[lp_player], "s", ("dd" + IntToString(lv_race)));
            BankKeyRemove(lib1_gv_collection_bank[lp_player], "s", ("dr" + IntToString(lv_race)));
            BankKeyRemove(lib1_gv_collection_bank[lp_player], "s", ("ddr" + IntToString(lv_race)));
            BankKeyRemove(lib1_gv_collection_bank[lp_player], "s", ("drr" + IntToString(lv_race)));
        }
    }
    else {
        lv_new_game_count = lib1_gf_TotalGamesForRace(lp_player, lib1_gf_GetPlayerRaceID(lp_player), true);
        if ((lv_new_game_count >= 1)) {
            lv_old_average = lib1_gv_player[lp_player].lv_damage_dealt_average[lib1_gf_GetPlayerRaceID(lp_player)];
            lv_new_value = lib1_gv_player[lp_player].lv_damage_dealt[lib1_gf_GetPlayerRaceID(lp_player)];
            lib1_gv_player[lp_player].lv_damage_dealt_average[lib1_gf_GetPlayerRaceID(lp_player)] = (lv_old_average + ((lv_new_value - lv_old_average) / lv_new_game_count));
            lv_old_average = lib1_gv_player[lp_player].lv_damage_received_average[lib1_gf_GetPlayerRaceID(lp_player)];
            lv_new_value = lib1_gv_player[lp_player].lv_damage_received[lib1_gf_GetPlayerRaceID(lp_player)];
            lib1_gv_player[lp_player].lv_damage_received_average[lib1_gf_GetPlayerRaceID(lp_player)] = (lv_old_average + ((lv_new_value - lv_old_average) / lv_new_game_count));
        }

    }
    if ((BankSectionExists(lib1_gv_collection_bank[lp_player], "s") == false)) {
        BankSectionCreate(lib1_gv_collection_bank[lp_player], "s");
    }

    lv_race = 0;
    for ( ; ( (auto04D87038_ai >= 0 && lv_race <= auto04D87038_ae) || (auto04D87038_ai < 0 && lv_race >= auto04D87038_ae) ) ; lv_race += auto04D87038_ai ) {
        BankValueSetFromInt(lib1_gv_collection_bank[lp_player], "s", ("dda" + IntToString(lv_race)), RoundI(lib1_gv_player[lp_player].lv_damage_dealt_average[lv_race]));
        BankValueSetFromInt(lib1_gv_collection_bank[lp_player], "s", ("dra" + IntToString(lv_race)), RoundI(lib1_gv_player[lp_player].lv_damage_received_average[lv_race]));
        BankValueSetFromInt(lib1_gv_collection_bank[lp_player], "s", ("uk" + IntToString(lv_race)), lib1_gv_player[lp_player].lv_units_killed_total[lv_race]);
        BankValueSetFromInt(lib1_gv_collection_bank[lp_player], "s", ("hk" + IntToString(lv_race)), lib1_gv_player[lp_player].lv_heroes_killed_total[lv_race]);
        BankValueSetFromInt(lib1_gv_collection_bank[lp_player], "s", ("sk" + IntToString(lv_race)), lib1_gv_player[lp_player].lv_structures_killed_total[lv_race]);
        BankValueSetFromInt(lib1_gv_collection_bank[lp_player], "s", ("uc" + IntToString(lv_race)), lib1_gv_player[lp_player].lv_units_created_total[lv_race]);
        BankValueSetFromInt(lib1_gv_collection_bank[lp_player], "s", ("hc" + IntToString(lv_race)), lib1_gv_player[lp_player].lv_heroes_created_total[lv_race]);
        BankValueSetFromInt(lib1_gv_collection_bank[lp_player], "s", ("sc" + IntToString(lv_race)), lib1_gv_player[lp_player].lv_structures_created_total[lv_race]);
    }
    BankSave(lib1_gv_collection_bank[lp_player]);
}

void lib1_gf_SaveStatsResetPointtoBank (int lp_player) {
    // Variable Declarations
    int lv_race;
    int lv_mode;

    // Automatic Variable Declarations
    const int auto9EF4174A_ae = 2;
    const int auto9EF4174A_ai = 1;
    const int autoCD9FAD73_ae = 2;
    const int autoCD9FAD73_ai = 1;
    const int autoA9E1284C_ae = lib1_gv_mAX_MODE_ID;
    const int autoA9E1284C_ai = 1;

    // Variable Initialization

    // Implementation
    if ((BankSectionExists(lib1_gv_collection_bank[lp_player], "s") == false)) {
        BankSectionCreate(lib1_gv_collection_bank[lp_player], "s");
    }

    BankValueSetFromInt(lib1_gv_collection_bank[lp_player], "s", "rid", lib1_gv_player[lp_player].lv_forced_reset_id);
    lv_race = 0;
    for ( ; ( (auto9EF4174A_ai >= 0 && lv_race <= auto9EF4174A_ae) || (auto9EF4174A_ai < 0 && lv_race >= auto9EF4174A_ae) ) ; lv_race += auto9EF4174A_ai ) {
        BankValueSetFromFixed(lib1_gv_collection_bank[lp_player], "s", ("ddr" + IntToString(lv_race)), lib1_gv_player[lp_player].lv_damage_dealt_reset_point[lv_race]);
        BankValueSetFromFixed(lib1_gv_collection_bank[lp_player], "s", ("drr" + IntToString(lv_race)), lib1_gv_player[lp_player].lv_damage_received_reset_point[lv_race]);
        BankValueSetFromInt(lib1_gv_collection_bank[lp_player], "s", ("ukr" + IntToString(lv_race)), lib1_gv_player[lp_player].lv_units_killed_reset_point[lv_race]);
        BankValueSetFromInt(lib1_gv_collection_bank[lp_player], "s", ("hkr" + IntToString(lv_race)), lib1_gv_player[lp_player].lv_heroes_killed_reset_point[lv_race]);
        BankValueSetFromInt(lib1_gv_collection_bank[lp_player], "s", ("skr" + IntToString(lv_race)), lib1_gv_player[lp_player].lv_structures_killed_reset_point[lv_race]);
        BankValueSetFromInt(lib1_gv_collection_bank[lp_player], "s", ("ucr" + IntToString(lv_race)), lib1_gv_player[lp_player].lv_units_created_reset_point[lv_race]);
        BankValueSetFromInt(lib1_gv_collection_bank[lp_player], "s", ("hcr" + IntToString(lv_race)), lib1_gv_player[lp_player].lv_heroes_created_reset_point[lv_race]);
        BankValueSetFromInt(lib1_gv_collection_bank[lp_player], "s", ("scr" + IntToString(lv_race)), lib1_gv_player[lp_player].lv_structures_created_reset_point[lv_race]);
    }
    lv_race = 0;
    for ( ; ( (autoCD9FAD73_ai >= 0 && lv_race <= autoCD9FAD73_ae) || (autoCD9FAD73_ai < 0 && lv_race >= autoCD9FAD73_ae) ) ; lv_race += autoCD9FAD73_ai ) {
        lv_mode = 0;
        for ( ; ( (autoA9E1284C_ai >= 0 && lv_mode <= autoA9E1284C_ae) || (autoA9E1284C_ai < 0 && lv_mode >= autoA9E1284C_ae) ) ; lv_mode += autoA9E1284C_ai ) {
            BankValueSetFromInt(lib1_gv_collection_bank[lp_player], "s", (IntToString(lv_race) + IntToString(lv_mode) + "wr"), lib1_gv_player[lp_player].lv_wins_reset_point[lv_race][lv_mode]);
            BankValueSetFromInt(lib1_gv_collection_bank[lp_player], "s", (IntToString(lv_race) + IntToString(lv_mode) + "lr"), lib1_gv_player[lp_player].lv_losses_reset_point[lv_race][lv_mode]);
            BankValueSetFromInt(lib1_gv_collection_bank[lp_player], "s", (IntToString(lv_race) + IntToString(lv_mode) + "qr"), lib1_gv_player[lp_player].lv_quits_reset_point[lv_race][lv_mode]);
        }
    }
    BankSave(lib1_gv_collection_bank[lp_player]);
}

void lib1_gf_SavePackPurchasestoBank (int lp_player, int lp_set_id) {
    // Variable Declarations
    int lv_set_index;

    // Automatic Variable Declarations
    const int autoDB0C31B4_ae = lib1_gv_mAX_SET_ID;
    const int autoDB0C31B4_ai = 1;

    // Variable Initialization

    // Implementation
    if ((BankSectionExists(lib1_gv_collection_bank[lp_player], "p") == false)) {
        BankSectionCreate(lib1_gv_collection_bank[lp_player], "p");
    }

    lv_set_index = 0;
    for ( ; ( (autoDB0C31B4_ai >= 0 && lv_set_index <= autoDB0C31B4_ae) || (autoDB0C31B4_ai < 0 && lv_set_index >= autoDB0C31B4_ae) ) ; lv_set_index += autoDB0C31B4_ai ) {
        BankValueSetFromInt(lib1_gv_collection_bank[lp_player], "p", IntToString(lv_set_index), lib1_gv_player_collection[lp_player].lv_packs_opened[lv_set_index]);
    }
    BankSave(lib1_gv_collection_bank[lp_player]);
}

void lib1_gf_SaveMetadatatoBank (int lp_player) {
    // Variable Declarations
    int lv_set_index;

    // Automatic Variable Declarations
    const int autoF706BCAD_ae = lib1_gv_mAX_SET_ID;
    const int autoF706BCAD_ai = 1;

    // Variable Initialization

    // Implementation
    if ((BankSectionExists(lib1_gv_collection_bank[lp_player], "bankinfo") == false)) {
        BankSectionCreate(lib1_gv_collection_bank[lp_player], "bankinfo");
    }

    lv_set_index = 0;
    for ( ; ( (autoF706BCAD_ai >= 0 && lv_set_index <= autoF706BCAD_ae) || (autoF706BCAD_ai < 0 && lv_set_index >= autoF706BCAD_ae) ) ; lv_set_index += autoF706BCAD_ai ) {
        BankValueSetFromString(lib1_gv_collection_bank[lp_player], "bankinfo", "timestamp", libNtve_gf_FormatDateTimeasString(InitialDateTimeGet()));
    }
    BankSave(lib1_gv_collection_bank[lp_player]);
}

void lib1_gf_RecordAverageDamageFromLegacyBank (int lp_player, int lp_race) {
    // Variable Declarations
    fixed lv_damage_dealt_since_last_reset;
    fixed lv_damage_received_since_last_reset;
    int lv_damage_dealt_since_last_reset_int;
    int lv_damage_received_since_last_reset_int;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_damage_dealt_since_last_reset = BankValueGetAsFixed(lib1_gv_collection_bank[lp_player], "s", ("dd" + IntToString(lp_race)));
    lv_damage_dealt_since_last_reset = (lv_damage_dealt_since_last_reset - BankValueGetAsFixed(lib1_gv_collection_bank[lp_player], "s", ("ddr" + IntToString(lp_race))));
    lv_damage_received_since_last_reset = BankValueGetAsFixed(lib1_gv_collection_bank[lp_player], "s", ("dr" + IntToString(lp_race)));
    lv_damage_received_since_last_reset = (lv_damage_received_since_last_reset - BankValueGetAsFixed(lib1_gv_collection_bank[lp_player], "s", ("drr" + IntToString(lp_race))));
    if ((lv_damage_dealt_since_last_reset < 0.0)) {
        lv_damage_dealt_since_last_reset_int = (524287 + (RoundI(lv_damage_dealt_since_last_reset) - -524288));
        lv_damage_dealt_since_last_reset_int = MaxI(lv_damage_dealt_since_last_reset_int, 0);
    }
    else {
        lv_damage_dealt_since_last_reset_int = RoundI(lv_damage_dealt_since_last_reset);
    }
    if ((lv_damage_received_since_last_reset < 0.0)) {
        lv_damage_received_since_last_reset_int = (524287 + (RoundI(lv_damage_received_since_last_reset) - -524288));
        lv_damage_received_since_last_reset_int = MaxI(lv_damage_received_since_last_reset_int, 0);
    }
    else {
        lv_damage_received_since_last_reset_int = RoundI(lv_damage_received_since_last_reset);
    }
    if ((lib1_gf_TotalGamesForRace(lp_player, lp_race, true) == 0)) {
        lib1_gv_player[lp_player].lv_damage_dealt_average[lp_race] = 0.0;
        lib1_gv_player[lp_player].lv_damage_received_average[lp_race] = 0.0;
    }
    else {
        lib1_gv_player[lp_player].lv_damage_dealt_average[lp_race] = (lv_damage_dealt_since_last_reset_int / lib1_gf_TotalGamesForRace(lp_player, lp_race, true));
        lib1_gv_player[lp_player].lv_damage_received_average[lp_race] = (lv_damage_received_since_last_reset_int / lib1_gf_TotalGamesForRace(lp_player, lp_race, true));
    }
}

void lib1_gf_LoadCosmetics (int lp_player) {
    // Variable Declarations
    int lv_id;
    string lv_decoration;
    string lv_pet;
    string lv_trophy;
    string lv_status;
    int lv_pet_enabled;
    int lv_trophy_enabled;
    const string lv_oWNED_AND_ENABLED = "2";
    const string lv_oWNED = "1";

    // Automatic Variable Declarations
    const int autoBD5EC99D_ae = lib1_gv_dECORATION_LIMIT;
    const int autoBD5EC99D_ai = 1;
    const int autoB6C46AFD_ae = lib1_gv_pET_LIMIT;
    const int autoB6C46AFD_ai = 1;
    const int auto14007A25_ae = lib1_gv_dECORATION_LIMIT;
    const int auto14007A25_ai = 1;
    const int auto4D39CF1F_ae = lib1_gv_pET_LIMIT;
    const int auto4D39CF1F_ai = 1;
    const int autoB666682E_ae = lib1_gv_tROPHY_LIMIT;
    const int autoB666682E_ai = 1;

    // Variable Initialization
    lv_decoration = "";
    lv_pet = "";
    lv_trophy = "";
    lv_status = "";

    // Implementation
    if ((BankSectionExists(lib1_gv_collection_bank[lp_player], "c") == true)) {
        lv_decoration = BankValueGetAsString(lib1_gv_collection_bank[lp_player], "c", "d");
        lv_id = 0;
        for ( ; ( (auto14007A25_ai >= 0 && lv_id <= auto14007A25_ae) || (auto14007A25_ai < 0 && lv_id >= auto14007A25_ae) ) ; lv_id += auto14007A25_ai ) {
            if ((lib1_gv_cosmetic_decoration[lv_id].lv_available == true)) {
                lv_status = StringSub(lv_decoration, (lv_id + 1), (lv_id + 1));
                if ((lv_status == lv_oWNED_AND_ENABLED) && ((lib1_gv_cosmetic_decoration[lv_id].lv_exclusive == false) || (lib1_gv_player_cosmetics[lp_player].lv_decoration_owned[lv_id] == true))) {
                    lib1_gv_player_cosmetics[lp_player].lv_decoration_owned[lv_id] = true;
                    lib1_gv_player_cosmetics[lp_player].lv_decoration_enabled[lv_id] = true;
                }
                else if ((lv_status == lv_oWNED) && (lib1_gv_cosmetic_decoration[lv_id].lv_exclusive == false)) {
                    lib1_gv_player_cosmetics[lp_player].lv_decoration_owned[lv_id] = true;
                }
            }

        }
        lv_pet = BankValueGetAsString(lib1_gv_collection_bank[lp_player], "c", "p");
        lv_id = 0;
        for ( ; ( (auto4D39CF1F_ai >= 0 && lv_id <= auto4D39CF1F_ae) || (auto4D39CF1F_ai < 0 && lv_id >= auto4D39CF1F_ae) ) ; lv_id += auto4D39CF1F_ai ) {
            if ((lib1_gv_cosmetic_pet[lv_id].lv_available == true) && (lib1_gv_cosmetic_pet[lv_id].lv_exclusive == false)) {
                lv_status = StringSub(lv_pet, (lv_id + 1), (lv_id + 1));
                if ((lv_status == lv_oWNED)) {
                    lib1_gv_player_cosmetics[lp_player].lv_pet_owned[lv_id] = true;
                }

            }

        }
        lv_trophy = BankValueGetAsString(lib1_gv_collection_bank[lp_player], "c", "t");
        lv_id = 0;
        for ( ; ( (autoB666682E_ai >= 0 && lv_id <= autoB666682E_ae) || (autoB666682E_ai < 0 && lv_id >= autoB666682E_ae) ) ; lv_id += autoB666682E_ai ) {
            if ((lib1_gv_cosmetic_trophy[lv_id].lv_available == true) && (lib1_gv_cosmetic_trophy[lv_id].lv_exclusive == false)) {
                lv_status = StringSub(lv_trophy, (lv_id + 1), (lv_id + 1));
                if ((lv_status == lv_oWNED)) {
                    lib1_gv_player_cosmetics[lp_player].lv_trophy_owned[lv_id] = true;
                }

            }

        }
        lib1_gv_player_cosmetics[lp_player].lv_pet_enabled = BankValueGetAsInt(lib1_gv_collection_bank[lp_player], "c", "pe");
        lib1_gv_player_cosmetics[lp_player].lv_trophy_enabled = BankValueGetAsInt(lib1_gv_collection_bank[lp_player], "c", "te");
    }
    else {
        lv_id = 0;
        for ( ; ( (autoBD5EC99D_ai >= 0 && lv_id <= autoBD5EC99D_ae) || (autoBD5EC99D_ai < 0 && lv_id >= autoBD5EC99D_ae) ) ; lv_id += autoBD5EC99D_ai ) {
            if ((lib1_gv_player_cosmetics[lp_player].lv_decoration_owned[lv_id] == true)) {
                lib1_gv_player_cosmetics[lp_player].lv_decoration_enabled[lv_id] = true;
            }

        }
        lv_id = 0;
        for ( ; ( (autoB6C46AFD_ai >= 0 && lv_id <= autoB6C46AFD_ae) || (autoB6C46AFD_ai < 0 && lv_id >= autoB6C46AFD_ae) ) ; lv_id += autoB6C46AFD_ai ) {
            if ((lib1_gv_player_cosmetics[lp_player].lv_pet_owned[lv_id] == true)) {
                lib1_gv_player_cosmetics[lp_player].lv_pet_enabled = lv_id;
                break;
            }

        }
        lib1_gf_SaveCosmeticstoBank(lp_player);
    }
}

void lib1_gf_SaveCosmeticstoBank (int lp_player) {
    // Variable Declarations
    int lv_id;
    string lv_string_to_save;

    // Automatic Variable Declarations
    const int autoB9FC6188_ae = lib1_gv_dECORATION_LIMIT;
    const int autoB9FC6188_ai = 1;
    const int auto2E729B5C_ae = lib1_gv_pET_LIMIT;
    const int auto2E729B5C_ai = 1;
    const int autoFDC4340D_ae = lib1_gv_tROPHY_LIMIT;
    const int autoFDC4340D_ai = 1;

    // Variable Initialization
    lv_string_to_save = "";

    // Implementation
    if ((BankSectionExists(lib1_gv_collection_bank[lp_player], "c") == false)) {
        BankSectionCreate(lib1_gv_collection_bank[lp_player], "c");
    }

    lv_string_to_save = "";
    lv_id = 0;
    for ( ; ( (autoB9FC6188_ai >= 0 && lv_id <= autoB9FC6188_ae) || (autoB9FC6188_ai < 0 && lv_id >= autoB9FC6188_ae) ) ; lv_id += autoB9FC6188_ai ) {
        if ((lib1_gv_player_cosmetics[lp_player].lv_decoration_owned[lv_id] == true) && (lib1_gv_player_cosmetics[lp_player].lv_decoration_enabled[lv_id] == true)) {
            lv_string_to_save = (lv_string_to_save + "2");
        }
        else if ((lib1_gv_player_cosmetics[lp_player].lv_decoration_owned[lv_id] == true)) {
            lv_string_to_save = (lv_string_to_save + "1");
        }
        else if (true) {
            lv_string_to_save = (lv_string_to_save + "0");
        }
    }
    BankValueSetFromString(lib1_gv_collection_bank[lp_player], "c", "d", lv_string_to_save);
    lv_string_to_save = "";
    lv_id = 0;
    for ( ; ( (auto2E729B5C_ai >= 0 && lv_id <= auto2E729B5C_ae) || (auto2E729B5C_ai < 0 && lv_id >= auto2E729B5C_ae) ) ; lv_id += auto2E729B5C_ai ) {
        if ((lib1_gv_player_cosmetics[lp_player].lv_pet_owned[lv_id] == true)) {
            lv_string_to_save = (lv_string_to_save + "1");
        }
        else {
            lv_string_to_save = (lv_string_to_save + "0");
        }
    }
    BankValueSetFromString(lib1_gv_collection_bank[lp_player], "c", "p", lv_string_to_save);
    lv_string_to_save = "";
    lv_id = 0;
    for ( ; ( (autoFDC4340D_ai >= 0 && lv_id <= autoFDC4340D_ae) || (autoFDC4340D_ai < 0 && lv_id >= autoFDC4340D_ae) ) ; lv_id += autoFDC4340D_ai ) {
        if ((lib1_gv_player_cosmetics[lp_player].lv_trophy_owned[lv_id] == true)) {
            lv_string_to_save = (lv_string_to_save + "1");
        }
        else {
            lv_string_to_save = (lv_string_to_save + "0");
        }
    }
    BankValueSetFromString(lib1_gv_collection_bank[lp_player], "c", "t", lv_string_to_save);
    BankValueSetFromInt(lib1_gv_collection_bank[lp_player], "c", "pe", lib1_gv_player_cosmetics[lp_player].lv_pet_enabled);
    BankValueSetFromInt(lib1_gv_collection_bank[lp_player], "c", "te", lib1_gv_player_cosmetics[lp_player].lv_trophy_enabled);
    BankSave(lib1_gv_collection_bank[lp_player]);
}

bool lib1_gf_CollectionValid (int lp_player) {
    // Variable Declarations
    int lv_set_id;
    int lv_card_id;
    int lv_race;
    int lv_expected_credits;
    int lv_expected_essence;
    int lv_total_unpacked_for_set;

    // Automatic Variable Declarations
    const int auto55100875_ae = lib1_gv_mAX_CARD_ID;
    const int auto55100875_ai = 1;
    const int auto96F7DF62_ae = lib1_gv_mAX_SET_ID;
    const int auto96F7DF62_ai = 1;
    const int auto6603A59F_ae = lib1_gv_mAX_CARD_ID;
    const int auto6603A59F_ai = 1;
    const int autoE757513F_ae = 2;
    const int autoE757513F_ai = 1;
    const int auto0F9AB448_ae = lib1_gv_mAX_CARD_ID;
    const int auto0F9AB448_ai = 1;
    const int autoB8D8D272_ae = lib1_gv_mAX_CARD_ID;
    const int autoB8D8D272_ai = 1;

    // Variable Initialization

    // Implementation
    lv_card_id = 0;
    for ( ; ( (auto55100875_ai >= 0 && lv_card_id <= auto55100875_ae) || (auto55100875_ai < 0 && lv_card_id >= auto55100875_ae) ) ; lv_card_id += auto55100875_ai ) {
        if ((lib1_gv_card[lv_card_id].lv_set >= 0) && (lib1_gv_set[lib1_gv_card[lv_card_id].lv_set].lv_state != lib1_gv_aVAILABLE) && (lib1_gv_card[lv_card_id].lv_promo == false) && (lib1_gv_player_collection[lp_player].lv_unpacked[lv_card_id] >= 1)) {
            return false;
        }

    }
    lv_set_id = 0;
    for ( ; ( (auto96F7DF62_ai >= 0 && lv_set_id <= auto96F7DF62_ae) || (auto96F7DF62_ai < 0 && lv_set_id >= auto96F7DF62_ae) ) ; lv_set_id += auto96F7DF62_ai ) {
        lv_total_unpacked_for_set = 0;
        lv_card_id = 0;
        for ( ; ( (auto6603A59F_ai >= 0 && lv_card_id <= auto6603A59F_ae) || (auto6603A59F_ai < 0 && lv_card_id >= auto6603A59F_ae) ) ; lv_card_id += auto6603A59F_ai ) {
            if ((lib1_gv_card[lv_card_id].lv_set == lv_set_id)) {
                lv_total_unpacked_for_set = (lv_total_unpacked_for_set + lib1_gv_player_collection[lp_player].lv_unpacked[lv_card_id]);
            }

        }
        if (((lib1_gv_player_collection[lp_player].lv_packs_opened[lv_set_id] * 6) != lv_total_unpacked_for_set)) {
            return false;
        }

    }
    lv_race = 0;
    for ( ; ( (autoE757513F_ai >= 0 && lv_race <= autoE757513F_ae) || (autoE757513F_ai < 0 && lv_race >= autoE757513F_ae) ) ; lv_race += autoE757513F_ai ) {
        lv_expected_credits = (lv_expected_credits + (lib1_gv_player[lp_player].lv_wins[lv_race][lib1_gv_rANKED3V3] * lib1_gv_rANKED_WIN_REWARD));
        lv_expected_credits = (lv_expected_credits + (lib1_gv_player[lp_player].lv_losses[lv_race][lib1_gv_rANKED3V3] * lib1_gv_rANKED_LOSS_REWARD));
        lv_expected_credits = (lv_expected_credits + (lib1_gv_player[lp_player].lv_wins[lv_race][lib1_gv_cASUAL] * lib1_gv_rANKED_WIN_REWARD));
        lv_expected_credits = (lv_expected_credits + (lib1_gv_player[lp_player].lv_losses[lv_race][lib1_gv_cASUAL] * lib1_gv_rANKED_LOSS_REWARD));
        lv_expected_credits = (lv_expected_credits + (lib1_gv_player[lp_player].lv_wins[lv_race][lib1_gv_tUTORIAL] * lib1_gv_rANKED_WIN_REWARD));
        lv_expected_credits = (lv_expected_credits + (lib1_gv_player[lp_player].lv_losses[lv_race][lib1_gv_tUTORIAL] * lib1_gv_rANKED_LOSS_REWARD));
    }
    if ((lib1_gv_player_collection[lp_player].lv_credits_earned > lv_expected_credits)) {
        return false;
    }

    lv_card_id = 0;
    for ( ; ( (auto0F9AB448_ai >= 0 && lv_card_id <= auto0F9AB448_ae) || (auto0F9AB448_ai < 0 && lv_card_id >= auto0F9AB448_ae) ) ; lv_card_id += auto0F9AB448_ai ) {
        if ((lib1_gv_card[lv_card_id].lv_set >= 0)) {
            lv_expected_essence = (lv_expected_essence + (lib1_gv_player_collection[lp_player].lv_sold[lv_card_id] * lib1_gf_DestroyReward(lib1_gv_card[lv_card_id].lv_rarity, lib1_gv_card[lv_card_id].lv_set)));
            lv_expected_essence = (lv_expected_essence - (lib1_gv_player_collection[lp_player].lv_bought[lv_card_id] * lib1_gf_CraftingCost(lib1_gv_card[lv_card_id].lv_rarity, lib1_gv_card[lv_card_id].lv_set)));
        }

    }
    if ((lib1_gv_player_collection[lp_player].lv_essence_earned > lv_expected_essence)) {
        return false;
    }
    else if ((lib1_gv_player_collection[lp_player].lv_essence_earned < lv_expected_essence)) {
        lib1_gv_player_collection[lp_player].lv_essence_earned = lv_expected_essence;
    }
    if ((lib1_gv_player_collection[lp_player].lv_bonus_essence > 3360)) {
        return false;
    }

    if ((lib1_gf_PlayerEssence(lp_player) < -300)) {
        return false;
    }

    if ((lib1_gf_PlayerCredits(lp_player) < -100)) {
        return false;
    }

    lv_card_id = 0;
    for ( ; ( (autoB8D8D272_ai >= 0 && lv_card_id <= autoB8D8D272_ae) || (autoB8D8D272_ai < 0 && lv_card_id >= autoB8D8D272_ae) ) ; lv_card_id += autoB8D8D272_ai ) {
        if (((((lib1_gv_player_collection[lp_player].lv_starter[lv_card_id] + lib1_gv_player_collection[lp_player].lv_unpacked[lv_card_id] + lib1_gv_player_collection[lp_player].lv_bought[lv_card_id]) - lib1_gv_player_collection[lp_player].lv_sold[lv_card_id]) > 2) || (((lib1_gv_player_collection[lp_player].lv_starter[lv_card_id] + lib1_gv_player_collection[lp_player].lv_unpacked[lv_card_id] + lib1_gv_player_collection[lp_player].lv_bought[lv_card_id]) - lib1_gv_player_collection[lp_player].lv_sold[lv_card_id]) < 0) || ((lib1_gv_card[lv_card_id].lv_rarity == lib1_gv_uNIQUE) && (((lib1_gv_player_collection[lp_player].lv_starter[lv_card_id] + lib1_gv_player_collection[lp_player].lv_unpacked[lv_card_id] + lib1_gv_player_collection[lp_player].lv_bought[lv_card_id]) - lib1_gv_player_collection[lp_player].lv_sold[lv_card_id]) > 1)))) {
            return false;
        }

    }
    return true;
}

void lib1_gf_CheckIfDecksValid (int lp_player) {
    // Variable Declarations
    int lv_deckslot_id_1;
    int lv_deckslot_id_2;
    int lv_decklist;
    int lv_race;
    int lv_count;
    bool lv_valid;

    // Automatic Variable Declarations
    const int autoEB06086F_ae = 2;
    const int autoEB06086F_ai = 1;
    const int auto2B4E64C6_ae = lib1_gv_dECKLIST_PER_RACE_LIMIT;
    const int auto2B4E64C6_ai = 1;
    int autoDE0339E0_ae;
    const int autoDE0339E0_ai = 1;
    const int auto3558FA4E_ae = lib1_gv_dECKLIST_LIMIT;
    const int auto3558FA4E_ai = 1;
    const int autoBCC4FF4D_ae = lib1_gv_dECKLIST_LIMIT;
    const int autoBCC4FF4D_ai = 1;
    const int autoB4E674EE_ae = lib1_gv_dECKLIST_LIMIT;
    const int autoB4E674EE_ai = 1;

    // Variable Initialization

    // Implementation
    lv_race = 0;
    for ( ; ( (autoEB06086F_ai >= 0 && lv_race <= autoEB06086F_ae) || (autoEB06086F_ai < 0 && lv_race >= autoEB06086F_ae) ) ; lv_race += autoEB06086F_ai ) {
        lv_decklist = 0;
        for ( ; ( (auto2B4E64C6_ai >= 0 && lv_decklist <= auto2B4E64C6_ae) || (auto2B4E64C6_ai < 0 && lv_decklist >= auto2B4E64C6_ae) ) ; lv_decklist += auto2B4E64C6_ai ) {
            if ((lib1_gf_DecklistEmpty(lp_player, lv_race, lv_decklist) == false)) {
                lv_valid = true;
                autoDE0339E0_ae = (lib1_gv_dECKLIST_LIMIT - 1);
                lv_deckslot_id_1 = 0;
                for ( ; ( (autoDE0339E0_ai >= 0 && lv_deckslot_id_1 <= autoDE0339E0_ae) || (autoDE0339E0_ai < 0 && lv_deckslot_id_1 >= autoDE0339E0_ae) ) ; lv_deckslot_id_1 += autoDE0339E0_ai ) {
                    lv_deckslot_id_2 = (lv_deckslot_id_1 + 1);
                    for ( ; ( (auto3558FA4E_ai >= 0 && lv_deckslot_id_2 <= auto3558FA4E_ae) || (auto3558FA4E_ai < 0 && lv_deckslot_id_2 >= auto3558FA4E_ae) ) ; lv_deckslot_id_2 += auto3558FA4E_ai ) {
                        if ((lib1_gv_player_collection[lp_player].lv_decklist[lv_race][lv_decklist].lv_card_id[lv_deckslot_id_1] >= 0) && (lib1_gv_player_collection[lp_player].lv_decklist[lv_race][lv_decklist].lv_card_id[lv_deckslot_id_1] == lib1_gv_player_collection[lp_player].lv_decklist[lv_race][lv_decklist].lv_card_id[lv_deckslot_id_2])) {
                            lv_valid = false;
                        }

                    }
                }
                if ((lv_valid == true)) {
                    lv_deckslot_id_1 = 0;
                    for ( ; ( (autoBCC4FF4D_ai >= 0 && lv_deckslot_id_1 <= autoBCC4FF4D_ae) || (autoBCC4FF4D_ai < 0 && lv_deckslot_id_1 >= autoBCC4FF4D_ae) ) ; lv_deckslot_id_1 += autoBCC4FF4D_ai ) {
                        if ((lib1_gv_player_collection[lp_player].lv_decklist[lv_race][lv_decklist].lv_count[lv_deckslot_id_1] > 0) && (lib1_gv_player_collection[lp_player].lv_decklist[lv_race][lv_decklist].lv_card_id[lv_deckslot_id_1] >= 0) && (((lib1_gv_set[lib1_gv_card[lib1_gv_player_collection[lp_player].lv_decklist[lv_race][lv_decklist].lv_card_id[lv_deckslot_id_1]].lv_set].lv_state != lib1_gv_aVAILABLE) && (lib1_gv_card[lib1_gv_player_collection[lp_player].lv_decklist[lv_race][lv_decklist].lv_card_id[lv_deckslot_id_1]].lv_promo == false)) || (lib1_gf_RacesMatchForDeckbuilding(lv_race, lib1_gv_card[lib1_gv_player_collection[lp_player].lv_decklist[lv_race][lv_decklist].lv_card_id[lv_deckslot_id_1]].lv_race) == false) || (lib1_gv_player_collection[lp_player].lv_decklist[lv_race][lv_decklist].lv_count[lv_deckslot_id_1] > lib1_gf_CardOwnedCountCapped(lp_player, lib1_gv_player_collection[lp_player].lv_decklist[lv_race][lv_decklist].lv_card_id[lv_deckslot_id_1])))) {
                            lv_valid = false;
                        }

                    }
                }

                if ((lv_valid == true)) {
                    lv_count = 0;
                    lv_deckslot_id_1 = 0;
                    for ( ; ( (autoB4E674EE_ai >= 0 && lv_deckslot_id_1 <= autoB4E674EE_ae) || (autoB4E674EE_ai < 0 && lv_deckslot_id_1 >= autoB4E674EE_ae) ) ; lv_deckslot_id_1 += autoB4E674EE_ai ) {
                        lv_count = (lv_count + lib1_gv_player_collection[lp_player].lv_decklist[lv_race][lv_decklist].lv_count[lv_deckslot_id_1]);
                    }
                    if ((lv_count != (lib1_gv_dECKLIST_LIMIT + 1))) {
                        lv_valid = false;
                    }

                }

                if ((lv_valid == false)) {
                    lib1_gf_HandleCorruptedDecklist(lp_player, lv_race, lv_decklist);
                }

            }

        }
    }
}

bool lib1_gf_RacesMatchForDeckbuilding (int lp_deck_race, int lp_card_race) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_deck_race == lp_card_race)) {
        return true;
    }
    else if ((lp_card_race == lib1_gv_vOID)) {
        return true;
    }
    else if ((lp_deck_race == lib1_gv_tERRAN) && ((lp_card_race == lib1_gv_pROTOSS_TERRAN_FENIX) || (lp_card_race == lib1_gv_tERRAN_ZERG_UED))) {
        return true;
    }
    else if ((lp_deck_race == lib1_gv_zERG) && ((lp_card_race == lib1_gv_zERG_PROTOSS_KERRIGAN) || (lp_card_race == lib1_gv_tERRAN_ZERG_UED))) {
        return true;
    }
    else if ((lp_deck_race == lib1_gv_pROTOSS) && ((lp_card_race == lib1_gv_zERG_PROTOSS_KERRIGAN) || (lp_card_race == lib1_gv_pROTOSS_TERRAN_FENIX))) {
        return true;
    }
    return false;
}

void lib1_gf_InitializeStartingHand (int lp_player) {
    // Variable Declarations
    bool lv_fetch;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lib1_gv_tutorial_flag == true)) {
        lib1_gf_InitializeStartingHandTutorial(lp_player);
    }
    else {
        lib1_gf_DrawCardFromDecktoHand(lp_player);
        lib1_gf_DrawCardFromDecktoHand(lp_player);
        lib1_gf_DrawCardFromDecktoHand(lp_player);
    }
}

void lib1_gf_InitializeGameModeTeams () {
    // Variable Declarations
    int lv_player_team_0;
    int lv_player_team_1;
    int lv_player;

    // Automatic Variable Declarations
    const int autoC75EAF0F_ae = 6;
    const int autoC75EAF0F_ai = 1;
    playergroup auto1A532BAD_g;
    int auto1A532BAD_var;
    playergroup auto36482DA9_g;
    int auto36482DA9_var;
    playergroup auto4D21D39C_g;
    int auto4D21D39C_var;
    playergroup autoFFE9A18C_g;
    int autoFFE9A18C_var;

    // Variable Initialization

    // Implementation
    if (((lib1_gv_test_tutorial_mode == true) || (GameAttributeGameValue("1") == "0004"))) {
        lib1_gf_SetTeamsTutorial();
        lib1_gv_game_mode = lib1_gv_tUTORIAL;
        lib1_gv_win_reward = lib1_gv_rANKED_WIN_REWARD;
        lib1_gv_loss_reward = lib1_gv_rANKED_LOSS_REWARD;
        if ((lib1_gf_TutorialWon(1) == false)) {
            lib1_gv_tutorial_flag = true;
            PlayerSetRace(1, "Terr");
            PlayerSetRace(2, "Zerg");
        }

    }
    else if ((GameAttributeGameValue("1") == "0001")) {
        lib1_gf_SetTeamsRanked();
        lib1_gv_game_mode = lib1_gv_rANKED3V3;
        lib1_gv_win_reward = lib1_gv_rANKED_WIN_REWARD;
        lib1_gv_loss_reward = lib1_gv_rANKED_LOSS_REWARD;
    }
    else if ((GameAttributeGameValue("1") == "0002")) {
        lib1_gf_SetTeamsArrangedTeams();
        lib1_gv_game_mode = lib1_gv_cASUAL;
        lib1_gv_win_reward = lib1_gv_rANKED_WIN_REWARD;
        lib1_gv_loss_reward = lib1_gv_rANKED_LOSS_REWARD;
    }
    else if ((GameAttributeGameValue("1") == "0003")) {
        lib1_gv_game_mode = lib1_gv_dECKEDITOR;
        lv_player = 1;
        for ( ; ( (autoC75EAF0F_ai >= 0 && lv_player <= autoC75EAF0F_ae) || (autoC75EAF0F_ai < 0 && lv_player >= autoC75EAF0F_ae) ) ; lv_player += autoC75EAF0F_ai ) {
            if ((PlayerStatus(lv_player) == c_playerStatusActive) && (PlayerType(lv_player) == c_playerTypeUser)) {
                PlayerGroupAdd(lib1_gv_team[0], lv_player);
            }

        }
    }
    if ((PlayerGroupCount(lib1_gv_team[0]) != PlayerGroupCount(lib1_gv_team[1])) && ((GameAttributeGameValue("1") == "0001") || (GameAttributeGameValue("1") == "0002"))) {
        lib1_gv_uneven_teams = true;
        lib1_gv_win_reward = 0;
        lib1_gv_loss_reward = 0;
    }

    if ((GameAttributeGameValue("1") != "0003")) {
        libNtve_gf_SetPlayerGroupAlliance(lib1_gv_team[0], libNtve_ge_AllianceSetting_AllyWithSharedVision);
        libNtve_gf_SetPlayerGroupAlliance(lib1_gv_team[1], libNtve_ge_AllianceSetting_AllyWithSharedVision);
        libNtve_gf_SetAllianceAspectForPlayerGroup(lib1_gv_team[0], c_allianceIdPower, true);
        libNtve_gf_SetAllianceAspectForPlayerGroup(lib1_gv_team[1], c_allianceIdPower, true);
        libNtve_gf_SetAllianceBetweenTwoPlayerGroups(lib1_gv_team[0], lib1_gv_team[1], libNtve_ge_AllianceSetting_Enemy);
        libNtve_gf_SetAllianceBetweenTwoPlayerGroups(lib1_gv_team[1], lib1_gv_team[0], libNtve_ge_AllianceSetting_Enemy);
        auto4D21D39C_g = lib1_gv_team[0];
        auto4D21D39C_var = -1;
        while (true) {
            auto4D21D39C_var = PlayerGroupNextPlayer(auto4D21D39C_g, auto4D21D39C_var);
            if (auto4D21D39C_var < 0) { break; }
            lib1_gv_player[auto4D21D39C_var].lv_attack_region = RegionFromId(8);
            lib1_gv_player[auto4D21D39C_var].lv_cleanup_region = RegionFromId(10);
            lib1_gv_player[auto4D21D39C_var].lv_defense_region = RegionFromId(11);
            lib1_gv_player[auto4D21D39C_var].lv_spawn_region = RegionFromId(1);
            lib1_gv_player[auto4D21D39C_var].lv_enemy_spawn_region = RegionFromId(2);
            lib1_gv_player[auto4D21D39C_var].lv_structure_region = RegionFromId(3);
            lib1_gv_player[auto4D21D39C_var].lv_aoe_target_region = RegionFromId(24);
            lib1_gv_player[auto4D21D39C_var].lv_enemy_build_region = RegionFromId(4);
            lib1_gv_player[auto4D21D39C_var].lv_enemy_defense_region = RegionFromId(12);
            lib1_gv_player[auto4D21D39C_var].lv_far_drop_region = RegionFromId(16);
            lib1_gv_player[auto4D21D39C_var].lv_close_drop_region = RegionFromId(17);
            CameraPan(auto4D21D39C_var, UnitGetPosition(UnitFromId(657494806)), 0.0, -1, 10.0, false);
        }
        autoFFE9A18C_g = lib1_gv_team[1];
        autoFFE9A18C_var = -1;
        while (true) {
            autoFFE9A18C_var = PlayerGroupNextPlayer(autoFFE9A18C_g, autoFFE9A18C_var);
            if (autoFFE9A18C_var < 0) { break; }
            lib1_gv_player[autoFFE9A18C_var].lv_attack_region = RegionFromId(7);
            lib1_gv_player[autoFFE9A18C_var].lv_cleanup_region = RegionFromId(9);
            lib1_gv_player[autoFFE9A18C_var].lv_defense_region = RegionFromId(12);
            lib1_gv_player[autoFFE9A18C_var].lv_spawn_region = RegionFromId(2);
            lib1_gv_player[autoFFE9A18C_var].lv_enemy_spawn_region = RegionFromId(1);
            lib1_gv_player[autoFFE9A18C_var].lv_structure_region = RegionFromId(4);
            lib1_gv_player[autoFFE9A18C_var].lv_aoe_target_region = RegionFromId(25);
            lib1_gv_player[autoFFE9A18C_var].lv_enemy_build_region = RegionFromId(3);
            lib1_gv_player[autoFFE9A18C_var].lv_enemy_defense_region = RegionFromId(11);
            lib1_gv_player[autoFFE9A18C_var].lv_close_drop_region = RegionFromId(16);
            lib1_gv_player[autoFFE9A18C_var].lv_far_drop_region = RegionFromId(17);
            CameraPan(autoFFE9A18C_var, UnitGetPosition(UnitFromId(685072410)), 0.0, -1, 10.0, false);
        }
        UnitSetOwner(UnitFromId(657494806), lib1_gf_HighestRankedPlayerinGroup(lib1_gv_team[0]), true);
        UnitBehaviorAdd(UnitFromId(657494806), "PermanentlyUncommandable", UnitFromId(657494806), 1);
        UnitSetOwner(UnitFromId(685072410), lib1_gf_HighestRankedPlayerinGroup(lib1_gv_team[1]), true);
        UnitBehaviorAdd(UnitFromId(685072410), "PermanentlyUncommandable", UnitFromId(685072410), 1);
    }
    else {
        auto1A532BAD_g = lib1_gv_team[0];
        auto1A532BAD_var = -1;
        while (true) {
            auto1A532BAD_var = PlayerGroupNextPlayer(auto1A532BAD_g, auto1A532BAD_var);
            if (auto1A532BAD_var < 0) { break; }
            lib1_gv_player[auto1A532BAD_var].lv_cleanup_region = RegionFromId(15);
        }
        auto36482DA9_g = lib1_gv_team[1];
        auto36482DA9_var = -1;
        while (true) {
            auto36482DA9_var = PlayerGroupNextPlayer(auto36482DA9_g, auto36482DA9_var);
            if (auto36482DA9_var < 0) { break; }
            lib1_gv_player[auto36482DA9_var].lv_cleanup_region = RegionFromId(15);
        }
    }
}

void lib1_gf_SetTeamsArrangedTeams () {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    playergroup auto943B9300_g;
    playergroup autoAD44996A_g;

    // Variable Initialization

    // Implementation
    auto943B9300_g = GameAttributePlayersForTeam(1);
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto943B9300_g, lv_player);
        if (lv_player < 0) { break; }
        if ((PlayerStatus(lv_player) == c_playerStatusActive) && (PlayerType(lv_player) == c_playerTypeUser)) {
            PlayerGroupAdd(lib1_gv_team[0], lv_player);
            lib1_gv_player[lv_player].lv_team = 0;
        }
        else if ((PlayerStatus(lv_player) == c_playerStatusActive) && (PlayerType(lv_player) == c_playerTypeComputer)) {
            PlayerGroupAdd(lib1_gv_team[0], lv_player);
            lib1_gv_player[lv_player].lv_team = 0;
            lib1_gv_player[lv_player].lv_use_ai = true;
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (StringExternal("Param/Value/lib_1_8FEFB42B") + IntToText(lv_player) + StringExternal("Param/Value/lib_1_5EFFDE9E")));
        }
    }
    autoAD44996A_g = GameAttributePlayersForTeam(2);
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoAD44996A_g, lv_player);
        if (lv_player < 0) { break; }
        if ((PlayerStatus(lv_player) == c_playerStatusActive) && (PlayerType(lv_player) == c_playerTypeUser)) {
            PlayerGroupAdd(lib1_gv_team[1], lv_player);
            lib1_gv_player[lv_player].lv_team = 1;
        }
        else if ((PlayerStatus(lv_player) == c_playerStatusActive) && (PlayerType(lv_player) == c_playerTypeComputer)) {
            PlayerGroupAdd(lib1_gv_team[1], lv_player);
            lib1_gv_player[lv_player].lv_team = 1;
            lib1_gv_player[lv_player].lv_use_ai = true;
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (StringExternal("Param/Value/lib_1_174CEB65") + IntToText(lv_player) + StringExternal("Param/Value/lib_1_5768678B")));
        }
    }
}

void lib1_gf_SetTeamsRanked () {
    // Variable Declarations
    int lv_player;
    int lv_team;
    playergroup lv_unsorted_players;

    // Automatic Variable Declarations
    playergroup auto72D715BF_g;

    // Variable Initialization
    lv_unsorted_players = PlayerGroupEmpty();

    // Implementation
    auto72D715BF_g = PlayerGroupAll();
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto72D715BF_g, lv_player);
        if (lv_player < 0) { break; }
        if ((PlayerStatus(lv_player) == c_playerStatusActive) && (PlayerType(lv_player) == c_playerTypeUser)) {
            PlayerGroupAdd(lv_unsorted_players, lv_player);
        }

    }
    while ((PlayerGroupCount(lv_unsorted_players) > 0)) {
        lv_player = lib1_gf_HighestRankedPlayerinGroup(lv_unsorted_players);
        PlayerGroupAdd(lib1_gv_team[lv_team], lv_player);
        lib1_gv_player[lv_player].lv_team = lv_team;
        PlayerGroupRemove(lv_unsorted_players, lv_player);
        if ((lv_team == 0)) {
            lv_team = 1;
        }
        else {
            lv_team = 0;
        }
    }
}

void lib1_gf_SetTeamsTutorial () {
    // Automatic Variable Declarations
    // Implementation
    PlayerGroupAdd(lib1_gv_team[0], 1);
    PlayerGroupAdd(lib1_gv_team[1], 2);
    lib1_gv_player[2].lv_use_ai = true;
}

int lib1_gf_HighestRankedPlayerinGroup (playergroup lp_group) {
    // Variable Declarations
    int lv_player;
    int lv_highest_ranked_player;

    // Automatic Variable Declarations
    playergroup autoFC49C288_g;

    // Variable Initialization

    // Implementation
    autoFC49C288_g = lp_group;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoFC49C288_g, lv_player);
        if (lv_player < 0) { break; }
        if (((lv_highest_ranked_player == 0) || (lib1_gf_MatchmakingRank(lv_player) > lib1_gf_MatchmakingRank(lv_highest_ranked_player)))) {
            lv_highest_ranked_player = lv_player;
        }

    }
    return lv_highest_ranked_player;
}

void lib1_gf_DisableSkins (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "AssimilatorTaldarim", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "FleetBeaconTaldarim", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ForgeTaldarim", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "GatewayTaldarim", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "PhotonCannonTaldarim", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "PylonTaldarim", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "PylonXPR", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "RoboticsFacilityTaldarim", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "RoboticsSupportBayTaldarim", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "StargateTaldarim", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "AdeptCE", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "AdeptTaldarim", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "AdeptPurifier", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "Carrier_AmonBrood_Collection", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "CarrierTaldarim", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "CarrierPurifier", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ColossusCE", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ColossusTaldarim", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ColossusPurifier", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ColossusTal", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "DarkTemplarTaldarim", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "DarkTemplarPurifier", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "DisruptorTaldarim", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "DisruptorPurifier", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "HighTemplarTaldarim", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "HighTemplarPurifier", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ImmortalAdun", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ImmortalTaldarim", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ImmortalPurifier", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "MothershipTaldarim", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "MothershipPurifier", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ObserverTaldarim", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ObserverPurifier", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "OracleTaldarim", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "OraclePurifier", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "PhoenixTaldarim", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "PhoenixPurifier", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ProbeTaldarim", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ProbeBlizzcon17", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ProbePurifier", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "SentryTaldarim", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "SentryPurifier", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "StalkerDeluxe", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "StalkerTaldarim", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "StalkerPurifier", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "TempestTaldarim", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "TempestPurifier", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "VoidRayTaldarim", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "VoidRayPurifier", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "WarpPrismTaldarim", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "WarpPrismPurifier", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "WarpPrismNerazim", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ZealotTaldarim", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ZealotXPR", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ZealotPurifier", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "SupplyDepotXPR", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "BansheeJunker", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "BansheeCovertOps", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "BattlecruiserJunker", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "BattlecruiserCovertOps", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "CycloneJunker", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "CycloneCovertOps", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "GhostNova", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "GhostEidolon", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "GhostJunker", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "GhostCovertOps", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "HellionJunker", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "HellionJunkerMM", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "HellionCovertOps", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "LiberatorJunker", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "LiberatorCovertOps", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "MarauderJunker", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "MarauderCovertOps", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "MarauderDeluxe", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "MarineXPR", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "MarineJunker", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "MarineCovertOps", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "MedivacJunker", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "MedivacCovertOps", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "RavenJunker", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "RavenCovertOps", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ReaperJunker", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ReaperCovertOps", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "SCVJunker", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "SCVCovertOps", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "SCVBlizzcon17", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "SiegeTankMerc", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "SiegeTankJunker", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "SiegeTankCovertOps", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ThorCE", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ThorJunker", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ThorCovertOps", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "VikingMecha", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "VikingJunker", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "VikingCovertOps", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "WidowMineJunker", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "WidowMineCovertOps", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "BanelingWebby", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "BanelingPrimal", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "BroodLord_PremiumSkin_Aquatic", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "BroodLordPrimal", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "BroodLordWebby", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "CorruptorWebby", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "CorruptorPrimal", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "DroneBlizzcon17", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "DroneWebby", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "DronePrimal", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "HydraliskWebby", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "HydraliskNoxious", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "HydraliskPrimal", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "InfestorWebby", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "InfestorPrimal", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "LurkerWebby", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "LurkerPrimal", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "MutaliskWebby", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "MutaliskPrimal", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "OverlordWebby", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "OverlordXPR", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "OverlordPrimal", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "OverSeerWebby", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "OverseerPrimal", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "QueenWebby", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "QueenPrimal", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "RavagerBone", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "RavagerWebby", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "RavagerPrimal", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "RoachDeluxe", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "RoachWebby", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "RoachPrimal", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "SwarmHostWebby", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "SwarmHostPrimal", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "UltraliskCE", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "UltraliskWebby", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "UltraliskPrimal", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ViperWebby", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ViperPrimal", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ZerglingWebby", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ZerglingXPR", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ZerglingPrimal", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "BanelingMecha", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "BroodLordMecha", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "CorruptorMecha", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "DroneMecha", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "HydraliskMecha", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "InfestorMecha", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "LurkerMecha", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "MutaliskMecha", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "OverlordMecha", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "OverseerMecha", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "QueenMecha", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "RavagerMecha", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "RoachMecha", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "SwarmHostMecha", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "UltraliskMecha", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ViperMecha", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ZerglingMecha", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "AdeptGolden", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "CarrierGolden", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ColossusGolden", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "DarkTemplarGolden", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "DisruptorGolden", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "HighTemplarGolden", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ImmortalGolden", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "MothershipGolden", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ObserverGolden", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "OracleGolden", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "PhoenixGolden", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ProbeGolden", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "SentryGolden", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "StalkerGolden", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "TempestGolden", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "VoidRayGolden", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "WarpPrismGolden", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ZealotGolden", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "BansheeUmojan", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "BattlecruiserUmojan", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "CycloneUmojan", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "GhostUmojan", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "HellionUmojan", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "LiberatorUmojan", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "MarauderUmojan", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "MarineUmojan", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "MedivacUmojan", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "RavenUmojan", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ReaperUmojan", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "SCVUmojan", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "SiegeTankUmojan", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ThorUmojan", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "VikingUmojan", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "WidowMineUmojan", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "StargateForged", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "RoboticsBayForged", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "DarkShrineForged", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "FleetBeaconForged", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "TemplarArchiveForged", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "PylonForged", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "NexusForged", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "AssimilatorForged", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "PhotonCannonForged", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "GatewayForged", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ForgeForged", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "RoboticsFacilityForged", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ShieldBatteryForged", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "CyberneticsCoreForged", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "TwilightCouncilForged", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "EngineeringBayCovertOps", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "TechLabCovertOps", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "StarportCovertOps", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ReactorCovertOps", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "MissileTurretCovertOps", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "CommandCenterCovertOps", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "SensorTowerCovertOps", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "GhostAcademyCovertOps", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "FusionCoreCovertOps", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "RefineryCovertOps", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "FactoryCovertOps", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "SupplyDepotCovertOps", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ArmoryCovertOps", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "BarracksCovertOps", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "BunkerCovertOps", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "BanelingNestMecha", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "EvolutionChamberMecha", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "ExtractorMecha", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "HatcheryMecha", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "HydraliskDenMecha", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "InfestationPitMecha", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "LurkerDenMecha", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "NydusNetworkMecha", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "RoachWarrenMecha", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "SpawningPoolMecha", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "SpineCrawlerMecha", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "SpireMecha", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "SporeCrawlerMecha", false);
    libNtve_gf_PlayerApplySkinReplacingExistingUnit(lp_player, "UltraliskCavernMecha", false);
}

void lib1_gf_RefreshUIRenderPriority () {
    // Automatic Variable Declarations
    // Implementation
    DialogCreate(0, 0, c_anchorCenter, 0, 0, true);
    DialogDestroy(DialogLastCreated());
}

int lib1_gf_UIDistance (int lp_x_1, int lp_y_1, int lp_x_2, int lp_y_2) {
    // Automatic Variable Declarations
    // Implementation
    return FixedToInt(SquareRoot((PowI((lp_x_1 - lp_x_2), 2.0) + PowI((lp_y_1 - lp_y_2), 2.0))));
}

int lib1_gf_ReplaceDialogImage (int lp_player, int lp_old_dialog_item, int lp_new_dialog_item, string lp_new_image, fixed lp_time, bool lp_desat) {
    // Automatic Variable Declarations
    // Implementation
    if ((libNtve_gf_DialogItemImage(lp_old_dialog_item, lp_player) != (lp_new_image))) {
        libNtve_gf_CreateDialogItemImage(lib1_gv_player[lp_player].lv_resources.lv_dialog, DialogControlGetWidth(lp_old_dialog_item, lp_player), DialogControlGetHeight(lp_old_dialog_item, lp_player), DialogControlGetAnchor(lp_old_dialog_item, lp_player), DialogControlGetOffsetX(lp_old_dialog_item, lp_player), DialogControlGetOffsetY(lp_old_dialog_item, lp_player), StringToText(""), lp_new_image, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), lp_desat, PlayerGroupAll());
        lib1_gf_FadeandDestroyDialogItem(lp_old_dialog_item, lp_time);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), lp_time, 0.0);
        return DialogControlLastCreated();
    }
    else {
        return lp_old_dialog_item;
    }
}

trigger auto_lib1_gf_FadeandDestroyDialog_Trigger = null;
int auto_lib1_gf_FadeandDestroyDialog_lp_dialog;
fixed auto_lib1_gf_FadeandDestroyDialog_lp_time;

void lib1_gf_FadeandDestroyDialog (int lp_dialog, fixed lp_time) {
    auto_lib1_gf_FadeandDestroyDialog_lp_dialog = lp_dialog;
    auto_lib1_gf_FadeandDestroyDialog_lp_time = lp_time;

    if (auto_lib1_gf_FadeandDestroyDialog_Trigger == null) {
        auto_lib1_gf_FadeandDestroyDialog_Trigger = TriggerCreate("auto_lib1_gf_FadeandDestroyDialog_TriggerFunc");
    }

    TriggerExecute(auto_lib1_gf_FadeandDestroyDialog_Trigger, false, false);
}

bool auto_lib1_gf_FadeandDestroyDialog_TriggerFunc (bool testConds, bool runActions) {
    int lp_dialog = auto_lib1_gf_FadeandDestroyDialog_lp_dialog;
    fixed lp_time = auto_lib1_gf_FadeandDestroyDialog_lp_time;

    // Variable Declarations
    fixed lv_transparency;
    fixed lv_starting_transparency;

    // Automatic Variable Declarations
    const fixed auto6456F6F9_ae = 100.0;
    const fixed auto6456F6F9_ai = 10.0;

    // Variable Initialization

    // Implementation
    lv_starting_transparency = DialogGetTransparency(lp_dialog);
    lv_starting_transparency = (lv_starting_transparency / 10.0);
    lv_starting_transparency = Round(lv_starting_transparency);
    lv_starting_transparency = (lv_starting_transparency * 10.0);
    lv_transparency = lv_starting_transparency;
    for ( ; ( (auto6456F6F9_ai >= 0 && lv_transparency <= auto6456F6F9_ae) || (auto6456F6F9_ai < 0 && lv_transparency >= auto6456F6F9_ae) ) ; lv_transparency += auto6456F6F9_ai ) {
        DialogSetTransparency(lp_dialog, lv_transparency);
        Wait((lp_time / 10.0), c_timeGame);
    }
    DialogDestroy(lp_dialog);
    return true;
}

void lib1_gf_FadeandDestroyDialogItem (int lp_dialog_item, fixed lp_time) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlFadeTransparency(lp_dialog_item, PlayerGroupAll(), lp_time, 100.0);
    lib1_gf_DestroyDialogItemAfterDelay(lp_dialog_item, lp_time);
}

trigger auto_lib1_gf_DestroyDialogItemAfterDelay_Trigger = null;
int auto_lib1_gf_DestroyDialogItemAfterDelay_lp_dialog_item;
fixed auto_lib1_gf_DestroyDialogItemAfterDelay_lp_delay;

void lib1_gf_DestroyDialogItemAfterDelay (int lp_dialog_item, fixed lp_delay) {
    auto_lib1_gf_DestroyDialogItemAfterDelay_lp_dialog_item = lp_dialog_item;
    auto_lib1_gf_DestroyDialogItemAfterDelay_lp_delay = lp_delay;

    if (auto_lib1_gf_DestroyDialogItemAfterDelay_Trigger == null) {
        auto_lib1_gf_DestroyDialogItemAfterDelay_Trigger = TriggerCreate("auto_lib1_gf_DestroyDialogItemAfterDelay_TriggerFunc");
    }

    TriggerExecute(auto_lib1_gf_DestroyDialogItemAfterDelay_Trigger, false, false);
}

bool auto_lib1_gf_DestroyDialogItemAfterDelay_TriggerFunc (bool testConds, bool runActions) {
    int lp_dialog_item = auto_lib1_gf_DestroyDialogItemAfterDelay_lp_dialog_item;
    fixed lp_delay = auto_lib1_gf_DestroyDialogItemAfterDelay_lp_delay;

    // Automatic Variable Declarations
    // Implementation
    Wait(lp_delay, c_timeGame);
    DialogControlDestroy(lp_dialog_item);
    return true;
}

string lib1_gf_GetUnitNameasString (bool lp_plural, string lp_unit_type) {
    // Variable Declarations
    string lv_path_string;
    string lv_name;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_path_string = "";
    lv_name = "";

    // Implementation
    lv_path_string = CatalogFieldValueGet(c_gameCatalogUnit, lp_unit_type, "Name", c_playerAny);
    if ((lp_plural == false)) {
        return lib1_gf_GetUnitNamefromPath(CatalogFieldValueGet(c_gameCatalogUnit, lp_unit_type, "Name", c_playerAny));
    }
    else {
        if (((lp_unit_type == "Colossus"))) {
            return "Colossi";
        }
        else if (((lp_unit_type == "DarkTemplar"))) {
            return "\xE9\xBB\x91\xE6\x9A\x97\xE5\x9C\xA3\xE5\xA0\x82\xE6\xAD\xA6\xE5\xA3\xAB";
        }
        else if (((lp_unit_type == "HighTemplar"))) {
            return "\xE9\xAB\x98\xE9\x98\xB6\xE5\x9C\xA3\xE5\xA0\x82\xE6\xAD\xA6\xE5\xA3\xAB";
        }
        else if (((lp_unit_type == "VikingFighter"))) {
            return "\xE7\xBB\xB4\xE4\xBA\xAC\xE6\x88\x98\xE6\x9C\xBA\xEF\xBC\x88\xE9\xA3\x9E\xE8\xA1\x8C\xE6\xA8\xA1\xE5\xBC\x8F\xEF\xBC\x89";
        }
        else if (((lp_unit_type == "VikingAssault"))) {
            return "\xE7\xBB\xB4\xE4\xBA\xAC\xE6\x88\x98\xE6\x9C\xBA (\xE5\xAF\xB9\xE5\x9C\xB0\xE6\xA8\xA1\xE5\xBC\x8F)";
        }
        else if (((lp_unit_type == "Roach") || (lp_unit_type == "RoachVile"))) {
            return "\xE8\x9F\x91\xE8\x9E\x82";
        }
        else if ((lp_unit_type == "Phoenix")) {
            return "\xE5\x87\xA4\xE5\x87\xB0";
        }
        else if ((lp_unit_type == "Scourge")) {
            return "\xE7\x88\x86\xE8\x9A\x8A";
        }
        else if ((lp_unit_type == "InfestedExploder")) {
            return "Volatile Infested";
        }
        else if ((lp_unit_type == "LocustMPFlying")) {
            return "\xE8\x9D\x97\xE8\x99\xAB(\xE9\xA3\x9E\xE8\xA1\x8C)";
        }
        return (lib1_gf_GetUnitNamefromPath(CatalogFieldValueGet(c_gameCatalogUnit, lp_unit_type, "Name", c_playerAny)));
        // return (lib1_gf_GetUnitNamefromPath(CatalogFieldValueGet(c_gameCatalogUnit, lp_unit_type, "Name", c_playerAny)) + "s");
    }
}

string lib1_gf_GetUnitNamefromPath (string lp_path) {
    // Automatic Variable Declarations
    // Implementation
    if ((StringContains(lp_path, "HybridNemesis", c_stringAnywhere, c_stringCase) == true)) {
        return "Hybrid Nemesis";
    }
    else if ((StringContains(lp_path, "HybridReaver", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE6\xB7\xB7\xE5\x90\x88\xE4\xBD\x93\xE5\x8A\xAB\xE6\x8E\xA0\xE8\x80\x85";
    }
    else if ((StringContains(lp_path, "HybridBehemoth", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE6\xB7\xB7\xE5\x90\x88\xE4\xBD\x93\xE5\xB7\xA8\xE5\x85\xBD";
    }
    else if ((StringContains(lp_path, "HybridDestroyer", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE6\xB7\xB7\xE5\x90\x88\xE4\xBD\x93\xE6\xAF\x81\xE7\x81\xAD\xE8\x80\x85";
    }
    else if ((StringContains(lp_path, "HybridDominator", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE6\xB7\xB7\xE5\x90\x88\xE4\xBD\x93\xE6\x94\xAF\xE9\x85\x8D\xE8\x80\x85";
    }
    else if ((StringContains(lp_path, "MoebiusHybrid", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE8\x8E\xAB\xE6\xAF\x94\xE6\x96\xAF\xE6\x9D\x82\xE7\xA7\x8D";
    }
    else if ((StringContains(lp_path, "SCV", c_stringAnywhere, c_stringCase) == true)) {
        return "SCV";
    }
    else if ((StringContains(lp_path, "Marine", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE6\x9C\xBA\xE6\x9E\xAA\xE5\x85\xB5";
    }
    else if ((StringContains(lp_path, "Reaper", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE6\xAD\xBB\xE7\xA5\x9E";
    }
    else if ((StringContains(lp_path, "Marauder", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE5\x8A\xAB\xE6\x8E\xA0\xE8\x80\x85";
    }
    else if (((StringContains(lp_path, "Ghost", c_stringAnywhere, c_stringCase) == true) || (StringContains(lp_path, "Nova", c_stringAnywhere, c_stringCase) == true))) {
        return "\xE5\xB9\xBD\xE7\x81\xB5";
    }
    else if ((StringContains(lp_path, "HellionTank", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE5\x9C\xB0\xE7\x8B\xB1\xE8\x9D\x99\xE8\x9D\xA0";
    }
    else if ((StringContains(lp_path, "Hellion", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE6\x81\xB6\xE7\x81\xAB";
    }
    else if ((StringContains(lp_path, "WidowMine", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE5\xAF\xA1\xE5\xA6\x87\xE9\x9B\xB7";
    }
    else if ((StringContains(lp_path, "Cyclone", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE9\xA3\x93\xE9\xA3\x8E";
    }
    else if ((StringContains(lp_path, "SiegeTank", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE6\x94\xBB\xE5\x9F\x8E\xE5\x9D\xA6\xE5\x85\x8B";
    }
    else if ((StringContains(lp_path, "Thor", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE9\x9B\xB7\xE7\xA5\x9E";
    }
    else if ((StringContains(lp_path, "VikingAssault", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE7\xBB\xB4\xE4\xBA\xAC\xE6\x88\x98\xE6\x9C\xBA (\xE5\x9C\xB0\xE9\x9D\xA2\xE6\xA8\xA1\xE5\xBC\x8F)";
    }
    else if ((StringContains(lp_path, "VikingFighter", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE7\xBB\xB4\xE4\xBA\xAC\xE6\x88\x98\xE6\x9C\xBA (\xE7\xA9\xBA\xE4\xB8\xAD\xE6\xA8\xA1\xE5\xBC\x8F)";
    }
    else if ((StringContains(lp_path, "Medivac", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE5\x8C\xBB\xE7\x96\x97\xE8\xBF\x90\xE8\xBE\x93\xE6\x9C\xBA";
    }
    else if ((StringContains(lp_path, "Liberator", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE8\xA7\xA3\xE6\x94\xBE\xE8\x80\x85";
    }
    else if ((StringContains(lp_path, "Raven", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE6\xB8\xA1\xE9\xB8\xA6";
    }
    else if ((StringContains(lp_path, "Banshee", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE5\xA5\xB3\xE5\xA6\x96";
    }
    else if (((StringContains(lp_path, "Battlecruiser", c_stringAnywhere, c_stringCase) == true) || (StringContains(lp_path, "Hyperion", c_stringAnywhere, c_stringCase) == true))) {
        return "\xE6\x88\x98\xE5\x88\x97\xE5\xB7\xA1\xE6\xB4\x8B\xE8\x88\xB0";
    }
    else if ((StringContains(lp_path, "Firebat", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE7\x81\xAB\xE5\xB9\x85";
    }
    else if ((StringContains(lp_path, "Medic", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE5\x8C\xBB\xE7\x96\x97\xE5\x85\xB5";
    }
    else if ((StringContains(lp_path, "Vulture", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE7\xA7\x83\xE9\xB9\xAB";
    }
    else if ((StringContains(lp_path, "Goliath", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE6\xAD\x8C\xE8\x8E\x89\xE5\xA8\x85";
    }
    else if ((StringContains(lp_path, "Wraith", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE6\x80\xA8\xE7\x81\xB5";
    }
    else if ((StringContains(lp_path, "ScienceVessel", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE7\xA7\x91\xE5\xAD\xA6\xE7\x90\x83";
    }
    else if ((StringContains(lp_path, "Valkyrie", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE5\xA5\xB3\xE6\xAD\xA6\xE7\xA5\x9E";
    }
    else if (((StringContains(lp_path, "Commander", c_stringAnywhere, c_stringCase) == true) || (StringContains(lp_path, "Raynor", c_stringAnywhere, c_stringCase) == true))) {
        return "\xE6\x8C\x87\xE6\x8C\xA5\xE5\xAE\x98";
    }
    else if ((StringContains(lp_path, "Spectre", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE5\xB9\xBD\xE9\xAD\x82";
    }
    else if ((StringContains(lp_path, "Hercules", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE5\xA4\xA7\xE5\x8A\x9B\xE7\xA5\x9E\xE9\xA3\x9E\xE8\x88\xB9";
    }
    else if ((StringContains(lp_path, "Diamondback", c_stringAnywhere, c_stringCase) == true)) {
        return "Diamondback";
    }
    else if ((StringContains(lp_path, "Drone", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE5\xB7\xA5\xE8\x9C\x82";
    }
    else if ((StringContains(lp_path, "Queen", c_stringAnywhere, c_stringCase) == true) && (StringContains(lp_path, "QueenMP", c_stringAnywhere, c_stringCase) == false)) {
        return "\xE5\xA5\xB3\xE7\x9A\x87";
    }
    else if ((StringContains(lp_path, "Zergling", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE8\xB7\xB3\xE8\x99\xAB";
    }
    else if ((StringContains(lp_path, "Baneling", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE6\xAF\x92\xE7\x88\x86";
    }
    else if ((StringContains(lp_path, "Roach", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE8\x9F\x91\xE8\x9E\x82";
    }
    else if ((StringContains(lp_path, "Ravager", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE7\xA0\xB4\xE5\x9D\x8F\xE8\x80\x85";
    }
    else if ((StringContains(lp_path, "Hydralisk", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE5\x88\xBA\xE8\x9B\x87";
    }
    else if ((StringContains(lp_path, "Lurker", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE5\x9C\xB0\xE5\x88\xBA";
    }
    else if ((StringContains(lp_path, "InfestorTerran", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE8\xA2\xAB\xE6\x84\x9F\xE6\x9F\x93\xE7\x9A\x84\xE6\x9E\xAA\xE5\x85\xB5";
    }
    else if ((StringContains(lp_path, "InfestedExploder", c_stringAnywhere, c_stringCase) == true)) {
        return "Volatile Infested";
    }
    else if ((StringContains(lp_path, "Infestor", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE6\x84\x9F\xE6\x9F\x93\xE8\x80\x85";
    }
    else if ((StringContains(lp_path, "SwarmHost", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE8\x99\xAB\xE7\xBE\xA4\xE5\xAE\xBF\xE4\xB8\xBB";
    }
    else if ((StringContains(lp_path, "Ultralisk", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE9\x9B\xB7\xE5\x85\xBD";
    }
    else if ((StringContains(lp_path, "Broodling", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE5\xB7\xA2\xE8\x99\xAB";
    }
    else if ((StringContains(lp_path, "Overlord", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE5\xAE\xBF\xE4\xB8\xBB";
    }
    else if ((StringContains(lp_path, "Overseer", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE7\x9C\xBC\xE8\x99\xAB";
    }
    else if ((StringContains(lp_path, "Mutalisk", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE9\xA3\x9E\xE9\xBE\x99";
    }
    else if ((StringContains(lp_path, "Corruptor", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE8\x85\x90\xE5\x8C\x96\xE8\x80\x85";
    }
    else if ((StringContains(lp_path, "BroodLord", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE5\xB7\xA2\xE8\x99\xAB\xE9\xA2\x86\xE4\xB8\xBB";
    }
    else if ((StringContains(lp_path, "Viper", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE9\xA3\x9E\xE8\x9B\x87";
    }
    else if ((StringContains(lp_path, "Changeling", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE5\x8F\x98\xE5\xBD\xA2\xE8\x99\xAB";
    }
    else if ((StringContains(lp_path, "LocustMPFlying", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE8\x9D\x97\xE8\x99\xAB(\xE9\xA3\x9E\xE8\xA1\x8C)";
    }
    else if ((StringContains(lp_path, "Scourge", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE7\x88\x86\xE8\x9A\x8A";
    }
    else if ((StringContains(lp_path, "Guardian", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE5\xAE\x88\xE6\x8A\xA4\xE8\x80\x85";
    }
    else if ((StringContains(lp_path, "QueenMP", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE6\xAF\x8D\xE5\xB7\xA2\xE4\xB9\x8B\xE6\x88\x98\xE5\xA5\xB3\xE7\x9A\x87";
    }
    else if ((StringContains(lp_path, "Defiler", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE8\x9D\x8E\xE5\xAD\x90";
    }
    else if ((StringContains(lp_path, "Devourer", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE5\x90\x9E\xE5\x99\xAC\xE8\x80\x85";
    }
    else if ((StringContains(lp_path, "Leviathan", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE5\x88\xA9\xE7\xBB\xB4\xE5\x9D\xA6";
    }
    else if ((StringContains(lp_path, "Kerrigan", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE5\x88\x80\xE9\x94\x8B\xE5\xA5\xB3\xE7\x8E\x8B";
    }
    else if ((StringContains(lp_path, "Dehaka", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE5\x8E\x9F\xE5\xA7\x8B\xE9\x98\xBF\xE5\xB0\x94\xE6\xB3\x95";
    }
    else if ((StringContains(lp_path, "InfestedCivilian", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE8\xA2\xAB\xE6\x84\x9F\xE6\x9F\x93\xE7\x9A\x84\xE5\xB9\xB3\xE6\xB0\x91";
    }
    else if ((StringContains(lp_path, "Brutalisk", c_stringAnywhere, c_stringCase) == true)) {
        return "Brutalisk";
    }
    else if ((StringContains(lp_path, "Aberration", c_stringAnywhere, c_stringCase) == true)) {
        return "Aberration";
    }
    else if ((StringContains(lp_path, "Probe", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE6\x8E\xA2\xE6\x9C\xBA";
    }
    else if ((StringContains(lp_path, "Zealot", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE7\x8B\x82\xE7\x83\xAD\xE8\x80\x85";
    }
    else if ((StringContains(lp_path, "Stalker", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE8\xBF\xBD\xE7\x8C\x8E\xE8\x80\x85";
    }
    else if ((StringContains(lp_path, "Sentry", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE6\x9C\xBA\xE6\xA2\xB0\xE5\x93\xA8\xE5\x85\xB5";
    }
    else if ((StringContains(lp_path, "Adept", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE4\xBD\xBF\xE5\xBE\x92";
    }
    else if ((StringContains(lp_path, "HighTemplar", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE9\xAB\x98\xE9\x98\xB6\xE5\x9C\xA3\xE5\xA0\x82\xE6\xAD\xA6\xE5\xA3\xAB";
    }
    else if (((StringContains(lp_path, "DarkTemplar", c_stringAnywhere, c_stringCase) == true) || (StringContains(lp_path, "Zeratul", c_stringAnywhere, c_stringCase) == true))) {
        return "\xE9\xBB\x91\xE6\x9A\x97\xE5\x9C\xA3\xE5\xA0\x82\xE6\xAD\xA6\xE5\xA3\xAB";
    }
    else if ((StringContains(lp_path, "Immortal", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE4\xB8\x8D\xE6\x9C\xBD\xE8\x80\x85";
    }
    else if ((StringContains(lp_path, "Colossus", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE5\xB7\xA8\xE5\x83\x8F";
    }
    else if ((StringContains(lp_path, "Disruptor", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE5\xB9\xB2\xE6\x89\xB0\xE8\x80\x85";
    }
    else if ((StringContains(lp_path, "Archon", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE6\x89\xA7\xE6\x94\xBF\xE5\xAE\x98";
    }
    else if ((StringContains(lp_path, "Observer", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE4\xBE\xA6\xE6\xB5\x8B\xE5\x99\xA8";
    }
    else if ((StringContains(lp_path, "WarpPrism", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE6\x8A\x98\xE8\xB7\x83\xE6\xA3\xB1\xE9\x95\x9C";
    }
    else if ((StringContains(lp_path, "Phoenix", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE5\x87\xA4\xE5\x87\xB0";
    }
    else if ((StringContains(lp_path, "VoidRay", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE8\x99\x9A\xE7\xA9\xBA\xE8\x88\xB0";
    }
    else if ((StringContains(lp_path, "Oracle", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE5\x85\x88\xE7\x9F\xA5";
    }
    else if ((StringContains(lp_path, "Carrier", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE8\x88\xAA\xE6\xAF\x8D";
    }
    else if ((StringContains(lp_path, "Tempest", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE9\xA3\x8E\xE6\x9A\xB4\xE6\x88\x98\xE8\x88\xB0";
    }
    else if ((StringContains(lp_path, "MothershipCore", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE6\xAF\x8D\xE8\x88\xB0\xE6\xA0\xB8\xE5\xBF\x83";
    }
    else if ((StringContains(lp_path, "Mothership", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE6\xAF\x8D\xE8\x88\xB0";
    }
    else if ((StringContains(lp_path, "Dragoon", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE9\xBE\x99\xE9\xAA\x91\xE5\xA3\xAB";
    }
    else if ((StringContains(lp_path, "Reaver", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE6\x8E\xA0\xE5\xA4\xBA\xE8\x80\x85";
    }
    else if ((StringContains(lp_path, "Scout", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE4\xBE\xA6\xE5\xAF\x9F\xE6\x9C\xBA";
    }
    else if ((StringContains(lp_path, "Arbiter", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE4\xBB\xB2\xE8\xA3\x81\xE8\x80\x85";
    }
    else if ((StringContains(lp_path, "Corsair", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE6\xB5\xB7\xE7\x9B\x97\xE8\x88\xB9";
    }
    else if ((StringContains(lp_path, "Karax", c_stringAnywhere, c_stringCase) == true)) {
        return "Phase-Smith";
    }
    else if ((StringContains(lp_path, "Artanis", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE5\xA4\xA7\xE4\xB8\xBB\xE6\x95\x99";
    }
    else if ((StringContains(lp_path, "Supplicant", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE7\xA5\x88\xE6\xB1\x82\xE8\x80\x85";
    }
    else if ((StringContains(lp_path, "Amon", c_stringAnywhere, c_stringCase) == true)) {
        return "\xE5\xA0\x95\xE8\x90\xBD\xE7\x9A\x84\xE8\x90\xA8\xE5\xB0\x94\xE9\x82\xA3\xE5\x8A\xA0";
    }
    return "\xE6\x9C\xAA\xE7\x9F\xA5\xE7\x9A\x84\xE5\x8D\x95\xE4\xBD\x8D\xE7\xB1\xBB\xE5\x9E\x8B";
}

int lib1_gf_PercentofWidth (int lp_dialog, fixed lp_percent) {
    // Automatic Variable Declarations
    // Implementation
    return FixedToInt(((lp_percent * IntToFixed(DialogGetWidth(lp_dialog))) / 100.0));
}

int lib1_gf_PercentofHeight (int lp_dialog, fixed lp_percent) {
    // Automatic Variable Declarations
    // Implementation
    return FixedToInt(((lp_percent * IntToFixed(DialogGetHeight(lp_dialog))) / 100.0));
}

void lib1_gf_UpdateCardBackground (int lp_item) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetPosition(lp_item, PlayerGroupAll(), c_anchorTop, 0, lib1_gf_PercentofHeight(DialogControlGetDialog(lp_item), 9.0));
    DialogControlSetSize(lp_item, PlayerGroupAll(), lib1_gf_PercentofWidth(DialogControlGetDialog(lp_item), 90.0), lib1_gf_PercentofHeight(DialogControlGetDialog(lp_item), 87.0));
}

void lib1_gf_UpdateCardNameFrame (int lp_item) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetPosition(lp_item, PlayerGroupAll(), c_anchorTop, 0, lib1_gf_PercentofHeight(DialogControlGetDialog(lp_item), lib1_gv_nAME_FRAME_Y));
    DialogControlSetSize(lp_item, PlayerGroupAll(), lib1_gf_PercentofWidth(DialogControlGetDialog(lp_item), 88.0), lib1_gf_PercentofHeight(DialogControlGetDialog(lp_item), 12.0));
}

void lib1_gf_UpdateCardName (int lp_item) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetPosition(lp_item, PlayerGroupAll(), c_anchorTop, 2, lib1_gf_PercentofHeight(DialogControlGetDialog(lp_item), (lib1_gv_nAME_FRAME_Y + lib1_gv_nAME_Y)));
    DialogControlSetSize(lp_item, PlayerGroupAll(), lib1_gf_PercentofWidth(DialogControlGetDialog(lp_item), 85.0), lib1_gf_PercentofHeight(DialogControlGetDialog(lp_item), 12.0));
    if ((DialogGetHeight(DialogControlGetDialog(lp_item)) > lib1_gv_cARD_HEIGHT)) {
        libNtve_gf_SetDialogItemColor(lp_item, Color(100,100,100), PlayerGroupAll());
        libNtve_gf_SetDialogItemStyle(lp_item, "CardNameLarge", PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemColor(lp_item, Color(100,100,100), PlayerGroupAll());
        libNtve_gf_SetDialogItemStyle(lp_item, "CardNameSmall", PlayerGroupAll());
    }
}

void lib1_gf_UpdateCardImageFrame (int lp_item) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetPosition(lp_item, PlayerGroupAll(), c_anchorTop, lib1_gf_PercentofWidth(DialogControlGetDialog(lp_item), 15.0), lib1_gf_PercentofHeight(DialogControlGetDialog(lp_item), (lib1_gv_nAME_FRAME_Y + lib1_gv_iMAGE_Y)));
    DialogControlSetSize(lp_item, PlayerGroupAll(), lib1_gf_PercentofHeight(DialogControlGetDialog(lp_item), lib1_gv_iMAGE_FRAME_SIZE), lib1_gf_PercentofHeight(DialogControlGetDialog(lp_item), lib1_gv_iMAGE_FRAME_SIZE));
}

void lib1_gf_UpdateCardImage (int lp_item) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetPosition(lp_item, PlayerGroupAll(), c_anchorTop, lib1_gf_PercentofWidth(DialogControlGetDialog(lp_item), 15.0), lib1_gf_PercentofHeight(DialogControlGetDialog(lp_item), (lib1_gv_nAME_FRAME_Y + lib1_gv_iMAGE_Y + 2.2)));
    DialogControlSetSize(lp_item, PlayerGroupAll(), lib1_gf_PercentofHeight(DialogControlGetDialog(lp_item), lib1_gv_iMAGE_SIZE), lib1_gf_PercentofHeight(DialogControlGetDialog(lp_item), lib1_gv_iMAGE_SIZE));
}

void lib1_gf_UpdateCardMineralIcon (int lp_item) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetPosition(lp_item, PlayerGroupAll(), c_anchorTop, lib1_gf_PercentofWidth(DialogControlGetDialog(lp_item), -26.0), lib1_gf_PercentofHeight(DialogControlGetDialog(lp_item), (lib1_gv_nAME_FRAME_Y + lib1_gv_iMAGE_Y + lib1_gv_rESOURCE_Y_INSET)));
    DialogControlSetSize(lp_item, PlayerGroupAll(), lib1_gf_PercentofHeight(DialogControlGetDialog(lp_item), lib1_gv_rESOURCE_SIZE), lib1_gf_PercentofHeight(DialogControlGetDialog(lp_item), lib1_gv_rESOURCE_SIZE));
}

void lib1_gf_UpdateCardMineralCost (int lp_item) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetPosition(lp_item, PlayerGroupAll(), c_anchorTop, lib1_gf_PercentofWidth(DialogControlGetDialog(lp_item), -25.0), lib1_gf_PercentofHeight(DialogControlGetDialog(lp_item), (lib1_gv_nAME_FRAME_Y + lib1_gv_iMAGE_Y + lib1_gv_rESOURCE_TEXT_Y_INSET)));
    DialogControlSetSize(lp_item, PlayerGroupAll(), lib1_gf_PercentofHeight(DialogControlGetDialog(lp_item), lib1_gv_rESOURCE_SIZE), lib1_gf_PercentofHeight(DialogControlGetDialog(lp_item), lib1_gv_rESOURCE_SIZE));
    if ((DialogGetHeight(DialogControlGetDialog(lp_item)) > lib1_gv_cARD_HEIGHT)) {
        libNtve_gf_SetDialogItemColor(lp_item, Color(100,100,100), PlayerGroupAll());
        libNtve_gf_SetDialogItemStyle(lp_item, "CardCostLarge", PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemColor(lp_item, Color(100,100,100), PlayerGroupAll());
        libNtve_gf_SetDialogItemStyle(lp_item, "CardCostSmall", PlayerGroupAll());
    }
}

void lib1_gf_UpdateCardGasIcon (int lp_item) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetPosition(lp_item, PlayerGroupAll(), c_anchorTop, lib1_gf_PercentofWidth(DialogControlGetDialog(lp_item), -26.0), lib1_gf_PercentofHeight(DialogControlGetDialog(lp_item), (lib1_gv_nAME_FRAME_Y + lib1_gv_iMAGE_Y + lib1_gv_rESOURCE_Y_INSET + lib1_gv_rESOURCE_Y_2)));
    DialogControlSetSize(lp_item, PlayerGroupAll(), lib1_gf_PercentofHeight(DialogControlGetDialog(lp_item), lib1_gv_rESOURCE_SIZE), lib1_gf_PercentofHeight(DialogControlGetDialog(lp_item), lib1_gv_rESOURCE_SIZE));
}

void lib1_gf_UpdateCardGasCost (int lp_item) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetPosition(lp_item, PlayerGroupAll(), c_anchorTop, lib1_gf_PercentofWidth(DialogControlGetDialog(lp_item), -25.0), lib1_gf_PercentofHeight(DialogControlGetDialog(lp_item), (lib1_gv_nAME_FRAME_Y + lib1_gv_iMAGE_Y + lib1_gv_rESOURCE_TEXT_Y_INSET + lib1_gv_rESOURCE_Y_2)));
    DialogControlSetSize(lp_item, PlayerGroupAll(), lib1_gf_PercentofHeight(DialogControlGetDialog(lp_item), lib1_gv_rESOURCE_SIZE), lib1_gf_PercentofHeight(DialogControlGetDialog(lp_item), lib1_gv_rESOURCE_SIZE));
    if ((DialogGetHeight(DialogControlGetDialog(lp_item)) > lib1_gv_cARD_HEIGHT)) {
        libNtve_gf_SetDialogItemColor(lp_item, Color(100,100,100), PlayerGroupAll());
        libNtve_gf_SetDialogItemStyle(lp_item, "CardCostLarge", PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemColor(lp_item, Color(100,100,100), PlayerGroupAll());
        libNtve_gf_SetDialogItemStyle(lp_item, "CardCostSmall", PlayerGroupAll());
    }
}

void lib1_gf_UpdateCardType (int lp_item) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetPosition(lp_item, PlayerGroupAll(), c_anchorTop, lib1_gf_PercentofWidth(DialogControlGetDialog(lp_item), 3.5), lib1_gf_PercentofHeight(DialogControlGetDialog(lp_item), (lib1_gv_nAME_FRAME_Y + lib1_gv_iMAGE_Y + lib1_gv_tYPE_Y)));
    DialogControlSetSize(lp_item, PlayerGroupAll(), lib1_gf_PercentofWidth(DialogControlGetDialog(lp_item), 85.0), lib1_gf_PercentofHeight(DialogControlGetDialog(lp_item), 6.0));
    if ((DialogGetHeight(DialogControlGetDialog(lp_item)) > lib1_gv_cARD_HEIGHT)) {
        libNtve_gf_SetDialogItemColor(lp_item, Color(100,100,100), PlayerGroupAll());
        libNtve_gf_SetDialogItemStyle(lp_item, "CardTypeLarge", PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemColor(lp_item, Color(100,100,100), PlayerGroupAll());
        libNtve_gf_SetDialogItemStyle(lp_item, "CardTypeSmall", PlayerGroupAll());
    }
}

void lib1_gf_UpdateCardSetIcon (int lp_item) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetPosition(lp_item, PlayerGroupAll(), c_anchorTopRight, lib1_gf_PercentofWidth(DialogControlGetDialog(lp_item), 9.0), lib1_gf_PercentofHeight(DialogControlGetDialog(lp_item), (lib1_gv_nAME_FRAME_Y + lib1_gv_iMAGE_Y + lib1_gv_sET_ICON_Y)));
    DialogControlSetSize(lp_item, PlayerGroupAll(), lib1_gf_PercentofHeight(DialogControlGetDialog(lp_item), 5.0), lib1_gf_PercentofHeight(DialogControlGetDialog(lp_item), 5.0));
}

void lib1_gf_UpdateCardTextFrame (int lp_item) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetPosition(lp_item, PlayerGroupAll(), c_anchorTop, 0, lib1_gf_PercentofHeight(DialogControlGetDialog(lp_item), (lib1_gv_nAME_FRAME_Y + lib1_gv_iMAGE_Y + lib1_gv_sET_ICON_Y + lib1_gv_tEXT_Y)));
    DialogControlSetSize(lp_item, PlayerGroupAll(), lib1_gf_PercentofWidth(DialogControlGetDialog(lp_item), 88.0), lib1_gf_PercentofHeight(DialogControlGetDialog(lp_item), 34.0));
}

void lib1_gf_UpdateCardText (int lp_item) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetPosition(lp_item, PlayerGroupAll(), c_anchorTop, 0, lib1_gf_PercentofHeight(DialogControlGetDialog(lp_item), (lib1_gv_nAME_FRAME_Y + lib1_gv_iMAGE_Y + lib1_gv_sET_ICON_Y + lib1_gv_tEXT_Y)));
    if ((DialogGetHeight(DialogControlGetDialog(lp_item)) > lib1_gv_cARD_HEIGHT)) {
        DialogControlSetSize(lp_item, PlayerGroupAll(), lib1_gf_PercentofWidth(DialogControlGetDialog(lp_item), 80.0), lib1_gf_PercentofHeight(DialogControlGetDialog(lp_item), 34.0));
        libNtve_gf_SetDialogItemColor(lp_item, Color(100,100,100), PlayerGroupAll());
        libNtve_gf_SetDialogItemStyle(lp_item, "CardTextLarge", PlayerGroupAll());
    }
    else {
        DialogControlSetSize(lp_item, PlayerGroupAll(), lib1_gf_PercentofWidth(DialogControlGetDialog(lp_item), 80.0), lib1_gf_PercentofHeight(DialogControlGetDialog(lp_item), 34.0));
        libNtve_gf_SetDialogItemColor(lp_item, Color(100,100,100), PlayerGroupAll());
        libNtve_gf_SetDialogItemStyle(lp_item, "CardTextSmall", PlayerGroupAll());
    }
}

void lib1_gf_UpdateCardRaceBackground (int lp_item) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetPosition(lp_item, PlayerGroupAll(), c_anchorTop, 0, lib1_gf_PercentofHeight(DialogControlGetDialog(lp_item), (lib1_gv_nAME_FRAME_Y + lib1_gv_iMAGE_Y + lib1_gv_sET_ICON_Y + lib1_gv_tEXT_Y + lib1_gv_rACE_Y)));
    DialogControlSetSize(lp_item, PlayerGroupAll(), lib1_gf_PercentofWidth(DialogControlGetDialog(lp_item), 48.0), lib1_gf_PercentofWidth(DialogControlGetDialog(lp_item), 48.0));
}

void lib1_gf_UpdateCardFrame (int lp_item) {
    // Automatic Variable Declarations
    // Implementation
    if ((libNtve_gf_DialogItemImageType(lp_item, 1) == c_triggerImageTypeBorder)) {
        DialogControlSetPosition(lp_item, PlayerGroupAll(), c_anchorTop, 0, lib1_gf_PercentofHeight(DialogControlGetDialog(lp_item), 7.4));
        DialogControlSetSize(lp_item, PlayerGroupAll(), lib1_gf_PercentofWidth(DialogControlGetDialog(lp_item), 98.5), lib1_gf_PercentofHeight(DialogControlGetDialog(lp_item), 90.0));
    }
    else {
        DialogControlSetPosition(lp_item, PlayerGroupAll(), c_anchorTop, lib1_gf_PercentofWidth(DialogControlGetDialog(lp_item), 0.0), lib1_gf_PercentofHeight(DialogControlGetDialog(lp_item), 0.0));
        DialogControlSetSize(lp_item, PlayerGroupAll(), lib1_gf_PercentofWidth(DialogControlGetDialog(lp_item), 109.0), lib1_gf_PercentofHeight(DialogControlGetDialog(lp_item), 108.0));
    }
}

void lib1_gf_UpdateCardRarityIcon (int lp_item) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetPosition(lp_item, PlayerGroupAll(), c_anchorBottom, 0, lib1_gf_PercentofHeight(DialogControlGetDialog(lp_item), 0.0));
    DialogControlSetSize(lp_item, PlayerGroupAll(), lib1_gf_PercentofWidth(DialogControlGetDialog(lp_item), 10.0), lib1_gf_PercentofWidth(DialogControlGetDialog(lp_item), 10.0));
}

void lib1_gf_UpdateCardSelectedIndicator (int lp_item) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetPosition(lp_item, PlayerGroupAll(), c_anchorTop, lib1_gf_PercentofWidth(DialogControlGetDialog(lp_item), 28.0), lib1_gf_PercentofHeight(DialogControlGetDialog(lp_item), 10.0));
    DialogControlSetSize(lp_item, PlayerGroupAll(), lib1_gf_PercentofWidth(DialogControlGetDialog(lp_item), 30.0), lib1_gf_PercentofWidth(DialogControlGetDialog(lp_item), 30.0));
}

void lib1_gf_UpdateCardSelectedPlanningPhaseIndicator (int lp_item) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetPosition(lp_item, PlayerGroupAll(), c_anchorCenter, 0, 0);
    DialogControlSetSize(lp_item, PlayerGroupAll(), lib1_gf_PercentofWidth(DialogControlGetDialog(lp_item), 85.0), lib1_gf_PercentofWidth(DialogControlGetDialog(lp_item), 85.0));
}

text lib1_gf_GetCardText (string lp_unit_text, string lp_base_text, bool lp_rush, bool lp_delay, bool lp_heroic, bool lp_transform, bool lp_stream, bool lp_buried, int lp_set) {
    // Variable Declarations
    string lv_unparsed_text;
    int lv_unparsed_word_index;
    int lv_line_length;
    bool lv_first_word;
    int lv_line_count;
    text lv_parsed_text;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unparsed_text = "";

    // Implementation
    lv_parsed_text = StringToText("");
    if ((StringLength(lp_unit_text) >= 1) && (StringLength(lp_base_text) >= 1)) {
        lv_unparsed_text = (lp_unit_text + " " + lp_base_text);
    }
    else if ((StringLength(lp_unit_text) >= 1)) {
        lv_unparsed_text = lp_unit_text;
    }
    else if (true) {
        lv_unparsed_text = lp_base_text;
    }
    lv_line_count = 1;
    lv_unparsed_word_index = 1;
    lv_line_length = 0;
    lv_first_word = true;
    while ((StringWord(lv_unparsed_text, lv_unparsed_word_index) != null)) {
        if ((lv_first_word == true)) {
            lv_line_length = StringLength(StringWord(lv_unparsed_text, lv_unparsed_word_index));
        }
        else {
            lv_line_length = (lv_line_length + 1 + StringLength(StringWord(lv_unparsed_text, lv_unparsed_word_index)));
        }
        if ((lv_line_length <= lib1_gv_mAX_CHARACTERS_PER_LINE) && (lv_first_word == true)) {
            lv_parsed_text = (lv_parsed_text + StringToText(StringWord(lv_unparsed_text, lv_unparsed_word_index)));
            lv_first_word = false;
        }
        else if ((lv_line_length <= lib1_gv_mAX_CHARACTERS_PER_LINE)) {
            lv_parsed_text = (lv_parsed_text + StringExternal("Param/Value/lib_1_E825E868") + StringToText(StringWord(lv_unparsed_text, lv_unparsed_word_index)));
        }
        else if (true) {
            lv_parsed_text = (lv_parsed_text + StringExternal("Param/Value/lib_1_A07C6629") + StringToText(StringWord(lv_unparsed_text, lv_unparsed_word_index)));
            lv_line_length = StringLength(StringWord(lv_unparsed_text, lv_unparsed_word_index));
            lv_line_count = (lv_line_count + 1);
        }
        lv_unparsed_word_index = (lv_unparsed_word_index + 1);
    }
    lv_unparsed_text = "";
    if ((lp_rush == true)) {
        lv_unparsed_text = "\xe7\xaa\x81\xe8\xa2\xad";
    }
    else if ((lp_delay == true)) {
        lv_unparsed_text = "\xe5\xbb\xb6\xe8\xbf\x9f";
    }
    if ((lp_heroic == true)) {
        if ((lv_unparsed_text != "")) {
            lv_unparsed_text = (lv_unparsed_text + ", ");
        }

        lv_unparsed_text = (lv_unparsed_text + "\xe8\x8b\xb1\xe9\x9b\x84");
    }

    if ((lp_stream == true)) {
        if ((lv_unparsed_text != "")) {
            lv_unparsed_text = (lv_unparsed_text + ", ");
        }

        lv_unparsed_text = (lv_unparsed_text + "\xe6\x8c\x81\xe7\xbb\xad");
    }

    if ((lp_transform == true)) {
        if ((lv_unparsed_text != "")) {
            lv_unparsed_text = (lv_unparsed_text + ", ");
        }

        lv_unparsed_text = (lv_unparsed_text + "\xe5\x8f\x98\xe5\xbd\xa2");
    }

    if ((lp_buried == true)) {
        if ((lv_unparsed_text != "")) {
            lv_unparsed_text = (lv_unparsed_text + ", ");
        }

        lv_unparsed_text = (lv_unparsed_text + "\xe5\x9f\x8b\xe8\x91\xac");
    }

    if ((lv_unparsed_text != "") && (lv_line_count <= (lib1_gv_mAX_LINES - 2))) {
        lv_line_count = (lv_line_count + 2);
        lv_parsed_text = (lv_parsed_text + StringExternal("Param/Value/lib_1_41143A7A") + StringToText(lv_unparsed_text));
    }
    else if ((lv_unparsed_text != "")) {
        lv_line_count = (lv_line_count + 1);
        lv_parsed_text = (lv_parsed_text + StringExternal("Param/Value/lib_1_9E98BFFA") + StringToText(lv_unparsed_text));
    }
    if ((lv_line_count <= (lib1_gv_mAX_LINES - 1)) && (StringContains(lv_unparsed_text, "Transform", c_stringAnywhere, c_stringNoCase) == true) && (lp_set == lib1_gv_cORE)) {
        lv_parsed_text = (lv_parsed_text + StringExternal("Param/Value/lib_1_27625162"));
    }

    return lv_parsed_text;
}

string lib1_gf_GetCardString (string lp_unit_text, string lp_base_text, bool lp_rush, bool lp_delay, bool lp_heroic, bool lp_transform, bool lp_stream, bool lp_buried) {
    // Variable Declarations
    string lv_unparsed_text;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unparsed_text = "";

    // Implementation
    if ((StringLength(lp_unit_text) >= 1) && (StringLength(lp_base_text) >= 1)) {
        lv_unparsed_text = (lp_unit_text + " " + lp_base_text);
    }
    else if ((StringLength(lp_unit_text) >= 1)) {
        lv_unparsed_text = lp_unit_text;
    }
    else if (true) {
        lv_unparsed_text = lp_base_text;
    }
    if ((lp_rush == true)) {
        lv_unparsed_text = (lv_unparsed_text + " Rush");
    }
    else if ((lp_delay == true)) {
        lv_unparsed_text = (lv_unparsed_text + " Delay");
    }
    if ((lp_stream == true)) {
        lv_unparsed_text = (lv_unparsed_text + " Stream");
    }

    if ((lp_heroic == true)) {
        lv_unparsed_text = (lv_unparsed_text + " Heroic");
    }

    if ((lp_transform == true)) {
        lv_unparsed_text = (lv_unparsed_text + " Transform");
    }

    if ((lp_buried == true)) {
        lv_unparsed_text = (lv_unparsed_text + " Buried");
    }

    return lv_unparsed_text;
}

string lib1_gf_GetUnitTextForHandCard (int lp_player, int lp_hand_index) {
    // Variable Declarations
    int lv_unit_type_index;
    string lv_text;

    // Automatic Variable Declarations
    const int autoBB8C92C1_ae = lib1_gv_mAX_UNIT_TYPE_PER_CARD;
    const int autoBB8C92C1_ai = 1;

    // Variable Initialization
    lv_text = "";

    // Implementation
    lv_unit_type_index = 0;
    for ( ; ( (autoBB8C92C1_ai >= 0 && lv_unit_type_index <= autoBB8C92C1_ae) || (autoBB8C92C1_ai < 0 && lv_unit_type_index >= autoBB8C92C1_ae) ) ; lv_unit_type_index += autoBB8C92C1_ai ) {
        if ((lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_unit_count[lv_unit_type_index] > 0)) {
            if ((lv_unit_type_index == 0)) {
                lv_text = "\xe5\x8f\xac\xe5\x94\xa4 ";
            }
            else if ((lv_unit_type_index == 1) && ((lv_unit_type_index == lib1_gv_mAX_UNIT_TYPE_PER_CARD) || (lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_unit_count[(lv_unit_type_index + 1)] == 0))) {
                lv_text = (lv_text + " \xe5\x92\x8c ");
            }
            else if ((lv_unit_type_index > 1) && ((lv_unit_type_index == lib1_gv_mAX_UNIT_TYPE_PER_CARD) || (lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_unit_count[(lv_unit_type_index + 1)] == 0))) {
                lv_text = (lv_text + ", \xe5\x92\x8c ");
            }
            else if (true) {
                lv_text = (lv_text + ", ");
            }
            lv_text = (lv_text + IntToString(lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_unit_count[lv_unit_type_index]));
            lv_text = (lv_text + " ");
            if ((lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_unit_count[lv_unit_type_index] == 1)) {
                lv_text = (lv_text + lib1_gf_GetUnitNameasString(false, lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_unit_type[lv_unit_type_index]));
            }
            else {
                lv_text = (lv_text + lib1_gf_GetUnitNameasString(true, lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_unit_type[lv_unit_type_index]));
            }
            if (((lv_unit_type_index == lib1_gv_mAX_UNIT_TYPE_PER_CARD) || (lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_unit_count[(lv_unit_type_index + 1)] == 0))) {
                lv_text = (lv_text + ".");
                break;
            }

        }

    }
    return lv_text;
}

string lib1_gf_GetUnitTextForDeckCard (int lp_player, int lp_deck_index) {
    // Variable Declarations
    int lv_unit_type_index;
    string lv_text;

    // Automatic Variable Declarations
    const int auto0B98C9BF_ae = lib1_gv_mAX_UNIT_TYPE_PER_CARD;
    const int auto0B98C9BF_ai = 1;

    // Variable Initialization
    lv_text = "";

    // Implementation
    lv_unit_type_index = 0;
    for ( ; ( (auto0B98C9BF_ai >= 0 && lv_unit_type_index <= auto0B98C9BF_ae) || (auto0B98C9BF_ai < 0 && lv_unit_type_index >= auto0B98C9BF_ae) ) ; lv_unit_type_index += auto0B98C9BF_ai ) {
        if ((lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index].lv_unit_count[lv_unit_type_index] > 0)) {
            if ((lv_unit_type_index == 0)) {
                lv_text = "\xe5\x8f\xac\xe5\x94\xa4 ";
            }
            else if ((lv_unit_type_index == 1) && ((lv_unit_type_index == lib1_gv_mAX_UNIT_TYPE_PER_CARD) || (lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index].lv_unit_count[(lv_unit_type_index + 1)] == 0))) {
                lv_text = (lv_text + " \xe5\x92\x8c ");
            }
            else if ((lv_unit_type_index > 1) && ((lv_unit_type_index == lib1_gv_mAX_UNIT_TYPE_PER_CARD) || (lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index].lv_unit_count[(lv_unit_type_index + 1)] == 0))) {
                lv_text = (lv_text + ", \xe5\x92\x8c ");
            }
            else if (true) {
                lv_text = (lv_text + ", ");
            }
            lv_text = (lv_text + IntToString(lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index].lv_unit_count[lv_unit_type_index]));
            lv_text = (lv_text + " ");
            if ((lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index].lv_unit_count[lv_unit_type_index] == 1)) {
                lv_text = (lv_text + lib1_gf_GetUnitNameasString(false, lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index].lv_unit_type[lv_unit_type_index]));
            }
            else {
                lv_text = (lv_text + lib1_gf_GetUnitNameasString(true, lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index].lv_unit_type[lv_unit_type_index]));
            }
            if (((lv_unit_type_index == lib1_gv_mAX_UNIT_TYPE_PER_CARD) || (lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index].lv_unit_count[(lv_unit_type_index + 1)] == 0))) {
                lv_text = (lv_text + ".");
                break;
            }

        }

    }
    return lv_text;
}

string lib1_gf_GetUnitTextForCollectionCard (int lp_card_id) {
    // Variable Declarations
    int lv_unit_type_index;
    string lv_text;

    // Automatic Variable Declarations
    const int auto29E34743_ae = lib1_gv_mAX_UNIT_TYPE_PER_CARD;
    const int auto29E34743_ai = 1;

    // Variable Initialization
    lv_text = "";

    // Implementation
    lv_unit_type_index = 0;
    for ( ; ( (auto29E34743_ai >= 0 && lv_unit_type_index <= auto29E34743_ae) || (auto29E34743_ai < 0 && lv_unit_type_index >= auto29E34743_ae) ) ; lv_unit_type_index += auto29E34743_ai ) {
        if ((lib1_gv_card[lp_card_id].lv_unit_count[lv_unit_type_index] > 0)) {
            if ((lv_unit_type_index == 0)) {
                lv_text = "\xe5\x8f\xac\xe5\x94\xa4 ";
            }
            else if ((lv_unit_type_index == 1) && ((lv_unit_type_index == lib1_gv_mAX_UNIT_TYPE_PER_CARD) || (lib1_gv_card[lp_card_id].lv_unit_count[(lv_unit_type_index + 1)] == 0))) {
                lv_text = (lv_text + " \xe5\x92\x8c ");
            }
            else if ((lv_unit_type_index > 1) && ((lv_unit_type_index == lib1_gv_mAX_UNIT_TYPE_PER_CARD) || (lib1_gv_card[lp_card_id].lv_unit_count[(lv_unit_type_index + 1)] == 0))) {
                lv_text = (lv_text + ", \xe5\x92\x8c ");
            }
            else if (true) {
                lv_text = (lv_text + ", ");
            }
            lv_text = (lv_text + IntToString(lib1_gv_card[lp_card_id].lv_unit_count[lv_unit_type_index]));
            lv_text = (lv_text + " ");
            if ((lib1_gv_card[lp_card_id].lv_unit_count[lv_unit_type_index] == 1)) {
                lv_text = (lv_text + lib1_gf_GetUnitNameasString(false, lib1_gv_card[lp_card_id].lv_unit_type[lv_unit_type_index]));
            }
            else {
                lv_text = (lv_text + lib1_gf_GetUnitNameasString(true, lib1_gv_card[lp_card_id].lv_unit_type[lv_unit_type_index]));
            }
            if (((lv_unit_type_index == lib1_gv_mAX_UNIT_TYPE_PER_CARD) || (lib1_gv_card[lp_card_id].lv_unit_count[(lv_unit_type_index + 1)] == 0))) {
                lv_text = (lv_text + ".");
                break;
            }

        }

    }
    return lv_text;
}

void lib1_gf_CreateCard (int lp_player, int lp_x, int lp_y, int lp_card_id, string lp_source_option, int lp_source_index, string lp_target_option, int lp_target_index) {
    // Variable Declarations
    string lv_card_frame;
    int lv_card_frame_type;
    string lv_image_frame;
    string lv_text_frame;
    string lv_race_background;
    string lv_rarity_icon;
    int lv_card_mineral_cost;
    int lv_card_gas_cost;
    int lv_untransformed_card_id;
    string lv_card_type_string;
    bool lv_transform;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_card_type_string = "";

    // Implementation
    if (((lib1_gv_card[lp_card_id].lv_race == lib1_gv_vOID) || ((lp_source_option == "hand") && (lib1_gf_PlayerHasCardAtHandIndex(lp_player, lp_source_index) == true) && (lib1_gv_player[lp_player].lv_hand.lv_card[lp_source_index].lv_race == lib1_gv_vOID)))) {
        lv_card_frame = "Assets\\Textures\\ui_ingame_tabbutton_metalframe_amon.tga";
        lv_card_frame_type = c_triggerImageTypeBorder;
        lv_image_frame = "Assets\\Textures\\CardImageFrameVoid.tga";
        lv_text_frame = "Assets\\Textures\\ui_tooltip_frame_amon.tga";
        lv_race_background = null;
    }
    else if ((lib1_gv_card[lp_card_id].lv_race == lib1_gv_tERRAN)) {
        lv_card_frame = "Assets\\Textures\\ui_ingame_tabbutton_metalframe.dds";
        lv_card_frame_type = c_triggerImageTypeBorder;
        lv_image_frame = "Assets\\Textures\\CardImageFrameT.tga";
        lv_text_frame = "Assets\\Textures\\ui_tooltip_frame_terran.dds";
        lv_race_background = "Assets\\Textures\\ui_battlenet_glue_campaign_floatingraceicon_terr.dds";
    }
    else if ((lib1_gv_card[lp_card_id].lv_race == lib1_gv_zERG)) {
        lv_card_frame = "Assets\\Textures\\ui_ingame_tabbutton_metalframe_zerg.dds";
        lv_card_frame_type = c_triggerImageTypeBorder;
        lv_image_frame = "Assets\\Textures\\CardImageFrameZ.tga";
        lv_text_frame = "Assets\\Textures\\ui_tooltip_frame_zerg.dds";
        lv_race_background = "Assets\\Textures\\ui_battlenet_glue_campaign_floatingraceicon_zerg.dds";
    }
    else if ((lib1_gv_card[lp_card_id].lv_race == lib1_gv_pROTOSS)) {
        lv_card_frame = "Assets\\Textures\\ui_ingame_tabbutton_metalframe_protoss.tga";
        lv_card_frame_type = c_triggerImageTypeBorder;
        lv_image_frame = "Assets\\Textures\\CardImageFrameP.tga";
        lv_text_frame = "Assets\\Textures\\ui_tooltip_frame_protoss.dds";
        lv_race_background = "Assets\\Textures\\ui_battlenet_glue_campaign_floatingraceicon_prot.dds";
    }
    else if ((lib1_gv_card[lp_card_id].lv_race == lib1_gv_tERRAN_ZERG_UED)) {
        lv_card_frame = "Assets\\Textures\\card-frame-ued.tga";
        lv_card_frame_type = c_triggerImageTypeBorder;
        lv_image_frame = "Assets\\Textures\\CardImageFrameTZ.tga";
        lv_text_frame = "Assets\\Textures\\card-text-frame-ued.tga";
        lv_race_background = "Assets\\Textures\\race-icon-ued.dds";
    }
    else if ((lib1_gv_card[lp_card_id].lv_race == lib1_gv_pROTOSS_TERRAN_FENIX)) {
        lv_card_frame = "Assets\\Textures\\card-frame-fenix-raynor.tga";
        lv_card_frame_type = c_triggerImageTypeBorder;
        lv_image_frame = "Assets\\Textures\\CardImageFramePT.tga";
        lv_text_frame = "Assets\\Textures\\card-text-frame-fenix-raynor.dds";
        lv_race_background = "Assets\\Textures\\race-icon-fenix-raynor.dds";
    }
    else if ((lib1_gv_card[lp_card_id].lv_race == lib1_gv_zERG_PROTOSS_KERRIGAN)) {
        lv_card_frame = "Assets\\Textures\\CardFrameZP.tga";
        lv_card_frame_type = c_triggerImageTypeBorder;
        lv_image_frame = "Assets\\Textures\\CardImageFrameZP.tga";
        lv_text_frame = "Assets\\Textures\\card-text-frame-kerrigan-nerazim.dds";
        lv_race_background = "Assets\\Textures\\race-icon-kerrigan-nerazim.dds";
    }
    if ((lib1_gv_card[lp_card_id].lv_rarity == lib1_gv_cOMMON)) {
        lv_rarity_icon = "Assets\\Textures\\ui_glues_icons_ladder_small_bronze_3.dds";
    }
    else if ((lib1_gv_card[lp_card_id].lv_rarity == lib1_gv_uNCOMMON)) {
        lv_rarity_icon = "Assets\\Textures\\ui_glues_icons_ladder_small_silver_3.dds";
    }
    else if ((lib1_gv_card[lp_card_id].lv_rarity == lib1_gv_rARE)) {
        lv_rarity_icon = "Assets\\Textures\\ui_glues_icons_ladder_small_gold_3.dds";
    }
    else if ((lib1_gv_card[lp_card_id].lv_rarity == lib1_gv_uNIQUE)) {
        lv_rarity_icon = "Assets\\Textures\\ui_glues_icons_ladder_small_master_3.dds";
    }
    if (((lp_source_option == "collection") || (lp_source_option == "pack"))) {
        DialogCreate(lib1_gv_cARD_WIDTH, lib1_gv_cARD_HEIGHT, c_anchorCenter, lp_x, lp_y, true);
    }
    else {
        DialogCreate(lib1_gv_cARD_WIDTH, lib1_gv_cARD_HEIGHT, c_anchorBottom, lp_x, lp_y, true);
    }
    DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(lp_player), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    if ((lp_target_option == "hand")) {
        lib1_gv_player[lp_player].lv_hand.lv_card[lp_target_index].lv_ui.lv_dialog = DialogLastCreated();
        DialogSetRenderPriority(DialogLastCreated(), lib1_gf_HandCardRenderPriority(lp_target_index, false));
    }
    else if ((lp_source_option == "collection") && (lp_target_option == "crafting")) {
        DialogSetRenderPriority(DialogLastCreated(), 1);
        lib1_gv_crafting_card_dialog[lp_player] = DialogLastCreated();
    }
    else if ((lp_source_option == "collection")) {
        DialogSetRenderPriority(DialogLastCreated(), 1);
        if ((lp_target_option == "transform")) {
            lv_untransformed_card_id = lp_target_index;
        }
        else {
            lv_untransformed_card_id = lp_card_id;
        }
        if ((lib1_gf_CardOwnedCountCapped(lp_player, lv_untransformed_card_id) == 0)) {
            DialogSetTransparency(DialogLastCreated(), 75.0);
        }

        lib1_gv_player_collection[lp_player].lv_collection_card_ui[lp_source_index].lv_dialog = DialogLastCreated();
    }
    else if ((lp_source_option == "pack")) {
        lib1_gv_player_collection[lp_player].lv_pack_card[lp_source_index] = DialogLastCreated();
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 0, 0, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_ingame_blackmask.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    lib1_gf_UpdateCardBackground(DialogControlLastCreated());
    if ((lp_target_option == "hand")) {
        lib1_gv_player[lp_player].lv_hand.lv_card[lp_target_index].lv_ui.lv_background = DialogControlLastCreated();
    }

    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 0, 0, c_anchorTop, 0, 0, StringToText(""), lib1_gv_card[lp_card_id].lv_image, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    lib1_gf_UpdateCardImage(DialogControlLastCreated());
    if ((lp_target_option == "hand")) {
        lib1_gv_player[lp_player].lv_hand.lv_card[lp_target_index].lv_ui.lv_image = DialogControlLastCreated();
    }

    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 0, 0, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\energyplane2_highlight.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    lib1_gf_UpdateCardImage(DialogControlLastCreated());
    if ((lp_target_option == "hand")) {
        lib1_gv_player[lp_player].lv_hand.lv_card[lp_target_index].lv_ui.lv_channel_indicator = DialogControlLastCreated();
    }

    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 0, 0, c_anchorTop, 0, 0, StringToText(""), lv_image_frame, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    lib1_gf_UpdateCardImageFrame(DialogControlLastCreated());
    if ((lp_target_option == "hand")) {
        lib1_gv_player[lp_player].lv_hand.lv_card[lp_target_index].lv_ui.lv_image_frame = DialogControlLastCreated();
    }

    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 0, 0, c_anchorTop, 0, 0, StringToText(""), lv_text_frame, c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    lib1_gf_UpdateCardNameFrame(DialogControlLastCreated());
    if ((lp_target_option == "hand")) {
        lib1_gv_player[lp_player].lv_hand.lv_card[lp_target_index].lv_ui.lv_name_frame = DialogControlLastCreated();
    }

    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 0, 0, c_anchorTop, 0, 0, StringToText(lib1_gv_card[lp_card_id].lv_cname), ColorWithAlpha(0,0,0,0), false, 2.0);
    lib1_gf_UpdateCardName(DialogControlLastCreated());
    if ((lp_target_option == "hand")) {
        lib1_gv_player[lp_player].lv_hand.lv_card[lp_target_index].lv_ui.lv_name = DialogControlLastCreated();
    }

    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 0, 0, c_anchorTop, 0, 0, StringToText(""), "Assets\\Textures\\icon-mineral-protoss.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    lib1_gf_UpdateCardMineralIcon(DialogControlLastCreated());
    if ((lp_target_option == "hand")) {
        lib1_gv_player[lp_player].lv_hand.lv_card[lp_target_index].lv_ui.lv_mineral_icon = DialogControlLastCreated();
    }

    if ((lp_source_option == "deck")) {
        if ((lib1_gv_player[lp_player].lv_deck.lv_card[lp_source_index].lv_mineral < 0)) {
            lv_card_mineral_cost = 0;
        }
        else {
            lv_card_mineral_cost = lib1_gf_DeckCardMineralCost(lp_player, lp_source_index);
        }
    }
    else if ((lp_source_option == "hand")) {
        if ((lib1_gv_player[lp_player].lv_hand.lv_card[lp_source_index].lv_mineral < 0)) {
            lv_card_mineral_cost = 0;
        }
        else {
            lv_card_mineral_cost = lib1_gf_HandCardMineralCost(lp_player, lp_source_index);
        }
    }
    else if (true) {
        if ((lib1_gv_card[lp_card_id].lv_mineral < 0)) {
            lv_card_mineral_cost = 0;
        }
        else {
            lv_card_mineral_cost = lib1_gv_card[lp_card_id].lv_mineral;
        }
    }
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 0, 0, c_anchorTop, 0, 0, IntToText(lv_card_mineral_cost), ColorWithAlpha(0,0,0,0), false, 2.0);
    lib1_gf_UpdateCardMineralCost(DialogControlLastCreated());
    if ((lp_target_option == "hand")) {
        lib1_gv_player[lp_player].lv_hand.lv_card[lp_target_index].lv_ui.lv_mineral_cost = DialogControlLastCreated();
    }

    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 0, 0, c_anchorTop, 0, 0, StringToText(""), "Assets\\Textures\\icon-gas-terran.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    lib1_gf_UpdateCardGasIcon(DialogControlLastCreated());
    if ((lp_target_option == "hand")) {
        lib1_gv_player[lp_player].lv_hand.lv_card[lp_target_index].lv_ui.lv_gas_icon = DialogControlLastCreated();
    }

    if ((lp_source_option == "deck")) {
        if ((lib1_gv_player[lp_player].lv_deck.lv_card[lp_source_index].lv_gas < 0)) {
            lv_card_gas_cost = 0;
        }
        else {
            lv_card_gas_cost = lib1_gf_DeckCardGasCost(lp_player, lp_source_index);
        }
    }
    else if ((lp_source_option == "hand")) {
        if ((lib1_gv_player[lp_player].lv_hand.lv_card[lp_source_index].lv_gas < 0)) {
            lv_card_gas_cost = 0;
        }
        else {
            lv_card_gas_cost = lib1_gf_HandCardGasCost(lp_player, lp_source_index);
        }
    }
    else if (true) {
        if ((lib1_gv_card[lp_card_id].lv_gas < 0)) {
            lv_card_gas_cost = 0;
        }
        else {
            lv_card_gas_cost = lib1_gv_card[lp_card_id].lv_gas;
        }
    }
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 0, 0, c_anchorTop, 0, 0, IntToText(lv_card_gas_cost), ColorWithAlpha(0,0,0,0), false, 2.0);
    lib1_gf_UpdateCardGasCost(DialogControlLastCreated());
    if ((lp_target_option == "hand")) {
        lib1_gv_player[lp_player].lv_hand.lv_card[lp_target_index].lv_ui.lv_gas_cost = DialogControlLastCreated();
    }

    if ((lp_source_option == "deck")) {
        lv_card_type_string = lib1_gv_player[lp_player].lv_deck.lv_card[lp_source_index].lv_type;
    }
    else if ((lp_source_option == "hand")) {
        lv_card_type_string = lib1_gv_player[lp_player].lv_hand.lv_card[lp_source_index].lv_type;
    }
    else if (true) {
        lv_card_type_string = lib1_gv_card[lp_card_id].lv_type;
    }
    if ((lib1_gv_card[lp_card_id].lv_subtype != "")) {
        lv_card_type_string = (lv_card_type_string + (" - " + lib1_gv_card[lp_card_id].lv_subtype));
    }

    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 0, 0, c_anchorTop, 0, 0, StringToText(lv_card_type_string), ColorWithAlpha(0,0,0,0), false, 2.0);
    lib1_gf_UpdateCardType(DialogControlLastCreated());
    if ((lp_target_option == "hand")) {
        lib1_gv_player[lp_player].lv_hand.lv_card[lp_target_index].lv_ui.lv_type = DialogControlLastCreated();
    }

    if ((lib1_gv_card[lp_card_id].lv_set >= 0)) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 0, 0, c_anchorTop, 0, 0, StringToText(""), lib1_gv_set[lib1_gv_card[lp_card_id].lv_set].lv_icon, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
        lib1_gf_UpdateCardSetIcon(DialogControlLastCreated());
        if ((lp_target_option == "hand")) {
            lib1_gv_player[lp_player].lv_hand.lv_card[lp_target_index].lv_ui.lv_set_icon = DialogControlLastCreated();
        }

    }

    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 0, 0, c_anchorTop, 0, 0, StringToText(""), lv_text_frame, c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    lib1_gf_UpdateCardTextFrame(DialogControlLastCreated());
    if ((lp_target_option == "hand")) {
        lib1_gv_player[lp_player].lv_hand.lv_card[lp_target_index].lv_ui.lv_text_frame = DialogControlLastCreated();
    }

    if ((lv_race_background != null)) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 0, 0, c_anchorTop, 0, 0, StringToText(""), lv_race_background, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 85.0);
        lib1_gf_UpdateCardRaceBackground(DialogControlLastCreated());
        if ((lp_target_option == "hand")) {
            lib1_gv_player[lp_player].lv_hand.lv_card[lp_target_index].lv_ui.lv_race_background = DialogControlLastCreated();
        }

    }

    if ((lp_target_option == "hand")) {
        if ((lib1_gv_player[lp_player].lv_hand.lv_card[lp_target_index].lv_transform >= 0)) {
            lv_transform = true;
        }
        else {
            lv_transform = false;
        }
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 0, 0, c_anchorTop, 0, 0, lib1_gf_GetCardText(lib1_gf_GetUnitTextForHandCard(lp_player, lp_target_index), lib1_gv_card[lp_card_id].lv_base_text, lib1_gv_player[lp_player].lv_hand.lv_card[lp_target_index].lv_rush, lib1_gv_player[lp_player].lv_hand.lv_card[lp_target_index].lv_delay, lib1_gv_player[lp_player].lv_hand.lv_card[lp_target_index].lv_heroic, lv_transform, lib1_gv_player[lp_player].lv_hand.lv_card[lp_target_index].lv_stream, lib1_gv_card[lib1_gv_player[lp_player].lv_hand.lv_card[lp_target_index].lv_id].lv_buried, lib1_gv_card[lp_card_id].lv_set), ColorWithAlpha(0,0,0,0), false, 2.0);
        lib1_gf_UpdateCardText(DialogControlLastCreated());
        lib1_gv_player[lp_player].lv_hand.lv_card[lp_target_index].lv_ui.lv_text = DialogControlLastCreated();
    }
    else if ((lp_target_option == "milled")) {
        if ((lib1_gv_player[lp_player].lv_deck.lv_card[lp_source_index].lv_transform >= 0)) {
            lv_transform = true;
        }
        else {
            lv_transform = false;
        }
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 0, 0, c_anchorTop, 0, 0, lib1_gf_GetCardText(lib1_gf_GetUnitTextForDeckCard(lp_player, lp_source_index), lib1_gv_card[lp_card_id].lv_base_text, lib1_gv_player[lp_player].lv_deck.lv_card[lp_source_index].lv_rush, lib1_gv_player[lp_player].lv_deck.lv_card[lp_source_index].lv_delay, lib1_gv_player[lp_player].lv_deck.lv_card[lp_source_index].lv_heroic, lv_transform, lib1_gv_player[lp_player].lv_deck.lv_card[lp_source_index].lv_stream, lib1_gv_card[lib1_gv_player[lp_player].lv_deck.lv_card[lp_source_index].lv_id].lv_buried, lib1_gv_card[lp_card_id].lv_set), ColorWithAlpha(0,0,0,0), false, 2.0);
        lib1_gf_UpdateCardText(DialogControlLastCreated());
    }
    else if (((lp_source_option == "collection") || (lp_source_option == "pack"))) {
        if ((lib1_gv_card[lp_card_id].lv_transform >= 0)) {
            lv_transform = true;
        }
        else {
            lv_transform = false;
        }
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 0, 0, c_anchorTop, 0, 0, lib1_gf_GetCardText(lib1_gf_GetUnitTextForCollectionCard(lp_card_id), lib1_gv_card[lp_card_id].lv_base_text, lib1_gv_card[lp_card_id].lv_rush, lib1_gv_card[lp_card_id].lv_delay, lib1_gv_card[lp_card_id].lv_heroic, lv_transform, lib1_gv_card[lp_card_id].lv_stream, lib1_gv_card[lp_card_id].lv_buried, lib1_gv_card[lp_card_id].lv_set), ColorWithAlpha(0,0,0,0), false, 2.0);
        lib1_gf_UpdateCardText(DialogControlLastCreated());
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lib1_gv_cARD_WIDTH, lib1_gv_cARD_HEIGHT, c_anchorCenter, 0, 0, StringToText(""), lv_card_frame, lv_card_frame_type, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemAllowedMouseButtons(DialogControlLastCreated(), c_mouseButtonFlagLeft, PlayerGroupAll());
    lib1_gf_UpdateCardFrame(DialogControlLastCreated());
    if ((lp_target_option == "hand")) {
        lib1_gv_player[lp_player].lv_hand.lv_card[lp_target_index].lv_ui.lv_border = DialogControlLastCreated();
    }

    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 0, 0, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\sc2_ui_collection_equipped_checkmark.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    lib1_gf_UpdateCardSelectedIndicator(DialogControlLastCreated());
    if ((lp_target_option == "hand")) {
        lib1_gv_player[lp_player].lv_hand.lv_card[lp_target_index].lv_ui.lv_selected_indicator = DialogControlLastCreated();
    }

    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    if ((lib1_gv_current_phase == "Planning") && (lp_target_option == "hand")) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 0, 0, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\btn-command-cancel.dds", c_triggerImageTypeNormal, false, Color(100.00, 0.00, 0.00), c_triggerBlendModeNormal);
        lib1_gf_UpdateCardSelectedPlanningPhaseIndicator(DialogControlLastCreated());
        lib1_gv_player[lp_player].lv_hand.lv_card[lp_target_index].lv_ui.lv_selected_indicator_planning = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    }
    else if ((lp_target_option == "milled")) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 0, 0, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\btn-command-cancel.dds", c_triggerImageTypeNormal, false, Color(100.00, 0.00, 0.00), c_triggerBlendModeNormal);
        lib1_gf_UpdateCardSelectedPlanningPhaseIndicator(DialogControlLastCreated());
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
    }
    if ((lib1_gv_card[lp_card_id].lv_rarity >= 0)) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 0, 0, c_anchorTop, 0, 0, StringToText(""), lv_rarity_icon, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        lib1_gf_UpdateCardRarityIcon(DialogControlLastCreated());
        if ((lp_target_option == "hand")) {
            lib1_gv_player[lp_player].lv_hand.lv_card[lp_target_index].lv_ui.lv_rarity_icon = DialogControlLastCreated();
        }

    }

    if ((lp_source_option == "collection") && (lp_target_option != "crafting") && (lp_target_option != "transform") && (lib1_gf_CardOwnedCountCapped(lp_player, lp_card_id) >= 1)) {
        DialogCreate(lib1_gv_cOUNT_SIZE, lib1_gv_cOUNT_SIZE, c_anchorCenter, (lp_x + lib1_gv_cOUNT_X), (lp_y + lib1_gv_cOUNT_Y), true);
        DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(lp_player), true);
        DialogSetImageVisible(DialogLastCreated(), false);
        lib1_gv_player_collection[lp_player].lv_collection_card_count[lp_source_index].lv_dialog = DialogLastCreated();
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lib1_gv_cOUNT_SIZE, lib1_gv_cOUNT_SIZE, c_anchorCenter, 0, 0, (StringExternal("Param/Value/lib_1_B0712E8C") + IntToText(lib1_gf_CardOwnedCountCapped(lp_player, lp_card_id))), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CardCount", PlayerGroupAll());
    }

    if ((lp_target_option == "hand") && (lp_source_option != "hand")) {
        lib1_gf_CreateHandCardButton(lp_player, lp_target_index);
        lib1_gf_UpdateHandCardButtonPositions(lp_player);
    }

    if ((lp_target_option == "milled")) {
        lib1_gf_FadeandDestroyDialog(DialogLastCreated(), 1.5);
    }

}

void lib1_gf_ResizeHandCard (int lp_player, int lp_hand_index, int lp_size) {
    // Automatic Variable Declarations
    // Implementation
    DialogSetSize(lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_ui.lv_dialog, ((lp_size * lib1_gv_cARD_WIDTH) / 100), ((lp_size * lib1_gv_cARD_HEIGHT) / 100));
    lib1_gf_UpdateCard(lp_player, lp_hand_index);
}

void lib1_gf_UpdateCard (int lp_player, int lp_hand_index) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_UpdateCardBackground(lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_ui.lv_background);
    lib1_gf_UpdateCardNameFrame(lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_ui.lv_name_frame);
    lib1_gf_UpdateCardName(lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_ui.lv_name);
    lib1_gf_UpdateCardImage(lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_ui.lv_image);
    lib1_gf_UpdateCardImage(lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_ui.lv_channel_indicator);
    lib1_gf_UpdateCardImageFrame(lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_ui.lv_image_frame);
    lib1_gf_UpdateCardMineralIcon(lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_ui.lv_mineral_icon);
    lib1_gf_UpdateCardMineralCost(lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_ui.lv_mineral_cost);
    lib1_gf_UpdateCardGasIcon(lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_ui.lv_gas_icon);
    lib1_gf_UpdateCardGasCost(lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_ui.lv_gas_cost);
    lib1_gf_UpdateCardType(lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_ui.lv_type);
    if ((lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_set >= 0)) {
        lib1_gf_UpdateCardSetIcon(lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_ui.lv_set_icon);
    }

    lib1_gf_UpdateCardTextFrame(lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_ui.lv_text_frame);
    lib1_gf_UpdateCardText(lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_ui.lv_text);
    if ((lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_ui.lv_race_background != c_invalidDialogControlId)) {
        lib1_gf_UpdateCardRaceBackground(lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_ui.lv_race_background);
    }

    lib1_gf_UpdateCardFrame(lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_ui.lv_border);
    if ((lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_rarity >= 0)) {
        lib1_gf_UpdateCardRarityIcon(lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_ui.lv_rarity_icon);
    }

    lib1_gf_UpdateCardSelectedIndicator(lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_ui.lv_selected_indicator);
    if ((lib1_gv_current_phase == "Planning")) {
        lib1_gf_UpdateCardSelectedPlanningPhaseIndicator(lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_ui.lv_selected_indicator_planning);
    }

}

int lib1_gf_HandCardRenderPriority (int lp_hand_index, bool lp_played) {
    // Variable Declarations
    int lv_priority;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_priority = ((lp_hand_index + 1) * 2);
    if ((lp_played == true)) {
        lv_priority = (lv_priority - 1);
    }

    return lv_priority;
}

int lib1_gf_HoveredCardRenderPriority () {
    // Variable Declarations
    int lv_priority;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    return lib1_gf_HandCardRenderPriority((lib1_gv_bOOSTED_HAND_LIMIT + 1), false);
}

trigger auto_lib1_gf_HandCardPlayAnimation_Trigger = null;
int auto_lib1_gf_HandCardPlayAnimation_lp_player;
int auto_lib1_gf_HandCardPlayAnimation_lp_hand_index;

void lib1_gf_HandCardPlayAnimation (int lp_player, int lp_hand_index) {
    auto_lib1_gf_HandCardPlayAnimation_lp_player = lp_player;
    auto_lib1_gf_HandCardPlayAnimation_lp_hand_index = lp_hand_index;

    if (auto_lib1_gf_HandCardPlayAnimation_Trigger == null) {
        auto_lib1_gf_HandCardPlayAnimation_Trigger = TriggerCreate("auto_lib1_gf_HandCardPlayAnimation_TriggerFunc");
    }

    TriggerExecute(auto_lib1_gf_HandCardPlayAnimation_Trigger, false, false);
}

bool auto_lib1_gf_HandCardPlayAnimation_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_lib1_gf_HandCardPlayAnimation_lp_player;
    int lp_hand_index = auto_lib1_gf_HandCardPlayAnimation_lp_hand_index;

    // Variable Declarations
    int lv_dialog;
    int lv_index;

    // Automatic Variable Declarations
    const int auto6B61BAA4_ae = 10;
    const int auto6B61BAA4_ai = 1;

    // Variable Initialization
    lv_dialog = c_invalidDialogId;

    // Implementation
    lv_dialog = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_ui.lv_dialog;
    DialogSetRenderPriority(lv_dialog, lib1_gf_HandCardRenderPriority(lp_hand_index, true));
    lv_index = 1;
    for ( ; ( (auto6B61BAA4_ai >= 0 && lv_index <= auto6B61BAA4_ae) || (auto6B61BAA4_ai < 0 && lv_index >= auto6B61BAA4_ae) ) ; lv_index += auto6B61BAA4_ai ) {
        DialogSetPosition(lv_dialog, c_anchorBottom, DialogGetOffsetX(lv_dialog), (DialogGetOffsetY(lv_dialog) + 35));
        Wait(0.04, c_timeGame);
    }
    return true;
}

void lib1_gf_DisplayLockedWarningArgusCrystal (int lp_player, int lp_hand_index) {
    // Variable Declarations
    unitgroup lv_argus_group;
    unit lv_argus;

    // Automatic Variable Declarations
    unitgroup auto02CBBCC6_g;
    int auto02CBBCC6_u;

    // Variable Initialization
    lv_argus_group = UnitGroupEmpty();

    // Implementation
    UnitClearSelection(lp_player);
    lv_argus_group = UnitGroup("PylonXelnaga", lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_locked_by_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupSelect(lv_argus_group, lp_player, true);
    CameraPan(lp_player, UnitGroupCenterOfGroup(lv_argus_group), 1.0, -1, 10.0, false);
    auto02CBBCC6_g = lv_argus_group;
    auto02CBBCC6_u = UnitGroupCount(auto02CBBCC6_g, c_unitCountAll);
    for (;; auto02CBBCC6_u -= 1) {
        lv_argus = UnitGroupUnitFromEnd(auto02CBBCC6_g, auto02CBBCC6_u);
        if (lv_argus == null) { break; }
        TextTagCreate(StringExternal("Param/Value/lib_1_65F97067"), 25, UnitGetPosition(lv_argus), 1.0, true, false, PlayerGroupSingle(lp_player));
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 5.0);
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 0.00));
    }
}

void lib1_gf_LockHandCardArgusCrystal (int lp_casting_player, int lp_target_player, int lp_target_hand_index) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gv_player[lp_target_player].lv_hand.lv_card[lp_target_hand_index].lv_locked_by_player = lp_casting_player;
    DialogSetEnabled(lib1_gv_player[lp_target_player].lv_hand.lv_card[lp_target_hand_index].lv_ui.lv_dialog, false);
}

void lib1_gf_UnlockHandCardArgusCrystal (int lp_target_player, int lp_target_hand_index) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gv_player[lp_target_player].lv_hand.lv_card[lp_target_hand_index].lv_locked_by_player = 0;
    DialogSetEnabled(lib1_gv_player[lp_target_player].lv_hand.lv_card[lp_target_hand_index].lv_ui.lv_dialog, true);
}

int lib1_gf_HandPositionX (int lp_player, int lp_hand_index) {
    // Variable Declarations
    int lv_position;
    int lv_card_spacing;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_card_spacing = lib1_gv_cARD_SPACING;
    if ((lib1_gf_TopofHand(lp_player) >= 4) && (lib1_gf_TopofHand(lp_player) <= 8)) {
        lv_card_spacing = (lv_card_spacing - (20 * (lib1_gf_TopofHand(lp_player) - 3)));
    }
    else if ((lib1_gf_TopofHand(lp_player) >= 9)) {
        lv_card_spacing = (1200 / lib1_gf_TopofHand(lp_player));
    }
    lv_position = FixedToInt(((lp_hand_index - ((lib1_gf_FirstEmptyHandSlot(lp_player) - 1.0) / 2.0)) * lv_card_spacing));
    return lv_position;
}

int lib1_gf_HandPositionY (int lp_player, int lp_hand_index) {
    // Variable Declarations
    int lv_slight_offset;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((DialogGetHeight(lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_ui.lv_dialog) > lib1_gv_cARD_HEIGHT)) {
        lv_slight_offset = -8;
    }

    if ((lib1_gv_player[lp_player].lv_hand.lv_selected[lp_hand_index] == true)) {
        return (lib1_gv_hAND_POSITION_SELECTED_Y + lv_slight_offset);
    }
    else {
        return (lib1_gv_hAND_POSITION_Y + lv_slight_offset);
    }
}

void lib1_gf_MoveCardTowardsPosition (int lp_card, int lp_x, int lp_y) {
    // Variable Declarations
    int lv_x_new;
    int lv_y_new;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lib1_gf_UIDistance(lp_x, lp_y, DialogGetOffsetX(lp_card), DialogGetOffsetY(lp_card)) > 0)) {
        if ((lib1_gf_UIDistance(lp_x, lp_y, DialogGetOffsetX(lp_card), DialogGetOffsetY(lp_card)) <= lib1_gv_cARD_MOVE_SPEED)) {
            DialogSetPosition(lp_card, c_anchorBottom, lp_x, lp_y);
        }
        else {
            lv_x_new = FixedToInt((DialogGetOffsetX(lp_card) + ((lib1_gv_cARD_MOVE_SPEED * (lp_x - DialogGetOffsetX(lp_card))) / lib1_gf_UIDistance(lp_x, lp_y, DialogGetOffsetX(lp_card), DialogGetOffsetY(lp_card)))));
            lv_y_new = FixedToInt((DialogGetOffsetY(lp_card) + ((lib1_gv_cARD_MOVE_SPEED * (lp_y - DialogGetOffsetY(lp_card))) / lib1_gf_UIDistance(lp_x, lp_y, DialogGetOffsetX(lp_card), DialogGetOffsetY(lp_card)))));
            DialogSetPosition(lp_card, c_anchorBottom, lv_x_new, lv_y_new);
        }
    }

}

void lib1_gf_CreateHandOverlay (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    DialogCreate(FixedToInt((lib1_gv_cARD_SPACING * (lib1_gv_hAND_LIMIT + 2.0))), FixedToInt((lib1_gv_cARD_HEIGHT * ((lib1_gv_hOVER_OVER_PERCENT + 10.0) / 100.0))), c_anchorBottom, 0, 0, true);
    DialogSetTransparency(DialogLastCreated(), 100.0);
    DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(lp_player), true);
    DialogSetRenderPriority(DialogLastCreated(), (lib1_gv_bOOSTED_HAND_LIMIT + 2));
    lib1_gv_player[lp_player].lv_hand.lv_hidden_overlay = DialogLastCreated();
}

void lib1_gf_CreateHandCardButton (int lp_player, int lp_hand_index) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreateDialogItemButton(lib1_gv_player[lp_player].lv_hand.lv_hidden_overlay, (lib1_gv_cARD_SPACING + 1), ((lib1_gv_cARD_HEIGHT * (lib1_gv_hOVER_OVER_PERCENT - 20)) / 100), c_anchorBottom, 0, lib1_gv_hAND_BUTTON_POSITION_Y, StringToText(""), StringToText(""), "");
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    lib1_gv_player[lp_player].lv_hand.lv_card_button[lp_hand_index] = DialogControlLastCreated();
}

void lib1_gf_DestroyHandCardButton (int lp_player, int lp_hand_index) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlDestroy(lib1_gv_player[lp_player].lv_hand.lv_card_button[lp_hand_index]);
    lib1_gv_player[lp_player].lv_hand.lv_card_button[lp_hand_index] = c_invalidDialogControlId;
}

void lib1_gf_SetHandCardButtonPosition (int lp_player, int lp_hand_index) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetPosition(lib1_gv_player[lp_player].lv_hand.lv_card_button[lp_hand_index], PlayerGroupAll(), c_anchorBottom, lib1_gf_HandPositionX(lp_player, lp_hand_index), lib1_gv_hAND_BUTTON_POSITION_Y);
}

void lib1_gf_UpdateHandCardButtonPositions (int lp_player) {
    // Variable Declarations
    int lv_hand_index;

    // Automatic Variable Declarations
    int auto496A702A_ae;
    const int auto496A702A_ai = 1;

    // Variable Initialization

    // Implementation
    auto496A702A_ae = lib1_gf_TopofHand(lp_player);
    lv_hand_index = 0;
    for ( ; ( (auto496A702A_ai >= 0 && lv_hand_index <= auto496A702A_ae) || (auto496A702A_ai < 0 && lv_hand_index >= auto496A702A_ae) ) ; lv_hand_index += auto496A702A_ai ) {
        lib1_gf_SetHandCardButtonPosition(lp_player, lv_hand_index);
    }
}

void lib1_gf_EnableAllCardButtons (int lp_player) {
    // Variable Declarations
    int lv_hand_index;

    // Automatic Variable Declarations
    int auto2D60E7A5_ae;
    const int auto2D60E7A5_ai = 1;

    // Variable Initialization

    // Implementation
    auto2D60E7A5_ae = lib1_gf_TopofHand(lp_player);
    lv_hand_index = 0;
    for ( ; ( (auto2D60E7A5_ai >= 0 && lv_hand_index <= auto2D60E7A5_ae) || (auto2D60E7A5_ai < 0 && lv_hand_index >= auto2D60E7A5_ae) ) ; lv_hand_index += auto2D60E7A5_ai ) {
        DialogControlSetEnabled(lib1_gv_player[lp_player].lv_hand.lv_card_button[lv_hand_index], PlayerGroupAll(), true);
    }
}

void lib1_gf_DisableAllCardButtons (int lp_player) {
    // Variable Declarations
    int lv_hand_index;

    // Automatic Variable Declarations
    int auto7FEFBEBF_ae;
    const int auto7FEFBEBF_ai = 1;

    // Variable Initialization

    // Implementation
    auto7FEFBEBF_ae = lib1_gf_TopofHand(lp_player);
    lv_hand_index = 0;
    for ( ; ( (auto7FEFBEBF_ai >= 0 && lv_hand_index <= auto7FEFBEBF_ae) || (auto7FEFBEBF_ai < 0 && lv_hand_index >= auto7FEFBEBF_ae) ) ; lv_hand_index += auto7FEFBEBF_ai ) {
        DialogControlSetEnabled(lib1_gv_player[lp_player].lv_hand.lv_card_button[lv_hand_index], PlayerGroupAll(), false);
    }
}

void lib1_gf_CreateResourceUI (int lp_player) {
    // Variable Declarations
    string lv_dialog_frame_image;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((PlayerRace(lp_player) == "Terr")) {
        lv_dialog_frame_image = "Assets\\Textures\\ui_tooltip_frame_terran.dds";
    }
    else if ((PlayerRace(lp_player) == "Zerg")) {
        lv_dialog_frame_image = "Assets\\Textures\\ui_tooltip_frame_zerg.dds";
    }
    else if ((PlayerRace(lp_player) == "Prot")) {
        lv_dialog_frame_image = "Assets\\Textures\\ui_tooltip_frame_protoss.dds";
    }
    DialogCreate(0, 0, c_anchorTopRight, 0, 0, true);
    DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(lp_player), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    lib1_gv_player[lp_player].lv_resources.lv_dialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 0, 0, c_anchorCenter, 0, 0, StringToText(""), lv_dialog_frame_image, c_triggerImageTypeBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
    lib1_gv_player[lp_player].lv_resources.lv_background = DialogControlLastCreated();
    lib1_gf_ResizeResourceUI(lp_player, 0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lib1_gv_rESOURCE_TEXT_WIDTH, lib1_gv_rESOURCE_TEXT_HEIGHT, c_anchorTopRight, lib1_gv_rESOURCE_BORDER_WIDTH, lib1_gv_rESOURCE_BORDER_WIDTH, StringToText(""), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CardNameLarge", PlayerGroupAll());
    lib1_gv_player[lp_player].lv_resources.lv_mineral_text = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lib1_gv_rESOURCE_TEXT_WIDTH, lib1_gv_rESOURCE_TEXT_HEIGHT, c_anchorBottomRight, lib1_gv_rESOURCE_BORDER_WIDTH, lib1_gv_rESOURCE_BORDER_WIDTH, StringToText(""), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CardNameLarge", PlayerGroupAll());
    lib1_gv_player[lp_player].lv_resources.lv_gas_text = DialogControlLastCreated();
}

trigger auto_lib1_gf_ResizeResourceUI_Trigger = null;
int auto_lib1_gf_ResizeResourceUI_lp_player;
fixed auto_lib1_gf_ResizeResourceUI_lp_delay;

void lib1_gf_ResizeResourceUI (int lp_player, fixed lp_delay) {
    auto_lib1_gf_ResizeResourceUI_lp_player = lp_player;
    auto_lib1_gf_ResizeResourceUI_lp_delay = lp_delay;

    if (auto_lib1_gf_ResizeResourceUI_Trigger == null) {
        auto_lib1_gf_ResizeResourceUI_Trigger = TriggerCreate("auto_lib1_gf_ResizeResourceUI_TriggerFunc");
    }

    TriggerExecute(auto_lib1_gf_ResizeResourceUI_Trigger, false, false);
}

bool auto_lib1_gf_ResizeResourceUI_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_lib1_gf_ResizeResourceUI_lp_player;
    fixed lp_delay = auto_lib1_gf_ResizeResourceUI_lp_delay;

    // Automatic Variable Declarations
    // Implementation
    Wait(lp_delay, c_timeGame);
    DialogSetSize(lib1_gv_player[lp_player].lv_resources.lv_dialog, (lib1_gv_rESOURCE_BORDER_WIDTH + (lib1_gv_rESOURCE_ICON_SIZE * MaxI(lib1_gf_MineralIncome(lp_player), lib1_gf_GasIncome(lp_player))) + (lib1_gv_rESOURCE_ICON_SPACING * MaxI(lib1_gf_MineralIncome(lp_player), lib1_gf_GasIncome(lp_player))) + lib1_gv_rESOURCE_TEXT_WIDTH + lib1_gv_rESOURCE_BORDER_WIDTH + 12), (lib1_gv_rESOURCE_BORDER_WIDTH + lib1_gv_rESOURCE_ICON_SIZE + lib1_gv_rESOURCE_ICON_SPACING + lib1_gv_rESOURCE_ICON_SIZE + lib1_gv_rESOURCE_BORDER_WIDTH));
    DialogControlSetSize(lib1_gv_player[lp_player].lv_resources.lv_background, PlayerGroupAll(), (lib1_gv_rESOURCE_BORDER_WIDTH + (lib1_gv_rESOURCE_ICON_SIZE * MaxI(lib1_gf_MineralIncome(lp_player), lib1_gf_GasIncome(lp_player))) + (lib1_gv_rESOURCE_ICON_SPACING * MaxI(lib1_gf_MineralIncome(lp_player), lib1_gf_GasIncome(lp_player))) + lib1_gv_rESOURCE_TEXT_WIDTH + lib1_gv_rESOURCE_BORDER_WIDTH + lib1_gv_rESOURCE_BACKGROUND_EXTRA_WIDTH), (lib1_gv_rESOURCE_BORDER_WIDTH + lib1_gv_rESOURCE_ICON_SIZE + lib1_gv_rESOURCE_ICON_SPACING + lib1_gv_rESOURCE_ICON_SIZE + lib1_gv_rESOURCE_BORDER_WIDTH));
    return true;
}

void lib1_gf_UpdateResourceIcons (int lp_player) {
    // Variable Declarations
    int lv_icon_index;

    // Automatic Variable Declarations
    const int auto706528CA_ae = lib1_gv_mINERAL_LIMIT;
    const int auto706528CA_ai = 1;
    const int auto927FD117_ae = lib1_gv_gAS_LIMIT;
    const int auto927FD117_ai = 1;

    // Variable Initialization

    // Implementation
    lv_icon_index = 0;
    for ( ; ( (auto706528CA_ai >= 0 && lv_icon_index <= auto706528CA_ae) || (auto706528CA_ai < 0 && lv_icon_index >= auto706528CA_ae) ) ; lv_icon_index += auto706528CA_ai ) {
        if ((lv_icon_index < lib1_gf_MineralIncome(lp_player))) {
            if ((lv_icon_index >= (lib1_gf_MineralIncome(lp_player) - lib1_gf_MineralsSpentByPsiDisruptor(lp_player)))) {
                lib1_gf_SetMineralIconSpentByPsiDisruptor(lp_player, lv_icon_index);
            }
            else if ((lv_icon_index >= (lib1_gf_MineralIncome(lp_player) - lib1_gf_MineralsSpent(lp_player)))) {
                lib1_gf_SetMineralIconSpent(lp_player, lv_icon_index);
            }
            else if (true) {
                lib1_gf_SetMineralIconUnspent(lp_player, lv_icon_index);
            }
        }
        else {
            lib1_gf_SetMineralIconUnavailable(lp_player, lv_icon_index);
        }
    }
    lv_icon_index = 0;
    for ( ; ( (auto927FD117_ai >= 0 && lv_icon_index <= auto927FD117_ae) || (auto927FD117_ai < 0 && lv_icon_index >= auto927FD117_ae) ) ; lv_icon_index += auto927FD117_ai ) {
        if ((lv_icon_index < lib1_gf_GasIncome(lp_player))) {
            if ((lv_icon_index >= (lib1_gf_GasIncome(lp_player) - lib1_gf_GasSpent(lp_player)))) {
                lib1_gf_SetGasIconSpent(lp_player, lv_icon_index);
            }
            else if (true) {
                lib1_gf_SetGasIconUnspent(lp_player, lv_icon_index);
            }
        }
        else {
            lib1_gf_SetGasIconUnavailable(lp_player, lv_icon_index);
        }
    }
    libNtve_gf_SetDialogItemText(lib1_gv_player[lp_player].lv_resources.lv_mineral_text, (IntToText(MaxI((lib1_gf_MineralIncome(lp_player) - lib1_gf_MineralsSpent(lp_player)), 0)) + StringExternal("Param/Value/lib_1_250FD12A") + IntToText(lib1_gf_MineralIncome(lp_player))), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(lib1_gv_player[lp_player].lv_resources.lv_gas_text, (IntToText(MaxI((lib1_gf_GasIncome(lp_player) - lib1_gf_GasSpent(lp_player)), 0)) + StringExternal("Param/Value/lib_1_CABE0F0C") + IntToText(lib1_gf_GasIncome(lp_player))), PlayerGroupAll());
}

void lib1_gf_SetMineralIconUnavailable (int lp_player, int lp_icon_index) {
    // Automatic Variable Declarations
    // Implementation
    if ((lib1_gv_player[lp_player].lv_resources.lv_mineral_icon[lp_icon_index] == c_invalidDialogControlId)) {
    }
    else {
        lib1_gf_FadeandDestroyDialogItem(lib1_gv_player[lp_player].lv_resources.lv_mineral_icon[lp_icon_index], 0.5);
        lib1_gv_player[lp_player].lv_resources.lv_mineral_icon[lp_icon_index] = c_invalidDialogControlId;
    }
}

void lib1_gf_SetMineralIconUnspent (int lp_player, int lp_icon_index) {
    // Automatic Variable Declarations
    // Implementation
    if ((lib1_gv_player[lp_player].lv_resources.lv_mineral_icon[lp_icon_index] == c_invalidDialogControlId)) {
        libNtve_gf_CreateDialogItemImage(lib1_gv_player[lp_player].lv_resources.lv_dialog, lib1_gv_rESOURCE_ICON_SIZE, lib1_gv_rESOURCE_ICON_SIZE, c_anchorTopRight, (lib1_gv_rESOURCE_BORDER_WIDTH + lib1_gv_rESOURCE_TEXT_WIDTH + (lib1_gv_rESOURCE_ICON_SIZE * lp_icon_index) + (lib1_gv_rESOURCE_ICON_SPACING * (lp_icon_index + 1))), lib1_gv_rESOURCE_BORDER_WIDTH, StringToText(""), "Assets\\Textures\\icon-mineral-protoss.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
        lib1_gv_player[lp_player].lv_resources.lv_mineral_icon[lp_icon_index] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.5, 0.0);
    }
    else {
        lib1_gv_player[lp_player].lv_resources.lv_mineral_icon[lp_icon_index] = lib1_gf_ReplaceDialogImage(lp_player, lib1_gv_player[lp_player].lv_resources.lv_mineral_icon[lp_icon_index], c_invalidDialogControlId, "Assets\\Textures\\icon-mineral-protoss.dds", 0.5, false);
        libNtve_gf_SetDialogItemTooltip(lib1_gv_player[lp_player].lv_resources.lv_mineral_icon[lp_icon_index], StringToText(""), PlayerGroupAll());
    }
}

void lib1_gf_SetMineralIconUnspentPsiEmitter (int lp_player, int lp_icon_index) {
    // Automatic Variable Declarations
    // Implementation
    if ((lib1_gv_player[lp_player].lv_resources.lv_mineral_icon[lp_icon_index] == c_invalidDialogControlId)) {
        libNtve_gf_CreateDialogItemImage(lib1_gv_player[lp_player].lv_resources.lv_dialog, lib1_gv_rESOURCE_ICON_SIZE, lib1_gv_rESOURCE_ICON_SIZE, c_anchorTopRight, (lib1_gv_rESOURCE_BORDER_WIDTH + lib1_gv_rESOURCE_TEXT_WIDTH + (lib1_gv_rESOURCE_ICON_SIZE * lp_icon_index) + (lib1_gv_rESOURCE_ICON_SPACING * (lp_icon_index + 1))), lib1_gv_rESOURCE_BORDER_WIDTH, StringExternal("Param/Value/lib_1_C51D21DC"), "Assets\\Textures\\btn-upgrade-tychus-reaper-explosivecharges.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
        lib1_gv_player[lp_player].lv_resources.lv_mineral_icon[lp_icon_index] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.5, 0.0);
    }
    else {
        lib1_gv_player[lp_player].lv_resources.lv_mineral_icon[lp_icon_index] = lib1_gf_ReplaceDialogImage(lp_player, lib1_gv_player[lp_player].lv_resources.lv_mineral_icon[lp_icon_index], c_invalidDialogControlId, "Assets\\Textures\\btn-upgrade-tychus-reaper-explosivecharges.dds", 0.5, false);
        libNtve_gf_SetDialogItemTooltip(lib1_gv_player[lp_player].lv_resources.lv_mineral_icon[lp_icon_index], StringExternal("Param/Value/lib_1_78A42FA6"), PlayerGroupAll());
    }
}

void lib1_gf_SetMineralIconSpent (int lp_player, int lp_icon_index) {
    // Variable Declarations
    int lv_old_icon;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_old_icon = c_invalidDialogControlId;

    // Implementation
    if ((lib1_gv_player[lp_player].lv_resources.lv_mineral_icon[lp_icon_index] == c_invalidDialogControlId)) {
        libNtve_gf_CreateDialogItemImage(lib1_gv_player[lp_player].lv_resources.lv_dialog, lib1_gv_rESOURCE_ICON_SIZE, lib1_gv_rESOURCE_ICON_SIZE, c_anchorTopRight, (lib1_gv_rESOURCE_BORDER_WIDTH + lib1_gv_rESOURCE_TEXT_WIDTH + (lib1_gv_rESOURCE_ICON_SIZE * lp_icon_index) + (lib1_gv_rESOURCE_ICON_SPACING * (lp_icon_index + 1))), lib1_gv_rESOURCE_BORDER_WIDTH, StringToText(""), "Assets\\Textures\\icon-mineral-nobg.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
        lib1_gv_player[lp_player].lv_resources.lv_mineral_icon[lp_icon_index] = DialogControlLastCreated();
    }
    else {
        lib1_gv_player[lp_player].lv_resources.lv_mineral_icon[lp_icon_index] = lib1_gf_ReplaceDialogImage(lp_player, lib1_gv_player[lp_player].lv_resources.lv_mineral_icon[lp_icon_index], c_invalidDialogControlId, "Assets\\Textures\\icon-mineral-nobg.dds", 0.5, true);
        libNtve_gf_SetDialogItemTooltip(lib1_gv_player[lp_player].lv_resources.lv_mineral_icon[lp_icon_index], StringToText(""), PlayerGroupAll());
    }
}

void lib1_gf_SetMineralIconSpentPsiEmitter (int lp_player, int lp_icon_index) {
    // Variable Declarations
    int lv_old_icon;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_old_icon = c_invalidDialogControlId;

    // Implementation
    if ((lib1_gv_player[lp_player].lv_resources.lv_mineral_icon[lp_icon_index] == c_invalidDialogControlId)) {
        libNtve_gf_CreateDialogItemImage(lib1_gv_player[lp_player].lv_resources.lv_dialog, lib1_gv_rESOURCE_ICON_SIZE, lib1_gv_rESOURCE_ICON_SIZE, c_anchorTopRight, (lib1_gv_rESOURCE_BORDER_WIDTH + lib1_gv_rESOURCE_TEXT_WIDTH + (lib1_gv_rESOURCE_ICON_SIZE * lp_icon_index) + (lib1_gv_rESOURCE_ICON_SPACING * (lp_icon_index + 1))), lib1_gv_rESOURCE_BORDER_WIDTH, StringToText(""), "Assets\\Textures\\btn-upgrade-tychus-reaper-explosivecharges.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
        lib1_gv_player[lp_player].lv_resources.lv_mineral_icon[lp_icon_index] = DialogControlLastCreated();
    }
    else {
        lib1_gv_player[lp_player].lv_resources.lv_mineral_icon[lp_icon_index] = lib1_gf_ReplaceDialogImage(lp_player, lib1_gv_player[lp_player].lv_resources.lv_mineral_icon[lp_icon_index], c_invalidDialogControlId, "Assets\\Textures\\btn-upgrade-tychus-reaper-explosivecharges.dds", 0.5, true);
        libNtve_gf_SetDialogItemTooltip(lib1_gv_player[lp_player].lv_resources.lv_mineral_icon[lp_icon_index], StringToText(""), PlayerGroupAll());
    }
}

void lib1_gf_SetMineralIconSpentByPsiDisruptor (int lp_player, int lp_icon_index) {
    // Variable Declarations
    int lv_old_icon;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_old_icon = c_invalidDialogControlId;

    // Implementation
    if ((lib1_gv_player[lp_player].lv_resources.lv_mineral_icon[lp_icon_index] == c_invalidDialogControlId)) {
        libNtve_gf_CreateDialogItemImage(lib1_gv_player[lp_player].lv_resources.lv_dialog, lib1_gv_rESOURCE_ICON_SIZE, lib1_gv_rESOURCE_ICON_SIZE, c_anchorTopRight, (lib1_gv_rESOURCE_BORDER_WIDTH + lib1_gv_rESOURCE_TEXT_WIDTH + (lib1_gv_rESOURCE_ICON_SIZE * lp_icon_index) + (lib1_gv_rESOURCE_ICON_SPACING * (lp_icon_index + 1))), lib1_gv_rESOURCE_BORDER_WIDTH, StringExternal("Param/Value/lib_1_BAC060A6"), "Assets\\Textures\\btn-research-zerg-psidisruptor.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
        lib1_gv_player[lp_player].lv_resources.lv_mineral_icon[lp_icon_index] = DialogControlLastCreated();
    }
    else {
        lib1_gv_player[lp_player].lv_resources.lv_mineral_icon[lp_icon_index] = lib1_gf_ReplaceDialogImage(lp_player, lib1_gv_player[lp_player].lv_resources.lv_mineral_icon[lp_icon_index], c_invalidDialogControlId, "Assets\\Textures\\btn-research-zerg-psidisruptor.dds", 0.5, true);
        libNtve_gf_SetDialogItemTooltip(lib1_gv_player[lp_player].lv_resources.lv_mineral_icon[lp_icon_index], StringExternal("Param/Value/lib_1_D1E014ED"), PlayerGroupAll());
    }
}

void lib1_gf_SetGasIconUnavailable (int lp_player, int lp_icon_index) {
    // Automatic Variable Declarations
    // Implementation
    if ((lib1_gv_player[lp_player].lv_resources.lv_gas_icon[lp_icon_index] == c_invalidDialogControlId)) {
    }
    else {
        lib1_gf_FadeandDestroyDialogItem(lib1_gv_player[lp_player].lv_resources.lv_gas_icon[lp_icon_index], 0.5);
        lib1_gv_player[lp_player].lv_resources.lv_gas_icon[lp_icon_index] = c_invalidDialogControlId;
    }
}

void lib1_gf_SetGasIconUnspent (int lp_player, int lp_icon_index) {
    // Automatic Variable Declarations
    // Implementation
    if ((lib1_gv_player[lp_player].lv_resources.lv_gas_icon[lp_icon_index] == c_invalidDialogControlId)) {
        libNtve_gf_CreateDialogItemImage(lib1_gv_player[lp_player].lv_resources.lv_dialog, lib1_gv_rESOURCE_ICON_SIZE, lib1_gv_rESOURCE_ICON_SIZE, c_anchorBottomRight, (lib1_gv_rESOURCE_BORDER_WIDTH + lib1_gv_rESOURCE_TEXT_WIDTH + (lib1_gv_rESOURCE_ICON_SIZE * lp_icon_index) + (lib1_gv_rESOURCE_ICON_SPACING * (lp_icon_index + 1))), lib1_gv_rESOURCE_BORDER_WIDTH, StringToText(""), "Assets\\Textures\\icon-gas-terran.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
        lib1_gv_player[lp_player].lv_resources.lv_gas_icon[lp_icon_index] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.5, 0.0);
    }
    else {
        lib1_gv_player[lp_player].lv_resources.lv_gas_icon[lp_icon_index] = lib1_gf_ReplaceDialogImage(lp_player, lib1_gv_player[lp_player].lv_resources.lv_gas_icon[lp_icon_index], c_invalidDialogControlId, "Assets\\Textures\\icon-gas-terran.dds", 0.5, false);
    }
}

void lib1_gf_SetGasIconSpent (int lp_player, int lp_icon_index) {
    // Variable Declarations
    int lv_old_icon;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_old_icon = c_invalidDialogControlId;

    // Implementation
    if ((lib1_gv_player[lp_player].lv_resources.lv_gas_icon[lp_icon_index] == c_invalidDialogControlId)) {
        libNtve_gf_CreateDialogItemImage(lib1_gv_player[lp_player].lv_resources.lv_dialog, lib1_gv_rESOURCE_ICON_SIZE, lib1_gv_rESOURCE_ICON_SIZE, c_anchorBottomRight, (lib1_gv_rESOURCE_BORDER_WIDTH + lib1_gv_rESOURCE_TEXT_WIDTH + (lib1_gv_rESOURCE_ICON_SIZE * lp_icon_index) + (lib1_gv_rESOURCE_ICON_SPACING * (lp_icon_index + 1))), lib1_gv_rESOURCE_BORDER_WIDTH, StringToText(""), "Assets\\Textures\\icon-gas-terran_nobg.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
        lib1_gv_player[lp_player].lv_resources.lv_gas_icon[lp_icon_index] = DialogControlLastCreated();
    }
    else {
        lib1_gv_player[lp_player].lv_resources.lv_gas_icon[lp_icon_index] = lib1_gf_ReplaceDialogImage(lp_player, lib1_gv_player[lp_player].lv_resources.lv_gas_icon[lp_icon_index], c_invalidDialogControlId, "Assets\\Textures\\icon-gas-terran_nobg.dds", 0.5, true);
    }
}

void lib1_gf_NotEnoughResources (int lp_player, int lp_mineral_cost, int lp_gas_cost) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_mineral_cost + lib1_gf_MineralsSpent(lp_player)) > lib1_gf_MineralIncome(lp_player))) {
        if ((PlayerRace(lp_player) == "Terr")) {
            SoundPlayForPlayer(SoundLink("e_cmdNotEnoughMinerals", -1), c_maxPlayers, PlayerGroupSingle(lp_player), 100.0, 0.0);
        }
        else if ((PlayerRace(lp_player) == "Zerg")) {
            SoundPlayForPlayer(SoundLink("e_cmdNotEnoughMinerals_Zerg", -1), c_maxPlayers, PlayerGroupSingle(lp_player), 100.0, 0.0);
        }
        else if ((PlayerRace(lp_player) == "Prot")) {
            SoundPlayForPlayer(SoundLink("e_cmdNotEnoughMinerals_Prot", -1), c_maxPlayers, PlayerGroupSingle(lp_player), 100.0, 0.0);
        }
    }
    else {
        if ((PlayerRace(lp_player) == "Terr")) {
            SoundPlayForPlayer(SoundLink("Alert_TerranNeedMoreGas", -1), c_maxPlayers, PlayerGroupSingle(lp_player), 100.0, 0.0);
        }
        else if ((PlayerRace(lp_player) == "Zerg")) {
            SoundPlayForPlayer(SoundLink("Alert_ZergNeedMoreGas", -1), c_maxPlayers, PlayerGroupSingle(lp_player), 100.0, 0.0);
        }
        else if ((PlayerRace(lp_player) == "Prot")) {
            SoundPlayForPlayer(SoundLink("Alert_ProtossNeedMoreGas", -1), c_maxPlayers, PlayerGroupSingle(lp_player), 100.0, 0.0);
        }
    }
}

void lib1_gf_CreateResourceChooserDialog () {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    const int auto5083535B_ae = lib1_gv_mAX_PLAYERS;
    const int auto5083535B_ai = 1;
    const int auto36E9729B_ae = lib1_gv_mAX_PLAYERS;
    const int auto36E9729B_ai = 1;
    const int autoED3A2E9F_ae = lib1_gv_mAX_PLAYERS;
    const int autoED3A2E9F_ai = 1;

    // Variable Initialization

    // Implementation
    DialogCreate(lib1_gv_rESOURCE_CHOOSER_WIDTH, (lib1_gv_rESOURCE_BORDER_WIDTH + lib1_gv_rESOURCE_CHOOSER_TEXT_HEIGHT + lib1_gv_rESOURCE_ICON_SPACING + lib1_gv_rESOURCE_CHOOSER_ICON_SIZE + lib1_gv_rESOURCE_BORDER_WIDTH + lib1_gv_rESOURCE_CHOOSER_BOTTOM_BORDER), c_anchorCenter, 0, 45, true);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    DialogSetImageVisible(DialogLastCreated(), false);
    lib1_gv_resource_chooser_dialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lib1_gv_rESOURCE_CHOOSER_WIDTH, (lib1_gv_rESOURCE_BORDER_WIDTH + lib1_gv_rESOURCE_CHOOSER_TEXT_HEIGHT + lib1_gv_rESOURCE_ICON_SPACING + lib1_gv_rESOURCE_CHOOSER_ICON_SIZE + lib1_gv_rESOURCE_BORDER_WIDTH + lib1_gv_rESOURCE_CHOOSER_BOTTOM_BORDER), c_anchorCenter, 0, lib1_gv_rESOURCE_CHOOSER_Y_OFFSET, StringToText(""), "Assets\\Textures\\ui_tooltip_frame_terran.dds", c_triggerImageTypeBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
    lv_player = 1;
    for ( ; ( (auto5083535B_ai >= 0 && lv_player <= auto5083535B_ae) || (auto5083535B_ai < 0 && lv_player >= auto5083535B_ae) ) ; lv_player += auto5083535B_ai ) {
        if ((PlayerRace(lv_player) == "Terr")) {
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(lv_player), true);
        }
        else {
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(lv_player), false);
        }
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lib1_gv_rESOURCE_CHOOSER_WIDTH, (lib1_gv_rESOURCE_BORDER_WIDTH + lib1_gv_rESOURCE_CHOOSER_TEXT_HEIGHT + lib1_gv_rESOURCE_ICON_SPACING + lib1_gv_rESOURCE_CHOOSER_ICON_SIZE + lib1_gv_rESOURCE_BORDER_WIDTH + lib1_gv_rESOURCE_CHOOSER_BOTTOM_BORDER), c_anchorCenter, 0, lib1_gv_rESOURCE_CHOOSER_Y_OFFSET, StringToText(""), "Assets\\Textures\\ui_tooltip_frame_zerg.dds", c_triggerImageTypeBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
    lv_player = 1;
    for ( ; ( (auto36E9729B_ai >= 0 && lv_player <= auto36E9729B_ae) || (auto36E9729B_ai < 0 && lv_player >= auto36E9729B_ae) ) ; lv_player += auto36E9729B_ai ) {
        if ((PlayerRace(lv_player) == "Zerg")) {
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(lv_player), true);
        }
        else {
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(lv_player), false);
        }
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lib1_gv_rESOURCE_CHOOSER_WIDTH, (lib1_gv_rESOURCE_BORDER_WIDTH + lib1_gv_rESOURCE_CHOOSER_TEXT_HEIGHT + lib1_gv_rESOURCE_ICON_SPACING + lib1_gv_rESOURCE_CHOOSER_ICON_SIZE + lib1_gv_rESOURCE_BORDER_WIDTH + lib1_gv_rESOURCE_CHOOSER_BOTTOM_BORDER), c_anchorCenter, 0, lib1_gv_rESOURCE_CHOOSER_Y_OFFSET, StringToText(""), "Assets\\Textures\\ui_tooltip_frame_protoss.dds", c_triggerImageTypeBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
    lv_player = 1;
    for ( ; ( (autoED3A2E9F_ai >= 0 && lv_player <= autoED3A2E9F_ae) || (autoED3A2E9F_ai < 0 && lv_player >= autoED3A2E9F_ae) ) ; lv_player += autoED3A2E9F_ai ) {
        if ((PlayerRace(lv_player) == "Prot")) {
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(lv_player), true);
        }
        else {
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(lv_player), false);
        }
    }
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lib1_gv_rESOURCE_CHOOSER_WIDTH, lib1_gv_rESOURCE_CHOOSER_TEXT_HEIGHT, c_anchorTop, 0, lib1_gv_rESOURCE_BORDER_WIDTH, StringExternal("Param/Value/lib_1_BBE08A09"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CardNameLarge", PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lib1_gv_rESOURCE_CHOOSER_ICON_SIZE, lib1_gv_rESOURCE_CHOOSER_ICON_SIZE, c_anchorBottom, (-1 * (lib1_gv_rESOURCE_ICON_SPACING + (lib1_gv_rESOURCE_CHOOSER_ICON_SIZE / 2))), lib1_gv_rESOURCE_BORDER_WIDTH, StringToText(""), "Assets\\Textures\\icon-mineral-protoss.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    lib1_gv_resource_chooser_mineral_icon = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lib1_gv_rESOURCE_CHOOSER_ICON_SIZE, lib1_gv_rESOURCE_CHOOSER_ICON_SIZE, c_anchorBottom, (-1 * (lib1_gv_rESOURCE_ICON_SPACING + (lib1_gv_rESOURCE_CHOOSER_ICON_SIZE / 2))), lib1_gv_rESOURCE_BORDER_WIDTH, StringToText(""), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    lib1_gv_resource_chooser_mineral_button = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lib1_gv_rESOURCE_CHOOSER_ICON_SIZE, lib1_gv_rESOURCE_CHOOSER_ICON_SIZE, c_anchorBottom, (lib1_gv_rESOURCE_ICON_SPACING + (lib1_gv_rESOURCE_CHOOSER_ICON_SIZE / 2)), lib1_gv_rESOURCE_BORDER_WIDTH, StringToText(""), "Assets\\Textures\\icon-gas-terran.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    lib1_gv_resource_chooser_gas_icon = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lib1_gv_rESOURCE_CHOOSER_ICON_SIZE, lib1_gv_rESOURCE_CHOOSER_ICON_SIZE, c_anchorBottom, (lib1_gv_rESOURCE_ICON_SPACING + (lib1_gv_rESOURCE_CHOOSER_ICON_SIZE / 2)), lib1_gv_rESOURCE_BORDER_WIDTH, StringToText(""), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    lib1_gv_resource_chooser_gas_button = DialogControlLastCreated();
}

void lib1_gf_SetMineralIconSizeandPosition (int lp_player, fixed lp_size) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetSize(lib1_gv_resource_chooser_mineral_icon, PlayerGroupSingle(lp_player), FixedToInt((lib1_gv_rESOURCE_CHOOSER_ICON_SIZE * lp_size)), FixedToInt((lib1_gv_rESOURCE_CHOOSER_ICON_SIZE * lp_size)));
}

void lib1_gf_SetGasIconSizeandPosition (int lp_player, fixed lp_size) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetSize(lib1_gv_resource_chooser_gas_icon, PlayerGroupSingle(lp_player), FixedToInt((lib1_gv_rESOURCE_CHOOSER_ICON_SIZE * lp_size)), FixedToInt((lib1_gv_rESOURCE_CHOOSER_ICON_SIZE * lp_size)));
}

void lib1_gf_CreateDeckUI () {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    const int autoFAD867F1_ae = lib1_gv_mAX_PLAYERS;
    const int autoFAD867F1_ai = 1;
    const int auto24AF662D_ae = lib1_gv_mAX_PLAYERS;
    const int auto24AF662D_ai = 1;
    const int autoC50071DD_ae = lib1_gv_mAX_PLAYERS;
    const int autoC50071DD_ai = 1;

    // Variable Initialization

    // Implementation
    DialogCreate(lib1_gv_dECK_TRACKER_WIDTH, lib1_gv_dECK_TRACKER_HEIGHT, c_anchorTopRight, 0, (lib1_gv_rESOURCE_BORDER_WIDTH + lib1_gv_rESOURCE_ICON_SIZE + lib1_gv_rESOURCE_ICON_SPACING + lib1_gv_rESOURCE_ICON_SIZE + lib1_gv_rESOURCE_BORDER_WIDTH), true);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    lib1_gv_deck_tracker_dialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lib1_gv_dECK_TRACKER_WIDTH, lib1_gv_dECK_TRACKER_HEIGHT, c_anchorLeft, 0, 0, StringToText(""), "Assets\\Textures\\ui_tooltip_frame_terran.dds", c_triggerImageTypeBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
    lv_player = 1;
    for ( ; ( (autoFAD867F1_ai >= 0 && lv_player <= autoFAD867F1_ae) || (autoFAD867F1_ai < 0 && lv_player >= autoFAD867F1_ae) ) ; lv_player += autoFAD867F1_ai ) {
        if ((PlayerRace(lv_player) == "Terr")) {
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(lv_player), true);
        }
        else {
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(lv_player), false);
        }
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lib1_gv_dECK_TRACKER_WIDTH, lib1_gv_dECK_TRACKER_HEIGHT, c_anchorLeft, 0, 0, StringToText(""), "Assets\\Textures\\ui_tooltip_frame_zerg.dds", c_triggerImageTypeBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
    lv_player = 1;
    for ( ; ( (auto24AF662D_ai >= 0 && lv_player <= auto24AF662D_ae) || (auto24AF662D_ai < 0 && lv_player >= auto24AF662D_ae) ) ; lv_player += auto24AF662D_ai ) {
        if ((PlayerRace(lv_player) == "Zerg")) {
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(lv_player), true);
        }
        else {
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(lv_player), false);
        }
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lib1_gv_dECK_TRACKER_WIDTH, lib1_gv_dECK_TRACKER_HEIGHT, c_anchorLeft, 0, 0, StringToText(""), "Assets\\Textures\\ui_tooltip_frame_protoss.dds", c_triggerImageTypeBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
    lv_player = 1;
    for ( ; ( (autoC50071DD_ai >= 0 && lv_player <= autoC50071DD_ae) || (autoC50071DD_ai < 0 && lv_player >= autoC50071DD_ae) ) ; lv_player += autoC50071DD_ai ) {
        if ((PlayerRace(lv_player) == "Prot")) {
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(lv_player), true);
        }
        else {
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(lv_player), false);
        }
    }
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lib1_gv_dECK_TRACKER_WIDTH, lib1_gv_dECK_TRACKER_HEIGHT, c_anchorLeft, lib1_gv_rESOURCE_BORDER_WIDTH, 0, StringToText(""), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "DeckInfoLeft", PlayerGroupAll());
    lib1_gv_deck_tracker_labels_item = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lib1_gv_dECK_TRACKER_WIDTH, lib1_gv_dECK_TRACKER_HEIGHT, c_anchorRight, lib1_gv_rESOURCE_BORDER_WIDTH, 0, StringToText(""), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "DeckInfoRight", PlayerGroupAll());
    lib1_gv_deck_tracker_values_item = DialogControlLastCreated();
}

void lib1_gf_UpdateDeckUI (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(lib1_gv_deck_tracker_labels_item, StringExternal("Param/Value/lib_1_92CFD87B"), PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemText(lib1_gv_deck_tracker_values_item, (IntToText(lib1_gf_FirstEmptyDeckSlot(lp_player)) + StringExternal("Param/Value/lib_1_5C00B464") + IntToText(lib1_gf_FirstEmptyHandSlot(lp_player)) + StringExternal("Param/Value/lib_1_B07BC5DE") + IntToText((lib1_gf_HandLimit(lp_player) + 1))), PlayerGroupSingle(lp_player));
}

void lib1_gf_CreateTurnTimerUI () {
    // Automatic Variable Declarations
    // Implementation
    DialogCreate(lib1_gv_tURN_TIMER_WIDTH, lib1_gv_tURN_TIMER_HEIGHT, c_anchorTop, 0, 10, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    lib1_gv_turn_timer_dialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lib1_gv_tURN_TIMER_WIDTH, lib1_gv_tURN_TIMER_HEIGHT, c_anchorTop, 0, 0, StringExternal("Param/Value/lib_1_06A3DA07"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "TimerPhase", PlayerGroupAll());
    lib1_gv_turn_timer_phase = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lib1_gv_tURN_TIMER_WIDTH, lib1_gv_tURN_TIMER_HEIGHT, c_anchorTop, 0, 0, StringExternal("Param/Value/lib_1_F62B5C48"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "TimerNumber", PlayerGroupAll());
    lib1_gv_turn_timer_number = DialogControlLastCreated();
}

void lib1_gf_UpdateTurnTimer () {
    // Automatic Variable Declarations
    // Implementation
    if (((lib1_gv_tutorial_flag == false) || (lib1_gv_current_phase == "Battle"))) {
        libNtve_gf_SetDialogItemText(lib1_gv_turn_timer_number, FixedToText(lib1_gv_turn_timer_value, 0), PlayerGroupAll());
        lib1_gv_turn_timer_value = (lib1_gv_turn_timer_value - 1);
    }

}

void lib1_gf_CreateEndPhaseButton () {
    // Automatic Variable Declarations
    // Implementation
    DialogCreate(lib1_gv_eND_TURN_WIDTH, lib1_gv_eND_TURN_HEIGHT, c_anchorCenter, 0, 0, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    lib1_gv_end_phase_dialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lib1_gv_eND_TURN_WIDTH, lib1_gv_eND_TURN_HEIGHT, c_anchorCenter, 0, 0, StringToText(""), StringExternal("Param/Value/lib_1_3EC2EC80"), "");
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(100,100,100), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CardNameLarge", PlayerGroupAll());
    lib1_gv_end_phase_button = DialogControlLastCreated();
}

void lib1_gf_CreatePlanningInstructions () {
    // Automatic Variable Declarations
    // Implementation
    DialogCreate(lib1_gv_pLANNING_INSTRUCTION_WIDTH, lib1_gv_pLANNING_INSTRUCTION_HEIGHT, c_anchorCenter, 0, 70, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    lib1_gv_planning_instructions = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lib1_gv_pLANNING_INSTRUCTION_WIDTH, lib1_gv_pLANNING_INSTRUCTION_HEIGHT, c_anchorTop, 0, 0, StringExternal("Param/Value/lib_1_57C1A184"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CardNameLarge", PlayerGroupAll());
}

void lib1_gf_StartHoverTimer (int lp_player, int lp_index, bool lp_menu) {
    // Automatic Variable Declarations
    // Implementation
    if ((((lp_menu == false) && ((lib1_gv_player[lp_player].lv_hand.lv_card[lp_index].lv_detection == true) || (lib1_gv_player[lp_player].lv_hand.lv_card[lp_index].lv_delay == true) || (lib1_gv_player[lp_player].lv_hand.lv_card[lp_index].lv_heroic == true) || (lib1_gv_player[lp_player].lv_hand.lv_card[lp_index].lv_rush == true) || (lib1_gv_player[lp_player].lv_hand.lv_card[lp_index].lv_stream == true) || (lib1_gv_player[lp_player].lv_hand.lv_card[lp_index].lv_transform >= 0) || (lib1_gv_card[lib1_gv_player[lp_player].lv_hand.lv_card[lp_index].lv_id].lv_buried == true) || (lib1_gv_player[lp_player].lv_hand.lv_card[lp_index].lv_channel >= 1) || (lib1_gv_player[lp_player].lv_hand.lv_card[lp_index].lv_unit_type[0] != null))) || ((lp_menu == true) && ((lib1_gv_card[lib1_gv_player_collection[lp_player].lv_collection_card_id[lp_index]].lv_detection == true) || (lib1_gv_card[lib1_gv_player_collection[lp_player].lv_collection_card_id[lp_index]].lv_delay == true) || (lib1_gv_card[lib1_gv_player_collection[lp_player].lv_collection_card_id[lp_index]].lv_heroic == true) || (lib1_gv_card[lib1_gv_player_collection[lp_player].lv_collection_card_id[lp_index]].lv_rush == true) || (lib1_gv_card[lib1_gv_player_collection[lp_player].lv_collection_card_id[lp_index]].lv_stream == true) || (lib1_gv_card[lib1_gv_player_collection[lp_player].lv_collection_card_id[lp_index]].lv_transform >= 0) || (lib1_gv_card[lib1_gv_player_collection[lp_player].lv_collection_card_id[lp_index]].lv_buried == true) || (lib1_gv_card[lib1_gv_player_collection[lp_player].lv_collection_card_id[lp_index]].lv_channel >= 1) || (lib1_gv_card[lib1_gv_player_collection[lp_player].lv_collection_card_id[lp_index]].lv_unit_type[0] != null))))) {
        TimerStart(lib1_gv_hover_timer[lp_player], lib1_gv_hOVER_DELAY, false, c_timeGame);
        lib1_gv_last_hovered_hand_index[lp_player] = lp_index;
    }

}

void lib1_gf_CancelHover (int lp_player) {
    // Variable Declarations
    int lv_hand_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    TimerPause(lib1_gv_hover_timer[lp_player], true);
    DialogDestroy(lib1_gv_card_hover_dialog[lp_player]);
}

void lib1_gf_CreateCardHoverDialog (int lp_player, int lp_index, bool lp_menu) {
    // Variable Declarations
    int lv_line_count;
    int lv_unit_type_index;
    unit lv_dummy_unit;
    string lv_type;
    bool lv_detection;
    bool lv_delay;
    bool lv_heroic;
    bool lv_rush;
    bool lv_stream;
    int lv_transform;
    bool lv_buried;
    int lv_channel;
    int lv_position_x;
    int lv_position_y;
    int lv_anchor;
    string lv_card_name;

    // Automatic Variable Declarations
    const int auto12062431_ae = lib1_gv_mAX_UNIT_TYPE_PER_CARD;
    const int auto12062431_ai = 1;
    const int auto1D875EC4_ae = lib1_gv_mAX_UNIT_TYPE_PER_CARD;
    const int auto1D875EC4_ai = 1;

    // Variable Initialization
    lv_type = "";
    lv_anchor = c_anchorBottomLeft;
    lv_card_name = "";

    // Implementation
    if ((lp_menu == true)) {
        lv_position_x = (lib1_gf_CollectionCardX(lp_index) + lib1_gv_cARD_HOVER_X_OFFSET_COLLECTION);
        lv_position_y = (lib1_gf_CollectionCardY(lp_index) + 0);
        lv_anchor = c_anchorCenter;
        lv_type = lib1_gv_card[lib1_gv_player_collection[lp_player].lv_collection_card_id[lp_index]].lv_type;
        lv_detection = lib1_gv_card[lib1_gv_player_collection[lp_player].lv_collection_card_id[lp_index]].lv_detection;
        lv_delay = lib1_gv_card[lib1_gv_player_collection[lp_player].lv_collection_card_id[lp_index]].lv_delay;
        lv_heroic = lib1_gv_card[lib1_gv_player_collection[lp_player].lv_collection_card_id[lp_index]].lv_heroic;
        lv_rush = lib1_gv_card[lib1_gv_player_collection[lp_player].lv_collection_card_id[lp_index]].lv_rush;
        lv_stream = lib1_gv_card[lib1_gv_player_collection[lp_player].lv_collection_card_id[lp_index]].lv_stream;
        lv_transform = lib1_gv_card[lib1_gv_player_collection[lp_player].lv_collection_card_id[lp_index]].lv_transform;
        lv_buried = lib1_gv_card[lib1_gv_player_collection[lp_player].lv_collection_card_id[lp_index]].lv_buried;
        lv_channel = lib1_gv_card[lib1_gv_player_collection[lp_player].lv_collection_card_id[lp_index]].lv_channel;
        lv_card_name = lib1_gv_card[lib1_gv_player_collection[lp_player].lv_collection_card_id[lp_index]].lv_name;
        lv_unit_type_index = 0;
        for ( ; ( (auto12062431_ai >= 0 && lv_unit_type_index <= auto12062431_ae) || (auto12062431_ai < 0 && lv_unit_type_index >= auto12062431_ae) ) ; lv_unit_type_index += auto12062431_ai ) {
            if ((lib1_gv_card[lib1_gv_player_collection[lp_player].lv_collection_card_id[lp_index]].lv_unit_type[lv_unit_type_index] != null)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, lib1_gv_card[lib1_gv_player_collection[lp_player].lv_collection_card_id[lp_index]].lv_unit_type[lv_unit_type_index], 0, 0, RegionGetCenter(lib1_gv_player[lp_player].lv_cleanup_region));
                libNtve_gf_ShowHideUnit(lv_dummy_unit, false);
                lv_dummy_unit = UnitLastCreated();
                lv_line_count = (lv_line_count + lib1_gf_GetUnitStatsLineCount(lv_dummy_unit));
                if ((lv_unit_type_index >= 1)) {
                    lv_line_count = (lv_line_count + 1);
                }

                UnitRemove(lv_dummy_unit);
            }

        }
    }
    else {
        lv_position_x = (lib1_gf_HandPositionX(lp_player, lp_index) + lib1_gv_cARD_HOVER_X_OFFSET);
        lv_position_y = lib1_gv_cARD_HOVER_Y_POSITION;
        lv_anchor = c_anchorBottom;
        lv_type = lib1_gv_player[lp_player].lv_hand.lv_card[lp_index].lv_type;
        lv_detection = lib1_gv_player[lp_player].lv_hand.lv_card[lp_index].lv_detection;
        lv_delay = lib1_gv_player[lp_player].lv_hand.lv_card[lp_index].lv_delay;
        lv_heroic = lib1_gv_player[lp_player].lv_hand.lv_card[lp_index].lv_heroic;
        lv_rush = lib1_gv_player[lp_player].lv_hand.lv_card[lp_index].lv_rush;
        lv_stream = lib1_gv_player[lp_player].lv_hand.lv_card[lp_index].lv_stream;
        lv_transform = lib1_gv_player[lp_player].lv_hand.lv_card[lp_index].lv_transform;
        lv_buried = lib1_gv_card[lib1_gv_player[lp_player].lv_hand.lv_card[lp_index].lv_id].lv_buried;
        lv_channel = lib1_gv_player[lp_player].lv_hand.lv_card[lp_index].lv_channel;
        lv_card_name = lib1_gv_player[lp_player].lv_hand.lv_card[lp_index].lv_name;
        lv_unit_type_index = 0;
        for ( ; ( (auto1D875EC4_ai >= 0 && lv_unit_type_index <= auto1D875EC4_ae) || (auto1D875EC4_ai < 0 && lv_unit_type_index >= auto1D875EC4_ae) ) ; lv_unit_type_index += auto1D875EC4_ai ) {
            if ((lib1_gv_player[lp_player].lv_hand.lv_card[lp_index].lv_unit_type[lv_unit_type_index] != null)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, lib1_gv_player[lp_player].lv_hand.lv_card[lp_index].lv_unit_type[lv_unit_type_index], 0, 0, RegionGetCenter(lib1_gv_player[lp_player].lv_cleanup_region));
                libNtve_gf_ShowHideUnit(lv_dummy_unit, false);
                lv_dummy_unit = UnitLastCreated();
                lv_line_count = (lv_line_count + lib1_gf_GetUnitStatsLineCount(lv_dummy_unit));
                if ((lv_unit_type_index >= 1)) {
                    lv_line_count = (lv_line_count + 1);
                }

                UnitRemove(lv_dummy_unit);
            }

        }
    }
    if (((lv_type == lib1_gv_aGGRESSIVE) || (lv_type == lib1_gv_dEFENSIVE) || (lv_type == lib1_gv_tACTICAL)) && ((lv_detection == true) || (lv_delay == true) || (lv_heroic == true) || (lv_rush == true) || (lv_stream == true) || (lv_buried == true) || (lv_transform >= 0) || (lv_channel >= 1))) {
        lv_line_count = (lv_line_count + 1);
    }

    if ((lv_detection == true)) {
        lv_line_count = (lv_line_count + 1);
    }

    if ((lv_delay == true)) {
        lv_line_count = (lv_line_count + 2);
    }

    if ((lv_heroic == true)) {
        lv_line_count = (lv_line_count + 2);
    }

    if ((lv_rush == true)) {
        lv_line_count = (lv_line_count + 1);
    }

    if ((lv_stream == true)) {
        lv_line_count = (lv_line_count + 1);
    }

    if ((lv_transform >= 0)) {
        lv_line_count = (lv_line_count + 2);
    }

    if ((lv_buried == true)) {
        lv_line_count = (lv_line_count + 2);
    }

    if ((lv_channel >= 1)) {
        lv_line_count = (lv_line_count + 2);
    }

    if ((lv_card_name == "Loaded Valkyrie")) {
        lv_line_count = (lv_line_count + 2);
    }

    DialogCreate((lib1_gv_cARD_HOVER_TEXT_WIDTH + (lib1_gv_cARD_HOVER_BORDER * 2)), ((lv_line_count * lib1_gv_cARD_HOVER_LINE_HEIGHT) + (lib1_gv_cARD_HOVER_BORDER * 2)), lv_anchor, lv_position_x, lv_position_y, true);
    DialogSetImage(DialogLastCreated(), "Assets\\Textures\\ui_frame_keybinding_buttonframe.dds");
    DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(lp_player), true);
    DialogDestroy(lib1_gv_card_hover_dialog[lp_player]);
    lib1_gv_card_hover_dialog[lp_player] = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lib1_gv_cARD_HOVER_TEXT_WIDTH, ((lv_line_count + 1) * lib1_gv_cARD_HOVER_LINE_HEIGHT), c_anchorTopLeft, lib1_gv_cARD_HOVER_BORDER, lib1_gv_cARD_HOVER_BORDER, lib1_gf_GetCardHoverText(lp_player, lp_index, lp_menu), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HoverText", PlayerGroupAll());
}

text lib1_gf_GetCardHoverText (int lp_player, int lp_index, bool lp_menu) {
    // Variable Declarations
    int lv_unit_type_index;
    text lv_text;
    unit lv_dummy_unit;
    string lv_type;
    bool lv_detection;
    bool lv_delay;
    bool lv_heroic;
    bool lv_rush;
    bool lv_stream;
    int lv_transform;
    bool lv_buried;
    int lv_channel;
    string lv_card_name;

    // Automatic Variable Declarations
    const int autoB23BCC70_ae = lib1_gv_mAX_UNIT_TYPE_PER_CARD;
    const int autoB23BCC70_ai = 1;
    const int autoBB2977F6_ae = lib1_gv_mAX_UNIT_TYPE_PER_CARD;
    const int autoBB2977F6_ai = 1;

    // Variable Initialization
    lv_type = "";
    lv_card_name = "";

    // Implementation
    if ((lp_menu == true)) {
        lv_type = lib1_gv_card[lib1_gv_player_collection[lp_player].lv_collection_card_id[lp_index]].lv_type;
        lv_detection = lib1_gv_card[lib1_gv_player_collection[lp_player].lv_collection_card_id[lp_index]].lv_detection;
        lv_delay = lib1_gv_card[lib1_gv_player_collection[lp_player].lv_collection_card_id[lp_index]].lv_delay;
        lv_heroic = lib1_gv_card[lib1_gv_player_collection[lp_player].lv_collection_card_id[lp_index]].lv_heroic;
        lv_rush = lib1_gv_card[lib1_gv_player_collection[lp_player].lv_collection_card_id[lp_index]].lv_rush;
        lv_stream = lib1_gv_card[lib1_gv_player_collection[lp_player].lv_collection_card_id[lp_index]].lv_stream;
        lv_transform = lib1_gv_card[lib1_gv_player_collection[lp_player].lv_collection_card_id[lp_index]].lv_transform;
        lv_buried = lib1_gv_card[lib1_gv_player_collection[lp_player].lv_collection_card_id[lp_index]].lv_buried;
        lv_channel = lib1_gv_card[lib1_gv_player_collection[lp_player].lv_collection_card_id[lp_index]].lv_channel;
        lv_card_name = lib1_gv_card[lib1_gv_player_collection[lp_player].lv_collection_card_id[lp_index]].lv_name;
        lv_unit_type_index = 0;
        for ( ; ( (autoB23BCC70_ai >= 0 && lv_unit_type_index <= autoB23BCC70_ae) || (autoB23BCC70_ai < 0 && lv_unit_type_index >= autoB23BCC70_ae) ) ; lv_unit_type_index += autoB23BCC70_ai ) {
            if ((lib1_gv_card[lib1_gv_player_collection[lp_player].lv_collection_card_id[lp_index]].lv_unit_type[lv_unit_type_index] != null)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, lib1_gv_card[lib1_gv_player_collection[lp_player].lv_collection_card_id[lp_index]].lv_unit_type[lv_unit_type_index], 0, 0, RegionGetCenter(lib1_gv_player[lp_player].lv_cleanup_region));
                libNtve_gf_ShowHideUnit(lv_dummy_unit, false);
                lv_dummy_unit = UnitLastCreated();
                if ((lv_unit_type_index >= 1)) {
                    lv_text = (lv_text + StringExternal("Param/Value/lib_1_81ED7316"));
                }

                lv_text = (lv_text + lib1_gf_GetUnitStatsAsTextForCard(lv_dummy_unit));
                UnitRemove(lv_dummy_unit);
                lv_text = (lv_text + StringExternal("Param/Value/lib_1_8D48DB07"));
            }

        }
    }
    else {
        lv_type = lib1_gv_player[lp_player].lv_hand.lv_card[lp_index].lv_type;
        lv_detection = lib1_gv_player[lp_player].lv_hand.lv_card[lp_index].lv_detection;
        lv_delay = lib1_gv_player[lp_player].lv_hand.lv_card[lp_index].lv_delay;
        lv_heroic = lib1_gv_player[lp_player].lv_hand.lv_card[lp_index].lv_heroic;
        lv_rush = lib1_gv_player[lp_player].lv_hand.lv_card[lp_index].lv_rush;
        lv_stream = lib1_gv_player[lp_player].lv_hand.lv_card[lp_index].lv_stream;
        lv_transform = lib1_gv_player[lp_player].lv_hand.lv_card[lp_index].lv_transform;
        lv_buried = lib1_gv_card[lib1_gv_player[lp_player].lv_hand.lv_card[lp_index].lv_id].lv_buried;
        lv_channel = lib1_gv_player[lp_player].lv_hand.lv_card[lp_index].lv_channel;
        lv_card_name = lib1_gv_player[lp_player].lv_hand.lv_card[lp_index].lv_name;
        lv_unit_type_index = 0;
        for ( ; ( (autoBB2977F6_ai >= 0 && lv_unit_type_index <= autoBB2977F6_ae) || (autoBB2977F6_ai < 0 && lv_unit_type_index >= autoBB2977F6_ae) ) ; lv_unit_type_index += autoBB2977F6_ai ) {
            if ((lib1_gv_player[lp_player].lv_hand.lv_card[lp_index].lv_unit_type[lv_unit_type_index] != null)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, lib1_gv_player[lp_player].lv_hand.lv_card[lp_index].lv_unit_type[lv_unit_type_index], 0, 0, RegionGetCenter(lib1_gv_player[lp_player].lv_cleanup_region));
                libNtve_gf_ShowHideUnit(lv_dummy_unit, false);
                lv_dummy_unit = UnitLastCreated();
                if ((lv_unit_type_index >= 1)) {
                    lv_text = (lv_text + StringExternal("Param/Value/lib_1_6BCE5DA5"));
                }

                lv_text = (lv_text + lib1_gf_GetUnitStatsAsTextForCard(lv_dummy_unit));
                UnitRemove(lv_dummy_unit);
                lv_text = (lv_text + StringExternal("Param/Value/lib_1_01E363ED"));
            }

        }
    }
    if ((lv_detection == true)) {
        if (((lv_type == lib1_gv_aGGRESSIVE) || (lv_type == lib1_gv_dEFENSIVE) || (lv_type == lib1_gv_tACTICAL)) && ((lv_detection == true) || (lv_delay == true) || (lv_heroic == true) || (lv_rush == true) || (lv_stream == true) || (lv_buried == true) || (lv_transform >= 0) || (lv_channel >= 1))) {
            lv_text = (lv_text + StringExternal("Param/Value/lib_1_04175AB3"));
        }

        lv_text = (lv_text + StringExternal("Param/Value/lib_1_17600C2D"));
    }

    if ((lv_buried == true)) {
        if (((lv_type == lib1_gv_aGGRESSIVE) || (lv_type == lib1_gv_dEFENSIVE) || (lv_type == lib1_gv_tACTICAL) || (lv_detection == true))) {
            lv_text = (lv_text + StringExternal("Param/Value/lib_1_0D3F6B10"));
        }

        lv_text = (lv_text + StringExternal("Param/Value/lib_1_4B4C68B0"));
    }

    if ((lv_channel >= 1)) {
        if (((lv_type == lib1_gv_aGGRESSIVE) || (lv_type == lib1_gv_dEFENSIVE) || (lv_type == lib1_gv_tACTICAL) || (lv_detection == true) || (lv_buried == true))) {
            lv_text = (lv_text + StringExternal("Param/Value/lib_1_A28A5504"));
        }

        lv_text = (lv_text + (StringExternal("Param/Value/lib_1_98BFEEFD") + IntToText(lv_channel) + StringExternal("Param/Value/lib_1_DC37AA5D") + IntToText(lv_channel) + StringExternal("Param/Value/lib_1_F92EE393")));
    }

    if ((lv_transform >= 0)) {
        if (((lv_type == lib1_gv_aGGRESSIVE) || (lv_type == lib1_gv_dEFENSIVE) || (lv_type == lib1_gv_tACTICAL) || (lv_detection == true) || (lv_buried == true) || (lv_channel >= 1))) {
            lv_text = (lv_text + StringExternal("Param/Value/lib_1_BCCEB76D"));
        }

        lv_text = (lv_text + StringExternal("Param/Value/lib_1_E8DE2CB3"));
    }

    if ((lv_heroic == true)) {
        lv_text = (lv_text + StringExternal("Param/Value/lib_1_B806698A"));
    }

    if ((lv_rush == true)) {
        lv_text = (lv_text + StringExternal("Param/Value/lib_1_13F27443"));
    }

    if ((lv_delay == true)) {
        lv_text = (lv_text + StringExternal("Param/Value/lib_1_493D966D"));
    }

    if ((lv_stream == true)) {
        lv_text = (lv_text + StringExternal("Param/Value/lib_1_23E3BE02"));
    }

    if ((lv_card_name == "Loaded Valkyrie")) {
        lv_text = (lv_text + StringExternal("Param/Value/lib_1_38378C87"));
    }

    return lv_text;
}

string lib1_gf_GetUnitStatsForFiltering (int lp_card_id) {
    // Variable Declarations
    int lv_unit_type_index;
    string lv_string;
    unit lv_dummy_unit;

    // Automatic Variable Declarations
    const int autoC3AE4CEE_ae = lib1_gv_mAX_UNIT_TYPE_PER_CARD;
    const int autoC3AE4CEE_ai = 1;

    // Variable Initialization
    lv_string = "";

    // Implementation
    lv_unit_type_index = 0;
    for ( ; ( (autoC3AE4CEE_ai >= 0 && lv_unit_type_index <= autoC3AE4CEE_ae) || (autoC3AE4CEE_ai < 0 && lv_unit_type_index >= autoC3AE4CEE_ae) ) ; lv_unit_type_index += autoC3AE4CEE_ai ) {
        if ((lib1_gv_card[lp_card_id].lv_unit_type[lv_unit_type_index] != null)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, lib1_gv_card[lp_card_id].lv_unit_type[lv_unit_type_index], 0, 0, RegionGetCenter(lib1_gv_player[1].lv_cleanup_region));
            libNtve_gf_ShowHideUnit(lv_dummy_unit, false);
            lv_dummy_unit = UnitLastCreated();
            if ((UnitTypeGetProperty(lib1_gv_card[lp_card_id].lv_unit_type[lv_unit_type_index], c_unitPropEnergyMax) > 0.0)) {
                lv_string = (lv_string + " Energy");
            }

            if ((UnitTypeTestAttribute(lib1_gv_card[lp_card_id].lv_unit_type[lv_unit_type_index], c_unitAttributeArmored) == true)) {
                lv_string = (lv_string + " Armored");
            }

            if ((UnitTypeTestAttribute(lib1_gv_card[lp_card_id].lv_unit_type[lv_unit_type_index], c_unitAttributeBiological) == true)) {
                lv_string = (lv_string + " Biological");
            }

            if ((UnitTypeTestAttribute(lib1_gv_card[lp_card_id].lv_unit_type[lv_unit_type_index], c_unitAttributeLight) == true)) {
                lv_string = (lv_string + " Light");
            }

            if ((UnitTypeTestAttribute(lib1_gv_card[lp_card_id].lv_unit_type[lv_unit_type_index], c_unitAttributeMassive) == true)) {
                lv_string = (lv_string + " Massive");
            }

            if ((UnitTypeTestAttribute(lib1_gv_card[lp_card_id].lv_unit_type[lv_unit_type_index], c_unitAttributeMechanical) == true)) {
                lv_string = (lv_string + " Mechanical");
            }

            if ((UnitTypeTestAttribute(lib1_gv_card[lp_card_id].lv_unit_type[lv_unit_type_index], c_unitAttributePsionic) == true)) {
                lv_string = (lv_string + " Psionic");
            }

            if ((UnitTypeTestAttribute(lib1_gv_card[lp_card_id].lv_unit_type[lv_unit_type_index], c_unitAttributeRobotic) == true)) {
                lv_string = (lv_string + " Robotic");
            }

            if ((UnitTypeTestAttribute(lib1_gv_card[lp_card_id].lv_unit_type[lv_unit_type_index], c_unitAttributeStructure) == true)) {
                lv_string = (lv_string + " Structure");
            }

            if ((UnitTestPlane(lv_dummy_unit, c_planeAir) == true)) {
                lv_string = (lv_string + " Air");
            }

            if ((UnitTestPlane(lv_dummy_unit, c_planeGround) == true)) {
                lv_string = (lv_string + " Ground");
            }

            UnitRemove(lv_dummy_unit);
        }

    }
    return lv_string;
}

text lib1_gf_GetUnitStatsAsTextForCard (unit lp_unit) {
    // Variable Declarations
    text lv_text;
    int lv_weapon_index;
    int lv_attribute_count;
    int lv_armor;

    // Automatic Variable Declarations
    int auto3C80170F_ae;
    const int auto3C80170F_ai = 1;

    // Variable Initialization

    // Implementation
    lv_text = (lv_text + UnitTypeGetName(UnitGetType(lp_unit)));
    lv_text = (lv_text + StringExternal("Param/Value/lib_1_62F43652"));
    lv_text = (lv_text + IntToText(FixedToInt(UnitGetPropertyFixed(lp_unit, c_unitPropLife, c_unitPropCurrent))));
    if ((UnitTypeGetProperty(UnitGetType(lp_unit), c_unitPropShieldsMax) > 0.0)) {
        lv_text = (lv_text + StringExternal("Param/Value/lib_1_AEAE7B6E"));
        lv_text = (lv_text + IntToText(FixedToInt(UnitTypeGetProperty(UnitGetType(lp_unit), c_unitPropShieldsMax))));
    }

    lv_text = (lv_text + StringExternal("Param/Value/lib_1_354EE7A2"));
    lv_armor = StringToInt(CatalogFieldValueGet(c_gameCatalogUnit, (UnitGetType(lp_unit)), "LifeArmor", c_playerAny));
    if ((UnitHasBehavior2(lp_unit, "Heroic") == true)) {
        lv_armor = (lv_armor + 3);
    }

    lv_text = (lv_text + IntToText(lv_armor));
    if ((UnitTypeGetProperty(UnitGetType(lp_unit), c_unitPropEnergyMax) > 0.0)) {
        lv_text = (lv_text + StringExternal("Param/Value/lib_1_E2D34233"));
        lv_text = (lv_text + IntToText(FixedToInt(UnitTypeGetProperty(UnitGetType(lp_unit), c_unitPropEnergy))));
        lv_text = (lv_text + StringExternal("Param/Value/lib_1_2B69AE68"));
        lv_text = (lv_text + IntToText(FixedToInt(UnitTypeGetProperty(UnitGetType(lp_unit), c_unitPropEnergyMax))));
    }

    lv_text = (lv_text + StringExternal("Param/Value/lib_1_0A544623"));
    if ((UnitTypeTestAttribute(UnitGetType(lp_unit), c_unitAttributeArmored) == true)) {
        if ((lv_attribute_count == 0)) {
            lv_attribute_count = 1;
        }
        else {
            lv_text = (lv_text + StringExternal("Param/Value/lib_1_C50446A4"));
        }
        lv_text = (lv_text + StringExternal("Param/Value/lib_1_9B8D10E0"));
    }

    if ((UnitTypeTestAttribute(UnitGetType(lp_unit), c_unitAttributeBiological) == true)) {
        if ((lv_attribute_count == 0)) {
            lv_attribute_count = 1;
        }
        else {
            lv_text = (lv_text + StringExternal("Param/Value/lib_1_90BD0201"));
        }
        lv_text = (lv_text + StringExternal("Param/Value/lib_1_EDBEFFFF"));
    }

    if ((UnitTypeTestAttribute(UnitGetType(lp_unit), c_unitAttributeLight) == true)) {
        if ((lv_attribute_count == 0)) {
            lv_attribute_count = 1;
        }
        else {
            lv_text = (lv_text + StringExternal("Param/Value/lib_1_05D685DA"));
        }
        lv_text = (lv_text + StringExternal("Param/Value/lib_1_483D10FD"));
    }

    if ((UnitTypeTestAttribute(UnitGetType(lp_unit), c_unitAttributeMassive) == true)) {
        if ((lv_attribute_count == 0)) {
            lv_attribute_count = 1;
        }
        else {
            lv_text = (lv_text + StringExternal("Param/Value/lib_1_6DEAC7A6"));
        }
        lv_text = (lv_text + StringExternal("Param/Value/lib_1_28EA7FD6"));
    }

    if ((UnitTypeTestAttribute(UnitGetType(lp_unit), c_unitAttributeMechanical) == true)) {
        if ((lv_attribute_count == 0)) {
            lv_attribute_count = 1;
        }
        else {
            lv_text = (lv_text + StringExternal("Param/Value/lib_1_CC053DE6"));
        }
        lv_text = (lv_text + StringExternal("Param/Value/lib_1_F429C9CF"));
    }

    if ((UnitTypeTestAttribute(UnitGetType(lp_unit), c_unitAttributePsionic) == true)) {
        if ((lv_attribute_count == 0)) {
            lv_attribute_count = 1;
        }
        else {
            lv_text = (lv_text + StringExternal("Param/Value/lib_1_50E35995"));
        }
        lv_text = (lv_text + StringExternal("Param/Value/lib_1_D7A1159F"));
    }

    if ((UnitTypeTestAttribute(UnitGetType(lp_unit), c_unitAttributeRobotic) == true)) {
        if ((lv_attribute_count == 0)) {
            lv_attribute_count = 1;
        }
        else {
            lv_text = (lv_text + StringExternal("Param/Value/lib_1_CD5C220F"));
        }
        lv_text = (lv_text + StringExternal("Param/Value/lib_1_BDEC836A"));
    }

    if ((UnitTypeTestAttribute(UnitGetType(lp_unit), c_unitAttributeStructure) == true)) {
        if ((lv_attribute_count == 0)) {
            lv_attribute_count = 1;
        }
        else {
            lv_text = (lv_text + StringExternal("Param/Value/lib_1_43973D1C"));
        }
        lv_text = (lv_text + StringExternal("Param/Value/lib_1_FCA8D7E3"));
    }

    auto3C80170F_ae = UnitWeaponCount(lp_unit);
    lv_weapon_index = 1;
    for ( ; ( (auto3C80170F_ai >= 0 && lv_weapon_index <= auto3C80170F_ae) || (auto3C80170F_ai < 0 && lv_weapon_index >= auto3C80170F_ae) ) ; lv_weapon_index += auto3C80170F_ai ) {
        if ((CatalogFieldValueGet(c_gameCatalogWeapon, UnitWeaponGet(lp_unit, lv_weapon_index), "Options[" + IntToString(1) + "]", c_playerAny) != "1") && (UnitWeaponIsEnabled(lp_unit, lv_weapon_index) == true) && (UnitWeaponDamage(lp_unit, lv_weapon_index, c_unitAttributeNone, false) > 0.0)) {
            if ((UnitWeaponCheck(lp_unit, lv_weapon_index, c_targetFilterGround) == true) && (UnitWeaponCheck(lp_unit, lv_weapon_index, c_targetFilterAir) == true)) {
                lv_text = (lv_text + StringExternal("Param/Value/lib_1_F627CB48"));
            }
            else if ((UnitWeaponCheck(lp_unit, lv_weapon_index, c_targetFilterGround) == true)) {
                lv_text = (lv_text + StringExternal("Param/Value/lib_1_F4A703CE"));
            }
            else if ((UnitWeaponCheck(lp_unit, lv_weapon_index, c_targetFilterAir) == true)) {
                lv_text = (lv_text + StringExternal("Param/Value/lib_1_CCF0DBC0"));
            }
            lv_text = (lv_text + FixedToText(UnitWeaponDamage(lp_unit, lv_weapon_index, c_unitAttributeNone, false), 0));
            if ((UnitWeaponDamage(lp_unit, lv_weapon_index, c_unitAttributeArmored, false) != UnitWeaponDamage(lp_unit, lv_weapon_index, c_unitAttributeNone, false))) {
                lv_text = (lv_text + StringExternal("Param/Value/lib_1_468B5584"));
                lv_text = (lv_text + FixedToText(UnitWeaponDamage(lp_unit, lv_weapon_index, c_unitAttributeArmored, false), 0));
                lv_text = (lv_text + StringExternal("Param/Value/lib_1_9F48B820"));
            }
            else if ((UnitWeaponDamage(lp_unit, lv_weapon_index, c_unitAttributeBiological, false) != UnitWeaponDamage(lp_unit, lv_weapon_index, c_unitAttributeNone, false))) {
                lv_text = (lv_text + StringExternal("Param/Value/lib_1_AE83F2FE"));
                lv_text = (lv_text + FixedToText(UnitWeaponDamage(lp_unit, lv_weapon_index, c_unitAttributeBiological, false), 0));
                lv_text = (lv_text + StringExternal("Param/Value/lib_1_BC0CFA1D"));
            }
            else if ((UnitWeaponDamage(lp_unit, lv_weapon_index, c_unitAttributeLight, false) != UnitWeaponDamage(lp_unit, lv_weapon_index, c_unitAttributeNone, false))) {
                lv_text = (lv_text + StringExternal("Param/Value/lib_1_61CB4FDC"));
                lv_text = (lv_text + FixedToText(UnitWeaponDamage(lp_unit, lv_weapon_index, c_unitAttributeLight, false), 0));
                lv_text = (lv_text + StringExternal("Param/Value/lib_1_24D2B170"));
            }
            else if ((UnitWeaponDamage(lp_unit, lv_weapon_index, c_unitAttributeMassive, false) != UnitWeaponDamage(lp_unit, lv_weapon_index, c_unitAttributeNone, false))) {
                lv_text = (lv_text + StringExternal("Param/Value/lib_1_69D7E987"));
                lv_text = (lv_text + FixedToText(UnitWeaponDamage(lp_unit, lv_weapon_index, c_unitAttributeMassive, false), 0));
                lv_text = (lv_text + StringExternal("Param/Value/lib_1_617100CC"));
            }
            else if ((UnitWeaponDamage(lp_unit, lv_weapon_index, c_unitAttributeMechanical, false) != UnitWeaponDamage(lp_unit, lv_weapon_index, c_unitAttributeNone, false))) {
                lv_text = (lv_text + StringExternal("Param/Value/lib_1_CAC258AF"));
                lv_text = (lv_text + FixedToText(UnitWeaponDamage(lp_unit, lv_weapon_index, c_unitAttributeMechanical, false), 0));
                lv_text = (lv_text + StringExternal("Param/Value/lib_1_265E0408"));
            }
            else if ((UnitWeaponDamage(lp_unit, lv_weapon_index, c_unitAttributePsionic, false) != UnitWeaponDamage(lp_unit, lv_weapon_index, c_unitAttributeNone, false))) {
                lv_text = (lv_text + StringExternal("Param/Value/lib_1_ADF70A52"));
                lv_text = (lv_text + FixedToText(UnitWeaponDamage(lp_unit, lv_weapon_index, c_unitAttributePsionic, false), 0));
                lv_text = (lv_text + StringExternal("Param/Value/lib_1_3995B52C"));
            }
            else if ((UnitWeaponDamage(lp_unit, lv_weapon_index, c_unitAttributeRobotic, false) != UnitWeaponDamage(lp_unit, lv_weapon_index, c_unitAttributeNone, false))) {
                lv_text = (lv_text + StringExternal("Param/Value/lib_1_D2315C64"));
                lv_text = (lv_text + FixedToText(UnitWeaponDamage(lp_unit, lv_weapon_index, c_unitAttributeRobotic, false), 0));
                lv_text = (lv_text + StringExternal("Param/Value/lib_1_61C0A107"));
            }
            else if ((UnitWeaponDamage(lp_unit, lv_weapon_index, c_unitAttributeStructure, false) != UnitWeaponDamage(lp_unit, lv_weapon_index, c_unitAttributeNone, false))) {
                lv_text = (lv_text + StringExternal("Param/Value/lib_1_D4230031"));
                lv_text = (lv_text + FixedToText(UnitWeaponDamage(lp_unit, lv_weapon_index, c_unitAttributeStructure, false), 0));
                lv_text = (lv_text + StringExternal("Param/Value/lib_1_82BC5D21"));
            }
            if ((StringToInt(CatalogFieldValueGet(c_gameCatalogWeapon, UnitWeaponGet(lp_unit, lv_weapon_index), "DisplayAttackCount", c_playerAny)) > 1)) {
                lv_text = (lv_text + StringExternal("Param/Value/lib_1_BA785C7D"));
                lv_text = (lv_text + StringToText(CatalogFieldValueGet(c_gameCatalogWeapon, UnitWeaponGet(lp_unit, lv_weapon_index), "DisplayAttackCount", c_playerAny)));
            }

        }

    }
    return lv_text;
}

int lib1_gf_GetUnitStatsLineCount (unit lp_unit) {
    // Variable Declarations
    int lv_line_count;
    int lv_weapon_index;

    // Automatic Variable Declarations
    int autoF43B01FA_ae;
    const int autoF43B01FA_ai = 1;

    // Variable Initialization

    // Implementation
    lv_line_count = 3;
    if ((UnitTypeGetProperty(UnitGetType(lp_unit), c_unitPropEnergyMax) > 0.0)) {
        lv_line_count = (lv_line_count + 1);
    }

    autoF43B01FA_ae = UnitWeaponCount(lp_unit);
    lv_weapon_index = 1;
    for ( ; ( (autoF43B01FA_ai >= 0 && lv_weapon_index <= autoF43B01FA_ae) || (autoF43B01FA_ai < 0 && lv_weapon_index >= autoF43B01FA_ae) ) ; lv_weapon_index += autoF43B01FA_ai ) {
        if ((CatalogFieldValueGet(c_gameCatalogWeapon, UnitWeaponGet(lp_unit, lv_weapon_index), "Options[" + IntToString(1) + "]", c_playerAny) != "1") && (UnitWeaponIsEnabled(lp_unit, lv_weapon_index) == true) && (UnitWeaponDamage(lp_unit, lv_weapon_index, c_unitAttributeNone, false) > 0.0)) {
            lv_line_count = (lv_line_count + 1);
        }

    }
    return lv_line_count;
}

void lib1_gf_HideUnitPanel (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    DialogSetVisible(lib1_gv_unit_panel_additions, PlayerGroupSingle(lp_player), false);
    UISetFrameVisible(PlayerGroupSingle(lp_player), c_syncFrameTypeInfoPanel, false);
    UnitGroupSelect(UnitGroupSelected(lp_player), lp_player, false);
}

void lib1_gf_CreateUnitPanelAdditions () {
    // Automatic Variable Declarations
    // Implementation
    DialogCreate(600, 250, c_anchorTopLeft, 0, 0, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    lib1_gv_unit_panel_additions = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTop, -206, 185, StringExternal("Param/Value/lib_1_2F9E0AB5"), Color(100.00, 98.43, 69.02), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "UnitWireframeVital", PlayerGroupAll());
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    lib1_gv_unit_panel_structure_cost = DialogControlLastCreated();
}

void lib1_gf_CheckSelectedCardsAreLegal (int lp_player) {
    // Variable Declarations
    int lv_hand_index;
    int lv_top_of_hand;

    // Automatic Variable Declarations
    const int auto60564F28_ae = 0;
    const int auto60564F28_ai = -1;

    // Variable Initialization

    // Implementation
    while ((lib1_gf_CountofSelectedCards(lp_player) >= 1) && ((lib1_gf_MineralsSpent(lp_player) > lib1_gf_MineralIncome(lp_player)) || (lib1_gf_GasSpent(lp_player) > lib1_gf_GasIncome(lp_player)))) {
        lv_top_of_hand = lib1_gf_TopofHand(lp_player);
        lv_hand_index = lv_top_of_hand;
        for ( ; ( (auto60564F28_ai >= 0 && lv_hand_index <= auto60564F28_ae) || (auto60564F28_ai < 0 && lv_hand_index >= auto60564F28_ae) ) ; lv_hand_index += auto60564F28_ai ) {
            if ((lib1_gv_player[lp_player].lv_hand.lv_selected[lv_hand_index] == true)) {
                lib1_gf_ToggleSelectedPlayPhase(lp_player, lv_hand_index);
                lib1_gv_player[lp_player].lv_resources.lv_minerals_used = lib1_gf_CurrentSelectionMineralCost(lp_player);
                lib1_gv_player[lp_player].lv_resources.lv_gas_used = lib1_gf_CurrentSelectionGasCost(lp_player);
                break;
            }

        }
    }
}

void lib1_gf_ToggleSelectedPlayPhase (int lp_player, int lp_hand_index) {
    // Automatic Variable Declarations
    // Implementation
    if ((lib1_gv_player[lp_player].lv_hand.lv_selected[lp_hand_index] == false)) {
        SoundPlayForPlayer(lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_sound, c_maxPlayers, PlayerGroupSingle(lp_player), 100.0, 0.0);
        DialogControlFadeTransparency(lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_ui.lv_selected_indicator, PlayerGroupAll(), 0.5, 0.0);
        lib1_gv_player[lp_player].lv_hand.lv_selected[lp_hand_index] = true;
        if ((lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_mineral < 0)) {
            lib1_gv_player[lp_player].lv_resources.lv_mineral_income = (lib1_gv_player[lp_player].lv_resources.lv_mineral_income - lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_mineral);
            lib1_gf_ResizeResourceUI(lp_player, 0.0);
        }

        if ((lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_gas < 0)) {
            lib1_gv_player[lp_player].lv_resources.lv_gas_income = (lib1_gv_player[lp_player].lv_resources.lv_gas_income - lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_gas);
            lib1_gf_ResizeResourceUI(lp_player, 0.0);
        }

        if ((lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_channel > 0) && ((lib1_gf_KeystoneEnergyRequested(lib1_gv_player[lp_player].lv_team) + lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_channel) <= lib1_gv_keystone_energy[lib1_gv_player[lp_player].lv_team])) {
            lib1_gv_player[lp_player].lv_hand.lv_channel_enabled[lp_hand_index] = true;
            DialogControlFadeTransparency(lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_ui.lv_channel_indicator, PlayerGroupAll(), 0.5, lib1_gv_cHANNEL_ENERGY_TRANSPARENCY);
        }

    }
    else {
        DialogControlFadeTransparency(lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_ui.lv_selected_indicator, PlayerGroupAll(), 0.5, 100.0);
        lib1_gv_player[lp_player].lv_hand.lv_selected[lp_hand_index] = false;
        if ((lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_mineral < 0)) {
            lib1_gv_player[lp_player].lv_resources.lv_mineral_income = (lib1_gv_player[lp_player].lv_resources.lv_mineral_income + lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_mineral);
            lib1_gf_ResizeResourceUI(lp_player, 0.5);
        }

        if ((lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_gas < 0)) {
            lib1_gv_player[lp_player].lv_resources.lv_gas_income = (lib1_gv_player[lp_player].lv_resources.lv_gas_income + lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_gas);
            lib1_gf_ResizeResourceUI(lp_player, 0.5);
        }

        lib1_gv_player[lp_player].lv_hand.lv_channel_enabled[lp_hand_index] = false;
        DialogControlFadeTransparency(lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_ui.lv_channel_indicator, PlayerGroupAll(), 0.5, 100.0);
        lib1_gf_AttemptKeystoneEnergyRequestsforTeam(lib1_gv_player[lp_player].lv_team);
    }
}

void lib1_gf_ToggleSelectedPlanningPhase (int lp_player, int lp_hand_index) {
    // Automatic Variable Declarations
    // Implementation
    if ((lib1_gv_player[lp_player].lv_hand.lv_selected[lp_hand_index] == false)) {
        DialogControlFadeTransparency(lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_ui.lv_selected_indicator_planning, PlayerGroupAll(), 0.5, 50.0);
        lib1_gv_player[lp_player].lv_hand.lv_selected[lp_hand_index] = true;
    }
    else {
        DialogControlFadeTransparency(lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_ui.lv_selected_indicator_planning, PlayerGroupAll(), 0.5, 100.0);
        lib1_gv_player[lp_player].lv_hand.lv_selected[lp_hand_index] = false;
    }
}

void lib1_gf_CopyHandCard (int lp_player, int lp_hand_index_to_copy) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int autoB16EA965_ae = lib1_gv_mAX_UNIT_TYPE_PER_CARD;
    const int autoB16EA965_ai = 1;
    const int autoFF7371D5_ae = lib1_gv_eF_MAX;
    const int autoFF7371D5_ai = 1;

    // Variable Initialization

    // Implementation
    if ((lib1_gf_TopofHand(lp_player) < lib1_gf_HandLimit(lp_player)) && (lp_hand_index_to_copy >= 0)) {
        lib1_gf_GenerateCardforHand(lp_player, lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index_to_copy].lv_id);
        lib1_gv_player[lp_player].lv_hand.lv_card[lib1_gf_TopofHand(lp_player)].lv_race = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index_to_copy].lv_race;
        lib1_gv_player[lp_player].lv_hand.lv_card[lib1_gf_TopofHand(lp_player)].lv_mineral = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index_to_copy].lv_mineral;
        lib1_gv_player[lp_player].lv_hand.lv_card[lib1_gf_TopofHand(lp_player)].lv_mineral_adjustment = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index_to_copy].lv_mineral_adjustment;
        lib1_gv_player[lp_player].lv_hand.lv_card[lib1_gf_TopofHand(lp_player)].lv_gas = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index_to_copy].lv_gas;
        lib1_gv_player[lp_player].lv_hand.lv_card[lib1_gf_TopofHand(lp_player)].lv_gas_adjustment = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index_to_copy].lv_gas_adjustment;
        lib1_gv_player[lp_player].lv_hand.lv_card[lib1_gf_TopofHand(lp_player)].lv_delay = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index_to_copy].lv_delay;
        lib1_gv_player[lp_player].lv_hand.lv_card[lib1_gf_TopofHand(lp_player)].lv_rush = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index_to_copy].lv_rush;
        lib1_gv_player[lp_player].lv_hand.lv_card[lib1_gf_TopofHand(lp_player)].lv_heroic = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index_to_copy].lv_heroic;
        lib1_gv_player[lp_player].lv_hand.lv_card[lib1_gf_TopofHand(lp_player)].lv_stream = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index_to_copy].lv_stream;
        lib1_gv_player[lp_player].lv_hand.lv_card[lib1_gf_TopofHand(lp_player)].lv_channel = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index_to_copy].lv_channel;
        lv_index = 0;
        for ( ; ( (autoB16EA965_ai >= 0 && lv_index <= autoB16EA965_ae) || (autoB16EA965_ai < 0 && lv_index >= autoB16EA965_ae) ) ; lv_index += autoB16EA965_ai ) {
            lib1_gv_player[lp_player].lv_hand.lv_card[lib1_gf_TopofHand(lp_player)].lv_unit_count[lv_index] = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index_to_copy].lv_unit_count[lv_index];
            lib1_gv_player[lp_player].lv_hand.lv_card[lib1_gf_TopofHand(lp_player)].lv_unit_type[lv_index] = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index_to_copy].lv_unit_type[lv_index];
        }
        lv_index = 0;
        for ( ; ( (autoFF7371D5_ai >= 0 && lv_index <= autoFF7371D5_ae) || (autoFF7371D5_ai < 0 && lv_index >= autoFF7371D5_ae) ) ; lv_index += autoFF7371D5_ai ) {
            lib1_gv_player[lp_player].lv_hand.lv_card[lib1_gf_TopofHand(lp_player)].lv_effect[lv_index] = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index_to_copy].lv_effect[lv_index];
        }
        lib1_gf_UpdateHandCardText(lp_player, lib1_gf_TopofHand(lp_player));
        if ((libNtve_gf_DialogItemImage(lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index_to_copy].lv_ui.lv_border, lp_player) == ("Assets\\Textures\\ui_ingame_tabbutton_metalframe_amon.tga"))) {
            libNtve_gf_SetDialogItemImage(lib1_gv_player[lp_player].lv_hand.lv_card[lib1_gf_TopofHand(lp_player)].lv_ui.lv_border, "Assets\\Textures\\ui_ingame_tabbutton_metalframe_amon.tga", PlayerGroupAll());
            libNtve_gf_SetDialogItemImage(lib1_gv_player[lp_player].lv_hand.lv_card[lib1_gf_TopofHand(lp_player)].lv_ui.lv_text_frame, "Assets\\Textures\\ui_tooltip_frame_amon.tga", PlayerGroupAll());
            libNtve_gf_SetDialogItemImage(lib1_gv_player[lp_player].lv_hand.lv_card[lib1_gf_TopofHand(lp_player)].lv_ui.lv_name_frame, "Assets\\Textures\\ui_tooltip_frame_amon.tga", PlayerGroupAll());
            libNtve_gf_SetDialogItemImage(lib1_gv_player[lp_player].lv_hand.lv_card[lib1_gf_TopofHand(lp_player)].lv_ui.lv_image_frame, "Assets\\Textures\\ui_leaderpanel_buttonup_xelnaga.dds", PlayerGroupAll());
        }

    }

}

void lib1_gf_CopyOpponentsDeckCard (int lp_player, int lp_opponent, int lp_deck_index_to_copy, bool lp_amon_color) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto09315995_ae = lib1_gv_mAX_UNIT_TYPE_PER_CARD;
    const int auto09315995_ai = 1;
    const int autoF4A53A95_ae = lib1_gv_eF_MAX;
    const int autoF4A53A95_ai = 1;

    // Variable Initialization

    // Implementation
    if ((lib1_gf_TopofHand(lp_player) < lib1_gf_HandLimit(lp_player)) && (lp_deck_index_to_copy >= 0)) {
        lib1_gf_GenerateCardforHand(lp_player, lib1_gv_player[lp_opponent].lv_deck.lv_card[lp_deck_index_to_copy].lv_id);
        lib1_gv_player[lp_player].lv_hand.lv_card[lib1_gf_TopofHand(lp_player)].lv_mineral = lib1_gv_player[lp_opponent].lv_deck.lv_card[lp_deck_index_to_copy].lv_mineral;
        lib1_gv_player[lp_player].lv_hand.lv_card[lib1_gf_TopofHand(lp_player)].lv_mineral_adjustment = lib1_gv_player[lp_opponent].lv_deck.lv_card[lp_deck_index_to_copy].lv_mineral_adjustment;
        lib1_gv_player[lp_player].lv_hand.lv_card[lib1_gf_TopofHand(lp_player)].lv_gas = lib1_gv_player[lp_opponent].lv_deck.lv_card[lp_deck_index_to_copy].lv_gas;
        lib1_gv_player[lp_player].lv_hand.lv_card[lib1_gf_TopofHand(lp_player)].lv_gas_adjustment = lib1_gv_player[lp_opponent].lv_deck.lv_card[lp_deck_index_to_copy].lv_gas_adjustment;
        lib1_gv_player[lp_player].lv_hand.lv_card[lib1_gf_TopofHand(lp_player)].lv_delay = lib1_gv_player[lp_opponent].lv_deck.lv_card[lp_deck_index_to_copy].lv_delay;
        lib1_gv_player[lp_player].lv_hand.lv_card[lib1_gf_TopofHand(lp_player)].lv_rush = lib1_gv_player[lp_opponent].lv_deck.lv_card[lp_deck_index_to_copy].lv_rush;
        lib1_gv_player[lp_player].lv_hand.lv_card[lib1_gf_TopofHand(lp_player)].lv_heroic = lib1_gv_player[lp_opponent].lv_deck.lv_card[lp_deck_index_to_copy].lv_heroic;
        lib1_gv_player[lp_player].lv_hand.lv_card[lib1_gf_TopofHand(lp_player)].lv_stream = lib1_gv_player[lp_opponent].lv_deck.lv_card[lp_deck_index_to_copy].lv_stream;
        lib1_gv_player[lp_player].lv_hand.lv_card[lib1_gf_TopofHand(lp_player)].lv_channel = lib1_gv_player[lp_opponent].lv_deck.lv_card[lp_deck_index_to_copy].lv_channel;
        lv_index = 0;
        for ( ; ( (auto09315995_ai >= 0 && lv_index <= auto09315995_ae) || (auto09315995_ai < 0 && lv_index >= auto09315995_ae) ) ; lv_index += auto09315995_ai ) {
            lib1_gv_player[lp_player].lv_hand.lv_card[lib1_gf_TopofHand(lp_player)].lv_unit_count[lv_index] = lib1_gv_player[lp_opponent].lv_deck.lv_card[lp_deck_index_to_copy].lv_unit_count[lv_index];
            lib1_gv_player[lp_player].lv_hand.lv_card[lib1_gf_TopofHand(lp_player)].lv_unit_type[lv_index] = lib1_gv_player[lp_opponent].lv_deck.lv_card[lp_deck_index_to_copy].lv_unit_type[lv_index];
        }
        lv_index = 0;
        for ( ; ( (autoF4A53A95_ai >= 0 && lv_index <= autoF4A53A95_ae) || (autoF4A53A95_ai < 0 && lv_index >= autoF4A53A95_ae) ) ; lv_index += autoF4A53A95_ai ) {
            lib1_gv_player[lp_player].lv_hand.lv_card[lib1_gf_TopofHand(lp_player)].lv_effect[lv_index] = lib1_gv_player[lp_opponent].lv_deck.lv_card[lp_deck_index_to_copy].lv_effect[lv_index];
        }
        lib1_gf_UpdateHandCardText(lp_player, lib1_gf_TopofHand(lp_player));
        if ((lp_amon_color == true)) {
            lib1_gv_player[lp_player].lv_hand.lv_card[lib1_gf_TopofHand(lp_player)].lv_race = lib1_gv_vOID;
            libNtve_gf_SetDialogItemImage(lib1_gv_player[lp_player].lv_hand.lv_card[lib1_gf_TopofHand(lp_player)].lv_ui.lv_border, "Assets\\Textures\\ui_ingame_tabbutton_metalframe_amon.tga", PlayerGroupAll());
            libNtve_gf_SetDialogItemImage(lib1_gv_player[lp_player].lv_hand.lv_card[lib1_gf_TopofHand(lp_player)].lv_ui.lv_name_frame, "Assets\\Textures\\ui_tooltip_frame_amon.tga", PlayerGroupAll());
            libNtve_gf_SetDialogItemImage(lib1_gv_player[lp_player].lv_hand.lv_card[lib1_gf_TopofHand(lp_player)].lv_ui.lv_text_frame, "Assets\\Textures\\ui_tooltip_frame_amon.tga", PlayerGroupAll());
            libNtve_gf_SetDialogItemImage(lib1_gv_player[lp_player].lv_hand.lv_card[lib1_gf_TopofHand(lp_player)].lv_ui.lv_image_frame, "Assets\\Textures\\ui_leaderpanel_buttonup_xelnaga.dds", PlayerGroupAll());
        }

    }

}

bool lib1_gf_FetchCardWithUnitTypes (int lp_player, string lp_unit_type_1, string lp_unit_type_2, string lp_unit_type_3, string lp_unit_type_4, string lp_unit_type_5, string lp_unit_type_6) {
    // Variable Declarations
    int lv_deck_index;
    int lv_unit_type_index;
    bool lv_success;

    // Automatic Variable Declarations
    const int auto0818AFB9_ae = lib1_gv_dECK_LIMIT;
    const int auto0818AFB9_ai = 1;
    const int auto633A18CF_ae = lib1_gv_mAX_UNIT_TYPE_PER_CARD;
    const int auto633A18CF_ai = 1;

    // Variable Initialization

    // Implementation
    lv_deck_index = 0;
    for ( ; ( (auto0818AFB9_ai >= 0 && lv_deck_index <= auto0818AFB9_ae) || (auto0818AFB9_ai < 0 && lv_deck_index >= auto0818AFB9_ae) ) ; lv_deck_index += auto0818AFB9_ai ) {
        if ((lib1_gf_PlayerHasCardAtDeckIndex(lp_player, lv_deck_index) == false)) {
            return false;
        }
        else {
            lv_unit_type_index = 0;
            for ( ; ( (auto633A18CF_ai >= 0 && lv_unit_type_index <= auto633A18CF_ae) || (auto633A18CF_ai < 0 && lv_unit_type_index >= auto633A18CF_ae) ) ; lv_unit_type_index += auto633A18CF_ai ) {
                if (((lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_unit_type[lv_unit_type_index] == lp_unit_type_1) || (lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_unit_type[lv_unit_type_index] == lp_unit_type_2) || (lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_unit_type[lv_unit_type_index] == lp_unit_type_3) || (lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_unit_type[lv_unit_type_index] == lp_unit_type_4) || (lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_unit_type[lv_unit_type_index] == lp_unit_type_5) || (lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_unit_type[lv_unit_type_index] == lp_unit_type_6))) {
                    return lib1_gf_FetchCardFromDecktoHand(lp_player, lv_deck_index);
                }

            }
        }
    }
    return false;
}

bool lib1_gf_FetchCardWithType (int lp_player, string lp_type) {
    // Variable Declarations
    int lv_deck_index;
    int lv_unit_type_index;
    bool lv_success;

    // Automatic Variable Declarations
    const int autoF17C8456_ae = lib1_gv_dECK_LIMIT;
    const int autoF17C8456_ai = 1;

    // Variable Initialization

    // Implementation
    lv_deck_index = 0;
    for ( ; ( (autoF17C8456_ai >= 0 && lv_deck_index <= autoF17C8456_ae) || (autoF17C8456_ai < 0 && lv_deck_index >= autoF17C8456_ae) ) ; lv_deck_index += autoF17C8456_ai ) {
        if ((lib1_gf_PlayerHasCardAtDeckIndex(lp_player, lv_deck_index) == false)) {
            return false;
        }
        else {
            if ((lib1_gf_CardTypesMatch(lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_type, lp_type) == true)) {
                return lib1_gf_FetchCardFromDecktoHand(lp_player, lv_deck_index);
            }

        }
    }
    return false;
}

bool lib1_gf_FetchCardWithName (int lp_player, string lp_name_1, string lp_name_2) {
    // Variable Declarations
    int lv_deck_index;
    int lv_unit_type_index;
    bool lv_success;

    // Automatic Variable Declarations
    const int auto6E940B4B_ae = lib1_gv_dECK_LIMIT;
    const int auto6E940B4B_ai = 1;

    // Variable Initialization

    // Implementation
    lv_deck_index = 0;
    for ( ; ( (auto6E940B4B_ai >= 0 && lv_deck_index <= auto6E940B4B_ae) || (auto6E940B4B_ai < 0 && lv_deck_index >= auto6E940B4B_ae) ) ; lv_deck_index += auto6E940B4B_ai ) {
        if ((lib1_gf_PlayerHasCardAtDeckIndex(lp_player, lv_deck_index) == false)) {
            return false;
        }
        else {
            if (((lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_name == lp_name_1) || (lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_name == lp_name_2))) {
                return lib1_gf_FetchCardFromDecktoHand(lp_player, lv_deck_index);
            }

        }
    }
    return false;
}

bool lib1_gf_FetchAffordableCard (int lp_player) {
    // Variable Declarations
    int lv_deck_index;

    // Automatic Variable Declarations
    const int autoCDEF4FAE_ae = lib1_gv_dECK_LIMIT;
    const int autoCDEF4FAE_ai = 1;

    // Variable Initialization

    // Implementation
    lv_deck_index = 0;
    for ( ; ( (autoCDEF4FAE_ai >= 0 && lv_deck_index <= autoCDEF4FAE_ae) || (autoCDEF4FAE_ai < 0 && lv_deck_index >= autoCDEF4FAE_ae) ) ; lv_deck_index += autoCDEF4FAE_ai ) {
        if ((lib1_gf_PlayerHasCardAtDeckIndex(lp_player, lv_deck_index) == false)) {
            return false;
        }
        else {
            if ((lib1_gf_DeckCardMineralCost(lp_player, lv_deck_index) <= lib1_gf_MineralIncome(lp_player)) && (lib1_gf_DeckCardGasCost(lp_player, lv_deck_index) <= lib1_gf_GasIncome(lp_player))) {
                return lib1_gf_FetchCardFromDecktoHand(lp_player, lv_deck_index);
            }

        }
    }
    return false;
}

bool lib1_gf_FetchMostExpensiveCardWithType (int lp_player, string lp_type) {
    // Variable Declarations
    int lv_deck_index;
    int lv_deck_index_to_fetch;
    int lv_cost_to_fetch;

    // Automatic Variable Declarations
    const int autoB6FEAD50_ae = lib1_gv_dECK_LIMIT;
    const int autoB6FEAD50_ai = 1;

    // Variable Initialization
    lv_deck_index_to_fetch = -1;
    lv_cost_to_fetch = -100;

    // Implementation
    if ((lib1_gf_PlayerHasCardAtDeckIndex(lp_player, 0) == false)) {
        return false;
    }

    lv_deck_index = 0;
    for ( ; ( (autoB6FEAD50_ai >= 0 && lv_deck_index <= autoB6FEAD50_ae) || (autoB6FEAD50_ai < 0 && lv_deck_index >= autoB6FEAD50_ae) ) ; lv_deck_index += autoB6FEAD50_ai ) {
        if (((lib1_gf_DeckCardMineralCost(lp_player, lv_deck_index) + lib1_gf_DeckCardGasCost(lp_player, lv_deck_index)) > lv_cost_to_fetch) && ((lib1_gf_CardTypesMatch(lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_type, lp_type) == true) || (lp_type == ""))) {
            lv_cost_to_fetch = (lib1_gf_DeckCardMineralCost(lp_player, lv_deck_index) + lib1_gf_DeckCardGasCost(lp_player, lv_deck_index));
            lv_deck_index_to_fetch = lv_deck_index;
        }

    }
    if ((lv_deck_index_to_fetch >= 0)) {
        return lib1_gf_FetchCardFromDecktoHand(lp_player, lv_deck_index_to_fetch);
    }

    return false;
}

bool lib1_gf_FetchLeastExpensiveCardWithType (int lp_player, string lp_type) {
    // Variable Declarations
    int lv_deck_index;
    int lv_deck_index_to_fetch;
    int lv_cost_to_fetch;

    // Automatic Variable Declarations
    const int auto9C42D5CE_ae = lib1_gv_dECK_LIMIT;
    const int auto9C42D5CE_ai = 1;

    // Variable Initialization
    lv_deck_index_to_fetch = -1;
    lv_cost_to_fetch = 100;

    // Implementation
    if ((lib1_gf_PlayerHasCardAtDeckIndex(lp_player, 0) == false)) {
        return false;
    }

    lv_deck_index = 0;
    for ( ; ( (auto9C42D5CE_ai >= 0 && lv_deck_index <= auto9C42D5CE_ae) || (auto9C42D5CE_ai < 0 && lv_deck_index >= auto9C42D5CE_ae) ) ; lv_deck_index += auto9C42D5CE_ai ) {
        if (((lib1_gf_DeckCardMineralCost(lp_player, lv_deck_index) + lib1_gf_DeckCardGasCost(lp_player, lv_deck_index)) < lv_cost_to_fetch) && ((lib1_gf_CardTypesMatch(lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_type, lp_type) == true) || (lp_type == ""))) {
            lv_cost_to_fetch = (lib1_gf_DeckCardMineralCost(lp_player, lv_deck_index) + lib1_gf_DeckCardGasCost(lp_player, lv_deck_index));
            lv_deck_index_to_fetch = lv_deck_index;
        }

    }
    if ((lv_deck_index_to_fetch >= 0)) {
        return lib1_gf_FetchCardFromDecktoHand(lp_player, lv_deck_index_to_fetch);
    }

    return false;
}

bool lib1_gf_FetchCardWithKeyword (int lp_player, bool lp_heroic, bool lp_rush, bool lp_delay) {
    // Variable Declarations
    int lv_deck_index;
    int lv_unit_type_index;
    bool lv_success;

    // Automatic Variable Declarations
    const int auto92B39E82_ae = lib1_gv_dECK_LIMIT;
    const int auto92B39E82_ai = 1;

    // Variable Initialization

    // Implementation
    lv_deck_index = 0;
    for ( ; ( (auto92B39E82_ai >= 0 && lv_deck_index <= auto92B39E82_ae) || (auto92B39E82_ai < 0 && lv_deck_index >= auto92B39E82_ae) ) ; lv_deck_index += auto92B39E82_ai ) {
        if ((lib1_gf_PlayerHasCardAtDeckIndex(lp_player, lv_deck_index) == false)) {
            return false;
        }
        else {
            if (((lp_heroic == false) || ((lp_heroic == true) && (lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_heroic == true))) && ((lp_delay == false) || ((lp_delay == true) && (lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_delay == true))) && ((lp_rush == false) || ((lp_rush == true) && (lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_rush == true)))) {
                return lib1_gf_FetchCardFromDecktoHand(lp_player, lv_deck_index);
            }

        }
    }
    return false;
}

bool lib1_gf_FetchCardFromDecktoHand (int lp_player, int lp_deck_index) {
    // Variable Declarations
    int lv_first_empty_hand_slot;
    int lv_index;

    // Automatic Variable Declarations
    const int auto36E97F0F_ae = lib1_gv_mAX_UNIT_TYPE_PER_CARD;
    const int auto36E97F0F_ai = 1;
    const int auto614CE60D_ae = lib1_gv_eF_MAX;
    const int auto614CE60D_ai = 1;

    // Variable Initialization

    // Implementation
    lv_first_empty_hand_slot = lib1_gf_FirstEmptyHandSlot(lp_player);
    if ((lv_first_empty_hand_slot <= lib1_gf_HandLimit(lp_player))) {
        lib1_gv_player[lp_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_default_effect = lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index].lv_default_effect;
        lib1_gv_player[lp_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_gas = lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index].lv_gas;
        lib1_gv_player[lp_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_gas_adjustment = lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index].lv_gas_adjustment;
        lib1_gv_player[lp_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_id = lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index].lv_id;
        lib1_gv_player[lp_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_image = lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index].lv_image;
        lib1_gv_player[lp_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_mineral = lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index].lv_mineral;
        lib1_gv_player[lp_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_mineral_adjustment = lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index].lv_mineral_adjustment;
        lib1_gv_player[lp_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_race = lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index].lv_race;
        lib1_gv_player[lp_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_rarity = lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index].lv_rarity;
        lib1_gv_player[lp_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_set = lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index].lv_set;
        lib1_gv_player[lp_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_sound = lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index].lv_sound;
        lib1_gv_player[lp_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_subtype = lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index].lv_subtype;
        lib1_gv_player[lp_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_base_text = lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index].lv_base_text;
        lib1_gv_player[lp_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_type = lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index].lv_type;
        lib1_gv_player[lp_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_rush = lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index].lv_rush;
        lib1_gv_player[lp_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_delay = lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index].lv_delay;
        lib1_gv_player[lp_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_heroic = lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index].lv_heroic;
        lib1_gv_player[lp_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_transform = lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index].lv_transform;
        lib1_gv_player[lp_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_detection = lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index].lv_detection;
        lib1_gv_player[lp_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_channel = lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index].lv_channel;
        lv_index = 0;
        for ( ; ( (auto36E97F0F_ai >= 0 && lv_index <= auto36E97F0F_ae) || (auto36E97F0F_ai < 0 && lv_index >= auto36E97F0F_ae) ) ; lv_index += auto36E97F0F_ai ) {
            lib1_gv_player[lp_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_unit_count[lv_index] = lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index].lv_unit_count[lv_index];
            lib1_gv_player[lp_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_unit_type[lv_index] = lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index].lv_unit_type[lv_index];
        }
        lv_index = 0;
        for ( ; ( (auto614CE60D_ai >= 0 && lv_index <= auto614CE60D_ae) || (auto614CE60D_ai < 0 && lv_index >= auto614CE60D_ae) ) ; lv_index += auto614CE60D_ai ) {
            lib1_gv_player[lp_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_effect[lv_index] = lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index].lv_effect[lv_index];
        }
        lib1_gf_CreateCard(lp_player, lib1_gv_iNITIAL_CARD_X, lib1_gv_iNITIAL_CARD_Y, lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index].lv_id, "deck", lp_deck_index, "hand", lv_first_empty_hand_slot);
        lib1_gv_player[lp_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_name = lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index].lv_name;
        lib1_gf_UpdateHandCardButtonPositions(lp_player);
        lib1_gf_RemoveCardFromDeck(lp_player, lp_deck_index);
        lib1_gf_ShuffleDeck(lp_player);
        return true;
    }
    else {
        return false;
    }
}

void lib1_gf_GenerateXenomorphResearchCardforHand (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_GenerateCardforHand(lp_player, (lib1_gf_GetCardIDByName("Drone Research") + RandomInt(0, 4)));
}

void lib1_gf_GenerateWarpInCardforHand (int lp_player) {
    // Variable Declarations
    int lv_count;
    int lv_random;
    int lv_hand_slot;

    // Automatic Variable Declarations
    const int auto787FACCF_ae = 2;
    const int auto787FACCF_ai = 1;

    // Variable Initialization

    // Implementation
    lv_hand_slot = lib1_gf_FirstEmptyHandSlot(lp_player);
    if ((lv_hand_slot <= lib1_gf_HandLimit(lp_player))) {
        lib1_gf_GenerateCardforHand(lp_player, lib1_gf_GetCardIDByName("Warp In"));
        lv_count = 1;
        for ( ; ( (auto787FACCF_ai >= 0 && lv_count <= auto787FACCF_ae) || (auto787FACCF_ai < 0 && lv_count >= auto787FACCF_ae) ) ; lv_count += auto787FACCF_ai ) {
            lv_random = RandomInt(1, 4);
            if ((lv_random == 1)) {
                lib1_gf_AddUnittoHandCard(lp_player, lv_hand_slot, 1, "Zealot");
            }
            else if ((lv_random == 2)) {
                lib1_gf_AddUnittoHandCard(lp_player, lv_hand_slot, 1, "Stalker");
            }
            else if ((lv_random == 3)) {
                lib1_gf_AddUnittoHandCard(lp_player, lv_hand_slot, 1, "Sentry");
            }
            else if (true) {
                lib1_gf_AddUnittoHandCard(lp_player, lv_hand_slot, 1, "Adept");
            }
        }
        lib1_gf_UpdateHandCardText(lp_player, lv_hand_slot);
    }

}

void lib1_gf_GenerateStarWarpCardforHand (int lp_player) {
    // Variable Declarations
    int lv_count;
    int lv_random;
    int lv_hand_slot;

    // Automatic Variable Declarations
    const int auto87BB5017_ae = 2;
    const int auto87BB5017_ai = 1;

    // Variable Initialization

    // Implementation
    lv_hand_slot = lib1_gf_FirstEmptyHandSlot(lp_player);
    if ((lv_hand_slot <= lib1_gf_HandLimit(lp_player))) {
        lib1_gf_GenerateCardforHand(lp_player, lib1_gf_GetCardIDByName("Star Warp"));
        lv_count = 1;
        for ( ; ( (auto87BB5017_ai >= 0 && lv_count <= auto87BB5017_ae) || (auto87BB5017_ai < 0 && lv_count >= auto87BB5017_ae) ) ; lv_count += auto87BB5017_ai ) {
            lv_random = RandomInt(1, 4);
            if ((lv_random == 1)) {
                lib1_gf_AddUnittoHandCard(lp_player, lv_hand_slot, 1, "Phoenix");
            }
            else if ((lv_random == 2)) {
                lib1_gf_AddUnittoHandCard(lp_player, lv_hand_slot, 1, "ScoutMP");
            }
            else if ((lv_random == 3)) {
                lib1_gf_AddUnittoHandCard(lp_player, lv_hand_slot, 1, "CorsairMP");
            }
            else if (true) {
                lib1_gf_AddUnittoHandCard(lp_player, lv_hand_slot, 1, "VoidRay");
            }
        }
        lib1_gf_UpdateHandCardText(lp_player, lv_hand_slot);
    }

}

void lib1_gf_GenerateVoidArmyCardforHand (int lp_player) {
    // Variable Declarations
    int lv_randomizer;
    int lv_random_mineral_cost;
    int lv_random_gas_cost;
    int lv_current_mineral_cost;
    int lv_current_gas_cost;
    int lv_hand_slot;
    int lv_unit_type_count;
    int lv_attempt_count;

    // Automatic Variable Declarations
    const int auto315D8FDB_ae = 0;
    const int auto315D8FDB_ai = -1;

    // Variable Initialization

    // Implementation
    lv_hand_slot = lib1_gf_FirstEmptyHandSlot(lp_player);
    if ((lv_hand_slot <= lib1_gf_HandLimit(lp_player))) {
        lv_random_mineral_cost = RandomInt(1, 6);
        lv_random_gas_cost = RandomInt(0, 4);
        lib1_gf_GenerateCardforHand(lp_player, lib1_gf_GetCardIDByName("Void Army"));
        while ((lib1_gf_CountOfUnitTypesOnHandCard(lp_player, lv_hand_slot) <= 2) && ((lv_current_mineral_cost < lv_random_mineral_cost) || (lv_current_gas_cost < lv_random_gas_cost))) {
            if ((lib1_gf_CountOfUnitTypesOnHandCard(lp_player, lv_hand_slot) <= 1) && ((lv_current_mineral_cost + 2) <= lv_random_mineral_cost) && ((lv_current_gas_cost + 1) <= lv_random_gas_cost)) {
                lv_randomizer = RandomInt(1, 9);
                if ((lv_randomizer == 1)) {
                    lib1_gf_AddUnittoHandCard(lp_player, lv_hand_slot, 2, "Wraith");
                    lv_current_mineral_cost = (lv_current_mineral_cost + 2);
                    lv_current_gas_cost = (lv_current_gas_cost + 1);
                }
                else if ((lv_randomizer == 2)) {
                    lib1_gf_AddUnittoHandCard(lp_player, lv_hand_slot, 1, "DevourerMP");
                    lv_current_mineral_cost = (lv_current_mineral_cost + 2);
                    lv_current_gas_cost = (lv_current_gas_cost + 1);
                }
                else if ((lv_randomizer == 3)) {
                    lib1_gf_AddUnittoHandCard(lp_player, lv_hand_slot, 1, "VoidRay");
                    lv_current_mineral_cost = (lv_current_mineral_cost + 2);
                    lv_current_gas_cost = (lv_current_gas_cost + 1);
                }
            }

            if ((lib1_gf_CountOfUnitTypesOnHandCard(lp_player, lv_hand_slot) <= 2) && ((lv_current_mineral_cost + 1) <= lv_random_mineral_cost) && ((lv_current_gas_cost + 1) <= lv_random_gas_cost)) {
                lv_randomizer = RandomInt(1, 5);
                if ((lv_randomizer == 1)) {
                    lib1_gf_AddUnittoHandCard(lp_player, lv_hand_slot, 1, "Spectre");
                    lv_current_mineral_cost = (lv_current_mineral_cost + 1);
                    lv_current_gas_cost = (lv_current_gas_cost + 1);
                }
                else if ((lv_randomizer == 2)) {
                    lib1_gf_AddUnittoHandCard(lp_player, lv_hand_slot, 1, "Aberration");
                    lv_current_mineral_cost = (lv_current_mineral_cost + 1);
                    lv_current_gas_cost = (lv_current_gas_cost + 1);
                }
                else if ((lv_randomizer == 3)) {
                    lib1_gf_AddUnittoHandCard(lp_player, lv_hand_slot, 1, "Archon");
                    lv_current_mineral_cost = (lv_current_mineral_cost + 1);
                    lv_current_gas_cost = (lv_current_gas_cost + 1);
                }
            }

            if ((lib1_gf_CountOfUnitTypesOnHandCard(lp_player, lv_hand_slot) <= 2) && ((lv_current_gas_cost + 1) <= lv_random_gas_cost)) {
                if ((lv_current_mineral_cost == lv_random_mineral_cost) && ((lv_current_gas_cost + 1) == lv_random_gas_cost)) {
                    lv_randomizer = RandomInt(1, 3);
                    lv_randomizer = RandomInt(1, 5);
                }

                if ((lv_randomizer == 1)) {
                    lib1_gf_AddUnittoHandCard(lp_player, lv_hand_slot, 1, "Ghost");
                    lv_current_gas_cost = (lv_current_gas_cost + 1);
                }
                else if ((lv_randomizer == 2)) {
                    lib1_gf_AddUnittoHandCard(lp_player, lv_hand_slot, 4, "Scourge");
                    lv_current_gas_cost = (lv_current_gas_cost + 1);
                }
                else if ((lv_randomizer == 3)) {
                    lib1_gf_AddUnittoHandCard(lp_player, lv_hand_slot, 1, "DarkTemplar");
                    lv_current_gas_cost = (lv_current_gas_cost + 1);
                }
            }

            if ((lib1_gf_CountOfUnitTypesOnHandCard(lp_player, lv_hand_slot) <= 2) && ((lv_current_mineral_cost + 1) <= lv_random_mineral_cost)) {
                lv_randomizer = RandomInt(1, 3);
                if ((lv_randomizer == 1)) {
                    lib1_gf_AddUnittoHandCard(lp_player, lv_hand_slot, 2, "Marine");
                    lv_current_mineral_cost = (lv_current_mineral_cost + 1);
                }
                else if ((lv_randomizer == 2)) {
                    lib1_gf_AddUnittoHandCard(lp_player, lv_hand_slot, 4, "Zergling");
                    lv_current_mineral_cost = (lv_current_mineral_cost + 1);
                }
                else if ((lv_randomizer == 3)) {
                    lib1_gf_AddUnittoHandCard(lp_player, lv_hand_slot, 1, "Zealot");
                    lv_current_mineral_cost = (lv_current_mineral_cost + 1);
                }
            }

        }
        while ((lv_attempt_count < 15) && ((lv_current_mineral_cost < lv_random_mineral_cost) || (lv_current_gas_cost < lv_random_gas_cost))) {
            lv_attempt_count = (lv_attempt_count + 1);
            lv_unit_type_count = lib1_gf_CountOfUnitTypesOnHandCard(lp_player, lv_hand_slot);
            for ( ; ( (auto315D8FDB_ai >= 0 && lv_unit_type_count <= auto315D8FDB_ae) || (auto315D8FDB_ai < 0 && lv_unit_type_count >= auto315D8FDB_ae) ) ; lv_unit_type_count += auto315D8FDB_ai ) {
                if ((lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_slot].lv_unit_type[lv_unit_type_count] == "Marine") && ((lv_current_mineral_cost + 1) <= lv_random_mineral_cost)) {
                    lib1_gf_AddUnittoHandCard(lp_player, lv_hand_slot, 2, "Marine");
                    lv_current_mineral_cost = (lv_current_mineral_cost + 1);
                }
                else if ((lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_slot].lv_unit_type[lv_unit_type_count] == "Zergling") && ((lv_current_mineral_cost + 1) <= lv_random_mineral_cost)) {
                    lib1_gf_AddUnittoHandCard(lp_player, lv_hand_slot, 4, "Zergling");
                    lv_current_mineral_cost = (lv_current_mineral_cost + 1);
                }
                else if ((lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_slot].lv_unit_type[lv_unit_type_count] == "Zealot") && ((lv_current_mineral_cost + 1) <= lv_random_mineral_cost)) {
                    lib1_gf_AddUnittoHandCard(lp_player, lv_hand_slot, 1, "Zealot");
                    lv_current_mineral_cost = (lv_current_mineral_cost + 1);
                }
                else if ((lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_slot].lv_unit_type[lv_unit_type_count] == "Ghost") && ((lv_current_gas_cost + 1) <= lv_random_gas_cost)) {
                    lib1_gf_AddUnittoHandCard(lp_player, lv_hand_slot, 1, "Ghost");
                    lv_current_gas_cost = (lv_current_gas_cost + 1);
                }
                else if ((lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_slot].lv_unit_type[lv_unit_type_count] == "Scourge") && ((lv_current_gas_cost + 1) <= lv_random_gas_cost)) {
                    lib1_gf_AddUnittoHandCard(lp_player, lv_hand_slot, 4, "Scourge");
                    lv_current_gas_cost = (lv_current_gas_cost + 1);
                }
                else if ((lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_slot].lv_unit_type[lv_unit_type_count] == "DarkTemplar") && ((lv_current_gas_cost + 1) <= lv_random_gas_cost)) {
                    lib1_gf_AddUnittoHandCard(lp_player, lv_hand_slot, 1, "DarkTemplar");
                    lv_current_gas_cost = (lv_current_gas_cost + 1);
                }
                else if ((lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_slot].lv_unit_type[lv_unit_type_count] == "Spectre") && ((lv_current_mineral_cost + 1) <= lv_random_mineral_cost) && ((lv_current_gas_cost + 1) <= lv_random_gas_cost) && (RandomInt(1, 2) == 1)) {
                    lib1_gf_AddUnittoHandCard(lp_player, lv_hand_slot, 1, "Spectre");
                    lv_current_mineral_cost = (lv_current_mineral_cost + 1);
                    lv_current_gas_cost = (lv_current_gas_cost + 1);
                }
                else if ((lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_slot].lv_unit_type[lv_unit_type_count] == "Aberration") && ((lv_current_mineral_cost + 1) <= lv_random_mineral_cost) && ((lv_current_gas_cost + 1) <= lv_random_gas_cost) && (RandomInt(1, 2) == 1)) {
                    lib1_gf_AddUnittoHandCard(lp_player, lv_hand_slot, 1, "Aberration");
                    lv_current_mineral_cost = (lv_current_mineral_cost + 1);
                    lv_current_gas_cost = (lv_current_gas_cost + 1);
                }
                else if ((lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_slot].lv_unit_type[lv_unit_type_count] == "Archon") && ((lv_current_mineral_cost + 1) <= lv_random_mineral_cost) && ((lv_current_gas_cost + 1) <= lv_random_gas_cost) && (RandomInt(1, 2) == 1)) {
                    lib1_gf_AddUnittoHandCard(lp_player, lv_hand_slot, 1, "Archon");
                    lv_current_mineral_cost = (lv_current_mineral_cost + 1);
                    lv_current_gas_cost = (lv_current_gas_cost + 1);
                }
                else if ((lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_slot].lv_unit_type[lv_unit_type_count] == "Wraith") && ((lv_current_mineral_cost + 2) <= lv_random_mineral_cost) && ((lv_current_gas_cost + 1) <= lv_random_gas_cost) && (RandomInt(1, 2) == 1)) {
                    lib1_gf_AddUnittoHandCard(lp_player, lv_hand_slot, 2, "Wraith");
                    lv_current_mineral_cost = (lv_current_mineral_cost + 2);
                    lv_current_gas_cost = (lv_current_gas_cost + 1);
                }
                else if ((lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_slot].lv_unit_type[lv_unit_type_count] == "DevourerMP") && ((lv_current_mineral_cost + 2) <= lv_random_mineral_cost) && ((lv_current_gas_cost + 1) <= lv_random_gas_cost) && (RandomInt(1, 2) == 1)) {
                    lib1_gf_AddUnittoHandCard(lp_player, lv_hand_slot, 1, "DevourerMP");
                    lv_current_mineral_cost = (lv_current_mineral_cost + 2);
                    lv_current_gas_cost = (lv_current_gas_cost + 1);
                }
                else if ((lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_slot].lv_unit_type[lv_unit_type_count] == "VoidRay") && ((lv_current_mineral_cost + 2) <= lv_random_mineral_cost) && ((lv_current_gas_cost + 1) <= lv_random_gas_cost) && (RandomInt(1, 2) == 1)) {
                    lib1_gf_AddUnittoHandCard(lp_player, lv_hand_slot, 1, "VoidRay");
                    lv_current_mineral_cost = (lv_current_mineral_cost + 2);
                    lv_current_gas_cost = (lv_current_gas_cost + 1);
                }
                else if (true) {
                }
            }
        }
        lib1_gf_SetHandCardCost(lp_player, lv_hand_slot, lv_current_mineral_cost, lv_current_gas_cost);
        lib1_gf_UpdateHandCardText(lp_player, lv_hand_slot);
    }

}

void lib1_gf_GenerateHeroWarpCardforHand (int lp_player) {
    // Variable Declarations
    int lv_count;
    int lv_random;
    int lv_hand_slot;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_hand_slot = lib1_gf_FirstEmptyHandSlot(lp_player);
    if ((lv_hand_slot <= lib1_gf_HandLimit(lp_player))) {
        lib1_gf_GenerateCardforHand(lp_player, lib1_gf_GetCardIDByName("Hero Warp"));
        lv_random = RandomInt(1, 2);
        if ((lv_random == 1)) {
            lib1_gf_AddUnittoHandCard(lp_player, lv_hand_slot, 1, "ZealotHero");
        }
        else if ((lv_random == 2)) {
            lib1_gf_AddUnittoHandCard(lp_player, lv_hand_slot, 1, "DragoonVeteran");
        }
        lib1_gf_UpdateHandCardText(lp_player, lv_hand_slot);
    }

}

void lib1_gf_CombineSpawnCards (int lp_player, string lp_new_card_name, int lp_copies, int lp_multiplier, bool lp_heroic) {
    // Variable Declarations
    int lv_hand_index;
    int lv_top_of_hand;
    int lv_unit_type_index_from_spawn_card;
    int lv_unit_type_index_from_larva_card;
    const int lv_lARVA_CARD_MAX_UNIT_TYPE = 19;
    string[lv_lARVA_CARD_MAX_UNIT_TYPE + 1] lv_larva_card_unit_type;
    int[lv_lARVA_CARD_MAX_UNIT_TYPE + 1] lv_larva_card_unit_type_count;
    int lv_copy;
    bool lv_component_is_heroic;
    unitgroup lv_unit_group;

    // Automatic Variable Declarations
    const int autoFF34F177_ae = 0;
    const int autoFF34F177_ai = -1;
    const int auto5CB820EB_ae = lib1_gv_mAX_UNIT_TYPE_PER_CARD;
    const int auto5CB820EB_ai = 1;
    const int autoE117CD93_ae = lv_lARVA_CARD_MAX_UNIT_TYPE;
    const int autoE117CD93_ai = 1;
    int auto35194DE5_ae;
    const int auto35194DE5_ai = 1;
    const int auto7720E785_ae = lv_lARVA_CARD_MAX_UNIT_TYPE;
    const int auto7720E785_ai = 1;

    // Variable Initialization
    lv_unit_group = UnitGroupEmpty();

    // Implementation
    lv_top_of_hand = lib1_gf_TopofHand(lp_player);
    if ((lv_top_of_hand >= 0)) {
        lv_hand_index = lv_top_of_hand;
        for ( ; ( (autoFF34F177_ai >= 0 && lv_hand_index <= autoFF34F177_ae) || (autoFF34F177_ai < 0 && lv_hand_index >= autoFF34F177_ae) ) ; lv_hand_index += autoFF34F177_ai ) {
            if ((lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_subtype == lib1_gv_sPAWN) && (lib1_gf_HandCardMineralCost(lp_player, lv_hand_index) == 0) && (lib1_gf_HandCardGasCost(lp_player, lv_hand_index) == 0)) {
                lv_unit_type_index_from_spawn_card = 0;
                for ( ; ( (auto5CB820EB_ai >= 0 && lv_unit_type_index_from_spawn_card <= auto5CB820EB_ae) || (auto5CB820EB_ai < 0 && lv_unit_type_index_from_spawn_card >= auto5CB820EB_ae) ) ; lv_unit_type_index_from_spawn_card += auto5CB820EB_ai ) {
                    if ((lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_unit_count[lv_unit_type_index_from_spawn_card] > 0)) {
                        lv_unit_type_index_from_larva_card = 0;
                        for ( ; ( (autoE117CD93_ai >= 0 && lv_unit_type_index_from_larva_card <= autoE117CD93_ae) || (autoE117CD93_ai < 0 && lv_unit_type_index_from_larva_card >= autoE117CD93_ae) ) ; lv_unit_type_index_from_larva_card += autoE117CD93_ai ) {
                            if (((lv_larva_card_unit_type[lv_unit_type_index_from_larva_card] == lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_unit_type[lv_unit_type_index_from_spawn_card]) || (lv_larva_card_unit_type_count[lv_unit_type_index_from_larva_card] == 0))) {
                                lv_larva_card_unit_type[lv_unit_type_index_from_larva_card] = lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_unit_type[lv_unit_type_index_from_spawn_card];
                                lv_larva_card_unit_type_count[lv_unit_type_index_from_larva_card] = (lv_larva_card_unit_type_count[lv_unit_type_index_from_larva_card] + lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_unit_count[lv_unit_type_index_from_spawn_card]);
                                break;
                            }

                        }
                    }

                }
                if ((lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_heroic == true)) {
                    lv_component_is_heroic = true;
                }

                lib1_gf_DiscardCardFromHandtoDiscard(lp_player, lv_hand_index);
            }

        }
        if ((lv_larva_card_unit_type_count[0] > 0)) {
            auto35194DE5_ae = lp_copies;
            lv_copy = 1;
            for ( ; ( (auto35194DE5_ai >= 0 && lv_copy <= auto35194DE5_ae) || (auto35194DE5_ai < 0 && lv_copy >= auto35194DE5_ae) ) ; lv_copy += auto35194DE5_ai ) {
                if ((lib1_gf_TopofHand(lp_player) < lib1_gf_HandLimit(lp_player))) {
                    lib1_gf_GenerateCardforHand(lp_player, lib1_gf_GetCardIDByName(lp_new_card_name));
                    if (((lv_component_is_heroic == true) || (lp_heroic == true))) {
                        lib1_gf_AddHeroictoHandCard(lp_player, lib1_gf_TopofHand(lp_player));
                    }

                    lv_unit_type_index_from_larva_card = 0;
                    for ( ; ( (auto7720E785_ai >= 0 && lv_unit_type_index_from_larva_card <= auto7720E785_ae) || (auto7720E785_ai < 0 && lv_unit_type_index_from_larva_card >= auto7720E785_ae) ) ; lv_unit_type_index_from_larva_card += auto7720E785_ai ) {
                        lib1_gf_AddUnittoHandCard(lp_player, lib1_gf_TopofHand(lp_player), (lv_larva_card_unit_type_count[lv_unit_type_index_from_larva_card] * lp_multiplier), lv_larva_card_unit_type[lv_unit_type_index_from_larva_card]);
                    }
                    lib1_gf_UpdateHandCardText(lp_player, lib1_gf_TopofHand(lp_player));
                }

            }
        }

    }

}

void lib1_gf_DiscardAllNovaOpsCards (int lp_player) {
    // Variable Declarations
    int lv_hand_index;
    int lv_top_of_hand;

    // Automatic Variable Declarations
    const int auto5B19CEA4_ae = 0;
    const int auto5B19CEA4_ai = -1;

    // Variable Initialization

    // Implementation
    lv_top_of_hand = lib1_gf_TopofHand(lp_player);
    if ((lv_top_of_hand >= 0)) {
        lv_hand_index = lv_top_of_hand;
        for ( ; ( (auto5B19CEA4_ai >= 0 && lv_hand_index <= auto5B19CEA4_ae) || (auto5B19CEA4_ai < 0 && lv_hand_index >= auto5B19CEA4_ae) ) ; lv_hand_index += auto5B19CEA4_ai ) {
            if ((lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_subtype == lib1_gv_nOVA_OPS)) {
                lib1_gf_DiscardCardFromHandtoDiscard(lp_player, lv_hand_index);
            }

        }
    }

}

void lib1_gf_SetHandCardCost (int lp_player, int lp_hand_index, int lp_new_mineral_cost, int lp_new_gas_cost) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_mineral = lp_new_mineral_cost;
    lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_mineral_adjustment = 0;
    libNtve_gf_SetDialogItemText(lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_ui.lv_mineral_cost, IntToText(lib1_gf_HandCardMineralCost(lp_player, lp_hand_index)), PlayerGroupAll());
    lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_gas = lp_new_gas_cost;
    lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_gas_adjustment = 0;
    libNtve_gf_SetDialogItemText(lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_ui.lv_gas_cost, IntToText(lib1_gf_HandCardGasCost(lp_player, lp_hand_index)), PlayerGroupAll());
}

void lib1_gf_SetHandCardMineralCost (int lp_player, int lp_hand_index, int lp_new_mineral_cost) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_mineral = lp_new_mineral_cost;
    lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_mineral_adjustment = 0;
    libNtve_gf_SetDialogItemText(lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_ui.lv_mineral_cost, IntToText(lib1_gf_HandCardMineralCost(lp_player, lp_hand_index)), PlayerGroupAll());
}

void lib1_gf_SetHandCardGasCost (int lp_player, int lp_hand_index, int lp_new_gas_cost) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_gas = lp_new_gas_cost;
    lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_gas_adjustment = 0;
    libNtve_gf_SetDialogItemText(lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_ui.lv_gas_cost, IntToText(lib1_gf_HandCardGasCost(lp_player, lp_hand_index)), PlayerGroupAll());
}

void lib1_gf_AddtoHandCardCost (int lp_player, int lp_hand_index, int lp_mineral_amount, int lp_gas_amount) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_mineral_adjustment = (lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_mineral_adjustment + lp_mineral_amount);
    lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_gas_adjustment = (lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_gas_adjustment + lp_gas_amount);
    libNtve_gf_SetDialogItemText(lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_ui.lv_mineral_cost, IntToText(lib1_gf_HandCardMineralCost(lp_player, lp_hand_index)), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_ui.lv_gas_cost, IntToText(lib1_gf_HandCardGasCost(lp_player, lp_hand_index)), PlayerGroupAll());
}

void lib1_gf_RemoveUnitFromHandCard (int lp_player, int lp_hand_index, int lp_amount_to_remove, string lp_unit_type) {
    // Variable Declarations
    int lv_unit_type_index_1;
    int lv_unit_type_index_2;

    // Automatic Variable Declarations
    const int autoB3B2E0F1_ae = lib1_gv_mAX_UNIT_TYPE_PER_CARD;
    const int autoB3B2E0F1_ai = 1;
    int auto40B0859B_ae;
    const int auto40B0859B_ai = 1;

    // Variable Initialization

    // Implementation
    lv_unit_type_index_1 = 0;
    for ( ; ( (autoB3B2E0F1_ai >= 0 && lv_unit_type_index_1 <= autoB3B2E0F1_ae) || (autoB3B2E0F1_ai < 0 && lv_unit_type_index_1 >= autoB3B2E0F1_ae) ) ; lv_unit_type_index_1 += autoB3B2E0F1_ai ) {
        if ((lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_unit_type[lv_unit_type_index_1] == lp_unit_type)) {
            lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_unit_count[lv_unit_type_index_1] = MaxI((lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_unit_count[lv_unit_type_index_1] - lp_amount_to_remove), 0);
            if ((lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_unit_count[lv_unit_type_index_1] == 0)) {
                auto40B0859B_ae = (lib1_gv_mAX_UNIT_TYPE_PER_CARD - 1);
                lv_unit_type_index_2 = lv_unit_type_index_1;
                for ( ; ( (auto40B0859B_ai >= 0 && lv_unit_type_index_2 <= auto40B0859B_ae) || (auto40B0859B_ai < 0 && lv_unit_type_index_2 >= auto40B0859B_ae) ) ; lv_unit_type_index_2 += auto40B0859B_ai ) {
                    lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_unit_count[lv_unit_type_index_2] = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_unit_count[(lv_unit_type_index_2 + 1)];
                    lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_unit_type[lv_unit_type_index_2] = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_unit_type[(lv_unit_type_index_2 + 1)];
                }
                lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_unit_count[lib1_gv_mAX_UNIT_TYPE_PER_CARD] = 0;
                lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_unit_type[lib1_gv_mAX_UNIT_TYPE_PER_CARD] = null;
            }

            lib1_gf_UpdateHandCardText(lp_player, lp_hand_index);
            break;
        }

    }
}

void lib1_gf_AddUnittoHandCard (int lp_player, int lp_hand_index, int lp_amount_to_add, string lp_unit_type) {
    // Variable Declarations
    int lv_unit_type_index;

    // Automatic Variable Declarations
    const int auto81683DB2_ae = lib1_gv_mAX_UNIT_TYPE_PER_CARD;
    const int auto81683DB2_ai = 1;

    // Variable Initialization

    // Implementation
    if ((lp_amount_to_add >= 1)) {
        lv_unit_type_index = 0;
        for ( ; ( (auto81683DB2_ai >= 0 && lv_unit_type_index <= auto81683DB2_ae) || (auto81683DB2_ai < 0 && lv_unit_type_index >= auto81683DB2_ae) ) ; lv_unit_type_index += auto81683DB2_ai ) {
            if ((lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_unit_type[lv_unit_type_index] == lp_unit_type)) {
                lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_unit_count[lv_unit_type_index] = (lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_unit_count[lv_unit_type_index] + lp_amount_to_add);
                lib1_gf_UpdateHandCardText(lp_player, lp_hand_index);
                break;
            }
            else if (((lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_unit_type[lv_unit_type_index] == null) || (lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_unit_count[lv_unit_type_index] == 0))) {
                lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_unit_type[lv_unit_type_index] = lp_unit_type;
                lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_unit_count[lv_unit_type_index] = lp_amount_to_add;
                lib1_gf_UpdateHandCardText(lp_player, lp_hand_index);
                break;
            }
        }
    }

}

void lib1_gf_AddHeroictoHandCard (int lp_player, int lp_hand_index) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_heroic = true;
}

void lib1_gf_AddRushtoHandCard (int lp_player, int lp_hand_index) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_rush = true;
}

void lib1_gf_RemoveHeroicFromHandCard (int lp_player, int lp_hand_index) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_heroic = false;
}

void lib1_gf_RemoveRushFromHandCard (int lp_player, int lp_hand_index) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_rush = false;
}

void lib1_gf_UpdateHandCardText (int lp_player, int lp_hand_index) {
    // Variable Declarations
    bool lv_transform;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_transform >= 0)) {
        lv_transform = true;
    }
    else {
        lv_transform = false;
    }
    libNtve_gf_SetDialogItemText(lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_ui.lv_text, lib1_gf_GetCardText(lib1_gf_GetUnitTextForHandCard(lp_player, lp_hand_index), lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_base_text, lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_rush, lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_delay, lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_heroic, lv_transform, lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_stream, lib1_gv_card[lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_id].lv_buried, lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_set), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_ui.lv_mineral_cost, IntToText(lib1_gf_HandCardMineralCost(lp_player, lp_hand_index)), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_ui.lv_gas_cost, IntToText(lib1_gf_HandCardGasCost(lp_player, lp_hand_index)), PlayerGroupAll());
}

void lib1_gf_DrawCardFromDecktoHand (int lp_player) {
    // Variable Declarations
    int lv_first_empty_hand_slot;
    int lv_top_of_deck;
    int lv_index;
    bool lv_draw;
    bool lv_fetch;
    unit lv_structure;
    int lv_more_draw;
    int lv_unit_type_index;
    int lv_count;

    // Automatic Variable Declarations
    unitgroup autoCEA897DB_g;
    int autoCEA897DB_u;
    const int auto5B816003_ae = lib1_gv_mAX_UNIT_TYPE_PER_CARD;
    const int auto5B816003_ai = 1;
    const int auto20DEC350_ae = lib1_gv_mAX_UNIT_TYPE_PER_CARD;
    const int auto20DEC350_ai = 1;
    const int auto7F3E6EFA_ae = lib1_gv_eF_MAX;
    const int auto7F3E6EFA_ai = 1;

    // Variable Initialization
    lv_draw = true;

    // Implementation
    if ((lv_draw == true)) {
        lv_first_empty_hand_slot = lib1_gf_FirstEmptyHandSlot(lp_player);
        lv_top_of_deck = lib1_gf_TopofDeck(lp_player);
        if ((lv_top_of_deck >= 0)) {
            if ((lv_first_empty_hand_slot <= lib1_gf_HandLimit(lp_player))) {
                autoCEA897DB_g = UnitGroup("LurkerDenMP", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterDazed - 32))), 0);
                autoCEA897DB_u = UnitGroupCount(autoCEA897DB_g, c_unitCountAll);
                for (;; autoCEA897DB_u -= 1) {
                    lv_structure = UnitGroupUnitFromEnd(autoCEA897DB_g, autoCEA897DB_u);
                    if (lv_structure == null) { break; }
                    lv_unit_type_index = 0;
                    for ( ; ( (auto5B816003_ai >= 0 && lv_unit_type_index <= auto5B816003_ae) || (auto5B816003_ai < 0 && lv_unit_type_index >= auto5B816003_ae) ) ; lv_unit_type_index += auto5B816003_ai ) {
                        if ((lib1_gv_player[lp_player].lv_deck.lv_card[lv_top_of_deck].lv_unit_count[lv_unit_type_index] > 0) && (StringContains(CatalogFieldValueGet(c_gameCatalogUnit, lib1_gv_player[lp_player].lv_deck.lv_card[lv_top_of_deck].lv_unit_type[lv_unit_type_index], "Name", c_playerAny), "Lurker", c_stringAnywhere, c_stringCase) == true)) {
                            lib1_gv_player[lp_player].lv_cards_to_draw = (lib1_gv_player[lp_player].lv_cards_to_draw + 1);
                            lib1_gv_player[lp_player].lv_last_draw_time = GameGetMissionTime();
                            break;
                        }

                    }
                }
                lib1_gv_player[lp_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_default_effect = lib1_gv_player[lp_player].lv_deck.lv_card[lv_top_of_deck].lv_default_effect;
                lib1_gv_player[lp_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_gas = lib1_gv_player[lp_player].lv_deck.lv_card[lv_top_of_deck].lv_gas;
                lib1_gv_player[lp_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_gas_adjustment = lib1_gv_player[lp_player].lv_deck.lv_card[lv_top_of_deck].lv_gas_adjustment;
                lib1_gv_player[lp_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_id = lib1_gv_player[lp_player].lv_deck.lv_card[lv_top_of_deck].lv_id;
                lib1_gv_player[lp_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_image = lib1_gv_player[lp_player].lv_deck.lv_card[lv_top_of_deck].lv_image;
                lib1_gv_player[lp_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_mineral = lib1_gv_player[lp_player].lv_deck.lv_card[lv_top_of_deck].lv_mineral;
                lib1_gv_player[lp_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_mineral_adjustment = lib1_gv_player[lp_player].lv_deck.lv_card[lv_top_of_deck].lv_mineral_adjustment;
                lib1_gv_player[lp_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_name = lib1_gv_player[lp_player].lv_deck.lv_card[lv_top_of_deck].lv_name;
                lib1_gv_player[lp_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_race = lib1_gv_player[lp_player].lv_deck.lv_card[lv_top_of_deck].lv_race;
                lib1_gv_player[lp_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_rarity = lib1_gv_player[lp_player].lv_deck.lv_card[lv_top_of_deck].lv_rarity;
                lib1_gv_player[lp_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_set = lib1_gv_player[lp_player].lv_deck.lv_card[lv_top_of_deck].lv_set;
                lib1_gv_player[lp_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_sound = lib1_gv_player[lp_player].lv_deck.lv_card[lv_top_of_deck].lv_sound;
                lib1_gv_player[lp_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_subtype = lib1_gv_player[lp_player].lv_deck.lv_card[lv_top_of_deck].lv_subtype;
                lib1_gv_player[lp_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_base_text = lib1_gv_player[lp_player].lv_deck.lv_card[lv_top_of_deck].lv_base_text;
                lib1_gv_player[lp_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_type = lib1_gv_player[lp_player].lv_deck.lv_card[lv_top_of_deck].lv_type;
                lib1_gv_player[lp_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_rush = lib1_gv_player[lp_player].lv_deck.lv_card[lv_top_of_deck].lv_rush;
                lib1_gv_player[lp_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_delay = lib1_gv_player[lp_player].lv_deck.lv_card[lv_top_of_deck].lv_delay;
                lib1_gv_player[lp_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_heroic = lib1_gv_player[lp_player].lv_deck.lv_card[lv_top_of_deck].lv_heroic;
                lib1_gv_player[lp_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_transform = lib1_gv_player[lp_player].lv_deck.lv_card[lv_top_of_deck].lv_transform;
                lib1_gv_player[lp_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_detection = lib1_gv_player[lp_player].lv_deck.lv_card[lv_top_of_deck].lv_detection;
                lib1_gv_player[lp_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_stream = lib1_gv_player[lp_player].lv_deck.lv_card[lv_top_of_deck].lv_stream;
                lib1_gv_player[lp_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_channel = lib1_gv_player[lp_player].lv_deck.lv_card[lv_top_of_deck].lv_channel;
                lv_index = 0;
                for ( ; ( (auto20DEC350_ai >= 0 && lv_index <= auto20DEC350_ae) || (auto20DEC350_ai < 0 && lv_index >= auto20DEC350_ae) ) ; lv_index += auto20DEC350_ai ) {
                    lib1_gv_player[lp_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_unit_count[lv_index] = lib1_gv_player[lp_player].lv_deck.lv_card[lv_top_of_deck].lv_unit_count[lv_index];
                    lib1_gv_player[lp_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_unit_type[lv_index] = lib1_gv_player[lp_player].lv_deck.lv_card[lv_top_of_deck].lv_unit_type[lv_index];
                }
                lv_index = 0;
                for ( ; ( (auto7F3E6EFA_ai >= 0 && lv_index <= auto7F3E6EFA_ae) || (auto7F3E6EFA_ai < 0 && lv_index >= auto7F3E6EFA_ae) ) ; lv_index += auto7F3E6EFA_ai ) {
                    lib1_gv_player[lp_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_effect[lv_index] = lib1_gv_player[lp_player].lv_deck.lv_card[lv_top_of_deck].lv_effect[lv_index];
                }
                lib1_gf_CreateCard(lp_player, lib1_gv_iNITIAL_CARD_X, lib1_gv_iNITIAL_CARD_Y, lib1_gv_player[lp_player].lv_deck.lv_card[lv_top_of_deck].lv_id, "deck", lv_top_of_deck, "hand", lv_first_empty_hand_slot);
                lib1_gf_RemoveCardFromDeck(lp_player, lv_top_of_deck);
            }
            else {
                lib1_gf_MillCard(lp_player);
            }
        }
        else {
            if ((lib1_gv_current_phase == "Play")) {
                lib1_gf_AddEffecttoQueue(lp_player, -1, lib1_gv_eF_REMOVE_UNIT_1500_DAMAGE, lib1_gt_Fatigue, UnitGroupEmpty(), false);
            }
            else {
                lib1_gf_FatigueDamage(lp_player);
            }
        }
        while ((lib1_gv_player[lp_player].lv_cards_to_draw >= 1)) {
            lib1_gv_player[lp_player].lv_cards_to_draw = (lib1_gv_player[lp_player].lv_cards_to_draw - 1);
            lib1_gf_DrawCardFromDecktoHand(lp_player);
        }
    }

}

void lib1_gf_ReturnCardFromDiscardtoHand (int lp_player, int lp_discard_index) {
    // Variable Declarations
    int lv_first_empty_hand_slot;
    int lv_index;

    // Automatic Variable Declarations
    const int autoE409966E_ae = lib1_gv_mAX_UNIT_TYPE_PER_CARD;
    const int autoE409966E_ai = 1;
    const int auto462EE07A_ae = lib1_gv_eF_MAX;
    const int auto462EE07A_ai = 1;

    // Variable Initialization

    // Implementation
    lv_first_empty_hand_slot = lib1_gf_FirstEmptyHandSlot(lp_player);
    if ((lv_first_empty_hand_slot <= lib1_gf_HandLimit(lp_player))) {
        lib1_gf_GenerateCardforHand(lp_player, lib1_gv_player[lp_player].lv_new_discard.lv_card[lp_discard_index].lv_id);
        lib1_gv_player[lp_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_base_text = lib1_gv_player[lp_player].lv_new_discard.lv_card[lp_discard_index].lv_base_text;
        lib1_gv_player[lp_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_buried = lib1_gv_player[lp_player].lv_new_discard.lv_card[lp_discard_index].lv_buried;
        lib1_gv_player[lp_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_channel = lib1_gv_player[lp_player].lv_new_discard.lv_card[lp_discard_index].lv_channel;
        lib1_gv_player[lp_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_default_effect = lib1_gv_player[lp_player].lv_new_discard.lv_card[lp_discard_index].lv_default_effect;
        lib1_gv_player[lp_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_delay = lib1_gv_player[lp_player].lv_new_discard.lv_card[lp_discard_index].lv_delay;
        lib1_gv_player[lp_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_detection = lib1_gv_player[lp_player].lv_new_discard.lv_card[lp_discard_index].lv_detection;
        lib1_gv_player[lp_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_gas = lib1_gv_player[lp_player].lv_new_discard.lv_card[lp_discard_index].lv_gas;
        lib1_gv_player[lp_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_gas_adjustment = lib1_gv_player[lp_player].lv_new_discard.lv_card[lp_discard_index].lv_gas_adjustment;
        lib1_gv_player[lp_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_heroic = lib1_gv_player[lp_player].lv_new_discard.lv_card[lp_discard_index].lv_heroic;
        lib1_gv_player[lp_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_image = lib1_gv_player[lp_player].lv_new_discard.lv_card[lp_discard_index].lv_image;
        lib1_gv_player[lp_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_mineral = lib1_gv_player[lp_player].lv_new_discard.lv_card[lp_discard_index].lv_mineral;
        lib1_gv_player[lp_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_mineral_adjustment = lib1_gv_player[lp_player].lv_new_discard.lv_card[lp_discard_index].lv_mineral_adjustment;
        lib1_gv_player[lp_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_name = lib1_gv_player[lp_player].lv_new_discard.lv_card[lp_discard_index].lv_name;
        lib1_gv_player[lp_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_race = lib1_gv_player[lp_player].lv_new_discard.lv_card[lp_discard_index].lv_race;
        lib1_gv_player[lp_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_rush = lib1_gv_player[lp_player].lv_new_discard.lv_card[lp_discard_index].lv_rush;
        lib1_gv_player[lp_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_stream = lib1_gv_player[lp_player].lv_new_discard.lv_card[lp_discard_index].lv_stream;
        lib1_gv_player[lp_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_subtype = lib1_gv_player[lp_player].lv_new_discard.lv_card[lp_discard_index].lv_subtype;
        lib1_gv_player[lp_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_transform = lib1_gv_player[lp_player].lv_new_discard.lv_card[lp_discard_index].lv_transform;
        lib1_gv_player[lp_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_type = lib1_gv_player[lp_player].lv_new_discard.lv_card[lp_discard_index].lv_type;
        lv_index = 0;
        for ( ; ( (autoE409966E_ai >= 0 && lv_index <= autoE409966E_ae) || (autoE409966E_ai < 0 && lv_index >= autoE409966E_ae) ) ; lv_index += autoE409966E_ai ) {
            lib1_gv_player[lp_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_unit_count[lv_index] = lib1_gv_player[lp_player].lv_new_discard.lv_card[lp_discard_index].lv_unit_count[lv_index];
            lib1_gv_player[lp_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_unit_type[lv_index] = lib1_gv_player[lp_player].lv_new_discard.lv_card[lp_discard_index].lv_unit_type[lv_index];
        }
        lv_index = 0;
        for ( ; ( (auto462EE07A_ai >= 0 && lv_index <= auto462EE07A_ae) || (auto462EE07A_ai < 0 && lv_index >= auto462EE07A_ae) ) ; lv_index += auto462EE07A_ai ) {
            lib1_gv_player[lp_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_effect[lv_index] = lib1_gv_player[lp_player].lv_new_discard.lv_card[lp_discard_index].lv_effect[lv_index];
        }
        lib1_gf_UpdateHandCardText(lp_player, lv_first_empty_hand_slot);
        lib1_gf_RemoveCardFromDiscard(lp_player, lp_discard_index);
        lib1_gf_UpdateDeckUI(lp_player);
    }

}

void lib1_gf_StealCardFromDecktoHand (int lp_stealing_player, int lp_target_player, int lp_deck_index) {
    // Variable Declarations
    int lv_first_empty_hand_slot;
    int lv_index;

    // Automatic Variable Declarations
    const int auto1C3B3459_ae = lib1_gv_mAX_UNIT_TYPE_PER_CARD;
    const int auto1C3B3459_ai = 1;
    const int auto92021F53_ae = lib1_gv_eF_MAX;
    const int auto92021F53_ai = 1;

    // Variable Initialization

    // Implementation
    lv_first_empty_hand_slot = lib1_gf_FirstEmptyHandSlot(lp_stealing_player);
    if ((lv_first_empty_hand_slot <= lib1_gf_HandLimit(lp_stealing_player))) {
        lib1_gv_player[lp_stealing_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_default_effect = lib1_gv_player[lp_target_player].lv_deck.lv_card[lp_deck_index].lv_default_effect;
        lib1_gv_player[lp_stealing_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_gas = lib1_gv_player[lp_target_player].lv_deck.lv_card[lp_deck_index].lv_gas;
        lib1_gv_player[lp_stealing_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_gas_adjustment = lib1_gv_player[lp_target_player].lv_deck.lv_card[lp_deck_index].lv_gas_adjustment;
        lib1_gv_player[lp_stealing_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_id = lib1_gv_player[lp_target_player].lv_deck.lv_card[lp_deck_index].lv_id;
        lib1_gv_player[lp_stealing_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_image = lib1_gv_player[lp_stealing_player].lv_deck.lv_card[lp_deck_index].lv_image;
        lib1_gv_player[lp_stealing_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_mineral = lib1_gv_player[lp_target_player].lv_deck.lv_card[lp_deck_index].lv_mineral;
        lib1_gv_player[lp_stealing_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_mineral_adjustment = lib1_gv_player[lp_target_player].lv_deck.lv_card[lp_deck_index].lv_mineral_adjustment;
        lib1_gv_player[lp_stealing_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_race = lib1_gv_player[lp_target_player].lv_deck.lv_card[lp_deck_index].lv_race;
        lib1_gv_player[lp_stealing_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_rarity = lib1_gv_player[lp_target_player].lv_deck.lv_card[lp_deck_index].lv_rarity;
        lib1_gv_player[lp_stealing_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_set = lib1_gv_player[lp_target_player].lv_deck.lv_card[lp_deck_index].lv_set;
        lib1_gv_player[lp_stealing_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_sound = lib1_gv_player[lp_target_player].lv_deck.lv_card[lp_deck_index].lv_sound;
        lib1_gv_player[lp_stealing_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_subtype = lib1_gv_player[lp_target_player].lv_deck.lv_card[lp_deck_index].lv_subtype;
        lib1_gv_player[lp_stealing_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_base_text = lib1_gv_player[lp_target_player].lv_deck.lv_card[lp_deck_index].lv_base_text;
        lib1_gv_player[lp_stealing_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_type = lib1_gv_player[lp_target_player].lv_deck.lv_card[lp_deck_index].lv_type;
        lib1_gv_player[lp_stealing_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_rush = lib1_gv_player[lp_target_player].lv_deck.lv_card[lp_deck_index].lv_rush;
        lib1_gv_player[lp_stealing_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_delay = lib1_gv_player[lp_target_player].lv_deck.lv_card[lp_deck_index].lv_delay;
        lib1_gv_player[lp_stealing_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_heroic = lib1_gv_player[lp_target_player].lv_deck.lv_card[lp_deck_index].lv_heroic;
        lib1_gv_player[lp_stealing_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_transform = lib1_gv_player[lp_target_player].lv_deck.lv_card[lp_deck_index].lv_transform;
        lib1_gv_player[lp_stealing_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_detection = lib1_gv_player[lp_target_player].lv_deck.lv_card[lp_deck_index].lv_detection;
        lib1_gv_player[lp_stealing_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_channel = lib1_gv_player[lp_target_player].lv_deck.lv_card[lp_deck_index].lv_channel;
        lib1_gv_player[lp_stealing_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_name = lib1_gv_player[lp_target_player].lv_deck.lv_card[lp_deck_index].lv_name;
        lv_index = 0;
        for ( ; ( (auto1C3B3459_ai >= 0 && lv_index <= auto1C3B3459_ae) || (auto1C3B3459_ai < 0 && lv_index >= auto1C3B3459_ae) ) ; lv_index += auto1C3B3459_ai ) {
            lib1_gv_player[lp_stealing_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_unit_count[lv_index] = lib1_gv_player[lp_target_player].lv_deck.lv_card[lp_deck_index].lv_unit_count[lv_index];
            lib1_gv_player[lp_stealing_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_unit_type[lv_index] = lib1_gv_player[lp_target_player].lv_deck.lv_card[lp_deck_index].lv_unit_type[lv_index];
        }
        lv_index = 0;
        for ( ; ( (auto92021F53_ai >= 0 && lv_index <= auto92021F53_ae) || (auto92021F53_ai < 0 && lv_index >= auto92021F53_ae) ) ; lv_index += auto92021F53_ai ) {
            lib1_gv_player[lp_stealing_player].lv_hand.lv_card[lv_first_empty_hand_slot].lv_effect[lv_index] = lib1_gv_player[lp_target_player].lv_deck.lv_card[lp_deck_index].lv_effect[lv_index];
        }
        lib1_gf_CreateCard(lp_stealing_player, lib1_gv_iNITIAL_CARD_X, lib1_gv_iNITIAL_CARD_Y, lib1_gv_player[lp_target_player].lv_deck.lv_card[lp_deck_index].lv_id, "", -1, "hand", lv_first_empty_hand_slot);
        lib1_gf_RemoveCardFromDeck(lp_target_player, lp_deck_index);
        lib1_gf_ShuffleDeck(lp_target_player);
        lib1_gf_UpdateHandCardButtonPositions(lp_stealing_player);
        lib1_gf_UpdateDeckUI(lp_target_player);
    }

}

void lib1_gf_ShuffleHandCardIntoDeck (int lp_player, int lp_hand_index) {
    // Variable Declarations
    int lv_deck_index;
    int lv_index;

    // Automatic Variable Declarations
    const int auto22C36FC9_ae = lib1_gv_mAX_UNIT_TYPE_PER_CARD;
    const int auto22C36FC9_ai = 1;
    const int autoF6C46335_ae = lib1_gv_eF_MAX;
    const int autoF6C46335_ai = 1;

    // Variable Initialization

    // Implementation
    lv_deck_index = lib1_gf_FirstEmptyDeckSlot(lp_player);
    if ((lv_deck_index > lib1_gv_dECK_LIMIT)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, StringExternal("Param/Value/lib_1_6A9AAEBA"));
    }
    else {
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_default_effect = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_default_effect;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_gas = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_gas;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_gas_adjustment = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_gas_adjustment;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_id = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_id;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_image = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_image;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_mineral = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_mineral;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_mineral_adjustment = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_mineral_adjustment;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_name = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_name;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_race = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_race;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_rarity = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_rarity;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_set = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_set;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_sound = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_sound;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_subtype = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_subtype;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_base_text = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_base_text;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_type = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_type;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_rush = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_rush;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_delay = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_delay;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_heroic = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_heroic;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_transform = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_transform;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_detection = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_detection;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_stream = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_stream;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_channel = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_channel;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_locked_by_player = 0;
        lv_index = 0;
        for ( ; ( (auto22C36FC9_ai >= 0 && lv_index <= auto22C36FC9_ae) || (auto22C36FC9_ai < 0 && lv_index >= auto22C36FC9_ae) ) ; lv_index += auto22C36FC9_ai ) {
            lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_unit_count[lv_index] = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_unit_count[lv_index];
            lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_unit_type[lv_index] = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_unit_type[lv_index];
        }
        lv_index = 0;
        for ( ; ( (autoF6C46335_ai >= 0 && lv_index <= autoF6C46335_ae) || (autoF6C46335_ai < 0 && lv_index >= autoF6C46335_ae) ) ; lv_index += autoF6C46335_ai ) {
            lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_effect[lv_index] = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_effect[lv_index];
        }
    }
    lib1_gf_RemoveCardFromHand(lp_player, lp_hand_index);
    lib1_gf_ShuffleDeck(lp_player);
    lib1_gf_UpdateDeckUI(lp_player);
}

void lib1_gf_ShuffleDiscardCardIntoDeck (int lp_player, int lp_discard_index) {
    // Variable Declarations
    int lv_deck_index;
    int lv_index;

    // Automatic Variable Declarations
    const int auto356EE528_ae = lib1_gv_mAX_UNIT_TYPE_PER_CARD;
    const int auto356EE528_ai = 1;
    const int autoD64276D0_ae = lib1_gv_eF_MAX;
    const int autoD64276D0_ai = 1;

    // Variable Initialization

    // Implementation
    lv_deck_index = lib1_gf_FirstEmptyDeckSlot(lp_player);
    if ((lv_deck_index > lib1_gv_dECK_LIMIT)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, StringExternal("Param/Value/lib_1_056C54FD"));
    }
    else {
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_default_effect = lib1_gv_player[lp_player].lv_new_discard.lv_card[lp_discard_index].lv_default_effect;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_gas = lib1_gv_player[lp_player].lv_new_discard.lv_card[lp_discard_index].lv_gas;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_gas_adjustment = lib1_gv_player[lp_player].lv_new_discard.lv_card[lp_discard_index].lv_gas_adjustment;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_id = lib1_gv_player[lp_player].lv_new_discard.lv_card[lp_discard_index].lv_id;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_image = lib1_gv_player[lp_player].lv_new_discard.lv_card[lp_discard_index].lv_image;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_mineral = lib1_gv_player[lp_player].lv_new_discard.lv_card[lp_discard_index].lv_mineral;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_mineral_adjustment = lib1_gv_player[lp_player].lv_new_discard.lv_card[lp_discard_index].lv_mineral_adjustment;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_name = lib1_gv_player[lp_player].lv_new_discard.lv_card[lp_discard_index].lv_name;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_race = lib1_gv_player[lp_player].lv_new_discard.lv_card[lp_discard_index].lv_race;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_rarity = lib1_gv_player[lp_player].lv_new_discard.lv_card[lp_discard_index].lv_rarity;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_set = lib1_gv_player[lp_player].lv_new_discard.lv_card[lp_discard_index].lv_set;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_sound = lib1_gv_player[lp_player].lv_new_discard.lv_card[lp_discard_index].lv_sound;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_subtype = lib1_gv_player[lp_player].lv_new_discard.lv_card[lp_discard_index].lv_subtype;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_base_text = lib1_gv_player[lp_player].lv_new_discard.lv_card[lp_discard_index].lv_base_text;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_type = lib1_gv_player[lp_player].lv_new_discard.lv_card[lp_discard_index].lv_type;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_rush = lib1_gv_player[lp_player].lv_new_discard.lv_card[lp_discard_index].lv_rush;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_delay = lib1_gv_player[lp_player].lv_new_discard.lv_card[lp_discard_index].lv_delay;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_heroic = lib1_gv_player[lp_player].lv_new_discard.lv_card[lp_discard_index].lv_heroic;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_transform = lib1_gv_player[lp_player].lv_new_discard.lv_card[lp_discard_index].lv_transform;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_detection = lib1_gv_player[lp_player].lv_new_discard.lv_card[lp_discard_index].lv_detection;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_stream = lib1_gv_player[lp_player].lv_new_discard.lv_card[lp_discard_index].lv_stream;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_channel = lib1_gv_player[lp_player].lv_new_discard.lv_card[lp_discard_index].lv_channel;
        lv_index = 0;
        for ( ; ( (auto356EE528_ai >= 0 && lv_index <= auto356EE528_ae) || (auto356EE528_ai < 0 && lv_index >= auto356EE528_ae) ) ; lv_index += auto356EE528_ai ) {
            lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_unit_count[lv_index] = lib1_gv_player[lp_player].lv_new_discard.lv_card[lp_discard_index].lv_unit_count[lv_index];
            lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_unit_type[lv_index] = lib1_gv_player[lp_player].lv_new_discard.lv_card[lp_discard_index].lv_unit_type[lv_index];
        }
        lv_index = 0;
        for ( ; ( (autoD64276D0_ai >= 0 && lv_index <= autoD64276D0_ae) || (autoD64276D0_ai < 0 && lv_index >= autoD64276D0_ae) ) ; lv_index += autoD64276D0_ai ) {
            lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_effect[lv_index] = lib1_gv_player[lp_player].lv_new_discard.lv_card[lp_discard_index].lv_effect[lv_index];
        }
    }
    lib1_gf_RemoveCardFromDiscard(lp_player, lp_discard_index);
    lib1_gf_ShuffleDeck(lp_player);
    lib1_gf_UpdateDeckUI(lp_player);
}

void lib1_gf_GenerateCardToDiscard (int lp_player, int lp_card_id) {
    // Variable Declarations
    int lv_discard_index;
    int lv_index;

    // Automatic Variable Declarations
    const int autoCEEEB16F_ae = lib1_gv_mAX_UNIT_TYPE_PER_CARD;
    const int autoCEEEB16F_ai = 1;
    const int auto23B5BE70_ae = lib1_gv_eF_MAX;
    const int auto23B5BE70_ai = 1;

    // Variable Initialization

    // Implementation
    lv_discard_index = lib1_gf_FirstEmptyDiscardSlot(lp_player);
    if ((lv_discard_index > lib1_gv_dISCARD_LIMIT)) {
        lib1_gf_ShuffleDiscard(lp_player);
        lv_discard_index = lib1_gv_dISCARD_LIMIT;
    }

    lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_index].lv_default_effect = lib1_gv_card[lp_card_id].lv_default_effect;
    lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_index].lv_gas = lib1_gv_card[lp_card_id].lv_gas;
    lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_index].lv_gas_adjustment = lib1_gv_card[lp_card_id].lv_gas_adjustment;
    lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_index].lv_id = lib1_gv_card[lp_card_id].lv_id;
    lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_index].lv_image = lib1_gv_card[lp_card_id].lv_image;
    lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_index].lv_mineral = lib1_gv_card[lp_card_id].lv_mineral;
    lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_index].lv_mineral_adjustment = lib1_gv_card[lp_card_id].lv_mineral_adjustment;
    lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_index].lv_name = lib1_gv_card[lp_card_id].lv_name;
    lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_index].lv_race = lib1_gv_card[lp_card_id].lv_race;
    lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_index].lv_rarity = lib1_gv_card[lp_card_id].lv_rarity;
    lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_index].lv_set = lib1_gv_card[lp_card_id].lv_set;
    lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_index].lv_sound = lib1_gv_card[lp_card_id].lv_sound;
    lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_index].lv_subtype = lib1_gv_card[lp_card_id].lv_subtype;
    lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_index].lv_base_text = lib1_gv_card[lp_card_id].lv_base_text;
    lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_index].lv_type = lib1_gv_card[lp_card_id].lv_type;
    lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_index].lv_rush = lib1_gv_card[lp_card_id].lv_rush;
    lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_index].lv_delay = lib1_gv_card[lp_card_id].lv_delay;
    lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_index].lv_heroic = lib1_gv_card[lp_card_id].lv_heroic;
    lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_index].lv_transform = lib1_gv_card[lp_card_id].lv_transform;
    lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_index].lv_detection = lib1_gv_card[lp_card_id].lv_detection;
    lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_index].lv_stream = lib1_gv_card[lp_card_id].lv_stream;
    lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_index].lv_channel = lib1_gv_card[lp_card_id].lv_channel;
    lv_index = 0;
    for ( ; ( (autoCEEEB16F_ai >= 0 && lv_index <= autoCEEEB16F_ae) || (autoCEEEB16F_ai < 0 && lv_index >= autoCEEEB16F_ae) ) ; lv_index += autoCEEEB16F_ai ) {
        lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_index].lv_unit_count[lv_index] = lib1_gv_card[lp_card_id].lv_unit_count[lv_index];
        lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_index].lv_unit_type[lv_index] = lib1_gv_card[lp_card_id].lv_unit_type[lv_index];
    }
    lv_index = 0;
    for ( ; ( (auto23B5BE70_ai >= 0 && lv_index <= auto23B5BE70_ae) || (auto23B5BE70_ai < 0 && lv_index >= auto23B5BE70_ae) ) ; lv_index += auto23B5BE70_ai ) {
        lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_index].lv_effect[lv_index] = lib1_gv_card[lp_card_id].lv_effect[lv_index];
    }
}

void lib1_gf_DiscardCardFromHandtoDiscard (int lp_player, int lp_hand_index_to_remove) {
    // Variable Declarations
    int lv_discard_slot;
    int lv_index;

    // Automatic Variable Declarations
    const int auto5D4ED0EC_ae = lib1_gv_mAX_UNIT_TYPE_PER_CARD;
    const int auto5D4ED0EC_ai = 1;
    const int auto1731F4DC_ae = lib1_gv_eF_MAX;
    const int auto1731F4DC_ai = 1;

    // Variable Initialization

    // Implementation
    lv_discard_slot = lib1_gf_FirstEmptyDiscardSlot(lp_player);
    if ((lv_discard_slot > lib1_gv_dISCARD_LIMIT)) {
        lib1_gf_ShuffleDiscard(lp_player);
        lv_discard_slot = lib1_gv_dISCARD_LIMIT;
    }

    lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_slot].lv_base_text = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index_to_remove].lv_base_text;
    lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_slot].lv_buried = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index_to_remove].lv_buried;
    lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_slot].lv_channel = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index_to_remove].lv_channel;
    lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_slot].lv_default_effect = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index_to_remove].lv_default_effect;
    lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_slot].lv_default_text = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index_to_remove].lv_default_text;
    lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_slot].lv_delay = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index_to_remove].lv_delay;
    lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_slot].lv_detection = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index_to_remove].lv_detection;
    lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_slot].lv_gas = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index_to_remove].lv_gas;
    lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_slot].lv_gas_adjustment = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index_to_remove].lv_gas_adjustment;
    lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_slot].lv_heroic = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index_to_remove].lv_heroic;
    lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_slot].lv_id = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index_to_remove].lv_id;
    lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_slot].lv_image = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index_to_remove].lv_image;
    lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_slot].lv_mineral = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index_to_remove].lv_mineral;
    lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_slot].lv_mineral_adjustment = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index_to_remove].lv_mineral_adjustment;
    lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_slot].lv_name = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index_to_remove].lv_name;
    lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_slot].lv_promo = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index_to_remove].lv_promo;
    lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_slot].lv_race = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index_to_remove].lv_race;
    lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_slot].lv_rarity = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index_to_remove].lv_rarity;
    lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_slot].lv_rush = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index_to_remove].lv_rush;
    lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_slot].lv_set = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index_to_remove].lv_set;
    lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_slot].lv_sound = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index_to_remove].lv_sound;
    lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_slot].lv_stream = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index_to_remove].lv_stream;
    lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_slot].lv_subtype = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index_to_remove].lv_subtype;
    lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_slot].lv_transform = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index_to_remove].lv_transform;
    lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_slot].lv_type = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index_to_remove].lv_type;
    lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_slot].lv_locked_by_player = 0;
    lv_index = 0;
    for ( ; ( (auto5D4ED0EC_ai >= 0 && lv_index <= auto5D4ED0EC_ae) || (auto5D4ED0EC_ai < 0 && lv_index >= auto5D4ED0EC_ae) ) ; lv_index += auto5D4ED0EC_ai ) {
        lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_slot].lv_unit_count[lv_index] = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index_to_remove].lv_unit_count[lv_index];
        lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_slot].lv_unit_type[lv_index] = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index_to_remove].lv_unit_type[lv_index];
    }
    lv_index = 0;
    for ( ; ( (auto1731F4DC_ai >= 0 && lv_index <= auto1731F4DC_ae) || (auto1731F4DC_ai < 0 && lv_index >= auto1731F4DC_ae) ) ; lv_index += auto1731F4DC_ai ) {
        lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_slot].lv_effect[lv_index] = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index_to_remove].lv_effect[lv_index];
    }
    lib1_gf_RemoveCardFromHand(lp_player, lp_hand_index_to_remove);
}

void lib1_gf_DiscardCardFromDecktoDiscard (int lp_player, int lp_deck_index_to_remove) {
    // Variable Declarations
    int lv_discard_slot;
    int lv_index;

    // Automatic Variable Declarations
    const int auto9E05864B_ae = lib1_gv_mAX_UNIT_TYPE_PER_CARD;
    const int auto9E05864B_ai = 1;
    const int auto6D6375C8_ae = lib1_gv_eF_MAX;
    const int auto6D6375C8_ai = 1;

    // Variable Initialization

    // Implementation
    lv_discard_slot = lib1_gf_FirstEmptyDiscardSlot(lp_player);
    if ((lv_discard_slot > lib1_gv_dISCARD_LIMIT)) {
        lib1_gf_ShuffleDiscard(lp_player);
        lv_discard_slot = lib1_gv_dISCARD_LIMIT;
    }

    lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_slot].lv_base_text = lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index_to_remove].lv_base_text;
    lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_slot].lv_buried = lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index_to_remove].lv_buried;
    lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_slot].lv_channel = lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index_to_remove].lv_channel;
    lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_slot].lv_default_effect = lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index_to_remove].lv_default_effect;
    lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_slot].lv_default_text = lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index_to_remove].lv_default_text;
    lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_slot].lv_delay = lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index_to_remove].lv_delay;
    lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_slot].lv_detection = lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index_to_remove].lv_detection;
    lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_slot].lv_gas = lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index_to_remove].lv_gas;
    lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_slot].lv_gas_adjustment = lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index_to_remove].lv_gas_adjustment;
    lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_slot].lv_heroic = lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index_to_remove].lv_heroic;
    lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_slot].lv_id = lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index_to_remove].lv_id;
    lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_slot].lv_image = lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index_to_remove].lv_image;
    lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_slot].lv_mineral = lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index_to_remove].lv_mineral;
    lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_slot].lv_mineral_adjustment = lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index_to_remove].lv_mineral_adjustment;
    lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_slot].lv_name = lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index_to_remove].lv_name;
    lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_slot].lv_promo = lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index_to_remove].lv_promo;
    lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_slot].lv_race = lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index_to_remove].lv_race;
    lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_slot].lv_rarity = lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index_to_remove].lv_rarity;
    lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_slot].lv_rush = lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index_to_remove].lv_rush;
    lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_slot].lv_set = lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index_to_remove].lv_set;
    lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_slot].lv_sound = lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index_to_remove].lv_sound;
    lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_slot].lv_stream = lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index_to_remove].lv_stream;
    lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_slot].lv_subtype = lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index_to_remove].lv_subtype;
    lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_slot].lv_transform = lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index_to_remove].lv_transform;
    lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_slot].lv_type = lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index_to_remove].lv_type;
    lv_index = 0;
    for ( ; ( (auto9E05864B_ai >= 0 && lv_index <= auto9E05864B_ae) || (auto9E05864B_ai < 0 && lv_index >= auto9E05864B_ae) ) ; lv_index += auto9E05864B_ai ) {
        lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_slot].lv_unit_count[lv_index] = lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index_to_remove].lv_unit_count[lv_index];
        lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_slot].lv_unit_type[lv_index] = lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index_to_remove].lv_unit_type[lv_index];
    }
    lv_index = 0;
    for ( ; ( (auto6D6375C8_ai >= 0 && lv_index <= auto6D6375C8_ae) || (auto6D6375C8_ai < 0 && lv_index >= auto6D6375C8_ae) ) ; lv_index += auto6D6375C8_ai ) {
        lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_slot].lv_effect[lv_index] = lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index_to_remove].lv_effect[lv_index];
    }
    lib1_gf_RemoveCardFromDeck(lp_player, lp_deck_index_to_remove);
}

void lib1_gf_DiscardAllCardsWithName (int lp_player, string lp_card_name) {
    // Variable Declarations
    int lv_hand_index;
    int lv_top_of_hand;

    // Automatic Variable Declarations
    const int auto7F409208_ae = 0;
    const int auto7F409208_ai = -1;

    // Variable Initialization

    // Implementation
    lv_top_of_hand = lib1_gf_TopofHand(lp_player);
    if ((lv_top_of_hand >= 0)) {
        lv_hand_index = lv_top_of_hand;
        for ( ; ( (auto7F409208_ai >= 0 && lv_hand_index <= auto7F409208_ae) || (auto7F409208_ai < 0 && lv_hand_index >= auto7F409208_ae) ) ; lv_hand_index += auto7F409208_ai ) {
            if ((lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_id == lib1_gf_GetCardIDByName(lp_card_name))) {
                lib1_gf_DiscardCardFromHandtoDiscard(lp_player, lv_hand_index);
            }

        }
    }

}

void lib1_gf_DiscardAllCardsWithType (int lp_player, string lp_type) {
    // Variable Declarations
    int lv_hand_index;
    int lv_top_of_hand;

    // Automatic Variable Declarations
    const int auto021FB597_ae = 0;
    const int auto021FB597_ai = -1;

    // Variable Initialization

    // Implementation
    lv_top_of_hand = lib1_gf_TopofHand(lp_player);
    if ((lv_top_of_hand >= 0)) {
        lv_hand_index = lv_top_of_hand;
        for ( ; ( (auto021FB597_ai >= 0 && lv_hand_index <= auto021FB597_ae) || (auto021FB597_ai < 0 && lv_hand_index >= auto021FB597_ae) ) ; lv_hand_index += auto021FB597_ai ) {
            if ((lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_type == lp_type)) {
                lib1_gf_DiscardCardFromHandtoDiscard(lp_player, lv_hand_index);
            }

        }
    }

}

void lib1_gf_DiscardFromDeckAllCardsWithType (int lp_player, string lp_type) {
    // Variable Declarations
    int lv_deck_index;
    int lv_top_of_deck;

    // Automatic Variable Declarations
    const int auto7E3AC17B_ae = 0;
    const int auto7E3AC17B_ai = -1;

    // Variable Initialization

    // Implementation
    lv_top_of_deck = lib1_gf_TopofDeck(lp_player);
    if ((lv_top_of_deck >= 0)) {
        lv_deck_index = lv_top_of_deck;
        for ( ; ( (auto7E3AC17B_ai >= 0 && lv_deck_index <= auto7E3AC17B_ae) || (auto7E3AC17B_ai < 0 && lv_deck_index >= auto7E3AC17B_ae) ) ; lv_deck_index += auto7E3AC17B_ai ) {
            if ((lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_type == lp_type)) {
                lib1_gf_DiscardCardFromDecktoDiscard(lp_player, lv_deck_index);
            }

        }
    }

}

void lib1_gf_GenerateCardforHand (int lp_player, int lp_card_id) {
    // Variable Declarations
    int lv_hand_index;
    int lv_index;

    // Automatic Variable Declarations
    const int autoB74DFE47_ae = lib1_gv_mAX_UNIT_TYPE_PER_CARD;
    const int autoB74DFE47_ai = 1;
    const int autoC3D6FC39_ae = lib1_gv_eF_MAX;
    const int autoC3D6FC39_ai = 1;

    // Variable Initialization

    // Implementation
    lv_hand_index = lib1_gf_FirstEmptyHandSlot(lp_player);
    if ((lv_hand_index > lib1_gf_HandLimit(lp_player))) {
    }
    else {
        lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_default_effect = lib1_gv_card[lp_card_id].lv_default_effect;
        lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_gas = lib1_gv_card[lp_card_id].lv_gas;
        lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_gas_adjustment = lib1_gv_card[lp_card_id].lv_gas_adjustment;
        lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_id = lib1_gv_card[lp_card_id].lv_id;
        lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_image = lib1_gv_card[lp_card_id].lv_image;
        lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_mineral = lib1_gv_card[lp_card_id].lv_mineral;
        lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_mineral_adjustment = lib1_gv_card[lp_card_id].lv_mineral_adjustment;
        lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_name = lib1_gv_card[lp_card_id].lv_name;
        lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_race = lib1_gv_card[lp_card_id].lv_race;
        lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_rarity = lib1_gv_card[lp_card_id].lv_rarity;
        lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_set = lib1_gv_card[lp_card_id].lv_set;
        lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_sound = lib1_gv_card[lp_card_id].lv_sound;
        lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_subtype = lib1_gv_card[lp_card_id].lv_subtype;
        lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_base_text = lib1_gv_card[lp_card_id].lv_base_text;
        lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_type = lib1_gv_card[lp_card_id].lv_type;
        lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_rush = lib1_gv_card[lp_card_id].lv_rush;
        lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_delay = lib1_gv_card[lp_card_id].lv_delay;
        lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_heroic = lib1_gv_card[lp_card_id].lv_heroic;
        lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_transform = lib1_gv_card[lp_card_id].lv_transform;
        lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_detection = lib1_gv_card[lp_card_id].lv_detection;
        lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_stream = lib1_gv_card[lp_card_id].lv_stream;
        lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_channel = lib1_gv_card[lp_card_id].lv_channel;
        lv_index = 0;
        for ( ; ( (autoB74DFE47_ai >= 0 && lv_index <= autoB74DFE47_ae) || (autoB74DFE47_ai < 0 && lv_index >= autoB74DFE47_ae) ) ; lv_index += autoB74DFE47_ai ) {
            lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_unit_count[lv_index] = lib1_gv_card[lp_card_id].lv_unit_count[lv_index];
            lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_unit_type[lv_index] = lib1_gv_card[lp_card_id].lv_unit_type[lv_index];
        }
        lv_index = 0;
        for ( ; ( (autoC3D6FC39_ai >= 0 && lv_index <= autoC3D6FC39_ae) || (autoC3D6FC39_ai < 0 && lv_index >= autoC3D6FC39_ae) ) ; lv_index += autoC3D6FC39_ai ) {
            lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_effect[lv_index] = lib1_gv_card[lp_card_id].lv_effect[lv_index];
        }
        lib1_gf_CreateCard(lp_player, lib1_gv_iNITIAL_CARD_X, lib1_gv_iNITIAL_CARD_Y, lp_card_id, "", -1, "hand", lv_hand_index);
        if ((lib1_gf_PlayerHasCardAtHandIndex(lp_player, lv_hand_index) == true) && (lib1_gv_player[lp_player].lv_hand.lv_card_button[lv_hand_index] == c_invalidDialogControlId)) {
            lib1_gf_CreateHandCardButton(lp_player, lv_hand_index);
        }

        DialogControlSetEnabled(lib1_gv_player[lp_player].lv_hand.lv_card_button[lv_hand_index], PlayerGroupSingle(lp_player), true);
    }
    lib1_gf_UpdateDeckUI(lp_player);
}

void lib1_gf_GenerateCardtoTopofDeck (int lp_player, int lp_card_id) {
    // Variable Declarations
    int lv_deck_index;
    int lv_index;

    // Automatic Variable Declarations
    const int auto613F39D5_ae = lib1_gv_mAX_UNIT_TYPE_PER_CARD;
    const int auto613F39D5_ai = 1;
    const int autoBFA7C705_ae = lib1_gv_eF_MAX;
    const int autoBFA7C705_ai = 1;

    // Variable Initialization

    // Implementation
    lv_deck_index = lib1_gf_FirstEmptyDeckSlot(lp_player);
    if ((lv_deck_index > lib1_gv_dECK_LIMIT)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, StringExternal("Param/Value/lib_1_693CEC8C"));
    }
    else {
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_default_effect = lib1_gv_card[lp_card_id].lv_default_effect;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_gas = lib1_gv_card[lp_card_id].lv_gas;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_gas_adjustment = lib1_gv_card[lp_card_id].lv_gas_adjustment;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_id = lib1_gv_card[lp_card_id].lv_id;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_image = lib1_gv_card[lp_card_id].lv_image;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_mineral = lib1_gv_card[lp_card_id].lv_mineral;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_mineral_adjustment = lib1_gv_card[lp_card_id].lv_mineral_adjustment;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_name = lib1_gv_card[lp_card_id].lv_name;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_race = lib1_gv_card[lp_card_id].lv_race;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_rarity = lib1_gv_card[lp_card_id].lv_rarity;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_set = lib1_gv_card[lp_card_id].lv_set;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_sound = lib1_gv_card[lp_card_id].lv_sound;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_subtype = lib1_gv_card[lp_card_id].lv_subtype;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_base_text = lib1_gv_card[lp_card_id].lv_base_text;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_type = lib1_gv_card[lp_card_id].lv_type;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_rush = lib1_gv_card[lp_card_id].lv_rush;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_delay = lib1_gv_card[lp_card_id].lv_delay;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_heroic = lib1_gv_card[lp_card_id].lv_heroic;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_transform = lib1_gv_card[lp_card_id].lv_transform;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_detection = lib1_gv_card[lp_card_id].lv_detection;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_stream = lib1_gv_card[lp_card_id].lv_stream;
        lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_channel = lib1_gv_card[lp_card_id].lv_channel;
        lv_index = 0;
        for ( ; ( (auto613F39D5_ai >= 0 && lv_index <= auto613F39D5_ae) || (auto613F39D5_ai < 0 && lv_index >= auto613F39D5_ae) ) ; lv_index += auto613F39D5_ai ) {
            lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_unit_count[lv_index] = lib1_gv_card[lp_card_id].lv_unit_count[lv_index];
            lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_unit_type[lv_index] = lib1_gv_card[lp_card_id].lv_unit_type[lv_index];
        }
        lv_index = 0;
        for ( ; ( (autoBFA7C705_ai >= 0 && lv_index <= autoBFA7C705_ae) || (autoBFA7C705_ai < 0 && lv_index >= autoBFA7C705_ae) ) ; lv_index += autoBFA7C705_ai ) {
            lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_effect[lv_index] = lib1_gv_card[lp_card_id].lv_effect[lv_index];
        }
    }
    lib1_gf_UpdateDeckUI(lp_player);
}

void lib1_gf_RemoveCardFromHand (int lp_player, int lp_hand_index_to_remove) {
    // Variable Declarations
    int lv_top_of_hand;
    int lv_hand_index;
    int lv_index;

    // Automatic Variable Declarations
    int auto9133AE43_ae;
    const int auto9133AE43_ai = 1;
    const int autoD8415240_ae = lib1_gv_mAX_UNIT_TYPE_PER_CARD;
    const int autoD8415240_ai = 1;
    const int auto4C958CF4_ae = lib1_gv_eF_MAX;
    const int auto4C958CF4_ai = 1;
    const int auto9FA268E8_ae = lib1_gv_bOOSTED_HAND_LIMIT;
    const int auto9FA268E8_ai = 1;

    // Variable Initialization

    // Implementation
    lv_top_of_hand = lib1_gf_TopofHand(lp_player);
    lib1_gf_FadeandDestroyDialog(lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index_to_remove].lv_ui.lv_dialog, 0.3);
    lib1_gf_DestroyHandCardButton(lp_player, lv_top_of_hand);
    auto9133AE43_ae = lv_top_of_hand;
    lv_hand_index = lp_hand_index_to_remove;
    for ( ; ( (auto9133AE43_ai >= 0 && lv_hand_index <= auto9133AE43_ae) || (auto9133AE43_ai < 0 && lv_hand_index >= auto9133AE43_ae) ) ; lv_hand_index += auto9133AE43_ai ) {
        if ((lv_hand_index == lib1_gv_bOOSTED_HAND_LIMIT)) {
            lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_name = "";
            lib1_gv_player[lp_player].lv_hand.lv_selected[lv_hand_index] = false;
        }
        else {
            lib1_gv_player[lp_player].lv_hand.lv_selected[lv_hand_index] = lib1_gv_player[lp_player].lv_hand.lv_selected[(lv_hand_index + 1)];
            lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_channel = lib1_gv_player[lp_player].lv_hand.lv_card[(lv_hand_index + 1)].lv_channel;
            lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_delay = lib1_gv_player[lp_player].lv_hand.lv_card[(lv_hand_index + 1)].lv_delay;
            lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_detection = lib1_gv_player[lp_player].lv_hand.lv_card[(lv_hand_index + 1)].lv_detection;
            lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_default_effect = lib1_gv_player[lp_player].lv_hand.lv_card[(lv_hand_index + 1)].lv_default_effect;
            lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_gas = lib1_gv_player[lp_player].lv_hand.lv_card[(lv_hand_index + 1)].lv_gas;
            lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_gas_adjustment = lib1_gv_player[lp_player].lv_hand.lv_card[(lv_hand_index + 1)].lv_gas_adjustment;
            lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_heroic = lib1_gv_player[lp_player].lv_hand.lv_card[(lv_hand_index + 1)].lv_heroic;
            lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_id = lib1_gv_player[lp_player].lv_hand.lv_card[(lv_hand_index + 1)].lv_id;
            lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_image = lib1_gv_player[lp_player].lv_hand.lv_card[(lv_hand_index + 1)].lv_image;
            lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_mineral = lib1_gv_player[lp_player].lv_hand.lv_card[(lv_hand_index + 1)].lv_mineral;
            lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_mineral_adjustment = lib1_gv_player[lp_player].lv_hand.lv_card[(lv_hand_index + 1)].lv_mineral_adjustment;
            lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_name = lib1_gv_player[lp_player].lv_hand.lv_card[(lv_hand_index + 1)].lv_name;
            lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_race = lib1_gv_player[lp_player].lv_hand.lv_card[(lv_hand_index + 1)].lv_race;
            lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_rarity = lib1_gv_player[lp_player].lv_hand.lv_card[(lv_hand_index + 1)].lv_rarity;
            lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_rush = lib1_gv_player[lp_player].lv_hand.lv_card[(lv_hand_index + 1)].lv_rush;
            lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_stream = lib1_gv_player[lp_player].lv_hand.lv_card[(lv_hand_index + 1)].lv_stream;
            lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_set = lib1_gv_player[lp_player].lv_hand.lv_card[(lv_hand_index + 1)].lv_set;
            lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_sound = lib1_gv_player[lp_player].lv_hand.lv_card[(lv_hand_index + 1)].lv_sound;
            lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_subtype = lib1_gv_player[lp_player].lv_hand.lv_card[(lv_hand_index + 1)].lv_subtype;
            lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_base_text = lib1_gv_player[lp_player].lv_hand.lv_card[(lv_hand_index + 1)].lv_base_text;
            lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_transform = lib1_gv_player[lp_player].lv_hand.lv_card[(lv_hand_index + 1)].lv_transform;
            lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_type = lib1_gv_player[lp_player].lv_hand.lv_card[(lv_hand_index + 1)].lv_type;
            lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_locked_by_player = lib1_gv_player[lp_player].lv_hand.lv_card[(lv_hand_index + 1)].lv_locked_by_player;
            lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_ui.lv_background = lib1_gv_player[lp_player].lv_hand.lv_card[(lv_hand_index + 1)].lv_ui.lv_background;
            lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_ui.lv_border = lib1_gv_player[lp_player].lv_hand.lv_card[(lv_hand_index + 1)].lv_ui.lv_border;
            lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_ui.lv_dialog = lib1_gv_player[lp_player].lv_hand.lv_card[(lv_hand_index + 1)].lv_ui.lv_dialog;
            lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_ui.lv_gas_cost = lib1_gv_player[lp_player].lv_hand.lv_card[(lv_hand_index + 1)].lv_ui.lv_gas_cost;
            lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_ui.lv_gas_icon = lib1_gv_player[lp_player].lv_hand.lv_card[(lv_hand_index + 1)].lv_ui.lv_gas_icon;
            lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_ui.lv_image = lib1_gv_player[lp_player].lv_hand.lv_card[(lv_hand_index + 1)].lv_ui.lv_image;
            lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_ui.lv_image_frame = lib1_gv_player[lp_player].lv_hand.lv_card[(lv_hand_index + 1)].lv_ui.lv_image_frame;
            lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_ui.lv_mineral_cost = lib1_gv_player[lp_player].lv_hand.lv_card[(lv_hand_index + 1)].lv_ui.lv_mineral_cost;
            lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_ui.lv_mineral_icon = lib1_gv_player[lp_player].lv_hand.lv_card[(lv_hand_index + 1)].lv_ui.lv_mineral_icon;
            lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_ui.lv_name = lib1_gv_player[lp_player].lv_hand.lv_card[(lv_hand_index + 1)].lv_ui.lv_name;
            lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_ui.lv_name_frame = lib1_gv_player[lp_player].lv_hand.lv_card[(lv_hand_index + 1)].lv_ui.lv_name_frame;
            lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_ui.lv_race_background = lib1_gv_player[lp_player].lv_hand.lv_card[(lv_hand_index + 1)].lv_ui.lv_race_background;
            lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_ui.lv_rarity_icon = lib1_gv_player[lp_player].lv_hand.lv_card[(lv_hand_index + 1)].lv_ui.lv_rarity_icon;
            lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_ui.lv_selected_indicator = lib1_gv_player[lp_player].lv_hand.lv_card[(lv_hand_index + 1)].lv_ui.lv_selected_indicator;
            lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_ui.lv_set_icon = lib1_gv_player[lp_player].lv_hand.lv_card[(lv_hand_index + 1)].lv_ui.lv_set_icon;
            lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_ui.lv_size = lib1_gv_player[lp_player].lv_hand.lv_card[(lv_hand_index + 1)].lv_ui.lv_size;
            lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_ui.lv_text = lib1_gv_player[lp_player].lv_hand.lv_card[(lv_hand_index + 1)].lv_ui.lv_text;
            lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_ui.lv_text_frame = lib1_gv_player[lp_player].lv_hand.lv_card[(lv_hand_index + 1)].lv_ui.lv_text_frame;
            lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_ui.lv_type = lib1_gv_player[lp_player].lv_hand.lv_card[(lv_hand_index + 1)].lv_ui.lv_type;
            lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_ui.lv_channel_indicator = lib1_gv_player[lp_player].lv_hand.lv_card[(lv_hand_index + 1)].lv_ui.lv_channel_indicator;
            lib1_gv_player[lp_player].lv_hand.lv_channel_enabled[lv_hand_index] = lib1_gv_player[lp_player].lv_hand.lv_channel_enabled[(lv_hand_index + 1)];
            lv_index = 0;
            for ( ; ( (autoD8415240_ai >= 0 && lv_index <= autoD8415240_ae) || (autoD8415240_ai < 0 && lv_index >= autoD8415240_ae) ) ; lv_index += autoD8415240_ai ) {
                lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_unit_count[lv_index] = lib1_gv_player[lp_player].lv_hand.lv_card[(lv_hand_index + 1)].lv_unit_count[lv_index];
                lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_unit_type[lv_index] = lib1_gv_player[lp_player].lv_hand.lv_card[(lv_hand_index + 1)].lv_unit_type[lv_index];
            }
            lv_index = 0;
            for ( ; ( (auto4C958CF4_ai >= 0 && lv_index <= auto4C958CF4_ae) || (auto4C958CF4_ai < 0 && lv_index >= auto4C958CF4_ae) ) ; lv_index += auto4C958CF4_ai ) {
                lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_effect[lv_index] = lib1_gv_player[lp_player].lv_hand.lv_card[(lv_hand_index + 1)].lv_effect[lv_index];
            }
        }
    }
    lib1_gf_UpdateHandCardButtonPositions(lp_player);
    lv_hand_index = lp_hand_index_to_remove;
    for ( ; ( (auto9FA268E8_ai >= 0 && lv_hand_index <= auto9FA268E8_ae) || (auto9FA268E8_ai < 0 && lv_hand_index >= auto9FA268E8_ae) ) ; lv_hand_index += auto9FA268E8_ai ) {
        if ((lib1_gf_PlayerHasCardAtHandIndex(lp_player, lv_hand_index) == true)) {
            DialogSetRenderPriority(lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_ui.lv_dialog, lib1_gf_HandCardRenderPriority(lv_hand_index, false));
        }
        else {
            break;
        }
    }
    lib1_gf_CancelHover(lp_player);
    lib1_gf_UpdateDeckUI(lp_player);
}

void lib1_gf_RemoveCardFromDeck (int lp_player, int lp_deck_index_to_remove) {
    // Variable Declarations
    int lv_top_of_deck;
    int lv_deck_index;
    int lv_index;

    // Automatic Variable Declarations
    int auto72DFAA8D_ae;
    const int auto72DFAA8D_ai = 1;
    const int auto37A3F3E4_ae = lib1_gv_mAX_UNIT_TYPE_PER_CARD;
    const int auto37A3F3E4_ai = 1;
    const int auto5B18A090_ae = lib1_gv_eF_MAX;
    const int auto5B18A090_ai = 1;

    // Variable Initialization

    // Implementation
    lv_top_of_deck = lib1_gf_TopofDeck(lp_player);
    auto72DFAA8D_ae = lv_top_of_deck;
    lv_deck_index = lp_deck_index_to_remove;
    for ( ; ( (auto72DFAA8D_ai >= 0 && lv_deck_index <= auto72DFAA8D_ae) || (auto72DFAA8D_ai < 0 && lv_deck_index >= auto72DFAA8D_ae) ) ; lv_deck_index += auto72DFAA8D_ai ) {
        if ((lv_deck_index == lib1_gv_dECK_LIMIT)) {
            lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_name = "";
        }
        else {
            lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_delay = lib1_gv_player[lp_player].lv_deck.lv_card[(lv_deck_index + 1)].lv_delay;
            lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_detection = lib1_gv_player[lp_player].lv_deck.lv_card[(lv_deck_index + 1)].lv_detection;
            lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_default_effect = lib1_gv_player[lp_player].lv_deck.lv_card[(lv_deck_index + 1)].lv_default_effect;
            lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_gas = lib1_gv_player[lp_player].lv_deck.lv_card[(lv_deck_index + 1)].lv_gas;
            lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_gas_adjustment = lib1_gv_player[lp_player].lv_deck.lv_card[(lv_deck_index + 1)].lv_gas_adjustment;
            lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_heroic = lib1_gv_player[lp_player].lv_deck.lv_card[(lv_deck_index + 1)].lv_heroic;
            lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_id = lib1_gv_player[lp_player].lv_deck.lv_card[(lv_deck_index + 1)].lv_id;
            lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_image = lib1_gv_player[lp_player].lv_deck.lv_card[(lv_deck_index + 1)].lv_image;
            lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_mineral = lib1_gv_player[lp_player].lv_deck.lv_card[(lv_deck_index + 1)].lv_mineral;
            lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_mineral_adjustment = lib1_gv_player[lp_player].lv_deck.lv_card[(lv_deck_index + 1)].lv_mineral_adjustment;
            lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_name = lib1_gv_player[lp_player].lv_deck.lv_card[(lv_deck_index + 1)].lv_name;
            lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_race = lib1_gv_player[lp_player].lv_deck.lv_card[(lv_deck_index + 1)].lv_race;
            lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_rarity = lib1_gv_player[lp_player].lv_deck.lv_card[(lv_deck_index + 1)].lv_rarity;
            lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_rush = lib1_gv_player[lp_player].lv_deck.lv_card[(lv_deck_index + 1)].lv_rush;
            lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_stream = lib1_gv_player[lp_player].lv_deck.lv_card[(lv_deck_index + 1)].lv_stream;
            lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_set = lib1_gv_player[lp_player].lv_deck.lv_card[(lv_deck_index + 1)].lv_set;
            lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_sound = lib1_gv_player[lp_player].lv_deck.lv_card[(lv_deck_index + 1)].lv_sound;
            lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_subtype = lib1_gv_player[lp_player].lv_deck.lv_card[(lv_deck_index + 1)].lv_subtype;
            lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_base_text = lib1_gv_player[lp_player].lv_deck.lv_card[(lv_deck_index + 1)].lv_base_text;
            lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_transform = lib1_gv_player[lp_player].lv_deck.lv_card[(lv_deck_index + 1)].lv_transform;
            lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_type = lib1_gv_player[lp_player].lv_deck.lv_card[(lv_deck_index + 1)].lv_type;
            lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_channel = lib1_gv_player[lp_player].lv_deck.lv_card[(lv_deck_index + 1)].lv_channel;
            lv_index = 0;
            for ( ; ( (auto37A3F3E4_ai >= 0 && lv_index <= auto37A3F3E4_ae) || (auto37A3F3E4_ai < 0 && lv_index >= auto37A3F3E4_ae) ) ; lv_index += auto37A3F3E4_ai ) {
                lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_unit_count[lv_index] = lib1_gv_player[lp_player].lv_deck.lv_card[(lv_deck_index + 1)].lv_unit_count[lv_index];
                lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_unit_type[lv_index] = lib1_gv_player[lp_player].lv_deck.lv_card[(lv_deck_index + 1)].lv_unit_type[lv_index];
            }
            lv_index = 0;
            for ( ; ( (auto5B18A090_ai >= 0 && lv_index <= auto5B18A090_ae) || (auto5B18A090_ai < 0 && lv_index >= auto5B18A090_ae) ) ; lv_index += auto5B18A090_ai ) {
                lib1_gv_player[lp_player].lv_deck.lv_card[lv_deck_index].lv_effect[lv_index] = lib1_gv_player[lp_player].lv_deck.lv_card[(lv_deck_index + 1)].lv_effect[lv_index];
            }
        }
    }
    lib1_gf_UpdateDeckUI(lp_player);
}

void lib1_gf_RemoveCardFromDiscard (int lp_player, int lp_discard_index_to_remove) {
    // Variable Declarations
    int lv_top_of_discard;
    int lv_discard_index;
    int lv_index;

    // Automatic Variable Declarations
    int autoBA9BF7B8_ae;
    const int autoBA9BF7B8_ai = 1;
    const int autoFE388EED_ae = lib1_gv_mAX_UNIT_TYPE_PER_CARD;
    const int autoFE388EED_ai = 1;
    const int autoEFE3617F_ae = lib1_gv_eF_MAX;
    const int autoEFE3617F_ai = 1;

    // Variable Initialization

    // Implementation
    lv_top_of_discard = lib1_gf_TopofDiscard(lp_player);
    autoBA9BF7B8_ae = lv_top_of_discard;
    lv_discard_index = lp_discard_index_to_remove;
    for ( ; ( (autoBA9BF7B8_ai >= 0 && lv_discard_index <= autoBA9BF7B8_ae) || (autoBA9BF7B8_ai < 0 && lv_discard_index >= autoBA9BF7B8_ae) ) ; lv_discard_index += autoBA9BF7B8_ai ) {
        if ((lv_discard_index == lib1_gv_dISCARD_LIMIT)) {
            lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_index].lv_id = -1;
            lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_index].lv_name = "";
        }
        else {
            lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_index].lv_delay = lib1_gv_player[lp_player].lv_new_discard.lv_card[(lv_discard_index + 1)].lv_delay;
            lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_index].lv_detection = lib1_gv_player[lp_player].lv_new_discard.lv_card[(lv_discard_index + 1)].lv_detection;
            lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_index].lv_default_effect = lib1_gv_player[lp_player].lv_new_discard.lv_card[(lv_discard_index + 1)].lv_default_effect;
            lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_index].lv_gas = lib1_gv_player[lp_player].lv_new_discard.lv_card[(lv_discard_index + 1)].lv_gas;
            lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_index].lv_gas_adjustment = lib1_gv_player[lp_player].lv_new_discard.lv_card[(lv_discard_index + 1)].lv_gas_adjustment;
            lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_index].lv_heroic = lib1_gv_player[lp_player].lv_new_discard.lv_card[(lv_discard_index + 1)].lv_heroic;
            lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_index].lv_id = lib1_gv_player[lp_player].lv_new_discard.lv_card[(lv_discard_index + 1)].lv_id;
            lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_index].lv_image = lib1_gv_player[lp_player].lv_new_discard.lv_card[(lv_discard_index + 1)].lv_image;
            lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_index].lv_mineral = lib1_gv_player[lp_player].lv_new_discard.lv_card[(lv_discard_index + 1)].lv_mineral;
            lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_index].lv_mineral_adjustment = lib1_gv_player[lp_player].lv_new_discard.lv_card[(lv_discard_index + 1)].lv_mineral_adjustment;
            lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_index].lv_name = lib1_gv_player[lp_player].lv_new_discard.lv_card[(lv_discard_index + 1)].lv_name;
            lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_index].lv_race = lib1_gv_player[lp_player].lv_new_discard.lv_card[(lv_discard_index + 1)].lv_race;
            lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_index].lv_rarity = lib1_gv_player[lp_player].lv_new_discard.lv_card[(lv_discard_index + 1)].lv_rarity;
            lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_index].lv_rush = lib1_gv_player[lp_player].lv_new_discard.lv_card[(lv_discard_index + 1)].lv_rush;
            lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_index].lv_stream = lib1_gv_player[lp_player].lv_new_discard.lv_card[(lv_discard_index + 1)].lv_stream;
            lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_index].lv_set = lib1_gv_player[lp_player].lv_new_discard.lv_card[(lv_discard_index + 1)].lv_set;
            lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_index].lv_sound = lib1_gv_player[lp_player].lv_new_discard.lv_card[(lv_discard_index + 1)].lv_sound;
            lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_index].lv_subtype = lib1_gv_player[lp_player].lv_new_discard.lv_card[(lv_discard_index + 1)].lv_subtype;
            lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_index].lv_base_text = lib1_gv_player[lp_player].lv_new_discard.lv_card[(lv_discard_index + 1)].lv_base_text;
            lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_index].lv_transform = lib1_gv_player[lp_player].lv_new_discard.lv_card[(lv_discard_index + 1)].lv_transform;
            lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_index].lv_type = lib1_gv_player[lp_player].lv_new_discard.lv_card[(lv_discard_index + 1)].lv_type;
            lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_index].lv_channel = lib1_gv_player[lp_player].lv_new_discard.lv_card[(lv_discard_index + 1)].lv_channel;
            lv_index = 0;
            for ( ; ( (autoFE388EED_ai >= 0 && lv_index <= autoFE388EED_ae) || (autoFE388EED_ai < 0 && lv_index >= autoFE388EED_ae) ) ; lv_index += autoFE388EED_ai ) {
                lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_index].lv_unit_count[lv_index] = lib1_gv_player[lp_player].lv_new_discard.lv_card[(lv_discard_index + 1)].lv_unit_count[lv_index];
                lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_index].lv_unit_type[lv_index] = lib1_gv_player[lp_player].lv_new_discard.lv_card[(lv_discard_index + 1)].lv_unit_type[lv_index];
            }
            lv_index = 0;
            for ( ; ( (autoEFE3617F_ai >= 0 && lv_index <= autoEFE3617F_ae) || (autoEFE3617F_ai < 0 && lv_index >= autoEFE3617F_ae) ) ; lv_index += autoEFE3617F_ai ) {
                lib1_gv_player[lp_player].lv_new_discard.lv_card[lv_discard_index].lv_effect[lv_index] = lib1_gv_player[lp_player].lv_new_discard.lv_card[(lv_discard_index + 1)].lv_effect[lv_index];
            }
        }
    }
}

trigger auto_lib1_gf_MillCard_Trigger = null;
int auto_lib1_gf_MillCard_lp_player;

void lib1_gf_MillCard (int lp_player) {
    auto_lib1_gf_MillCard_lp_player = lp_player;

    if (auto_lib1_gf_MillCard_Trigger == null) {
        auto_lib1_gf_MillCard_Trigger = TriggerCreate("auto_lib1_gf_MillCard_TriggerFunc");
    }

    TriggerExecute(auto_lib1_gf_MillCard_Trigger, false, false);
}

bool auto_lib1_gf_MillCard_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_lib1_gf_MillCard_lp_player;

    // Variable Declarations
    int lv_draw_index;
    int lv_top_of_deck;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_top_of_deck = lib1_gf_TopofDeck(lp_player);
    if ((lv_top_of_deck >= 0) && (lib1_gv_player[lp_player].lv_prevent_overdraw_flag == false)) {
        if ((GameGetMissionTime() > (lib1_gv_player[lp_player].lv_deck.lv_last_milled_timestamp + 0.75))) {
            lib1_gf_CreateCard(lp_player, lib1_gv_iNITIAL_CARD_X, lib1_gv_iNITIAL_CARD_Y, lib1_gv_player[lp_player].lv_deck.lv_card[lv_top_of_deck].lv_id, "deck", lv_top_of_deck, "milled", -1);
            lib1_gf_DiscardCardFromDecktoDiscard(lp_player, lv_top_of_deck);
            lib1_gv_player[lp_player].lv_deck.lv_last_milled_timestamp = GameGetMissionTime();
        }
        else {
            lib1_gv_player[lp_player].lv_deck.lv_last_milled_timestamp = (lib1_gv_player[lp_player].lv_deck.lv_last_milled_timestamp + 0.75);
            Wait(((lib1_gv_player[lp_player].lv_deck.lv_last_milled_timestamp + 0.75) - GameGetMissionTime()), c_timeGame);
            lv_top_of_deck = lib1_gf_TopofDeck(lp_player);
            lib1_gf_CreateCard(lp_player, lib1_gv_iNITIAL_CARD_X, lib1_gv_iNITIAL_CARD_Y, lib1_gv_player[lp_player].lv_deck.lv_card[lv_top_of_deck].lv_id, "deck", lv_top_of_deck, "milled", -1);
            lib1_gf_DiscardCardFromDecktoDiscard(lp_player, lv_top_of_deck);
        }
    }

    return true;
}

trigger auto_lib1_gf_FatigueDamage_Trigger = null;
int auto_lib1_gf_FatigueDamage_lp_player;

void lib1_gf_FatigueDamage (int lp_player) {
    auto_lib1_gf_FatigueDamage_lp_player = lp_player;

    if (auto_lib1_gf_FatigueDamage_Trigger == null) {
        auto_lib1_gf_FatigueDamage_Trigger = TriggerCreate("auto_lib1_gf_FatigueDamage_TriggerFunc");
    }

    TriggerExecute(auto_lib1_gf_FatigueDamage_Trigger, false, false);
}

bool auto_lib1_gf_FatigueDamage_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_lib1_gf_FatigueDamage_lp_player;

    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto98C436A2_g;
    int auto98C436A2_u;

    // Variable Initialization

    // Implementation
    Wait(0.1, c_timeGame);
    auto98C436A2_g = UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0);
    auto98C436A2_u = UnitGroupCount(auto98C436A2_g, c_unitCountAll);
    for (;; auto98C436A2_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto98C436A2_g, auto98C436A2_u);
        if (lv_unit == null) { break; }
        if ((UnitAddOnParent(lv_unit) == null)) {
            UnitDamage(lv_unit, "FatigueDamage", lv_unit, 0.0);
            TextTagCreate(StringExternal("Param/Value/lib_1_FE3A6A67"), 25, PointWithOffsetPolar(UnitGetPosition(lv_unit), RandomFixed(0.0, (UnitGetPropertyFixed(lv_unit, c_unitPropRadius, c_unitPropCurrent) / 2.0)), libNtve_gf_RandomAngle()), 1.0, true, false, PlayerGroupAll());
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 5.0);
            TextTagSetVelocity(TextTagLastCreated(), 0.5, 90.0);
            TextTagSetColor(TextTagLastCreated(), c_textTagColorText, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_player, false)));
        }

    }
    UnitDamage(lib1_gv_keystone[lib1_gv_player[lp_player].lv_team], "FatigueDamage", lib1_gv_keystone[lib1_gv_player[lp_player].lv_team], 0.0);
    TextTagCreate(StringExternal("Param/Value/lib_1_3CE415F3"), 25, PointWithOffsetPolar(UnitGetPosition(lib1_gv_keystone[lib1_gv_player[lp_player].lv_team]), RandomFixed(0.0, (UnitGetPropertyFixed(lib1_gv_keystone[lib1_gv_player[lp_player].lv_team], c_unitPropRadius, c_unitPropCurrent) / 2.0)), libNtve_gf_RandomAngle()), 1.0, true, false, PlayerGroupAll());
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 5.0);
    TextTagSetVelocity(TextTagLastCreated(), 0.5, 90.0);
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_player, false)));
    return true;
}

void lib1_gf_TransformHandCard (int lp_player, int lp_hand_index) {
    // Variable Declarations
    int lv_index;
    int lv_old_dialog;

    // Automatic Variable Declarations
    const int autoD1771892_ae = lib1_gv_mAX_UNIT_TYPE_PER_CARD;
    const int autoD1771892_ai = 1;
    const int auto0E8B2726_ae = lib1_gv_eF_MAX;
    const int auto0E8B2726_ai = 1;

    // Variable Initialization
    lv_old_dialog = c_invalidDialogId;

    // Implementation
    lv_old_dialog = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_ui.lv_dialog;
    DialogSetRenderPriority(lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_ui.lv_dialog, (lib1_gf_HoveredCardRenderPriority() + 1));
    lib1_gf_FadeandDestroyDialog(lv_old_dialog, 0.5);
    if ((lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_delay == lib1_gv_card[lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_id].lv_delay)) {
        lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_delay = lib1_gv_card[lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_transform].lv_delay;
    }

    if ((lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_heroic == lib1_gv_card[lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_id].lv_heroic)) {
        lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_heroic = lib1_gv_card[lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_transform].lv_heroic;
    }

    if ((lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_rush == lib1_gv_card[lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_id].lv_rush)) {
        lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_rush = lib1_gv_card[lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_transform].lv_rush;
    }

    if ((lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_stream == lib1_gv_card[lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_id].lv_stream)) {
        lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_stream = lib1_gv_card[lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_transform].lv_stream;
    }

    lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_name = lib1_gv_card[lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_transform].lv_name;
    lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_image = lib1_gv_card[lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_transform].lv_image;
    lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_default_effect = lib1_gv_card[lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_transform].lv_default_effect;
    lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_sound = lib1_gv_card[lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_transform].lv_sound;
    lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_base_text = lib1_gv_card[lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_transform].lv_base_text;
    lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_type = lib1_gv_card[lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_transform].lv_type;
    lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_subtype = lib1_gv_card[lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_transform].lv_subtype;
    lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_detection = lib1_gv_card[lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_transform].lv_detection;
    lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_channel = lib1_gv_card[lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_transform].lv_channel;
    lv_index = 0;
    for ( ; ( (autoD1771892_ai >= 0 && lv_index <= autoD1771892_ae) || (autoD1771892_ai < 0 && lv_index >= autoD1771892_ae) ) ; lv_index += autoD1771892_ai ) {
        lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_unit_count[lv_index] = lib1_gv_card[lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_transform].lv_unit_count[lv_index];
        lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_unit_type[lv_index] = lib1_gv_card[lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_transform].lv_unit_type[lv_index];
    }
    lv_index = 0;
    for ( ; ( (auto0E8B2726_ai >= 0 && lv_index <= auto0E8B2726_ae) || (auto0E8B2726_ai < 0 && lv_index >= auto0E8B2726_ae) ) ; lv_index += auto0E8B2726_ai ) {
        lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_effect[lv_index] = lib1_gv_card[lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_transform].lv_effect[lv_index];
    }
    if ((lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_mineral == lib1_gv_card[lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_id].lv_mineral)) {
        lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_mineral = lib1_gv_card[lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_transform].lv_mineral;
    }

    if ((lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_gas == lib1_gv_card[lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_id].lv_gas)) {
        lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_gas = lib1_gv_card[lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_transform].lv_gas;
    }

    lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_id = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_transform;
    lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_transform = lib1_gv_card[lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_transform].lv_transform;
    DialogDestroy(lib1_gv_card_hover_dialog[lp_player]);
    lib1_gf_CreateCard(lp_player, DialogGetOffsetX(lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_ui.lv_dialog), DialogGetOffsetY(lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_ui.lv_dialog), lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_id, "hand", lp_hand_index, "hand", lp_hand_index);
    lib1_gf_ResizeHandCard(lp_player, lp_hand_index, lib1_gv_hOVER_OVER_PERCENT);
    if ((lib1_gv_player[lp_player].lv_hand.lv_selected[lp_hand_index] == true)) {
        DialogControlFadeTransparency(lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_ui.lv_selected_indicator, PlayerGroupAll(), 0.0, 0.0);
    }

    DialogSetRenderPriority(lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_ui.lv_dialog, lib1_gf_HoveredCardRenderPriority());
    lib1_gf_RefreshUIRenderPriority();
}

void lib1_gf_PlayHandCardFromEffect (int lp_player, int lp_hand_index, bool lp_count_as_played_by_player) {
    // Variable Declarations
    int lv_effect_class;
    int lv_first_empty_effect_slot;
    unitgroup lv_units_created;
    bool lv_channel;

    // Automatic Variable Declarations
    const int auto4E69136A_ae = lib1_gv_eF_MAX;
    const int auto4E69136A_ai = 1;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Implementation
    if ((lp_count_as_played_by_player == true)) {
        lib1_gv_player[lp_player].lv_cards_played_this_turn = (lib1_gv_player[lp_player].lv_cards_played_this_turn + 1);
    }

    lv_units_created = lib1_gf_SummonUnitsFromHandCard(lp_player, lp_hand_index);
    UnitGroupAddUnitGroup(lib1_gv_units_created_this_battle_phase, lv_units_created);
    if ((lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_channel > 0) && (lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_channel <= lib1_gv_keystone_energy[lib1_gv_player[lp_player].lv_team])) {
        lib1_gf_SetKeystoneEnergy(lib1_gv_player[lp_player].lv_team, (lib1_gv_keystone_energy[lib1_gv_player[lp_player].lv_team] - lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_channel));
        DialogControlFadeTransparency(lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_ui.lv_channel_indicator, PlayerGroupAll(), 0.2, lib1_gv_cHANNEL_ENERGY_TRANSPARENCY);
        lv_channel = true;
    }

    lv_first_empty_effect_slot = lib1_gf_FirstEmptyEffectQueue(lib1_gv_eF_DEFAULT);
    if ((lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_default_effect != null)) {
        lib1_gv_effect_queue[lib1_gv_eF_DEFAULT][lv_first_empty_effect_slot].lv_card_id = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_id;
        lib1_gv_effect_queue[lib1_gv_eF_DEFAULT][lv_first_empty_effect_slot].lv_effect = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_default_effect;
        lib1_gv_effect_queue[lib1_gv_eF_DEFAULT][lv_first_empty_effect_slot].lv_player = lp_player;
        lib1_gv_effect_queue[lib1_gv_eF_DEFAULT][lv_first_empty_effect_slot].lv_units_created = lv_units_created;
        lib1_gv_effect_queue[lib1_gv_eF_DEFAULT][lv_first_empty_effect_slot].lv_channel_enabled = lv_channel;
    }

    lv_effect_class = 0;
    for ( ; ( (auto4E69136A_ai >= 0 && lv_effect_class <= auto4E69136A_ae) || (auto4E69136A_ai < 0 && lv_effect_class >= auto4E69136A_ae) ) ; lv_effect_class += auto4E69136A_ai ) {
        if ((lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_effect[lv_effect_class] != null)) {
            lv_first_empty_effect_slot = lib1_gf_FirstEmptyEffectQueue(lv_effect_class);
            lib1_gv_effect_queue[lv_effect_class][lv_first_empty_effect_slot].lv_card_id = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_id;
            lib1_gv_effect_queue[lv_effect_class][lv_first_empty_effect_slot].lv_effect = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_effect[lv_effect_class];
            lib1_gv_effect_queue[lv_effect_class][lv_first_empty_effect_slot].lv_player = lp_player;
            lib1_gv_effect_queue[lv_effect_class][lv_first_empty_effect_slot].lv_units_created = lv_units_created;
            lib1_gv_effect_queue[lv_effect_class][lv_first_empty_effect_slot].lv_channel_enabled = lv_channel;
        }

    }
    lib1_gf_TriggerWhenPlayedEffectsFromHandCard(lp_player, lp_hand_index);
    lib1_gf_FinishPlayingCardandAnimate(lp_player, lp_hand_index);
}

void lib1_gf_PlayDeckCardFromEffect (int lp_player, int lp_deck_index, bool lp_count_as_played_by_player) {
    // Variable Declarations
    int lv_effect_class;
    int lv_first_empty_effect_slot;
    unitgroup lv_units_created;
    bool lv_channel;

    // Automatic Variable Declarations
    const int autoCADB8849_ae = lib1_gv_eF_MAX;
    const int autoCADB8849_ai = 1;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Implementation
    if ((lp_count_as_played_by_player == true)) {
        lib1_gv_player[lp_player].lv_cards_played_this_turn = (lib1_gv_player[lp_player].lv_cards_played_this_turn + 1);
    }

    lv_units_created = lib1_gf_SummonUnitsFromDeckCard(lp_player, lp_deck_index);
    UnitGroupAddUnitGroup(lib1_gv_units_created_this_battle_phase, lv_units_created);
    if ((lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index].lv_channel > 0) && (lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index].lv_channel <= lib1_gv_keystone_energy[lib1_gv_player[lp_player].lv_team])) {
        lib1_gf_SetKeystoneEnergy(lib1_gv_player[lp_player].lv_team, (lib1_gv_keystone_energy[lib1_gv_player[lp_player].lv_team] - lib1_gv_player[lp_player].lv_hand.lv_card[lp_deck_index].lv_channel));
        lv_channel = true;
    }

    lv_first_empty_effect_slot = lib1_gf_FirstEmptyEffectQueue(lib1_gv_eF_DEFAULT);
    if ((lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index].lv_default_effect != null)) {
        lib1_gv_effect_queue[lib1_gv_eF_DEFAULT][lv_first_empty_effect_slot].lv_card_id = lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index].lv_id;
        lib1_gv_effect_queue[lib1_gv_eF_DEFAULT][lv_first_empty_effect_slot].lv_effect = lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index].lv_default_effect;
        lib1_gv_effect_queue[lib1_gv_eF_DEFAULT][lv_first_empty_effect_slot].lv_player = lp_player;
        lib1_gv_effect_queue[lib1_gv_eF_DEFAULT][lv_first_empty_effect_slot].lv_units_created = lv_units_created;
        lib1_gv_effect_queue[lib1_gv_eF_DEFAULT][lv_first_empty_effect_slot].lv_channel_enabled = lv_channel;
    }

    lv_effect_class = 0;
    for ( ; ( (autoCADB8849_ai >= 0 && lv_effect_class <= autoCADB8849_ae) || (autoCADB8849_ai < 0 && lv_effect_class >= autoCADB8849_ae) ) ; lv_effect_class += autoCADB8849_ai ) {
        if ((lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index].lv_effect[lv_effect_class] != null)) {
            lv_first_empty_effect_slot = lib1_gf_FirstEmptyEffectQueue(lv_effect_class);
            lib1_gv_effect_queue[lv_effect_class][lv_first_empty_effect_slot].lv_card_id = lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index].lv_id;
            lib1_gv_effect_queue[lv_effect_class][lv_first_empty_effect_slot].lv_effect = lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index].lv_effect[lv_effect_class];
            lib1_gv_effect_queue[lv_effect_class][lv_first_empty_effect_slot].lv_player = lp_player;
            lib1_gv_effect_queue[lv_effect_class][lv_first_empty_effect_slot].lv_units_created = lv_units_created;
            lib1_gv_effect_queue[lv_effect_class][lv_first_empty_effect_slot].lv_channel_enabled = lv_channel;
        }

    }
    lib1_gf_TriggerWhenPlayedEffectsFromDeckCard(lp_player, lp_deck_index);
    lib1_gf_DiscardCardFromDecktoDiscard(lp_player, lp_deck_index);
}

trigger auto_lib1_gf_StartPlanningPhase_Trigger = null;

void lib1_gf_StartPlanningPhase () {
    if (auto_lib1_gf_StartPlanningPhase_Trigger == null) {
        auto_lib1_gf_StartPlanningPhase_Trigger = TriggerCreate("auto_lib1_gf_StartPlanningPhase_TriggerFunc");
    }

    TriggerExecute(auto_lib1_gf_StartPlanningPhase_Trigger, false, false);
}

bool auto_lib1_gf_StartPlanningPhase_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_team;
    int lv_player;

    // Automatic Variable Declarations
    const int autoF70F638B_ae = 1;
    const int autoF70F638B_ai = 1;
    playergroup auto0AFF5E36_g;

    // Variable Initialization

    // Implementation
    lib1_gf_CreatePlanningInstructions();
    TriggerEnable(lib1_gt_SelectCardPlayPhase, false);
    lib1_gv_current_phase = "Planning";
    TimerStart(lib1_gv_turn_timer, lib1_gv_pLANNING_PHASE_LENGTH, false, c_timeGame);
    DialogSetVisible(lib1_gv_end_phase_dialog, PlayerGroupAll(), true);
    lib1_gv_turn_timer_value = FixedToInt(lib1_gv_pLANNING_PHASE_LENGTH);
    Wait(1.0, c_timeGame);
    lv_team = 0;
    for ( ; ( (autoF70F638B_ai >= 0 && lv_team <= autoF70F638B_ae) || (autoF70F638B_ai < 0 && lv_team >= autoF70F638B_ae) ) ; lv_team += autoF70F638B_ai ) {
        auto0AFF5E36_g = lib1_gv_team[lv_team];
        lv_player = -1;
        while (true) {
            lv_player = PlayerGroupNextPlayer(auto0AFF5E36_g, lv_player);
            if (lv_player < 0) { break; }
            lib1_gf_AllowCardSelection(lv_player);
        }
    }
    return true;
}

void lib1_gf_EndPlanningPhase () {
    // Variable Declarations
    int lv_team;
    int lv_player;
    int lv_hand_index;

    // Automatic Variable Declarations
    const int autoE1798195_ae = 1;
    const int autoE1798195_ai = 1;
    playergroup auto3DA7769D_g;
    int autoF5CF77C6_ae;
    const int autoF5CF77C6_ai = 1;

    // Variable Initialization

    // Implementation
    lib1_gv_current_phase = "None";
    DialogSetVisible(lib1_gv_planning_instructions, PlayerGroupAll(), false);
    TriggerEnable(lib1_gt_SelectCardPlanningPhase, false);
    lv_team = 0;
    for ( ; ( (autoE1798195_ai >= 0 && lv_team <= autoE1798195_ae) || (autoE1798195_ai < 0 && lv_team >= autoE1798195_ae) ) ; lv_team += autoE1798195_ai ) {
        auto3DA7769D_g = lib1_gv_team[lv_team];
        lv_player = -1;
        while (true) {
            lv_player = PlayerGroupNextPlayer(auto3DA7769D_g, lv_player);
            if (lv_player < 0) { break; }
            autoF5CF77C6_ae = lib1_gf_TopofHand(lv_player);
            lv_hand_index = 0;
            for ( ; ( (autoF5CF77C6_ai >= 0 && lv_hand_index <= autoF5CF77C6_ae) || (autoF5CF77C6_ai < 0 && lv_hand_index >= autoF5CF77C6_ae) ) ; lv_hand_index += autoF5CF77C6_ai ) {
                if ((lib1_gv_player[lv_player].lv_hand.lv_selected[lv_hand_index] == true)) {
                    lib1_gf_DrawCardFromDecktoHand(lv_player);
                }

            }
            lv_hand_index = 0;
            while ((lv_hand_index <= lib1_gf_TopofHand(lv_player))) {
                if ((lib1_gv_player[lv_player].lv_hand.lv_selected[lv_hand_index] == true)) {
                    lib1_gf_HandCardPlayAnimation(lv_player, lv_hand_index);
                    lib1_gf_ShuffleHandCardIntoDeck(lv_player, lv_hand_index);
                }
                else {
                    lv_hand_index = (lv_hand_index + 1);
                }
            }
        }
    }
}

void lib1_gf_StartPlayPhase () {
    // Variable Declarations
    int lv_team;
    int lv_player;
    bool lv_fetch;

    // Automatic Variable Declarations
    const int auto9286D938_ae = 1;
    const int auto9286D938_ai = 1;
    playergroup auto37141D2D_g;
    const int autoAD43E25D_ae = 1;
    const int autoAD43E25D_ai = 1;
    playergroup autoE562B524_g;
    const int auto75E8498E_ae = 1;
    const int auto75E8498E_ai = 1;
    playergroup autoEA8FD9F4_g;
    const int autoAF0E8686_ae = 1;
    const int autoAF0E8686_ai = 1;

    // Variable Initialization

    // Implementation
    lib1_gv_current_turn = (lib1_gv_current_turn + 1);
    lib1_gf_PauseBattle();
    TriggerEnable(lib1_gt_SelectCardPlayPhase, true);
    PlayerGroupClear(lib1_gv_ready_players);
    lib1_gv_current_phase = "Play";
    if ((lib1_gv_tutorial_flag == false)) {
        TimerStart(lib1_gv_turn_timer, lib1_gv_pLAY_PHASE_LENGTH, false, c_timeGame);
        lib1_gv_turn_timer_value = FixedToInt(lib1_gv_pLAY_PHASE_LENGTH);
        lib1_gf_UpdateTurnTimer();
    }
    else {
        DialogControlSetVisible(lib1_gv_turn_timer_number, PlayerGroupAll(), false);
    }
    libNtve_gf_SetDialogItemText(lib1_gv_turn_timer_phase, StringExternal("Param/Value/lib_1_FBB2A1AA"), PlayerGroupAll());
    lv_team = 0;
    for ( ; ( (auto9286D938_ai >= 0 && lv_team <= auto9286D938_ae) || (auto9286D938_ai < 0 && lv_team >= auto9286D938_ae) ) ; lv_team += auto9286D938_ai ) {
        auto37141D2D_g = lib1_gv_team[lv_team];
        lv_player = -1;
        while (true) {
            lv_player = PlayerGroupNextPlayer(auto37141D2D_g, lv_player);
            if (lv_player < 0) { break; }
            lib1_gv_player[lv_player].lv_prevent_overdraw_flag = false;
        }
    }
    lib1_gf_TriggerEachPlayPhasePreDrawEffects();
    lv_team = 0;
    for ( ; ( (autoAD43E25D_ai >= 0 && lv_team <= autoAD43E25D_ae) || (autoAD43E25D_ai < 0 && lv_team >= autoAD43E25D_ae) ) ; lv_team += autoAD43E25D_ai ) {
        autoE562B524_g = lib1_gv_team[lv_team];
        lv_player = -1;
        while (true) {
            lv_player = PlayerGroupNextPlayer(autoE562B524_g, lv_player);
            if (lv_player < 0) { break; }
            lib1_gf_DisallowCardSelection(lv_player);
            if ((lib1_gv_player[lv_player].lv_skip_next_draw_step == true)) {
                lib1_gv_player[lv_player].lv_skip_next_draw_step = false;
            }
            else {
                lib1_gf_StartofTurnDraw(lv_player);
            }
        }
    }
    lib1_gf_TriggerEachPlayPhasePostDrawEffects();
    if ((lib1_gv_tutorial_flag == true)) {
        lib1_gf_TutorialPlayPhase();
    }
    else if (true) {
        lv_team = 0;
        for ( ; ( (auto75E8498E_ai >= 0 && lv_team <= auto75E8498E_ae) || (auto75E8498E_ai < 0 && lv_team >= auto75E8498E_ae) ) ; lv_team += auto75E8498E_ai ) {
            autoEA8FD9F4_g = lib1_gv_team[lv_team];
            lv_player = -1;
            while (true) {
                lv_player = PlayerGroupNextPlayer(autoEA8FD9F4_g, lv_player);
                if (lv_player < 0) { break; }
                lib1_gf_ProcessResources(lv_player);
                lib1_gf_UpdateCardPropertiesBasedonGameState(lv_player, true);
                if ((lib1_gv_player[lv_player].lv_use_ai == true)) {
                    lib1_gf_AISelectCards(lv_player);
                }

            }
        }
    }
    lv_team = 0;
    for ( ; ( (autoAF0E8686_ai >= 0 && lv_team <= autoAF0E8686_ae) || (autoAF0E8686_ai < 0 && lv_team >= autoAF0E8686_ae) ) ; lv_team += autoAF0E8686_ai ) {
        lib1_gf_AddEnergytoKeystone(lv_team, 1);
    }
    lib1_gf_RemoveAllBehaviorsFromTrophiesandPets();
}

void lib1_gf_StartofTurnDraw (int lp_player) {
    // Variable Declarations
    bool lv_fetch;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lib1_gv_tutorial_flag == true)) {
        lib1_gf_StartofTurnDrawCardTutorial(lp_player);
    }
    else if (true) {
        lib1_gf_DrawCardFromDecktoHand(lp_player);
    }
}

void lib1_gf_PauseBattle () {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup autoDAC2CE7B_g;
    int autoDAC2CE7B_u;

    // Variable Initialization

    // Implementation
    GameSetGlobalTimeScale(0.01);
    autoDAC2CE7B_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDAC2CE7B_u = UnitGroupCount(autoDAC2CE7B_g, c_unitCountAll);
    for (;; autoDAC2CE7B_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoDAC2CE7B_g, autoDAC2CE7B_u);
        if (lv_unit == null) { break; }
        if ((UnitTestState(lv_unit, c_unitStateDetector) == false) && (UnitGetType(lv_unit) != "Cyclone")) {
            libNtve_gf_PauseUnit(lv_unit, true);
        }

    }
    GamePauseAllCooldowns(true);
}

void lib1_gf_PauseMissiles () {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto622C4E3D_g;
    int auto622C4E3D_u;

    // Variable Initialization

    // Implementation
    auto622C4E3D_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterMissile), 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto622C4E3D_u = UnitGroupCount(auto622C4E3D_g, c_unitCountAll);
    for (;; auto622C4E3D_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto622C4E3D_g, auto622C4E3D_u);
        if (lv_unit == null) { break; }
        libNtve_gf_PauseUnit(lv_unit, true);
    }
}

void lib1_gf_AllowCardSelection (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_EnableAllCardButtons(lp_player);
    DialogSetVisible(lib1_gv_end_phase_dialog, PlayerGroupSingle(lp_player), true);
}

void lib1_gf_DisallowCardSelection (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_DisableAllCardButtons(lp_player);
    DialogSetVisible(lib1_gv_end_phase_dialog, PlayerGroupSingle(lp_player), false);
}

void lib1_gf_TriggerEachPlayPhasePreDrawEffects () {
    // Variable Declarations
    unit lv_unit;
    int lv_player;
    int lv_team;
    int lv_cheapest_unit_card;

    // Automatic Variable Declarations
    unitgroup auto7A058119_g;
    int auto7A058119_u;
    const int auto835F0307_ae = 1;
    const int auto835F0307_ai = 1;
    playergroup auto42455081_g;
    unitgroup autoEC757A66_g;
    int autoEC757A66_u;
    unitgroup auto32D328A8_g;
    int auto32D328A8_u;
    unitgroup auto70146C91_g;
    int auto70146C91_u;
    unitgroup auto99FD14AD_g;
    int auto99FD14AD_u;
    unitgroup auto944C9124_g;
    int auto944C9124_u;
    unitgroup auto5CEAD1D0_g;
    int auto5CEAD1D0_u;

    // Variable Initialization

    // Implementation
    auto7A058119_g = UnitGroup("GhostAcademy", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterDazed - 32))), 0);
    auto7A058119_u = UnitGroupCount(auto7A058119_g, c_unitCountAll);
    for (;; auto7A058119_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto7A058119_g, auto7A058119_u);
        if (lv_unit == null) { break; }
        lv_cheapest_unit_card = lib1_gf_CheapestHandCard(UnitGetOwner(lv_unit), lib1_gv_uNIT, true, lib1_gf_GetCardIDByName("Ghost Trainees"));
        if ((lv_cheapest_unit_card >= 0)) {
            lib1_gf_DiscardCardFromHandtoDiscard(UnitGetOwner(lv_unit), lv_cheapest_unit_card);
            lib1_gf_GenerateCardforHand(UnitGetOwner(lv_unit), lib1_gf_GetCardIDByName("Ghost Trainees"));
        }
        else {
            lib1_gf_DrawCardFromDecktoHand(UnitGetOwner(lv_unit));
        }
    }
    lv_team = 0;
    for ( ; ( (auto835F0307_ai >= 0 && lv_team <= auto835F0307_ae) || (auto835F0307_ai < 0 && lv_team >= auto835F0307_ae) ) ; lv_team += auto835F0307_ai ) {
        auto42455081_g = lib1_gv_team[lv_team];
        lv_player = -1;
        while (true) {
            lv_player = PlayerGroupNextPlayer(auto42455081_g, lv_player);
            if (lv_player < 0) { break; }
            lib1_gf_MothershipCardEffect(lv_player);
        }
    }
    autoEC757A66_g = lib1_gv_units_from_card[lib1_gf_GetCardIDByName("Jim Raynor")];
    autoEC757A66_u = UnitGroupCount(autoEC757A66_g, c_unitCountAll);
    for (;; autoEC757A66_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoEC757A66_g, autoEC757A66_u);
        if (lv_unit == null) { break; }
        if ((UnitHasBehavior2(lv_unit, "RaynorsRevolution") == true)) {
            lib1_gf_RaynorEffect(UnitGetOwner(lv_unit));
        }

    }
    auto32D328A8_g = UnitGroup("DarkShrine", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterDazed - 32))), 0);
    auto32D328A8_u = UnitGroupCount(auto32D328A8_g, c_unitCountAll);
    for (;; auto32D328A8_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto32D328A8_g, auto32D328A8_u);
        if (lv_unit == null) { break; }
        lib1_gf_DarkShrineEffect(UnitGetOwner(lv_unit));
    }
    auto70146C91_g = lib1_gv_units_from_card[lib1_gf_GetCardIDByName("Artanis")];
    auto70146C91_u = UnitGroupCount(auto70146C91_g, c_unitCountAll);
    for (;; auto70146C91_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto70146C91_g, auto70146C91_u);
        if (lv_unit == null) { break; }
        if ((UnitHasBehavior2(lv_unit, "ArtanissUnification") == true)) {
            lib1_gf_ArtanisEffect(UnitGetOwner(lv_unit));
        }

    }
    auto99FD14AD_g = lib1_gv_units_from_card[lib1_gf_GetCardIDByName("Artanis, Founder")];
    auto99FD14AD_u = UnitGroupCount(auto99FD14AD_g, c_unitCountAll);
    for (;; auto99FD14AD_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto99FD14AD_g, auto99FD14AD_u);
        if (lv_unit == null) { break; }
        if ((UnitHasBehavior2(lv_unit, "DaelaamFounder") == true)) {
            lib1_gf_ArtanisFounderEffect(UnitGetOwner(lv_unit));
        }

    }
    auto944C9124_g = lib1_gv_units_from_card[lib1_gf_GetCardIDByName("Phase-Smith Karax")];
    auto944C9124_u = UnitGroupCount(auto944C9124_g, c_unitCountAll);
    for (;; auto944C9124_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto944C9124_g, auto944C9124_u);
        if (lv_unit == null) { break; }
        if ((UnitHasBehavior2(lv_unit, "KaraxsExpertise") == true)) {
            lib1_gf_KaraxEffect(UnitGetOwner(lv_unit));
        }

    }
    auto5CEAD1D0_g = UnitGroup("FleetBeacon", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterDazed - 32))), 0);
    auto5CEAD1D0_u = UnitGroupCount(auto5CEAD1D0_g, c_unitCountAll);
    for (;; auto5CEAD1D0_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto5CEAD1D0_g, auto5CEAD1D0_u);
        if (lv_unit == null) { break; }
        lib1_gf_FleetBeaconEffect(UnitGetOwner(lv_unit));
    }
}

trigger auto_lib1_gf_TriggerEachPlayPhasePostDrawEffects_Trigger = null;

void lib1_gf_TriggerEachPlayPhasePostDrawEffects () {
    if (auto_lib1_gf_TriggerEachPlayPhasePostDrawEffects_Trigger == null) {
        auto_lib1_gf_TriggerEachPlayPhasePostDrawEffects_Trigger = TriggerCreate("auto_lib1_gf_TriggerEachPlayPhasePostDrawEffects_TriggerFunc");
    }

    TriggerExecute(auto_lib1_gf_TriggerEachPlayPhasePostDrawEffects_Trigger, false, false);
}

bool auto_lib1_gf_TriggerEachPlayPhasePostDrawEffects_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;
    bool[7] lv_shuffle;

    // Automatic Variable Declarations
    unitgroup autoCC8587D2_g;
    int autoCC8587D2_u;
    unitgroup auto50BA6353_g;
    int auto50BA6353_u;
    const int auto3E5E22A1_ae = lib1_gv_mAX_PLAYERS;
    const int auto3E5E22A1_ai = 1;
    unitgroup auto2FC503F8_g;
    int auto2FC503F8_u;
    unitgroup auto4A3820F8_g;
    int auto4A3820F8_u;
    unitgroup auto448458A8_g;
    int auto448458A8_u;
    unitgroup autoDE416211_g;
    int autoDE416211_u;
    unitgroup auto6D2C9AEE_g;
    int auto6D2C9AEE_u;
    unitgroup auto11772A2A_g;
    int auto11772A2A_u;
    unitgroup autoF0DCB83B_g;
    int autoF0DCB83B_u;
    unitgroup auto16282BF0_g;
    int auto16282BF0_u;
    unitgroup autoB4C5E2E2_g;
    int autoB4C5E2E2_u;
    unitgroup autoA426B5EC_g;
    int autoA426B5EC_u;
    unitgroup auto43F3D341_g;
    int auto43F3D341_u;
    unitgroup autoA9E75C2A_g;
    int autoA9E75C2A_u;
    unitgroup auto5274BC5F_g;
    int auto5274BC5F_u;
    unitgroup auto49EAE470_g;
    int auto49EAE470_u;
    const int autoE467C903_ae = 6;
    const int autoE467C903_ai = 1;

    // Variable Initialization

    // Implementation
    autoCC8587D2_g = lib1_gv_units_from_card[lib1_gf_GetCardIDByName("Egon Stetmann")];
    autoCC8587D2_u = UnitGroupCount(autoCC8587D2_g, c_unitCountAll);
    for (;; autoCC8587D2_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoCC8587D2_g, autoCC8587D2_u);
        if (lv_unit == null) { break; }
        if ((UnitHasBehavior2(lv_unit, "ScientificGenius") == true)) {
            lib1_gf_DrawCardFromDecktoHand(UnitGetOwner(lv_unit));
        }

    }
    auto50BA6353_g = lib1_gv_units_from_card[lib1_gf_GetCardIDByName("Stetmann, Addict")];
    auto50BA6353_u = UnitGroupCount(auto50BA6353_g, c_unitCountAll);
    for (;; auto50BA6353_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto50BA6353_g, auto50BA6353_u);
        if (lv_unit == null) { break; }
        if ((UnitHasBehavior2(lv_unit, "TerrazineAddict") == true)) {
            lib1_gf_GenerateCardforHand(UnitGetOwner(lv_unit), lib1_gf_GetCardIDByName("Terrazine Canister"));
        }

    }
    lv_player = 1;
    for ( ; ( (auto3E5E22A1_ai >= 0 && lv_player <= auto3E5E22A1_ae) || (auto3E5E22A1_ai < 0 && lv_player >= auto3E5E22A1_ae) ) ; lv_player += auto3E5E22A1_ai ) {
        if ((lib1_gv_player[lv_player].lv_control_overmind == true)) {
            lib1_gf_OvermindEffect(lv_player);
        }

    }
    auto2FC503F8_g = UnitGroup("ResearchFacility", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterDazed - 32))), 0);
    auto2FC503F8_u = UnitGroupCount(auto2FC503F8_g, c_unitCountAll);
    for (;; auto2FC503F8_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto2FC503F8_g, auto2FC503F8_u);
        if (lv_unit == null) { break; }
        lib1_gf_GenerateXenomorphResearchCardforHand(UnitGetOwner(lv_unit));
    }
    auto4A3820F8_g = UnitGroup("UltraliskCavern", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterDazed - 32))), 0);
    auto4A3820F8_u = UnitGroupCount(auto4A3820F8_g, c_unitCountAll);
    for (;; auto4A3820F8_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto4A3820F8_g, auto4A3820F8_u);
        if (lv_unit == null) { break; }
        lib1_gf_GenerateCardforHand(UnitGetOwner(lv_unit), lib1_gf_GetCardIDByName("Ultralisk Spawn"));
    }
    auto448458A8_g = UnitGroup("GreaterSpire", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterDazed - 32))), 0);
    auto448458A8_u = UnitGroupCount(auto448458A8_g, c_unitCountAll);
    for (;; auto448458A8_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto448458A8_g, auto448458A8_u);
        if (lv_unit == null) { break; }
        lib1_gf_GenerateCardforHand(UnitGetOwner(lv_unit), lib1_gf_GetCardIDByName("Brood Lord Spawn"));
    }
    autoDE416211_g = UnitGroup("StargateWarp", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterDazed - 32))), 0);
    autoDE416211_u = UnitGroupCount(autoDE416211_g, c_unitCountAll);
    for (;; autoDE416211_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoDE416211_g, autoDE416211_u);
        if (lv_unit == null) { break; }
        lib1_gf_GenerateStarWarpCardforHand(UnitGetOwner(lv_unit));
    }
    auto6D2C9AEE_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterDazed - 32))), 0);
    auto6D2C9AEE_u = UnitGroupCount(auto6D2C9AEE_g, c_unitCountAll);
    for (;; auto6D2C9AEE_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto6D2C9AEE_g, auto6D2C9AEE_u);
        if (lv_unit == null) { break; }
        if ((UnitHasBehavior2(lv_unit, "FenixsLeadership") == true)) {
            lib1_gf_GenerateHeroWarpCardforHand(UnitGetOwner(lv_unit));
        }

    }
    auto11772A2A_g = UnitGroup("Spire", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterDazed - 32))), 0);
    auto11772A2A_u = UnitGroupCount(auto11772A2A_g, c_unitCountAll);
    for (;; auto11772A2A_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto11772A2A_g, auto11772A2A_u);
        if (lv_unit == null) { break; }
        if ((RandomInt(0, 1) == 1)) {
            lib1_gf_GenerateCardforHand(UnitGetOwner(lv_unit), lib1_gf_GetCardIDByName("Mutalisk Spawn"));
        }
        else {
            lib1_gf_GenerateCardforHand(UnitGetOwner(lv_unit), lib1_gf_GetCardIDByName("Corruptor Spawn"));
        }
    }
    autoF0DCB83B_g = UnitGroup("ScourgeSpire", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterDazed - 32))), 0);
    autoF0DCB83B_u = UnitGroupCount(autoF0DCB83B_g, c_unitCountAll);
    for (;; autoF0DCB83B_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoF0DCB83B_g, autoF0DCB83B_u);
        if (lv_unit == null) { break; }
        if ((RandomInt(0, 1) == 1)) {
            lib1_gf_GenerateCardforHand(UnitGetOwner(lv_unit), lib1_gf_GetCardIDByName("Mutalisk Spawn"));
        }
        else {
            lib1_gf_GenerateCardforHand(UnitGetOwner(lv_unit), lib1_gf_GetCardIDByName("Scourge Spawn"));
        }
    }
    auto16282BF0_g = UnitGroup("WarpGate", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterDazed - 32))), 0);
    auto16282BF0_u = UnitGroupCount(auto16282BF0_g, c_unitCountAll);
    for (;; auto16282BF0_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto16282BF0_g, auto16282BF0_u);
        if (lv_unit == null) { break; }
        lib1_gf_GenerateWarpInCardforHand(UnitGetOwner(lv_unit));
    }
    autoB4C5E2E2_g = UnitGroup("HydraliskDen", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterDazed - 32))), 0);
    autoB4C5E2E2_u = UnitGroupCount(autoB4C5E2E2_g, c_unitCountAll);
    for (;; autoB4C5E2E2_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoB4C5E2E2_g, autoB4C5E2E2_u);
        if (lv_unit == null) { break; }
        lib1_gf_GenerateCardforHand(UnitGetOwner(lv_unit), lib1_gf_GetCardIDByName("Hydralisk Spawn"));
    }
    autoA426B5EC_g = UnitGroup("RoachWarren", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterDazed - 32))), 0);
    autoA426B5EC_u = UnitGroupCount(autoA426B5EC_g, c_unitCountAll);
    for (;; autoA426B5EC_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoA426B5EC_g, autoA426B5EC_u);
        if (lv_unit == null) { break; }
        lib1_gf_GenerateCardforHand(UnitGetOwner(lv_unit), lib1_gf_GetCardIDByName("Roach Spawn"));
    }
    auto43F3D341_g = UnitGroup("BanelingNest", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterDazed - 32))), 0);
    auto43F3D341_u = UnitGroupCount(auto43F3D341_g, c_unitCountAll);
    for (;; auto43F3D341_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto43F3D341_g, auto43F3D341_u);
        if (lv_unit == null) { break; }
        lib1_gf_GenerateCardforHand(UnitGetOwner(lv_unit), lib1_gf_GetCardIDByName("Baneling Spawn"));
    }
    autoA9E75C2A_g = UnitGroup("SpawningPool", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterDazed - 32))), 0);
    autoA9E75C2A_u = UnitGroupCount(autoA9E75C2A_g, c_unitCountAll);
    for (;; autoA9E75C2A_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoA9E75C2A_g, autoA9E75C2A_u);
        if (lv_unit == null) { break; }
        lib1_gf_GenerateCardforHand(UnitGetOwner(lv_unit), lib1_gf_GetCardIDByName("Zergling Spawn"));
    }
    auto5274BC5F_g = lib1_gv_units_from_card[lib1_gf_GetCardIDByName("Kerrigan")];
    auto5274BC5F_u = UnitGroupCount(auto5274BC5F_g, c_unitCountAll);
    for (;; auto5274BC5F_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto5274BC5F_g, auto5274BC5F_u);
        if (lv_unit == null) { break; }
        if ((UnitHasBehavior2(lv_unit, "ArtanissUnification2") == true)) {
            lib1_gf_KerriganEffect(UnitGetOwner(lv_unit));
        }

    }
    auto49EAE470_g = UnitGroup("LurkerDenMP", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterDazed - 32))), 0);
    auto49EAE470_u = UnitGroupCount(auto49EAE470_g, c_unitCountAll);
    for (;; auto49EAE470_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto49EAE470_g, auto49EAE470_u);
        if (lv_unit == null) { break; }
        lib1_gf_GenerateCardtoTopofDeck(UnitGetOwner(lv_unit), lib1_gf_GetCardIDByName("Lurker Spawn"));
        lv_shuffle[UnitGetOwner(lv_unit)] = true;
    }
    lv_player = 1;
    for ( ; ( (autoE467C903_ai >= 0 && lv_player <= autoE467C903_ae) || (autoE467C903_ai < 0 && lv_player >= autoE467C903_ae) ) ; lv_player += autoE467C903_ai ) {
        if ((lv_shuffle[lv_player] == true)) {
            lib1_gf_ShuffleDeck(lv_player);
            lv_shuffle[lv_player] = false;
        }

    }
    return true;
}

void lib1_gf_UpdateCardPropertiesBasedonGameState (int lp_player, bool lp_start_of_play_phase) {
    // Variable Declarations
    int lv_hand_index;
    int lv_count;
    unitgroup lv_commanders;
    unit lv_unit;
    int lv_new_marine_count;
    int lv_current_marine_count;
    int lv_unit_type_index;
    bool lv_success;

    // Automatic Variable Declarations
    int autoC3A24B9B_ae;
    const int autoC3A24B9B_ai = 1;
    const int autoD0A7F81A_ae = lib1_gv_mAX_UNIT_TYPE_PER_CARD;
    const int autoD0A7F81A_ai = 1;
    const int auto38022C1A_ae = lib1_gv_mAX_UNIT_TYPE_PER_CARD;
    const int auto38022C1A_ai = 1;
    unitgroup autoC53654F3_g;
    int autoC53654F3_u;
    unitgroup autoDF824DF1_g;
    int autoDF824DF1_u;
    unitgroup autoF96D09BE_g;
    int autoF96D09BE_u;
    const int auto9C2BAB61_ae = lib1_gv_mAX_UNIT_TYPE_PER_CARD;
    const int auto9C2BAB61_ai = 1;
    const int autoEF3DE083_ae = lib1_gv_mAX_UNIT_TYPE_PER_CARD;
    const int autoEF3DE083_ai = 1;

    // Variable Initialization
    lv_commanders = UnitGroupEmpty();

    // Implementation
    autoC3A24B9B_ae = lib1_gf_TopofHand(lp_player);
    lv_hand_index = 0;
    for ( ; ( (autoC3A24B9B_ai >= 0 && lv_hand_index <= autoC3A24B9B_ae) || (autoC3A24B9B_ai < 0 && lv_hand_index >= autoC3A24B9B_ae) ) ; lv_hand_index += autoC3A24B9B_ai ) {
        if ((lp_start_of_play_phase == true) && (lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_id == lib1_gf_GetCardIDByName("Project Black Flag"))) {
            lv_count = UnitGroupCount(UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter((1 << c_targetFilterCanHaveEnergy), 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
            if ((lv_count == 0)) {
                lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_base_text = "For each energy unit you control, shuffle a Slave Broods card into your deck.";
                lib1_gf_UpdateHandCardText(lp_player, lv_hand_index);
            }
            else if ((lv_count == 1)) {
                lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_base_text = "For each energy unit you control, shuffle a Slave Broods card into your deck. (You have 1 energy unit).";
                lib1_gf_UpdateHandCardText(lp_player, lv_hand_index);
            }
            else if ((lv_count > 1)) {
                lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_base_text = "For each energy unit you control, shuffle a Slave Broods card into your deck. (You have 1 energy unit).";
                lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_base_text = ("For each energy unit you control, shuffle a Slave Broods card into your deck. (You have " + IntToString(lv_count) + " energy units).");
                lib1_gf_UpdateHandCardText(lp_player, lv_hand_index);
            }
        }
        else if ((lp_start_of_play_phase == true) && (lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_id == lib1_gf_GetCardIDByName("Hive Experts"))) {
            lib1_gf_AddUnittoHandCard(lp_player, lv_hand_index, UnitGroupCount(UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter((1 << c_targetFilterCanHaveEnergy), 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive), "Zergling");
            lib1_gf_UpdateHandCardText(lp_player, lv_hand_index);
        }
        else if ((lp_start_of_play_phase == true) && (lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_id == lib1_gf_GetCardIDByName("Korhal Garrison"))) {
            if ((lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_base_text == lib1_gv_card[lib1_gf_GetCardIDByName("Korhal Garrison")].lv_base_text)) {
                lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_base_text = "Build a Bunker, a Missile Turret, and 2 Sunken Colonies. Each turn, reduce the cost of this card by 1 mineral if you control an energy unit.";
            }
            else if ((UnitGroupCount(UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter((1 << c_targetFilterCanHaveEnergy), 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
                lib1_gf_AddtoHandCardCost(lp_player, lv_hand_index, -1, 0);
            }
        }
        else if ((lp_start_of_play_phase == true) && (lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_id == lib1_gf_GetCardIDByName("Loyal Legion"))) {
            lv_count = MaxI((lib1_gf_NumberofHeroicUnitsOwnedByPlayer(lp_player) * 2), 1);
            lv_success = false;
            lv_unit_type_index = 0;
            for ( ; ( (autoD0A7F81A_ai >= 0 && lv_unit_type_index <= autoD0A7F81A_ae) || (autoD0A7F81A_ai < 0 && lv_unit_type_index >= autoD0A7F81A_ae) ) ; lv_unit_type_index += autoD0A7F81A_ai ) {
                if ((lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_unit_type[lv_unit_type_index] == "Zealot")) {
                    lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_unit_count[lv_unit_type_index] = lv_count;
                    lv_success = true;
                    break;
                }

            }
            if ((lv_success == false)) {
                lib1_gf_AddUnittoHandCard(lp_player, lv_hand_index, lv_count, "Zealot");
                lv_unit_type_index = 0;
                for ( ; ( (auto38022C1A_ai >= 0 && lv_unit_type_index <= auto38022C1A_ae) || (auto38022C1A_ai < 0 && lv_unit_type_index >= auto38022C1A_ae) ) ; lv_unit_type_index += auto38022C1A_ai ) {
                    if ((lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_unit_type[lv_unit_type_index] == "Zealot")) {
                        lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_unit_count[lv_unit_type_index] = lv_count;
                        break;
                    }

                }
            }

            lib1_gf_UpdateHandCardText(lp_player, lv_hand_index);
        }
        else if ((lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_id == lib1_gf_GetCardIDByName("Dominant Psychics"))) {
            if ((lib1_gf_CountOfUnitsOnHandCardMatchingType(lp_player, lv_hand_index, "Ultralisk") == 0) && (UnitGroupCount(UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter((1 << c_targetFilterCanHaveEnergy), 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 6)) {
                lib1_gf_AddUnittoHandCard(lp_player, lv_hand_index, 1, "Ultralisk");
                lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_base_text = "";
                lib1_gf_UpdateHandCardText(lp_player, lv_hand_index);
            }
        }
        else if ((lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_id == lib1_gf_GetCardIDByName("Viridescent Archons"))) {
            lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_unit_count[0] = MaxI(lib1_gf_GasRemaining(lp_player), 1);
            lib1_gf_UpdateHandCardText(lp_player, lv_hand_index);
        }
        else if ((lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_id == lib1_gf_GetCardIDByName("Viridescent Stalkers"))) {
            lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_unit_count[0] = MaxI(lib1_gf_GasRemaining(lp_player), 1);
            lib1_gf_UpdateHandCardText(lp_player, lv_hand_index);
        }
        else if ((lp_start_of_play_phase == true) && (lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_id == lib1_gf_GetCardIDByName("Swarmlings"))) {
            lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_unit_count[0] = UnitGroupCount(UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
            lib1_gf_UpdateHandCardText(lp_player, lv_hand_index);
        }
        else if ((lp_start_of_play_phase == true) && (lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_id == lib1_gf_GetCardIDByName("Psionic Attraction"))) {
            lib1_gf_UpdateCardPsionicAttraction(lp_player, lv_hand_index);
            lib1_gf_UpdateHandCardText(lp_player, lv_hand_index);
        }
        else if ((lp_start_of_play_phase == true) && (lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_id == lib1_gf_GetCardIDByName("Merciless Finishers"))) {
            lib1_gf_UpdateCardMercilessFinishers(lp_player, lv_hand_index);
            lib1_gf_UpdateHandCardText(lp_player, lv_hand_index);
        }
        else if ((lp_start_of_play_phase == true) && (lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_id == lib1_gf_GetCardIDByName("Zeratul"))) {
            if ((lib1_gv_player[lp_player].lv_units_lost > 0) && (lib1_gv_player[lp_player].lv_units_lost < 8)) {
                lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_base_text = ("This card upgrades once you've lost 8 units this game (" + IntToString(lib1_gv_player[lp_player].lv_units_lost) + " lost so far).");
                lib1_gf_UpdateHandCardText(lp_player, lv_hand_index);
            }
            else if ((lib1_gv_player[lp_player].lv_units_lost >= 8)) {
                lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_base_text = "Launch: Gain +160 shields.";
                lib1_gf_UpdateHandCardText(lp_player, lv_hand_index);
            }
        }
        else if ((lp_start_of_play_phase == true) && (lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_id == lib1_gf_GetCardIDByName("Aberration"))) {
            if ((lib1_gv_player[lp_player].lv_infested_unit_lost >= 1)) {
                lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_base_text = ("Launch: It gains +10 life for each of your infested units that died this game (+" + IntToString((10 * lib1_gv_player[lp_player].lv_infested_unit_lost)) + " life total).");
                lib1_gf_UpdateHandCardText(lp_player, lv_hand_index);
            }

        }
        else if ((lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_id == lib1_gf_GetCardIDByName("22nd Reinforcements"))) {
            lv_current_marine_count = 0;
            autoC53654F3_g = UnitGroup("Commander", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoC53654F3_u = UnitGroupCount(autoC53654F3_g, c_unitCountAll);
            for (;; autoC53654F3_u -= 1) {
                lv_unit = UnitGroupUnitFromEnd(autoC53654F3_g, autoC53654F3_u);
                if (lv_unit == null) { break; }
                UnitGroupAdd(lv_commanders, lv_unit);
            }
            autoDF824DF1_g = UnitGroup("Raynor", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoDF824DF1_u = UnitGroupCount(autoDF824DF1_g, c_unitCountAll);
            for (;; autoDF824DF1_u -= 1) {
                lv_unit = UnitGroupUnitFromEnd(autoDF824DF1_g, autoDF824DF1_u);
                if (lv_unit == null) { break; }
                UnitGroupAdd(lv_commanders, lv_unit);
            }
            autoF96D09BE_g = UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoF96D09BE_u = UnitGroupCount(autoF96D09BE_g, c_unitCountAll);
            for (;; autoF96D09BE_u -= 1) {
                lv_unit = UnitGroupUnitFromEnd(autoF96D09BE_g, autoF96D09BE_u);
                if (lv_unit == null) { break; }
                if (((UnitGetType(lv_unit) == "Marine") || (UnitGetType(lv_unit) == "EliteMarine") || (UnitGetType(lv_unit) == "JunkerMarine") || (UnitGetType(lv_unit) == "MercMarine") || (UnitGetType(lv_unit) == "ShieldMarine"))) {
                    lv_current_marine_count = (lv_current_marine_count + 1);
                }

            }
            lv_new_marine_count = (UnitGroupCount(lv_commanders, c_unitCountAlive) * 10);
            lv_new_marine_count = (lv_new_marine_count - lv_current_marine_count);
            lv_new_marine_count = MaxI(lv_new_marine_count, 0);
            lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_base_text = ("Calldown Marines until you have 10 per Commander you control (" + IntToString(lv_new_marine_count) + " total). Discard this card if your last Commander dies.");
            lib1_gf_UpdateHandCardText(lp_player, lv_hand_index);
        }
        else if ((lp_start_of_play_phase == true) && (lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_id == lib1_gf_GetCardIDByName("Dark Archon"))) {
            if ((lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_base_text == "Each turn this card's launch ability changes. Launch: Add a Maelstrom card to your hand. ")) {
                lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_base_text = "Each turn this card's launch ability changes. Launch: Add a Maelstrom card to your hand.";
                lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_effect[lib1_gv_eF_DRAW] = lib1_gt_EffectDarkArchonMaelstrom;
            }
            else if ((lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_base_text == "Each turn this card's launch ability changes. Launch: Add a Maelstrom card to your hand.")) {
                lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_base_text = "Each turn this card's launch ability changes. Launch: Add a Feedback card to your hand.";
                lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_effect[lib1_gv_eF_DRAW] = lib1_gt_EffectDarkArchonFeedback;
            }
            else if ((lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_base_text == "Each turn this card's launch ability changes. Launch: Add a Feedback card to your hand.")) {
                lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_base_text = "Each turn this card's launch ability changes. Launch: Add a Mind Control card to your hand.";
                lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_effect[lib1_gv_eF_DRAW] = lib1_gt_EffectDarkArchonMindControl;
            }
            else if ((lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_base_text == "Each turn this card's launch ability changes. Launch: Add a Mind Control card to your hand.")) {
                lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_base_text = "Each turn this card's launch ability changes. Launch: Add a Maelstrom card to your hand.";
                lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_effect[lib1_gv_eF_DRAW] = lib1_gt_EffectDarkArchonMaelstrom;
            }
            lib1_gf_UpdateHandCardText(lp_player, lv_hand_index);
        }
        else if ((lp_start_of_play_phase == true) && (lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_id == lib1_gf_GetCardIDByName("Ace Pilots"))) {
            if ((UnitGroupCount(UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32))), 0), c_unitCountAlive) <= 10)) {
                lib1_gf_AddHeroictoHandCard(lp_player, lv_hand_index);
                lib1_gf_AddRushtoHandCard(lp_player, lv_hand_index);
                lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_unit_type[0] = "WraithHeroic";
            }
            else {
                lib1_gf_RemoveHeroicFromHandCard(lp_player, lv_hand_index);
                lib1_gf_RemoveRushFromHandCard(lp_player, lv_hand_index);
                lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_unit_type[0] = "Wraith";
            }
            lib1_gf_UpdateHandCardText(lp_player, lv_hand_index);
        }
        else if ((lp_start_of_play_phase == true) && (lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_id == lib1_gf_GetCardIDByName("Scrappy Raiders"))) {
            if ((UnitGroupCount(UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32))), 0), c_unitCountAlive) <= 10)) {
                lib1_gf_AddHeroictoHandCard(lp_player, lv_hand_index);
                lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_unit_type[0] = "EliteMarine";
            }
            else {
                lib1_gf_RemoveHeroicFromHandCard(lp_player, lv_hand_index);
                lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_unit_type[0] = "Marine";
            }
            lib1_gf_UpdateHandCardText(lp_player, lv_hand_index);
        }
        else if ((lp_start_of_play_phase == true) && (lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_id == lib1_gf_GetCardIDByName("Aiur Survivors"))) {
            if ((UnitGroupCount(UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32))), 0), c_unitCountAlive) <= 10)) {
                lib1_gf_AddHeroictoHandCard(lp_player, lv_hand_index);
                lv_unit_type_index = 0;
                for ( ; ( (autoEF3DE083_ai >= 0 && lv_unit_type_index <= autoEF3DE083_ae) || (autoEF3DE083_ai < 0 && lv_unit_type_index >= autoEF3DE083_ae) ) ; lv_unit_type_index += autoEF3DE083_ai ) {
                    if ((lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_unit_type[lv_unit_type_index] == "Marine")) {
                        lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_unit_type[lv_unit_type_index] = "EliteMarine";
                    }

                }
            }
            else {
                lib1_gf_RemoveHeroicFromHandCard(lp_player, lv_hand_index);
                lv_unit_type_index = 0;
                for ( ; ( (auto9C2BAB61_ai >= 0 && lv_unit_type_index <= auto9C2BAB61_ae) || (auto9C2BAB61_ai < 0 && lv_unit_type_index >= auto9C2BAB61_ae) ) ; lv_unit_type_index += auto9C2BAB61_ai ) {
                    if ((lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_unit_type[lv_unit_type_index] == "EliteMarine")) {
                        lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_unit_type[lv_unit_type_index] = "Marine";
                    }

                }
            }
            lib1_gf_UpdateHandCardText(lp_player, lv_hand_index);
        }
        else if ((lp_start_of_play_phase == true) && (lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_id == lib1_gf_GetCardIDByName("Honor Guard"))) {
            if ((lib1_gv_player[lp_player].lv_heroes_lost >= 10)) {
                lib1_gf_DiscardCardFromHandtoDiscard(lp_player, lv_hand_index);
                lib1_gf_GenerateCardforHand(lp_player, lib1_gf_GetCardIDByName("Bitter Avengers"));
                lv_hand_index = (lv_hand_index - 1);
            }
            else if ((lib1_gv_player[lp_player].lv_heroes_lost >= 1)) {
                lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_base_text = ("Replace this card with Bitter Avengers once you've lost at least 10 heroic units (lost " + IntToString(lib1_gv_player[lp_player].lv_heroes_lost) + " so far).");
                lib1_gf_UpdateHandCardText(lp_player, lv_hand_index);
            }
        }
        else if ((lp_start_of_play_phase == true) && (lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_id == lib1_gf_GetCardIDByName("Archon of Justice"))) {
            lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_base_text = ("When killed, cast 1 Psionic Storm per heroic unit you've lost this game (lost " + IntToString(lib1_gv_player[lp_player].lv_heroes_lost) + " so far).");
            lib1_gf_UpdateHandCardText(lp_player, lv_hand_index);
        }
    }
}

void lib1_gf_ProcessResources (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gv_player[lp_player].lv_resources.lv_resource_chosen = "unchosen";
    lib1_gv_player[lp_player].lv_resources.lv_minerals_used = 0;
    lib1_gv_player[lp_player].lv_resources.lv_gas_used = 0;
    lib1_gv_player[lp_player].lv_resources.lv_previous_mineral_income = lib1_gv_player[lp_player].lv_resources.lv_mineral_income;
    lib1_gv_player[lp_player].lv_resources.lv_previous_gas_income = lib1_gv_player[lp_player].lv_resources.lv_gas_income;
    lib1_gf_UpdateResourceIcons(lp_player);
    lib1_gf_ResizeResourceUI(lp_player, 0);
    if ((lib1_gv_player[lp_player].lv_resources.lv_gas_income < lib1_gf_MaxGasIncome(lp_player)) && (lib1_gv_player[lp_player].lv_resources.lv_mineral_income < lib1_gf_MaxMineralIncome(lp_player))) {
        if ((lib1_gv_player[lp_player].lv_use_ai == true)) {
            lib1_gf_AIChooseResource(lp_player);
        }
        else {
            DialogSetVisible(lib1_gv_resource_chooser_dialog, PlayerGroupSingle(lp_player), true);
        }
    }
    else {
        if ((lib1_gv_player[lp_player].lv_resources.lv_mineral_income < lib1_gf_MaxMineralIncome(lp_player))) {
            lib1_gv_player[lp_player].lv_resources.lv_mineral_income = (lib1_gv_player[lp_player].lv_resources.lv_mineral_income + 1);
            lib1_gv_player[lp_player].lv_resources.lv_resource_chosen = "chosen";
        }
        else {
            if ((lib1_gv_player[lp_player].lv_resources.lv_gas_income < lib1_gf_MaxGasIncome(lp_player))) {
                lib1_gv_player[lp_player].lv_resources.lv_gas_income = (lib1_gv_player[lp_player].lv_resources.lv_gas_income + 1);
                lib1_gv_player[lp_player].lv_resources.lv_resource_chosen = "chosen";
            }

        }
        lib1_gf_FinalizeResourceChoice(lp_player);
        lib1_gf_EnableAllCardButtons(lp_player);
        DialogSetVisible(lib1_gv_end_phase_dialog, PlayerGroupSingle(lp_player), true);
    }
}

void lib1_gf_CheckForResourceChoice (int lp_player) {
    // Variable Declarations
    const fixed lv_dELAY = 0.05;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((GameGetMissionTime() > (lib1_gv_player[lp_player].lv_button_click_time + lv_dELAY)) && (DialogIsVisible(lib1_gv_resource_chooser_dialog, lp_player) == false) && (lib1_gv_player[lp_player].lv_resources.lv_resource_chosen == "mineral")) {
        lib1_gv_player[lp_player].lv_resources.lv_resource_chosen = "chosen";
        lib1_gv_player[lp_player].lv_resources.lv_mineral_income = (lib1_gv_player[lp_player].lv_resources.lv_previous_mineral_income + 1);
        lib1_gf_FinalizeResourceChoice(lp_player);
        lib1_gf_AllowCardSelection(lp_player);
    }
    else {
        if ((GameGetMissionTime() > (lib1_gv_player[lp_player].lv_button_click_time + lv_dELAY)) && (DialogIsVisible(lib1_gv_resource_chooser_dialog, lp_player) == false) && (lib1_gv_player[lp_player].lv_resources.lv_resource_chosen == "gas")) {
            lib1_gv_player[lp_player].lv_resources.lv_resource_chosen = "chosen";
            lib1_gv_player[lp_player].lv_resources.lv_gas_income = (lib1_gv_player[lp_player].lv_resources.lv_previous_gas_income + 1);
            lib1_gf_FinalizeResourceChoice(lp_player);
            lib1_gf_AllowCardSelection(lp_player);
        }

    }
}

void lib1_gf_FinalizeResourceChoice (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_UpdateResourceIcons(lp_player);
    lib1_gf_ResizeResourceUI(lp_player, 0);
    lib1_gf_UpdateCardPropertiesBasedonGameState(lp_player, false);
}

void lib1_gf_GiveAFKPlayerResource (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((lib1_gv_player[lp_player].lv_resources.lv_mineral_income < lib1_gf_MaxMineralIncome(lp_player))) {
        lib1_gv_player[lp_player].lv_resources.lv_mineral_income = (lib1_gv_player[lp_player].lv_resources.lv_previous_mineral_income + 1);
        lib1_gv_player[lp_player].lv_resources.lv_resource_chosen = "chosen";
    }
    else {
        if ((lib1_gv_player[lp_player].lv_resources.lv_gas_income < lib1_gf_MaxGasIncome(lp_player))) {
            lib1_gv_player[lp_player].lv_resources.lv_gas_income = (lib1_gv_player[lp_player].lv_resources.lv_previous_gas_income + 1);
            lib1_gv_player[lp_player].lv_resources.lv_resource_chosen = "chosen";
        }

    }
    lib1_gf_UpdateResourceIcons(lp_player);
    lib1_gf_ResizeResourceUI(lp_player, 0);
}

void lib1_gf_StartBattlePhase () {
    // Variable Declarations
    int lv_team;
    int lv_player;
    int lv_effect_class;

    // Automatic Variable Declarations
    const int autoB9546A87_ae = 1;
    const int autoB9546A87_ai = 1;
    playergroup autoB55339DF_g;
    const int autoC8A86BDB_ae = 1;
    const int autoC8A86BDB_ai = 1;
    playergroup auto281AECAA_g;
    const int auto8D6BA7C7_ae = lib1_gv_eF_MAX;
    const int auto8D6BA7C7_ai = 1;
    const int auto0AA0AD6E_ae = 1;
    const int auto0AA0AD6E_ai = 1;
    playergroup auto9E78DE74_g;

    // Variable Initialization

    // Implementation
    lib1_gf_UnpauseBattle();
    TriggerEnable(lib1_gt_SelectCardPlayPhase, false);
    PlayerGroupClear(lib1_gv_ready_players);
    DialogSetVisible(lib1_gv_resource_chooser_dialog, PlayerGroupAll(), false);
    DialogControlSetVisible(lib1_gv_turn_timer_number, PlayerGroupAll(), true);
    lv_team = 0;
    for ( ; ( (autoB9546A87_ai >= 0 && lv_team <= autoB9546A87_ae) || (autoB9546A87_ai < 0 && lv_team >= autoB9546A87_ae) ) ; lv_team += autoB9546A87_ai ) {
        autoB55339DF_g = lib1_gv_team[lv_team];
        lv_player = -1;
        while (true) {
            lv_player = PlayerGroupNextPlayer(autoB55339DF_g, lv_player);
            if (lv_player < 0) { break; }
            lib1_gf_DisallowCardSelection(lv_player);
            if ((lib1_gv_player[lv_player].lv_resources.lv_resource_chosen == "unchosen")) {
                lib1_gf_GiveAFKPlayerResource(lv_player);
            }

        }
    }
    lib1_gv_current_phase = "Battle";
    TimerStart(lib1_gv_turn_timer, lib1_gv_bATTLE_PHASE_LENGTH, false, c_timeGame);
    lib1_gv_turn_timer_value = FixedToInt(lib1_gv_bATTLE_PHASE_LENGTH);
    libNtve_gf_SetDialogItemText(lib1_gv_turn_timer_phase, StringExternal("Param/Value/lib_1_092C9AF1"), PlayerGroupAll());
    lib1_gf_UpdateTurnTimer();
    lib1_gf_ClearRemovalHistory();
    lib1_gv_units_created_this_battle_phase = UnitGroupEmpty();
    lv_team = 0;
    for ( ; ( (autoC8A86BDB_ai >= 0 && lv_team <= autoC8A86BDB_ae) || (autoC8A86BDB_ai < 0 && lv_team >= autoC8A86BDB_ae) ) ; lv_team += autoC8A86BDB_ai ) {
        lib1_gf_UseRequestedKeystoneEnergy(lv_team);
        auto281AECAA_g = lib1_gv_team[lv_team];
        lv_player = -1;
        while (true) {
            lv_player = PlayerGroupNextPlayer(auto281AECAA_g, lv_player);
            if (lv_player < 0) { break; }
            lib1_gf_ProcessPlayedCards(lv_player);
            lib1_gf_ResizeResourceUI(lv_player, 0.5);
        }
        lib1_gf_UpdateKeystoneChannelText(lv_team);
    }
    lib1_gf_AddEachBattlePhaseEffectstotheQueue();
    lib1_gf_ExecuteEffectQueue(lib1_gv_eF_PLAY_CARD);
    lib1_gf_ExecuteEffectQueue(lib1_gv_eF_CREATE_UNIT);
    lib1_gf_TriggerEachBattlePhasePostPlayEffectQueueEffects();
    lib1_gf_ProcessStasis();
    lib1_gf_OrderAllUnits();
    lib1_gf_OrderStructurestoTrainUnits();
    lv_effect_class = 2;
    for ( ; ( (auto8D6BA7C7_ai >= 0 && lv_effect_class <= auto8D6BA7C7_ae) || (auto8D6BA7C7_ai < 0 && lv_effect_class >= auto8D6BA7C7_ae) ) ; lv_effect_class += auto8D6BA7C7_ai ) {
        lib1_gf_ExecuteEffectQueue(lv_effect_class);
    }
    lib1_gf_TriggerEachBattlePhasePostEffectQueueEffects();
    lv_team = 0;
    for ( ; ( (auto0AA0AD6E_ai >= 0 && lv_team <= auto0AA0AD6E_ae) || (auto0AA0AD6E_ai < 0 && lv_team >= auto0AA0AD6E_ae) ) ; lv_team += auto0AA0AD6E_ai ) {
        auto9E78DE74_g = lib1_gv_team[lv_team];
        lv_player = -1;
        while (true) {
            lv_player = PlayerGroupNextPlayer(auto9E78DE74_g, lv_player);
            if (lv_player < 0) { break; }
            lib1_gf_UpdateDeckUI(lv_player);
        }
    }
    lib1_gf_RemoveAllBehaviorsFromTrophiesandPets();
}

void lib1_gf_UnpauseBattle () {
    // Automatic Variable Declarations
    // Implementation
    GameSetGlobalTimeScale(1.0);
    UnitPauseAll(false);
    GamePauseAllCooldowns(false);
}

void lib1_gf_ProcessPlayedCards (int lp_player) {
    // Variable Declarations
    int lv_hand_index;
    unitgroup lv_units_created;
    unit lv_unit;
    int lv_effect_class;

    // Automatic Variable Declarations
    const int auto82C1944D_ae = lib1_gv_eF_MAX;
    const int auto82C1944D_ai = 1;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Implementation
    lib1_gv_player[lp_player].lv_cards_played_this_turn = 0;
    while ((lv_hand_index <= lib1_gf_TopofHand(lp_player))) {
        if ((lib1_gv_player[lp_player].lv_hand.lv_selected[lv_hand_index] == true)) {
            lib1_gv_player[lp_player].lv_cards_played_this_turn = (lib1_gv_player[lp_player].lv_cards_played_this_turn + 1);
            if ((lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_mineral < 0)) {
                lib1_gv_player[lp_player].lv_resources.lv_mineral_income = (lib1_gv_player[lp_player].lv_resources.lv_mineral_income + lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_mineral);
                lib1_gv_player[lp_player].lv_resources.lv_minerals_used = (lib1_gv_player[lp_player].lv_resources.lv_minerals_used + lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_mineral);
            }

            if ((lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_gas < 0)) {
                lib1_gv_player[lp_player].lv_resources.lv_gas_income = (lib1_gv_player[lp_player].lv_resources.lv_gas_income + lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_gas);
                lib1_gv_player[lp_player].lv_resources.lv_gas_used = (lib1_gv_player[lp_player].lv_resources.lv_gas_used + lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_gas);
            }

            lv_units_created = lib1_gf_SummonUnitsFromHandCard(lp_player, lv_hand_index);
            UnitGroupAddUnitGroup(lib1_gv_units_created_this_battle_phase, lv_units_created);
            if ((lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_default_effect != null)) {
                lib1_gf_AddEffecttoQueue(lp_player, lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_id, lib1_gv_eF_DEFAULT, lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_default_effect, lv_units_created, lib1_gv_player[lp_player].lv_hand.lv_channel_enabled[lv_hand_index]);
            }

            lv_effect_class = 0;
            for ( ; ( (auto82C1944D_ai >= 0 && lv_effect_class <= auto82C1944D_ae) || (auto82C1944D_ai < 0 && lv_effect_class >= auto82C1944D_ae) ) ; lv_effect_class += auto82C1944D_ai ) {
                if ((lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_effect[lv_effect_class] != null)) {
                    lib1_gf_AddEffecttoQueue(lp_player, lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_id, lv_effect_class, lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_effect[lv_effect_class], lv_units_created, lib1_gv_player[lp_player].lv_hand.lv_channel_enabled[lv_hand_index]);
                }

            }
            lib1_gf_TriggerWhenPlayedEffectsFromHandCard(lp_player, lv_hand_index);
            lib1_gf_FinishPlayingCardandAnimate(lp_player, lv_hand_index);
        }
        else {
            lv_hand_index = (lv_hand_index + 1);
        }
    }
}

void lib1_gf_TriggerWhenPlayedEffectsFromHandCard (int lp_player, int lp_played_hand_index) {
    // Variable Declarations
    unit lv_unit;
    int lv_top_of_hand;
    int lv_looping_hand_index;

    // Automatic Variable Declarations
    unitgroup autoD7E9E7F1_g;
    int autoD7E9E7F1_u;
    unitgroup autoD382072D_g;
    int autoD382072D_u;
    int auto1D38C3BA_ae;
    const int auto1D38C3BA_ai = 1;

    // Variable Initialization

    // Implementation
    if ((lib1_gv_player[lp_player].lv_hand.lv_card[lp_played_hand_index].lv_type == lib1_gv_sTRUCTURE)) {
        autoD7E9E7F1_g = UnitGroup("Forge", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterDazed - 32))), 0);
        autoD7E9E7F1_u = UnitGroupCount(autoD7E9E7F1_g, c_unitCountAll);
        for (;; autoD7E9E7F1_u -= 1) {
            lv_unit = UnitGroupUnitFromEnd(autoD7E9E7F1_g, autoD7E9E7F1_u);
            if (lv_unit == null) { break; }
            lib1_gf_AddEffecttoQueue(lp_player, lib1_gf_GetCardIDByName("Forge"), lib1_gv_eF_DEFAULT, lib1_gt_EffectForgeEffect, UnitGroupEmpty(), false);
        }
    }

    if ((lib1_gv_player[lp_player].lv_hand.lv_card[lp_played_hand_index].lv_subtype == lib1_gv_eVOLUTION)) {
        lib1_gf_AddEffecttoQueue(lp_player, -1, lib1_gv_eF_BUFF_UNITS, lib1_gt_EffectMutableMorph, UnitGroupEmpty(), false);
        autoD382072D_g = UnitGroup("EvolutionChamber", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterDazed - 32))), 0);
        autoD382072D_u = UnitGroupCount(autoD382072D_g, c_unitCountAll);
        for (;; autoD382072D_u -= 1) {
            lv_unit = UnitGroupUnitFromEnd(autoD382072D_g, autoD382072D_u);
            if (lv_unit == null) { break; }
            lib1_gf_AddEffecttoQueue(lp_player, lib1_gf_GetCardIDByName("Evolution Chamber"), lib1_gv_eF_BUFF_UNITS, lib1_gt_EffectEvolutionChamberEffect, UnitGroupEmpty(), false);
        }
    }

    if ((lib1_gv_player[lp_player].lv_hand.lv_card[lp_played_hand_index].lv_subtype == "UED")) {
        lv_top_of_hand = lib1_gf_TopofHand(lp_player);
        auto1D38C3BA_ae = lv_top_of_hand;
        lv_looping_hand_index = 0;
        for ( ; ( (auto1D38C3BA_ai >= 0 && lv_looping_hand_index <= auto1D38C3BA_ae) || (auto1D38C3BA_ai < 0 && lv_looping_hand_index >= auto1D38C3BA_ae) ) ; lv_looping_hand_index += auto1D38C3BA_ai ) {
            if ((lib1_gv_player[lp_player].lv_hand.lv_card[lv_looping_hand_index].lv_name == "Aleksander")) {
                lib1_gf_AddUnittoHandCard(lp_player, lv_looping_hand_index, 2, "EliteMarine");
            }

        }
    }

}

void lib1_gf_TriggerWhenPlayedEffectsFromDeckCard (int lp_player, int lp_deck_index) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup autoD7190D74_g;
    int autoD7190D74_u;
    unitgroup auto46E27C06_g;
    int auto46E27C06_u;

    // Variable Initialization

    // Implementation
    if ((lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index].lv_type == lib1_gv_sTRUCTURE)) {
        autoD7190D74_g = UnitGroup("Forge", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterDazed - 32))), 0);
        autoD7190D74_u = UnitGroupCount(autoD7190D74_g, c_unitCountAll);
        for (;; autoD7190D74_u -= 1) {
            lv_unit = UnitGroupUnitFromEnd(autoD7190D74_g, autoD7190D74_u);
            if (lv_unit == null) { break; }
            lib1_gf_AddEffecttoQueue(lp_player, lib1_gf_GetCardIDByName("Forge"), lib1_gv_eF_DEFAULT, lib1_gt_EffectForgeEffect, UnitGroupEmpty(), false);
        }
    }

    if ((lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index].lv_subtype == lib1_gv_eVOLUTION)) {
        lib1_gf_AddEffecttoQueue(lp_player, -1, lib1_gv_eF_BUFF_UNITS, lib1_gt_EffectMutableMorph, UnitGroupEmpty(), false);
        auto46E27C06_g = UnitGroup("EvolutionChamber", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterDazed - 32))), 0);
        auto46E27C06_u = UnitGroupCount(auto46E27C06_g, c_unitCountAll);
        for (;; auto46E27C06_u -= 1) {
            lv_unit = UnitGroupUnitFromEnd(auto46E27C06_g, auto46E27C06_u);
            if (lv_unit == null) { break; }
            lib1_gf_AddEffecttoQueue(lp_player, lib1_gf_GetCardIDByName("Evolution Chamber"), lib1_gv_eF_BUFF_UNITS, lib1_gt_EffectEvolutionChamberEffect, UnitGroupEmpty(), false);
        }
    }

}

void lib1_gf_FinishPlayingCardandAnimate (int lp_player, int lp_hand_index) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_HandCardPlayAnimation(lp_player, lp_hand_index);
    if ((UnitGroupCount(UnitGroup("TemplarArchive", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterDazed - 32))), 0), c_unitCountAlive) >= 1) && (lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_type == lib1_gv_aCTION)) {
        lib1_gf_ShuffleHandCardIntoDeck(lp_player, lp_hand_index);
    }
    else {
        lib1_gf_DiscardCardFromHandtoDiscard(lp_player, lp_hand_index);
    }
}

trigger auto_lib1_gf_AddEachBattlePhaseEffectstotheQueue_Trigger = null;

void lib1_gf_AddEachBattlePhaseEffectstotheQueue () {
    if (auto_lib1_gf_AddEachBattlePhaseEffectstotheQueue_Trigger == null) {
        auto_lib1_gf_AddEachBattlePhaseEffectstotheQueue_Trigger = TriggerCreate("auto_lib1_gf_AddEachBattlePhaseEffectstotheQueue_TriggerFunc");
    }

    TriggerExecute(auto_lib1_gf_AddEachBattlePhaseEffectstotheQueue_Trigger, false, false);
}

bool auto_lib1_gf_AddEachBattlePhaseEffectstotheQueue_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;
    int lv_team;

    // Automatic Variable Declarations
    unitgroup auto68412E80_g;
    int auto68412E80_u;
    unitgroup autoD914EFE0_g;
    int autoD914EFE0_u;

    // Variable Initialization

    // Implementation
    auto68412E80_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto68412E80_u = UnitGroupCount(auto68412E80_g, c_unitCountAll);
    for (;; auto68412E80_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto68412E80_g, auto68412E80_u);
        if (lv_unit == null) { break; }
        if ((UnitHasBehavior2(lv_unit, "PsionicMaster") == true)) {
            lib1_gf_AddEffecttoQueue(UnitGetOwner(lv_unit), lib1_gf_GetCardIDByName("Tassadar"), lib1_gv_eF_PLAY_CARD, lib1_gt_EffectTassadarPeriodicEffect, UnitGroupEmpty(), false);
        }

        if ((UnitHasBehavior2(lv_unit, "RakshirChampion") == true)) {
            lib1_gf_AddEffecttoQueue(UnitGetOwner(lv_unit), lib1_gf_GetCardIDByName("Ma'lash"), lib1_gv_eF_REMOVE_UNIT, lib1_gt_EffectMalashPeriodicEffect, libNtve_gf_ConvertUnitToUnitGroup(lv_unit), false);
        }

    }
    autoD914EFE0_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterDazed - 32))), 0);
    autoD914EFE0_u = UnitGroupCount(autoD914EFE0_g, c_unitCountAll);
    for (;; autoD914EFE0_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoD914EFE0_g, autoD914EFE0_u);
        if (lv_unit == null) { break; }
        if ((UnitGetType(lv_unit) == "MutationChamber")) {
            lib1_gf_AddEffecttoQueue(UnitGetOwner(lv_unit), lib1_gf_GetCardIDByName("Mutation Chamber"), lib1_gv_eF_BUFF_TARGETED_UNIT, lib1_gt_EffectMutationChamberPeriodicEffect, UnitGroupEmpty(), false);
        }
        else if ((UnitGetType(lv_unit) == "TwilightCouncil")) {
            lib1_gf_AddEffecttoQueue(UnitGetOwner(lv_unit), lib1_gf_GetCardIDByName("Twilight Council"), lib1_gv_eF_DISCARD_FROM_HAND, lib1_gt_EffectTwilightCouncilPeriodicShuffle, UnitGroupEmpty(), false);
        }
    }
    return true;
}

trigger auto_lib1_gf_TriggerEachBattlePhasePostPlayEffectQueueEffects_Trigger = null;

void lib1_gf_TriggerEachBattlePhasePostPlayEffectQueueEffects () {
    if (auto_lib1_gf_TriggerEachBattlePhasePostPlayEffectQueueEffects_Trigger == null) {
        auto_lib1_gf_TriggerEachBattlePhasePostPlayEffectQueueEffects_Trigger = TriggerCreate("auto_lib1_gf_TriggerEachBattlePhasePostPlayEffectQueueEffects_TriggerFunc");
    }

    TriggerExecute(auto_lib1_gf_TriggerEachBattlePhasePostPlayEffectQueueEffects_Trigger, false, false);
}

bool auto_lib1_gf_TriggerEachBattlePhasePostPlayEffectQueueEffects_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_team;
    int lv_player;
    int lv_hand_index;

    // Automatic Variable Declarations
    const int autoB3D454C9_ae = 1;
    const int autoB3D454C9_ai = 1;
    playergroup auto852DAA38_g;
    int autoA8E9CE6D_ae;
    const int autoA8E9CE6D_ai = 1;
    int auto5E93875B_ae;
    const int auto5E93875B_ai = 1;
    const int auto847B54CE_ae = lib1_gv_mAX_PLAYERS;
    const int auto847B54CE_ai = 1;

    // Variable Initialization

    // Implementation
    lv_team = 0;
    for ( ; ( (autoB3D454C9_ai >= 0 && lv_team <= autoB3D454C9_ae) || (autoB3D454C9_ai < 0 && lv_team >= autoB3D454C9_ae) ) ; lv_team += autoB3D454C9_ai ) {
        auto852DAA38_g = lib1_gv_team[lv_team];
        lv_player = -1;
        while (true) {
            lv_player = PlayerGroupNextPlayer(auto852DAA38_g, lv_player);
            if (lv_player < 0) { break; }
            if ((lib1_gf_EffectInEffectQueueforPlayer(lv_player, lib1_gv_eF_DISCARD_FROM_HAND, lib1_gv_card[lib1_gf_GetCardIDByName("Tarsonis Security")].lv_default_effect) == false) && (lib1_gf_TopofHand(lv_player) >= 0)) {
                autoA8E9CE6D_ae = lib1_gf_TopofHand(lv_player);
                lv_hand_index = 0;
                for ( ; ( (autoA8E9CE6D_ai >= 0 && lv_hand_index <= autoA8E9CE6D_ae) || (autoA8E9CE6D_ai < 0 && lv_hand_index >= autoA8E9CE6D_ae) ) ; lv_hand_index += autoA8E9CE6D_ai ) {
                    if ((lib1_gv_player[lv_player].lv_hand.lv_card[lv_hand_index].lv_id == lib1_gf_GetCardIDByName("Riot"))) {
                        lib1_gf_RiotHandEffect(lv_player);
                    }

                }
            }

            if ((lib1_gf_TopofHand(lv_player) >= 0)) {
                auto5E93875B_ae = lib1_gf_TopofHand(lv_player);
                lv_hand_index = 0;
                for ( ; ( (auto5E93875B_ai >= 0 && lv_hand_index <= auto5E93875B_ae) || (auto5E93875B_ai < 0 && lv_hand_index >= auto5E93875B_ae) ) ; lv_hand_index += auto5E93875B_ai ) {
                    if ((lib1_gv_player[lv_player].lv_hand.lv_card[lv_hand_index].lv_id == lib1_gf_GetCardIDByName("Infestation"))) {
                        lib1_gf_InfestationHandEffect(lv_player);
                    }

                }
            }

        }
    }
    lv_player = 1;
    for ( ; ( (auto847B54CE_ai >= 0 && lv_player <= auto847B54CE_ae) || (auto847B54CE_ai < 0 && lv_player >= auto847B54CE_ae) ) ; lv_player += auto847B54CE_ai ) {
        if ((UnitGroupCount(UnitGroup("NydusNetwork", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterDazed - 32))), 0), c_unitCountAlive) >= 1)) {
            lib1_gf_NydusNetworkEffect(lv_player);
        }

    }
    return true;
}

trigger auto_lib1_gf_TriggerEachBattlePhasePostEffectQueueEffects_Trigger = null;

void lib1_gf_TriggerEachBattlePhasePostEffectQueueEffects () {
    if (auto_lib1_gf_TriggerEachBattlePhasePostEffectQueueEffects_Trigger == null) {
        auto_lib1_gf_TriggerEachBattlePhasePostEffectQueueEffects_Trigger = TriggerCreate("auto_lib1_gf_TriggerEachBattlePhasePostEffectQueueEffects_TriggerFunc");
    }

    TriggerExecute(auto_lib1_gf_TriggerEachBattlePhasePostEffectQueueEffects_Trigger, false, false);
}

bool auto_lib1_gf_TriggerEachBattlePhasePostEffectQueueEffects_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;
    int lv_team;

    // Automatic Variable Declarations
    const int auto5C3F0576_ae = 1;
    const int auto5C3F0576_ai = 1;
    playergroup auto9DBED6E2_g;
    unitgroup auto7FD1CBD5_g;
    int auto7FD1CBD5_u;
    unitgroup autoBFCEA595_g;
    int autoBFCEA595_u;
    unitgroup auto9BC638E0_g;
    int auto9BC638E0_u;

    // Variable Initialization

    // Implementation
    lv_team = 0;
    for ( ; ( (auto5C3F0576_ai >= 0 && lv_team <= auto5C3F0576_ae) || (auto5C3F0576_ai < 0 && lv_team >= auto5C3F0576_ae) ) ; lv_team += auto5C3F0576_ai ) {
        auto9DBED6E2_g = lib1_gv_team[lv_team];
        lv_player = -1;
        while (true) {
            lv_player = PlayerGroupNextPlayer(auto9DBED6E2_g, lv_player);
            if (lv_player < 0) { break; }
            if ((lib1_gv_player[lv_player].lv_cards_played_this_turn == 0) && (lib1_gf_TopofHand(lv_player) >= 0)) {
                lib1_gf_GatheringProtossEffect(lv_player);
            }

        }
    }
    auto7FD1CBD5_g = lib1_gv_units_from_card[lib1_gf_GetCardIDByName("Sieging Ravagers")];
    auto7FD1CBD5_u = UnitGroupCount(auto7FD1CBD5_g, c_unitCountAll);
    for (;; auto7FD1CBD5_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto7FD1CBD5_g, auto7FD1CBD5_u);
        if (lv_unit == null) { break; }
        if ((UnitGetType(lv_unit) == "Ravager")) {
            lib1_gf_SiegingRavagersEffect(UnitGetOwner(lv_unit), lv_unit);
        }

    }
    autoBFCEA595_g = lib1_gv_units_from_card[lib1_gf_GetCardIDByName("Creeping Queens")];
    autoBFCEA595_u = UnitGroupCount(autoBFCEA595_g, c_unitCountAll);
    for (;; autoBFCEA595_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoBFCEA595_g, autoBFCEA595_u);
        if (lv_unit == null) { break; }
        if ((UnitGetType(lv_unit) == "Queen")) {
            lib1_gf_CreepingQueensEffect(UnitGetOwner(lv_unit), lv_unit);
        }

    }
    auto9BC638E0_g = lib1_gv_units_from_card[lib1_gf_GetCardIDByName("Barraging Disruptors")];
    auto9BC638E0_u = UnitGroupCount(auto9BC638E0_g, c_unitCountAll);
    for (;; auto9BC638E0_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto9BC638E0_g, auto9BC638E0_u);
        if (lv_unit == null) { break; }
        if ((UnitGetType(lv_unit) == "Disruptor")) {
            lib1_gf_BarragingDisruptorsEffect(UnitGetOwner(lv_unit), lv_unit);
        }

    }
    return true;
}

void lib1_gf_ProcessStasis () {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup autoE9EBDD1B_g;
    int autoE9EBDD1B_u;

    // Variable Initialization

    // Implementation
    autoE9EBDD1B_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE9EBDD1B_u = UnitGroupCount(autoE9EBDD1B_g, c_unitCountAll);
    for (;; autoE9EBDD1B_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoE9EBDD1B_g, autoE9EBDD1B_u);
        if (lv_unit == null) { break; }
        UnitBehaviorRemove(lv_unit, "StasisFieldStructure", c_unitBehaviorCountAll);
        UnitBehaviorRemove(lv_unit, "StasisFieldTimedLifeStructure", c_unitBehaviorCountAll);
        if ((UnitHasBehavior2(lv_unit, "Contaminate1stTurn") == true)) {
            UnitBehaviorRemove(lv_unit, "Contaminate1stTurn", c_unitBehaviorCountAll);
        }
        else if ((UnitHasBehavior2(lv_unit, "Contaminated") == true)) {
            UnitBehaviorRemove(lv_unit, "Contaminated", c_unitBehaviorCountAll);
        }
    }
}

unitgroup lib1_gf_SummonUnitsFromHandCard (int lp_player, int lp_hand_index) {
    // Variable Declarations
    int lv_unit_type_index;
    int lv_unit_index;
    unitgroup lv_units_created;
    unit lv_unit;
    unit lv_nydus;

    // Automatic Variable Declarations
    const int autoAABA899B_ae = lib1_gv_mAX_UNIT_TYPE_PER_CARD;
    const int autoAABA899B_ai = 1;
    int auto960031B8_ae;
    const int auto960031B8_ai = 1;
    unitgroup auto57B21F26_g;
    int auto57B21F26_u;
    unitgroup auto0B66BA8F_g;
    int auto0B66BA8F_u;
    unitgroup auto62BEF632_g;
    int auto62BEF632_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Implementation
    lv_unit_type_index = 0;
    for ( ; ( (autoAABA899B_ai >= 0 && lv_unit_type_index <= autoAABA899B_ae) || (autoAABA899B_ai < 0 && lv_unit_type_index >= autoAABA899B_ae) ) ; lv_unit_type_index += autoAABA899B_ai ) {
        if ((lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_unit_count[lv_unit_type_index] > 0)) {
            auto960031B8_ae = lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_unit_count[lv_unit_type_index];
            lv_unit_index = 1;
            for ( ; ( (auto960031B8_ai >= 0 && lv_unit_index <= auto960031B8_ae) || (auto960031B8_ai < 0 && lv_unit_index >= auto960031B8_ae) ) ; lv_unit_index += auto960031B8_ai ) {
                UnitCreate(1, lib1_gf_UnitTypeHeroicConsidered(lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_unit_type[lv_unit_type_index], lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_heroic), 0, lp_player, RegionRandomPoint(lib1_gv_player[lp_player].lv_spawn_region), lib1_gf_RandomAngleforSpawn(lp_player));
                UnitGroupAdd(lv_units_created, UnitLastCreated());
                UnitGroupAdd(lib1_gv_units_from_card[lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_id], UnitLastCreated());
                UnitBehaviorAdd(UnitLastCreated(), "PermanentlyUncommandable", UnitLastCreated(), 1);
                if (((lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_rush == false) || (lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_stream == true))) {
                    UnitBehaviorAdd(UnitLastCreated(), "WaitingToMoveOut", UnitLastCreated(), 1);
                }

                if ((lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_heroic == true)) {
                    UnitBehaviorAdd(UnitLastCreated(), "Heroic", UnitLastCreated(), 1);
                    if (((UnitGetType(UnitLastCreated()) == "ZealotVeteran"))) {
                        UnitSetScale(UnitLastCreated(), 115.0, 115.0, 115.0);
                    }

                }

                if ((libNtve_gf_DialogItemImage(lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_ui.lv_border, lp_player) == ("Assets\\Textures\\ui_ingame_tabbutton_metalframe_amon.tga")) && (lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_id != lib1_gf_GetCardIDByName("Amon")) && (lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_id != lib1_gf_GetCardIDByName("Samir Duran"))) {
                    UnitBehaviorAdd(UnitLastCreated(), "VoidShade", UnitLastCreated(), 1);
                }

            }
        }

    }
    if ((lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_stream == true)) {
        UnitGroupAddUnitGroup(lib1_gv_streaming_units, lv_units_created);
    }

    if ((lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_rush == true)) {
        UnitGroupAddUnitGroup(lib1_gv_ready_units, lv_units_created);
    }
    else if ((lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_delay == true)) {
        auto57B21F26_g = lv_units_created;
        auto57B21F26_u = UnitGroupCount(auto57B21F26_g, c_unitCountAll);
        for (;; auto57B21F26_u -= 1) {
            lv_unit = UnitGroupUnitFromEnd(auto57B21F26_g, auto57B21F26_u);
            if (lv_unit == null) { break; }
            UnitBehaviorAdd(lv_unit, "Waiting2Turns", lv_unit, 1);
        }
        UnitGroupAddUnitGroup(lib1_gv_two_turn_wait_units, lv_units_created);
    }
    else if (true) {
        auto0B66BA8F_g = lv_units_created;
        auto0B66BA8F_u = UnitGroupCount(auto0B66BA8F_g, c_unitCountAll);
        for (;; auto0B66BA8F_u -= 1) {
            lv_unit = UnitGroupUnitFromEnd(auto0B66BA8F_g, auto0B66BA8F_u);
            if (lv_unit == null) { break; }
            UnitBehaviorAdd(lv_unit, "Waiting1Turn", lv_unit, 1);
        }
        UnitGroupAddUnitGroup(lib1_gv_one_turn_wait_units, lv_units_created);
    }
    if ((lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_type == lib1_gv_aGGRESSIVE)) {
        UnitGroupAddUnitGroup(lib1_gv_aggressive_units, lv_units_created);
    }
    else if ((lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_type == lib1_gv_dEFENSIVE)) {
        UnitGroupAddUnitGroup(lib1_gv_defensive_units, lv_units_created);
        auto62BEF632_g = lv_units_created;
        auto62BEF632_u = UnitGroupCount(auto62BEF632_g, c_unitCountAll);
        for (;; auto62BEF632_u -= 1) {
            lv_unit = UnitGroupUnitFromEnd(auto62BEF632_g, auto62BEF632_u);
            if (lv_unit == null) { break; }
            UnitBehaviorAdd(lv_unit, "Defensive", lv_unit, 1);
        }
    }
    else if ((lib1_gv_player[lp_player].lv_hand.lv_card[lp_hand_index].lv_type == lib1_gv_tACTICAL)) {
        UnitGroupAddUnitGroup(lib1_gv_tactical_units, lv_units_created);
    }
    return lv_units_created;
}

unitgroup lib1_gf_SummonUnitsFromDeckCard (int lp_player, int lp_deck_index) {
    // Variable Declarations
    int lv_unit_type_index;
    int lv_unit_index;
    unitgroup lv_units_created;
    unit lv_unit;
    unit lv_nydus;

    // Automatic Variable Declarations
    const int autoBD22D8CA_ae = lib1_gv_mAX_UNIT_TYPE_PER_CARD;
    const int autoBD22D8CA_ai = 1;
    int autoEB928DBF_ae;
    const int autoEB928DBF_ai = 1;
    unitgroup autoD9D17C4D_g;
    int autoD9D17C4D_u;
    unitgroup auto4AE15710_g;
    int auto4AE15710_u;
    unitgroup autoFDD7A368_g;
    int autoFDD7A368_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Implementation
    lv_unit_type_index = 0;
    for ( ; ( (autoBD22D8CA_ai >= 0 && lv_unit_type_index <= autoBD22D8CA_ae) || (autoBD22D8CA_ai < 0 && lv_unit_type_index >= autoBD22D8CA_ae) ) ; lv_unit_type_index += autoBD22D8CA_ai ) {
        if ((lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index].lv_unit_count[lv_unit_type_index] > 0)) {
            autoEB928DBF_ae = lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index].lv_unit_count[lv_unit_type_index];
            lv_unit_index = 1;
            for ( ; ( (autoEB928DBF_ai >= 0 && lv_unit_index <= autoEB928DBF_ae) || (autoEB928DBF_ai < 0 && lv_unit_index >= autoEB928DBF_ae) ) ; lv_unit_index += autoEB928DBF_ai ) {
                UnitCreate(1, lib1_gf_UnitTypeHeroicConsidered(lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index].lv_unit_type[lv_unit_type_index], lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index].lv_heroic), 0, lp_player, RegionRandomPoint(lib1_gv_player[lp_player].lv_spawn_region), lib1_gf_RandomAngleforSpawn(lp_player));
                UnitGroupAdd(lv_units_created, UnitLastCreated());
                UnitGroupAdd(lib1_gv_units_from_card[lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index].lv_id], UnitLastCreated());
                UnitBehaviorAdd(UnitLastCreated(), "PermanentlyUncommandable", UnitLastCreated(), 1);
                if (((lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index].lv_rush == false) || (lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index].lv_stream == true))) {
                    UnitBehaviorAdd(UnitLastCreated(), "WaitingToMoveOut", UnitLastCreated(), 1);
                }

                if ((lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index].lv_heroic == true)) {
                    UnitBehaviorAdd(UnitLastCreated(), "Heroic", UnitLastCreated(), 1);
                    if (((UnitGetType(UnitLastCreated()) == "ZealotVeteran"))) {
                        UnitSetScale(UnitLastCreated(), 115.0, 115.0, 115.0);
                    }

                }

                if ((libNtve_gf_DialogItemImage(lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index].lv_ui.lv_border, lp_player) == ("Assets\\Textures\\ui_ingame_tabbutton_metalframe_amon.tga")) && (lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index].lv_race != lib1_gv_vOID)) {
                    UnitBehaviorAdd(UnitLastCreated(), "VoidShade", UnitLastCreated(), 1);
                }

            }
        }

    }
    if ((lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index].lv_stream == true)) {
        UnitGroupAddUnitGroup(lib1_gv_streaming_units, lv_units_created);
    }

    if ((lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index].lv_rush == true)) {
        UnitGroupAddUnitGroup(lib1_gv_ready_units, lv_units_created);
    }
    else if ((lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index].lv_delay == true)) {
        autoD9D17C4D_g = lv_units_created;
        autoD9D17C4D_u = UnitGroupCount(autoD9D17C4D_g, c_unitCountAll);
        for (;; autoD9D17C4D_u -= 1) {
            lv_unit = UnitGroupUnitFromEnd(autoD9D17C4D_g, autoD9D17C4D_u);
            if (lv_unit == null) { break; }
            UnitBehaviorAdd(lv_unit, "Waiting2Turns", lv_unit, 1);
        }
        UnitGroupAddUnitGroup(lib1_gv_two_turn_wait_units, lv_units_created);
    }
    else if (true) {
        auto4AE15710_g = lv_units_created;
        auto4AE15710_u = UnitGroupCount(auto4AE15710_g, c_unitCountAll);
        for (;; auto4AE15710_u -= 1) {
            lv_unit = UnitGroupUnitFromEnd(auto4AE15710_g, auto4AE15710_u);
            if (lv_unit == null) { break; }
            UnitBehaviorAdd(lv_unit, "Waiting1Turn", lv_unit, 1);
        }
        UnitGroupAddUnitGroup(lib1_gv_one_turn_wait_units, lv_units_created);
    }
    if ((lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index].lv_type == lib1_gv_aGGRESSIVE)) {
        UnitGroupAddUnitGroup(lib1_gv_aggressive_units, lv_units_created);
    }
    else if ((lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index].lv_type == lib1_gv_dEFENSIVE)) {
        UnitGroupAddUnitGroup(lib1_gv_defensive_units, lv_units_created);
        autoFDD7A368_g = lv_units_created;
        autoFDD7A368_u = UnitGroupCount(autoFDD7A368_g, c_unitCountAll);
        for (;; autoFDD7A368_u -= 1) {
            lv_unit = UnitGroupUnitFromEnd(autoFDD7A368_g, autoFDD7A368_u);
            if (lv_unit == null) { break; }
            UnitBehaviorAdd(lv_unit, "Defensive", lv_unit, 1);
        }
    }
    else if ((lib1_gv_player[lp_player].lv_deck.lv_card[lp_deck_index].lv_type == lib1_gv_tACTICAL)) {
        UnitGroupAddUnitGroup(lib1_gv_tactical_units, lv_units_created);
    }
    return lv_units_created;
}

string lib1_gf_UnitTypeHeroicConsidered (string lp_type, bool lp_heroic) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_type == "Zergling") && (lp_heroic == true)) {
        return "\xE8\x8B\xB1\xE9\x9B\x84\xE8\xB7\xB3\xE8\x99\xAB";
    }
    else if ((lp_type == "Baneling") && (lp_heroic == true)) {
        return "BanelingHeroic";
    }
    else if ((lp_type == "Roach") && (lp_heroic == true)) {
        return "RoachVile";
    }
    else if ((lp_type == "Hydralisk") && (lp_heroic == true)) {
        return "HydraliskHunterKiller";
    }
    else if ((lp_type == "Ultralisk") && (lp_heroic == true)) {
        return "UltraliskTorrasque";
    }
    else if ((lp_type == "Mutalisk") && (lp_heroic == true)) {
        return "MutaliskKukulza";
    }
    else if ((lp_type == "Marine") && (lp_heroic == true)) {
        return "\xE4\xBD\xA3\xE5\x85\xB5\xE9\x99\x86\xE6\x88\x98\xE9\x98\x9F";
    }
    else if ((lp_type == "ShieldMarine") && (lp_heroic == true)) {
        return "\xE7\xB2\xBE\xE8\x8B\xB1\xE9\x99\x86\xE6\x88\x98\xE9\x98\x9F";
    }
    else if ((lp_type == "Medic") && (lp_heroic == true)) {
        return "\xE8\x8E\xAB\xE6\xAF\x94\xE6\x96\xAF\xE5\x8C\xBB\xE7\x96\x97\xE5\x85\xB5";
    }
    return lp_type;
}

trigger auto_lib1_gf_ApplyWaitingTint_Trigger = null;
unit auto_lib1_gf_ApplyWaitingTint_lp_unit;
bool auto_lib1_gf_ApplyWaitingTint_lp_ignore_conditions;

void lib1_gf_ApplyWaitingTint (unit lp_unit, bool lp_ignore_conditions) {
    auto_lib1_gf_ApplyWaitingTint_lp_unit = lp_unit;
    auto_lib1_gf_ApplyWaitingTint_lp_ignore_conditions = lp_ignore_conditions;

    if (auto_lib1_gf_ApplyWaitingTint_Trigger == null) {
        auto_lib1_gf_ApplyWaitingTint_Trigger = TriggerCreate("auto_lib1_gf_ApplyWaitingTint_TriggerFunc");
    }

    TriggerExecute(auto_lib1_gf_ApplyWaitingTint_Trigger, false, false);
}

bool auto_lib1_gf_ApplyWaitingTint_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_lib1_gf_ApplyWaitingTint_lp_unit;
    bool lp_ignore_conditions = auto_lib1_gf_ApplyWaitingTint_lp_ignore_conditions;

    // Automatic Variable Declarations
    // Implementation
    if ((UnitGetType(lp_unit) != "FallenXelnagaAmon") && ((UnitHasBehavior2(lp_unit, "WaitingToMoveOut") == true) || (UnitHasBehavior2(lp_unit, "CasterWaitingToMoveOut") == true) || (lp_ignore_conditions == true))) {
        UnitGroupAdd(lib1_gv_tinted_units, lp_unit);
        libNtve_gf_SendActorMessageToUnit(lp_unit, "SetTintColor {0,50,200 10.000000}");
        libNtve_gf_SendActorMessageToUnit(lp_unit, "SetOpacity 0.400000");
    }

    return true;
}

void lib1_gf_ClearWaitingTint (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitGetType(lp_unit) != "FallenXelnagaAmon") && (UnitGroupHasUnit(lib1_gv_tinted_units, lp_unit) == true) && (UnitHasBehavior2(lp_unit, "WaitingToMoveOut") == false) && (UnitHasBehavior2(lp_unit, "CasterWaitingToMoveOut") == false)) {
        UnitGroupRemove(lib1_gv_tinted_units, lp_unit);
        if ((UnitGetType(lp_unit) == "HotSLeviathan")) {
            libNtve_gf_SendActorMessageToUnit(lp_unit, "SetTintColor 255,255,255");
            libNtve_gf_SendActorMessageToUnit(lp_unit, "SetOpacity 1.000000");
        }
        else {
            libNtve_gf_SendActorMessageToUnit(lp_unit, "SetTintColor 255,255,255 0.500000");
            libNtve_gf_SendActorMessageToUnit(lp_unit, "SetOpacity 1.000000 0.500000");
        }
    }

}

void lib1_gf_RemoveWaitingToMoveOutBuffs (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    UnitBehaviorRemove(lp_unit, "WaitingToMoveOut", c_unitBehaviorCountAll);
    UnitBehaviorRemove(lp_unit, "CasterWaitingToMoveOut", c_unitBehaviorCountAll);
    UnitBehaviorRemove(lp_unit, "Waiting1Turn", c_unitBehaviorCountAll);
    UnitBehaviorRemove(lp_unit, "Waiting2Turns", c_unitBehaviorCountAll);
}

void lib1_gf_RemoveAllBehaviorsFromTrophiesandPets () {
    // Variable Declarations
    unit lv_unit;
    string lv_behavior;

    // Automatic Variable Declarations
    unitgroup auto894772C1_g;
    int auto894772C1_u;
    unit autoDB710568_u;
    int autoDB710568_i;
    unitgroup autoDB76F09B_g;
    int autoDB76F09B_u;
    unit auto73737FD8_u;
    int auto73737FD8_i;

    // Variable Initialization

    // Implementation
    auto894772C1_g = UnitGroup("Trophy", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto894772C1_u = UnitGroupCount(auto894772C1_g, c_unitCountAll);
    for (;; auto894772C1_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto894772C1_g, auto894772C1_u);
        if (lv_unit == null) { break; }
        autoDB710568_u = lv_unit;
        autoDB710568_i = 1;
        for ( ; autoDB710568_i <= UnitBehaviorCountAll(autoDB710568_u) ; autoDB710568_i += BoolToInt(lv_behavior == UnitBehaviorGet(autoDB710568_u, autoDB710568_i)) ) {
            lv_behavior = UnitBehaviorGet(autoDB710568_u, autoDB710568_i);
            UnitBehaviorRemove(lv_unit, lv_behavior, c_unitBehaviorCountAll);
        }
    }
    autoDB76F09B_g = lib1_gv_pets;
    autoDB76F09B_u = UnitGroupCount(autoDB76F09B_g, c_unitCountAll);
    for (;; autoDB76F09B_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoDB76F09B_g, autoDB76F09B_u);
        if (lv_unit == null) { break; }
        auto73737FD8_u = lv_unit;
        auto73737FD8_i = 1;
        for ( ; auto73737FD8_i <= UnitBehaviorCountAll(auto73737FD8_u) ; auto73737FD8_i += BoolToInt(lv_behavior == UnitBehaviorGet(auto73737FD8_u, auto73737FD8_i)) ) {
            lv_behavior = UnitBehaviorGet(auto73737FD8_u, auto73737FD8_i);
            if ((lv_behavior != "Pet") && (lv_behavior != "Benign")) {
                UnitBehaviorRemove(lv_unit, lv_behavior, c_unitBehaviorCountAll);
            }

        }
    }
}

int lib1_gf_TopofEffectQueue (int lp_effect_class) {
    // Variable Declarations
    int lv_effect_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while ((lib1_gv_effect_queue[lp_effect_class][lv_effect_index].lv_player > 0)) {
        lv_effect_index = (lv_effect_index + 1);
    }
    return (lv_effect_index - 1);
}

int lib1_gf_FirstEmptyEffectQueue (int lp_effect_class) {
    // Automatic Variable Declarations
    // Implementation
    return (lib1_gf_TopofEffectQueue(lp_effect_class) + 1);
}

void lib1_gf_AddEffecttoQueue (int lp_player, int lp_card_id, int lp_effect_class, trigger lp_effect, unitgroup lp_units_created, bool lp_channel_enabled) {
    // Variable Declarations
    int lv_insert_index;
    int lv_top_of_effect_queue;
    int lv_effect_index;

    // Automatic Variable Declarations
    int auto8BF410D8_ae;
    const int auto8BF410D8_ai = -1;

    // Variable Initialization

    // Implementation
    lv_top_of_effect_queue = lib1_gf_TopofEffectQueue(lp_effect_class);
    if ((lv_top_of_effect_queue < 0)) {
        lib1_gv_effect_queue[lp_effect_class][0].lv_player = lp_player;
        lib1_gv_effect_queue[lp_effect_class][0].lv_card_id = lp_card_id;
        lib1_gv_effect_queue[lp_effect_class][0].lv_effect = lp_effect;
        lib1_gv_effect_queue[lp_effect_class][0].lv_units_created = lp_units_created;
        lib1_gv_effect_queue[lp_effect_class][0].lv_channel_enabled = lp_channel_enabled;
    }
    else {
        lv_insert_index = RandomInt(0, (lv_top_of_effect_queue + 1));
        if ((lv_insert_index < (lv_top_of_effect_queue + 1))) {
            auto8BF410D8_ae = lv_insert_index;
            lv_effect_index = lv_top_of_effect_queue;
            for ( ; ( (auto8BF410D8_ai >= 0 && lv_effect_index <= auto8BF410D8_ae) || (auto8BF410D8_ai < 0 && lv_effect_index >= auto8BF410D8_ae) ) ; lv_effect_index += auto8BF410D8_ai ) {
                lib1_gv_effect_queue[lp_effect_class][(lv_effect_index + 1)].lv_player = lib1_gv_effect_queue[lp_effect_class][lv_effect_index].lv_player;
                lib1_gv_effect_queue[lp_effect_class][(lv_effect_index + 1)].lv_card_id = lib1_gv_effect_queue[lp_effect_class][lv_effect_index].lv_card_id;
                lib1_gv_effect_queue[lp_effect_class][(lv_effect_index + 1)].lv_effect = lib1_gv_effect_queue[lp_effect_class][lv_effect_index].lv_effect;
                lib1_gv_effect_queue[lp_effect_class][(lv_effect_index + 1)].lv_units_created = lib1_gv_effect_queue[lp_effect_class][lv_effect_index].lv_units_created;
                lib1_gv_effect_queue[lp_effect_class][(lv_effect_index + 1)].lv_channel_enabled = lib1_gv_effect_queue[lp_effect_class][lv_effect_index].lv_channel_enabled;
            }
        }

        lib1_gv_effect_queue[lp_effect_class][lv_insert_index].lv_player = lp_player;
        lib1_gv_effect_queue[lp_effect_class][lv_insert_index].lv_card_id = lp_card_id;
        lib1_gv_effect_queue[lp_effect_class][lv_insert_index].lv_effect = lp_effect;
        lib1_gv_effect_queue[lp_effect_class][lv_insert_index].lv_units_created = lp_units_created;
        lib1_gv_effect_queue[lp_effect_class][lv_insert_index].lv_channel_enabled = lp_channel_enabled;
    }
}

void lib1_gf_ExecuteEffectQueue (int lp_effect_class) {
    // Variable Declarations
    int lv_effect_index;

    // Automatic Variable Declarations
    const int auto34ABD5E8_ae = lib1_gv_eFFECT_QUEUE_LIMIT;
    const int auto34ABD5E8_ai = 1;
    const int autoA055DC56_ae = lib1_gv_eFFECT_QUEUE_LIMIT;
    const int autoA055DC56_ai = 1;

    // Variable Initialization

    // Implementation
    lv_effect_index = 0;
    for ( ; ( (auto34ABD5E8_ai >= 0 && lv_effect_index <= auto34ABD5E8_ae) || (auto34ABD5E8_ai < 0 && lv_effect_index >= auto34ABD5E8_ae) ) ; lv_effect_index += auto34ABD5E8_ai ) {
        if ((lib1_gv_current_phase != "Menu") && (lib1_gv_effect_queue[lp_effect_class][lv_effect_index].lv_player > 0) && (lib1_gv_effect_queue[lp_effect_class][lv_effect_index].lv_effect != null)) {
            lib1_gv_current_player = lib1_gv_effect_queue[lp_effect_class][lv_effect_index].lv_player;
            lib1_gv_current_card_id = lib1_gv_effect_queue[lp_effect_class][lv_effect_index].lv_card_id;
            lib1_gv_current_units_created = lib1_gv_effect_queue[lp_effect_class][lv_effect_index].lv_units_created;
            lib1_gv_current_channel_enabled = lib1_gv_effect_queue[lp_effect_class][lv_effect_index].lv_channel_enabled;
            TriggerExecute(lib1_gv_effect_queue[lp_effect_class][lv_effect_index].lv_effect, false, false);
        }
        else {
            break;
        }
    }
    lv_effect_index = 0;
    for ( ; ( (autoA055DC56_ai >= 0 && lv_effect_index <= autoA055DC56_ae) || (autoA055DC56_ai < 0 && lv_effect_index >= autoA055DC56_ae) ) ; lv_effect_index += autoA055DC56_ai ) {
        if ((lib1_gv_effect_queue[lp_effect_class][lv_effect_index].lv_player > 0) && (lib1_gv_effect_queue[lp_effect_class][lv_effect_index].lv_effect != null)) {
            lib1_gv_effect_queue[lp_effect_class][lv_effect_index].lv_player = 0;
            lib1_gv_effect_queue[lp_effect_class][lv_effect_index].lv_card_id = -1;
            lib1_gv_effect_queue[lp_effect_class][lv_effect_index].lv_effect = null;
            lib1_gv_effect_queue[lp_effect_class][lv_effect_index].lv_units_created = null;
            lib1_gv_effect_queue[lp_effect_class][lv_effect_index].lv_channel_enabled = false;
        }
        else {
            break;
        }
    }
}

bool lib1_gf_EffectInEffectQueueforPlayer (int lp_player, int lp_effect_class, trigger lp_effect) {
    // Variable Declarations
    int lv_effect_index;

    // Automatic Variable Declarations
    const int auto7357070C_ae = lib1_gv_eFFECT_QUEUE_LIMIT;
    const int auto7357070C_ai = 1;

    // Variable Initialization

    // Implementation
    lv_effect_index = 0;
    for ( ; ( (auto7357070C_ai >= 0 && lv_effect_index <= auto7357070C_ae) || (auto7357070C_ai < 0 && lv_effect_index >= auto7357070C_ae) ) ; lv_effect_index += auto7357070C_ai ) {
        if ((lib1_gv_effect_queue[lp_effect_class][lv_effect_index].lv_player == lp_player) && (lib1_gv_effect_queue[lp_effect_class][lv_effect_index].lv_effect == lp_effect)) {
            return true;
        }

    }
    return false;
}

void lib1_gf_InitializeRandomDeck (int lp_player) {
    int init_i;

    // Variable Declarations
    int lv_race;
    int[lib1_gv_dECKLIST_LIMIT + 1] lv_decklist;
    int lv_index_1;
    int lv_index_2;
    int lv_card;
    int lv_copies;

    // Automatic Variable Declarations
    const int auto3629C571_ae = lib1_gv_dECKLIST_LIMIT;
    const int auto3629C571_ai = 1;
    int auto3054A071_ae;
    const int auto3054A071_ai = 1;
    const int auto0E73B1F8_ae = lib1_gv_dECKLIST_LIMIT;
    const int auto0E73B1F8_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= lib1_gv_dECKLIST_LIMIT; init_i += 1) {
        lv_decklist[init_i] = -1;
    }

    // Implementation
    lv_race = lib1_gf_GetPlayerRaceID(lp_player);
    lv_index_1 = 0;
    for ( ; ( (auto3629C571_ai >= 0 && lv_index_1 <= auto3629C571_ae) || (auto3629C571_ai < 0 && lv_index_1 >= auto3629C571_ae) ) ; lv_index_1 += auto3629C571_ai ) {
        while ((lv_decklist[lv_index_1] == -1)) {
            lv_card = lib1_gf_GetRandomCollectibleCardIDWithRace(lv_race, true);
            lv_copies = 0;
            if ((lv_index_1 >= 1)) {
                auto3054A071_ae = (lv_index_1 - 1);
                lv_index_2 = 0;
                for ( ; ( (auto3054A071_ai >= 0 && lv_index_2 <= auto3054A071_ae) || (auto3054A071_ai < 0 && lv_index_2 >= auto3054A071_ae) ) ; lv_index_2 += auto3054A071_ai ) {
                    if ((lv_decklist[lv_index_2] == lv_card)) {
                        lv_copies = (lv_copies + 1);
                    }

                }
            }

            if (((lv_copies == 0) || ((lv_copies == 1) && (lib1_gv_card[lv_card].lv_rarity != lib1_gv_uNIQUE)))) {
                lv_decklist[lv_index_1] = lv_card;
            }

        }
    }
    lv_index_1 = 0;
    for ( ; ( (auto0E73B1F8_ai >= 0 && lv_index_1 <= auto0E73B1F8_ae) || (auto0E73B1F8_ai < 0 && lv_index_1 >= auto0E73B1F8_ae) ) ; lv_index_1 += auto0E73B1F8_ai ) {
        lib1_gf_GenerateCardtoTopofDeck(lp_player, lv_decklist[lv_index_1]);
    }
}

void lib1_gf_AIChooseResource (int lp_ai_player) {
    // Variable Declarations
    int lv_mineral_weight;
    int lv_gas_weight;
    int lv_hand_index;

    // Automatic Variable Declarations
    int auto03B38766_ae;
    const int auto03B38766_ai = 1;

    // Variable Initialization

    // Implementation
    auto03B38766_ae = lib1_gf_TopofHand(lp_ai_player);
    lv_hand_index = 0;
    for ( ; ( (auto03B38766_ai >= 0 && lv_hand_index <= auto03B38766_ae) || (auto03B38766_ai < 0 && lv_hand_index >= auto03B38766_ae) ) ; lv_hand_index += auto03B38766_ai ) {
        if ((lib1_gf_HandCardMineralCost(lp_ai_player, lv_hand_index) > lib1_gf_MineralIncome(lp_ai_player))) {
            lv_mineral_weight = (lv_mineral_weight + 1);
        }

        if ((lib1_gf_HandCardGasCost(lp_ai_player, lv_hand_index) > lib1_gf_MineralIncome(lp_ai_player))) {
            lv_gas_weight = (lv_gas_weight + 1);
        }

    }
    if ((((lv_mineral_weight + lv_gas_weight) == 0) || (RandomInt(1, (lv_mineral_weight + lv_gas_weight)) <= lv_mineral_weight))) {
        lib1_gv_player[lp_ai_player].lv_resources.lv_resource_chosen = "chosen";
        lib1_gv_player[lp_ai_player].lv_resources.lv_mineral_income = (lib1_gv_player[lp_ai_player].lv_resources.lv_previous_mineral_income + 1);
        lib1_gf_FinalizeResourceChoice(lp_ai_player);
        lib1_gf_AllowCardSelection(lp_ai_player);
    }
    else {
        lib1_gv_player[lp_ai_player].lv_resources.lv_resource_chosen = "chosen";
        lib1_gv_player[lp_ai_player].lv_resources.lv_gas_income = (lib1_gv_player[lp_ai_player].lv_resources.lv_previous_gas_income + 1);
        lib1_gf_FinalizeResourceChoice(lp_ai_player);
        lib1_gf_AllowCardSelection(lp_ai_player);
    }
}

void lib1_gf_AISelectCards (int lp_player) {
    // Variable Declarations
    int lv_hand_index;
    int lv_priority;

    // Automatic Variable Declarations
    const int auto4BE99276_ae = lib1_gv_aI_PRIORITY_MIN;
    const int auto4BE99276_ai = -1;
    int auto3CDA7149_ae;
    const int auto3CDA7149_ai = 1;

    // Variable Initialization

    // Implementation
    lv_priority = lib1_gv_aI_PRIORITY_MAX;
    for ( ; ( (auto4BE99276_ai >= 0 && lv_priority <= auto4BE99276_ae) || (auto4BE99276_ai < 0 && lv_priority >= auto4BE99276_ae) ) ; lv_priority += auto4BE99276_ai ) {
        auto3CDA7149_ae = lib1_gf_TopofHand(lp_player);
        lv_hand_index = 0;
        for ( ; ( (auto3CDA7149_ai >= 0 && lv_hand_index <= auto3CDA7149_ae) || (auto3CDA7149_ai < 0 && lv_hand_index >= auto3CDA7149_ae) ) ; lv_hand_index += auto3CDA7149_ai ) {
            if ((lib1_gf_AICardPriority(lp_player, lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_id) == lv_priority) && (lib1_gf_CardLegaltoPlay(lp_player, lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_mineral, lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_gas, lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_id) == true) && (lib1_gv_player[lp_player].lv_hand.lv_card[lv_hand_index].lv_locked_by_player == 0)) {
                lib1_gf_ToggleSelectedPlayPhase(lp_player, lv_hand_index);
                lib1_gv_player[lp_player].lv_resources.lv_minerals_used = lib1_gf_CurrentSelectionMineralCost(lp_player);
                lib1_gv_player[lp_player].lv_resources.lv_gas_used = lib1_gf_CurrentSelectionGasCost(lp_player);
                lib1_gf_UpdateCardPropertiesBasedonGameState(lp_player, false);
            }

        }
    }
    PlayerGroupAdd(lib1_gv_ready_players, lp_player);
}

int lib1_gf_AICardPriority (int lp_player, int lp_card_id) {
    // Automatic Variable Declarations
    // Implementation
    if (((lib1_gv_card[lp_card_id].lv_name == "Tactical Nuke") || (lib1_gv_card[lp_card_id].lv_name == "Korhal's Destruction") || (lib1_gv_card[lp_card_id].lv_name == "Planet Cracker") || (lib1_gv_card[lp_card_id].lv_name == "Vortex"))) {
        return -1;
    }
    else {
        return 0;
    }
}

void lib1_gf_CreateTutorialTip (int lp_id, text lp_message, text lp_button_text, int lp_box_height) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gv_tutorial_tip_id = lp_id;
    DialogCreate(500, lp_box_height, c_anchorCenter, 0, -150, true);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    lib1_gv_tutorial_tip_dialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 500, lp_box_height, c_anchorTop, 0, 0, lp_message, Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "TimerPhase", PlayerGroupAll());
    lib1_gv_tutorial_tip_message = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lib1_gv_eND_TURN_WIDTH, lib1_gv_eND_TURN_HEIGHT, c_anchorBottom, 0, 0, StringToText(""), lp_button_text, "");
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(100,100,100), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CardNameLarge", PlayerGroupAll());
    lib1_gv_tutorial_tip_button = DialogControlLastCreated();
}

void lib1_gf_TutorialPlayPhase () {
    // Variable Declarations
    int lv_team;
    int lv_player;

    // Automatic Variable Declarations
    const int autoB14E3E2E_ae = 1;
    const int autoB14E3E2E_ai = 1;
    playergroup autoD7047D4D_g;

    // Variable Initialization

    // Implementation
    if ((lib1_gv_current_turn == 1)) {
        lib1_gf_CreateTutorialTip(1, StringExternal("Param/Value/lib_1_37125082"), StringExternal("Param/Value/lib_1_CDD56B89"), 300);
    }
    else if ((lib1_gv_current_turn == 3)) {
        CameraPan(1, PointWithOffset(RegionGetCenter(RegionFromId(2)), 0.0, -6.0), 2.0, -1, 10.0, false);
        lib1_gf_CreateTutorialTip(2, StringExternal("Param/Value/lib_1_20DCA836"), StringExternal("Param/Value/lib_1_CFDACADA"), 200);
    }
    else if ((lib1_gv_current_turn == 4)) {
        lib1_gf_CreateTutorialTip(3, StringExternal("Param/Value/lib_1_A22C388B"), StringExternal("Param/Value/lib_1_C04071CE"), 200);
    }
    else if ((lib1_gv_current_turn == 7)) {
        lib1_gf_CreateTutorialTip(4, StringExternal("Param/Value/lib_1_92373F11"), StringExternal("Param/Value/lib_1_2AD4A2C7"), 200);
    }
    else if (true) {
        lv_team = 0;
        for ( ; ( (autoB14E3E2E_ai >= 0 && lv_team <= autoB14E3E2E_ae) || (autoB14E3E2E_ai < 0 && lv_team >= autoB14E3E2E_ae) ) ; lv_team += autoB14E3E2E_ai ) {
            autoD7047D4D_g = lib1_gv_team[lv_team];
            lv_player = -1;
            while (true) {
                lv_player = PlayerGroupNextPlayer(autoD7047D4D_g, lv_player);
                if (lv_player < 0) { break; }
                lib1_gf_ProcessResources(lv_player);
                lib1_gf_UpdateCardPropertiesBasedonGameState(lv_player, true);
                if ((lib1_gv_player[lv_player].lv_use_ai == true)) {
                    lib1_gf_AISelectCards(lv_player);
                }

            }
        }
    }
}

void lib1_gf_StartofTurnDrawCardTutorial (int lp_player) {
    // Variable Declarations
    bool lv_fetch;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_player == 1) && (lib1_gv_current_turn == 1)) {
    }
    else if ((lp_player == 1) && (lib1_gv_current_turn == 2)) {
        lv_fetch = lib1_gf_FetchCardWithName(lp_player, "Marine Squad", "");
    }
    else if ((lp_player == 1) && (lib1_gv_current_turn == 3)) {
        lv_fetch = lib1_gf_FetchCardWithName(lp_player, "Bunker", "");
    }
    else if ((lp_player == 1) && (lib1_gv_current_turn == 4)) {
        lv_fetch = lib1_gf_FetchCardWithName(lp_player, "Reaper Gang", "");
    }
    else if ((lp_player == 1) && (lib1_gv_current_turn == 5)) {
        lv_fetch = lib1_gf_FetchCardWithName(lp_player, "Siege Tanks", "");
    }
    else if ((lp_player == 1) && (lib1_gv_current_turn == 6)) {
        lv_fetch = lib1_gf_FetchCardWithName(lp_player, "Barracks", "");
    }
    else if ((lp_player == 1) && (lib1_gv_current_turn == 7)) {
        lv_fetch = lib1_gf_FetchCardWithName(lp_player, "Strike Cannons", "");
    }
    else if ((lp_player == 1) && (lib1_gv_current_turn == 8)) {
        lv_fetch = lib1_gf_FetchCardWithName(lp_player, "Widow Mines", "");
    }
    else if ((lp_player == 1) && (lib1_gv_current_turn == 9)) {
        lv_fetch = lib1_gf_FetchCardWithName(lp_player, "Doom Drop", "");
    }
    else if ((lp_player == 1) && (lib1_gv_current_turn == 10)) {
        lv_fetch = lib1_gf_FetchCardWithName(lp_player, "Supply Drop", "");
    }
    else if ((lp_player == 1) && (lib1_gv_current_turn == 11)) {
        lv_fetch = lib1_gf_FetchCardWithName(lp_player, "Repair Crew", "");
        if ((lv_fetch == false)) {
            lib1_gf_DrawCardFromDecktoHand(lp_player);
        }

    }
    else if ((lp_player == 1) && (lib1_gv_current_turn == 12)) {
        lv_fetch = lib1_gf_FetchCardWithName(lp_player, "Marine Blitz", "");
        if ((lv_fetch == false)) {
            lib1_gf_DrawCardFromDecktoHand(lp_player);
        }

    }
    else if ((lp_player == 1) && (lib1_gv_current_turn == 13)) {
        lv_fetch = lib1_gf_FetchCardWithName(lp_player, "Doom Drop", "");
        if ((lv_fetch == false)) {
            lib1_gf_DrawCardFromDecktoHand(lp_player);
        }

    }
    else if ((lp_player == 1) && (lib1_gv_current_turn == 14)) {
        lv_fetch = lib1_gf_FetchCardWithName(lp_player, "Thor", "");
        if ((lv_fetch == false)) {
            lib1_gf_DrawCardFromDecktoHand(lp_player);
        }

    }
    else if ((lp_player == 2) && (lib1_gv_current_turn == 1)) {
        lv_fetch = lib1_gf_FetchCardWithName(lp_player, "Roach Warren", "");
    }
    else if ((lp_player == 2) && (lib1_gv_current_turn == 2)) {
        lv_fetch = lib1_gf_FetchCardWithName(lp_player, "Creeping Queens", "");
    }
    else if ((lp_player == 2) && (lib1_gv_current_turn == 3)) {
        lv_fetch = lib1_gf_FetchCardWithName(lp_player, "Hydralisk Cluster", "");
    }
    else if ((lp_player == 2) && (lib1_gv_current_turn == 4)) {
        lv_fetch = lib1_gf_FetchCardWithName(lp_player, "Invading Host", "");
    }
    else if ((lp_player == 2) && (lib1_gv_current_turn == 5)) {
        lv_fetch = lib1_gf_FetchCardWithName(lp_player, "Spine Crawlers", "");
    }
    else if ((lp_player == 2) && (lib1_gv_current_turn == 6)) {
        lv_fetch = lib1_gf_FetchCardWithName(lp_player, "Spawning Pool", "");
    }
    else if ((lp_player == 2) && (lib1_gv_current_turn == 7)) {
        lv_fetch = lib1_gf_FetchCardWithName(lp_player, "Spine Crawlers", "");
    }
    else if ((lp_player == 2) && (lib1_gv_current_turn == 8)) {
        lv_fetch = lib1_gf_FetchCardWithName(lp_player, "Zergling Pack", "");
    }
    else if ((lp_player == 2) && (lib1_gv_current_turn == 9)) {
        lv_fetch = lib1_gf_FetchCardWithName(lp_player, "Roach Cluster", "");
    }
    else if ((lp_player == 2) && (lib1_gv_current_turn == 10)) {
        lv_fetch = lib1_gf_FetchCardWithName(lp_player, "Savage Ultralisks", "");
    }
    else if (true) {
        lib1_gf_DrawCardFromDecktoHand(lp_player);
    }
}

void lib1_gf_InitializeStartingHandTutorial (int lp_player) {
    // Variable Declarations
    bool lv_fetch;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_player == 1)) {
        lv_fetch = lib1_gf_FetchCardWithName(lp_player, "Bunker", "");
        lv_fetch = lib1_gf_FetchCardWithName(lp_player, "Marine Blitz", "");
        lv_fetch = lib1_gf_FetchCardWithName(lp_player, "Barracks", "");
    }
    else {
        lv_fetch = lib1_gf_FetchCardWithName(lp_player, "Spawning Pool", "");
        lv_fetch = lib1_gf_FetchCardWithName(lp_player, "Zergling Pack", "");
        lv_fetch = lib1_gf_FetchCardWithName(lp_player, "Spore Crawlers", "");
    }
}

void lib1_gf_InitializePlayerTutorialDeck (int lp_player) {
    // Variable Declarations
    int lv_count;

    // Automatic Variable Declarations
    const int auto2C8FDF8A_ae = 2;
    const int auto2C8FDF8A_ai = 1;

    // Variable Initialization

    // Implementation
    lib1_gf_GenerateCardtoTopofDeck(lp_player, lib1_gf_GetCardIDByName("MULE"));
    lib1_gf_GenerateCardtoTopofDeck(lp_player, lib1_gf_GetCardIDByName("Repair Crew"));
    lib1_gf_GenerateCardtoTopofDeck(lp_player, lib1_gf_GetCardIDByName("Tactical Nuke"));
    lib1_gf_GenerateCardtoTopofDeck(lp_player, lib1_gf_GetCardIDByName("Battlecruiser"));
    lib1_gf_GenerateCardtoTopofDeck(lp_player, lib1_gf_GetCardIDByName("Doom Drop"));
    lib1_gf_GenerateCardtoTopofDeck(lp_player, lib1_gf_GetCardIDByName("Reconstruction"));
    lv_count = 1;
    for ( ; ( (auto2C8FDF8A_ai >= 0 && lv_count <= auto2C8FDF8A_ae) || (auto2C8FDF8A_ai < 0 && lv_count >= auto2C8FDF8A_ae) ) ; lv_count += auto2C8FDF8A_ai ) {
        lib1_gf_GenerateCardtoTopofDeck(lp_player, lib1_gf_GetCardIDByName("Marine Squad"));
        lib1_gf_GenerateCardtoTopofDeck(lp_player, lib1_gf_GetCardIDByName("Thor"));
        lib1_gf_GenerateCardtoTopofDeck(lp_player, lib1_gf_GetCardIDByName("Reaper Gang"));
        lib1_gf_GenerateCardtoTopofDeck(lp_player, lib1_gf_GetCardIDByName("Marine Blitz"));
        lib1_gf_GenerateCardtoTopofDeck(lp_player, lib1_gf_GetCardIDByName("Barracks"));
        lib1_gf_GenerateCardtoTopofDeck(lp_player, lib1_gf_GetCardIDByName("Bunker"));
        lib1_gf_GenerateCardtoTopofDeck(lp_player, lib1_gf_GetCardIDByName("Yamato Cannon"));
        lib1_gf_GenerateCardtoTopofDeck(lp_player, lib1_gf_GetCardIDByName("Supply Drop"));
        lib1_gf_GenerateCardtoTopofDeck(lp_player, lib1_gf_GetCardIDByName("Scanner Sweep"));
        lib1_gf_GenerateCardtoTopofDeck(lp_player, lib1_gf_GetCardIDByName("Twin Turrets"));
        lib1_gf_GenerateCardtoTopofDeck(lp_player, lib1_gf_GetCardIDByName("Seeker Missiles"));
        lib1_gf_GenerateCardtoTopofDeck(lp_player, lib1_gf_GetCardIDByName("Starport"));
        lib1_gf_GenerateCardtoTopofDeck(lp_player, lib1_gf_GetCardIDByName("Strike Cannons"));
        lib1_gf_GenerateCardtoTopofDeck(lp_player, lib1_gf_GetCardIDByName("Widow Mines"));
        lib1_gf_GenerateCardtoTopofDeck(lp_player, lib1_gf_GetCardIDByName("Medivac Runners"));
        lib1_gf_GenerateCardtoTopofDeck(lp_player, lib1_gf_GetCardIDByName("Siege Tanks"));
        lib1_gf_GenerateCardtoTopofDeck(lp_player, lib1_gf_GetCardIDByName("Operation Clearsky"));
    }
}

void lib1_gf_InitializeEnemyTutorialDeck (int lp_player) {
    // Variable Declarations
    int lv_count;

    // Automatic Variable Declarations
    const int auto7508EBFB_ae = 2;
    const int auto7508EBFB_ai = 1;

    // Variable Initialization

    // Implementation
    lib1_gf_GenerateCardtoTopofDeck(lp_player, 55);
    lib1_gf_GenerateCardtoTopofDeck(lp_player, 63);
    lib1_gf_GenerateCardtoTopofDeck(lp_player, 54);
    lib1_gf_GenerateCardtoTopofDeck(lp_player, 59);
    lv_count = 1;
    for ( ; ( (auto7508EBFB_ai >= 0 && lv_count <= auto7508EBFB_ae) || (auto7508EBFB_ai < 0 && lv_count >= auto7508EBFB_ae) ) ; lv_count += auto7508EBFB_ai ) {
        lib1_gf_GenerateCardtoTopofDeck(lp_player, 56);
        lib1_gf_GenerateCardtoTopofDeck(lp_player, 76);
        lib1_gf_GenerateCardtoTopofDeck(lp_player, 58);
        lib1_gf_GenerateCardtoTopofDeck(lp_player, 65);
        lib1_gf_GenerateCardtoTopofDeck(lp_player, 66);
        lib1_gf_GenerateCardtoTopofDeck(lp_player, 50);
        lib1_gf_GenerateCardtoTopofDeck(lp_player, 62);
        lib1_gf_GenerateCardtoTopofDeck(lp_player, 52);
        lib1_gf_GenerateCardtoTopofDeck(lp_player, 53);
        lib1_gf_GenerateCardtoTopofDeck(lp_player, 86);
        lib1_gf_GenerateCardtoTopofDeck(lp_player, 77);
    }
}

void lib1_gf_OrderAllUnits () {
    int init_i;

    // Variable Declarations
    int lv_team;
    int lv_player;
    int lv_unit_count;
    fixed lv_stream_time;
    unit lv_unit;
    unitgroup[lib1_gv_mAX_PLAYERS + 1] lv_streaming_units_for_player;

    // Automatic Variable Declarations
    unitgroup auto20695FFA_g;
    int auto20695FFA_u;
    const int autoCFA8B63B_ae = 1;
    const int autoCFA8B63B_ai = 1;
    playergroup auto4EA14F90_g;

    // Variable Initialization
    for (init_i = 0; init_i <= lib1_gv_mAX_PLAYERS; init_i += 1) {
        lv_streaming_units_for_player[init_i] = UnitGroupEmpty();
    }

    // Implementation
    lib1_gf_ResetBuilderAttemptCounts();
    auto20695FFA_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto20695FFA_u = UnitGroupCount(auto20695FFA_g, c_unitCountAll);
    for (;; auto20695FFA_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto20695FFA_g, auto20695FFA_u);
        if (lv_unit == null) { break; }
        if ((UnitGroupHasUnit(lib1_gv_two_turn_wait_units, lv_unit) == true)) {
            UnitGroupAdd(lib1_gv_one_turn_wait_units, lv_unit);
            UnitGroupRemove(lib1_gv_two_turn_wait_units, lv_unit);
        }
        else if ((UnitGroupHasUnit(lib1_gv_one_turn_wait_units, lv_unit) == true)) {
            UnitBehaviorRemove(lv_unit, "Waiting2Turns", c_unitBehaviorCountAll);
            UnitBehaviorAdd(lv_unit, "Waiting1Turn", lv_unit, 1);
            UnitGroupAdd(lib1_gv_ready_units, lv_unit);
            UnitGroupRemove(lib1_gv_one_turn_wait_units, lv_unit);
        }
        else if ((UnitGroupHasUnit(lib1_gv_ready_units, lv_unit) == true) && (UnitGroupHasUnit(lib1_gv_streaming_units, lv_unit) == false)) {
            UnitBehaviorRemove(lv_unit, "Waiting1Turn", c_unitBehaviorCountAll);
            UnitGroupRemove(lib1_gv_ready_units, lv_unit);
            UnitBehaviorRemove(lv_unit, "WaitingToMoveOut", c_unitBehaviorCountAll);
            lib1_gf_IssueDefaultOrders(lv_unit);
        }
        else if ((UnitGroupHasUnit(lib1_gv_ready_units, lv_unit) == true) && (UnitGroupHasUnit(lib1_gv_streaming_units, lv_unit) == true)) {
            UnitGroupRemove(lib1_gv_ready_units, lv_unit);
            UnitGroupAdd(lv_streaming_units_for_player[UnitGetOwner(lv_unit)], lv_unit);
        }
        else if ((UnitGroupHasUnit(lib1_gv_burrow_ambush_units, lv_unit) == true)) {
            UnitGroupRemove(lib1_gv_burrow_ambush_units, lv_unit);
            lib1_gf_UnburrowSpawn(UnitGetOwner(lv_unit), lv_unit, null, false);
        }
        else if ((UnitGetType(lv_unit) == "Oracle") && (((UnitGetPropertyFixed(lv_unit, c_unitPropLife, c_unitPropCurrent) + UnitGetPropertyFixed(lv_unit, c_unitPropShields, c_unitPropCurrent)) / (UnitGetPropertyFixed(lv_unit, c_unitPropLifeMax, c_unitPropCurrent) + UnitGetPropertyFixed(lv_unit, c_unitPropShieldsMax, c_unitPropCurrent))) >= 0.5) && (UnitGetPropertyFixed(lv_unit, c_unitPropEnergy, c_unitPropCurrent) >= 75.0) && (UnitGroupHasUnit(lib1_gv_retreating_units, lv_unit) == true)) {
            UnitBehaviorRemove(lv_unit, "Retreating", c_unitBehaviorCountAll);
            UnitGroupRemove(lib1_gv_retreating_units, lv_unit);
            lib1_gf_IssueDefaultOrders(lv_unit);
        }
        else if ((UnitGetType(lv_unit) == "Carrier") && (((UnitGetPropertyFixed(lv_unit, c_unitPropLife, c_unitPropCurrent) + UnitGetPropertyFixed(lv_unit, c_unitPropShields, c_unitPropCurrent)) / (UnitGetPropertyFixed(lv_unit, c_unitPropLifeMax, c_unitPropCurrent) + UnitGetPropertyFixed(lv_unit, c_unitPropShieldsMax, c_unitPropCurrent))) >= 0.5) && (UnitGroupHasUnit(lib1_gv_retreating_units, lv_unit) == true) && (UnitMagazineCount(lv_unit, "CarrierHangar") > 4)) {
            UnitBehaviorRemove(lv_unit, "Retreating", c_unitBehaviorCountAll);
            UnitGroupRemove(lib1_gv_retreating_units, lv_unit);
            lib1_gf_IssueDefaultOrders(lv_unit);
        }
        else if ((UnitGetType(lv_unit) == "CarrierGantrithor") && (((UnitGetPropertyFixed(lv_unit, c_unitPropLife, c_unitPropCurrent) + UnitGetPropertyFixed(lv_unit, c_unitPropShields, c_unitPropCurrent)) / (UnitGetPropertyFixed(lv_unit, c_unitPropLifeMax, c_unitPropCurrent) + UnitGetPropertyFixed(lv_unit, c_unitPropShieldsMax, c_unitPropCurrent))) >= 0.5) && (UnitGroupHasUnit(lib1_gv_retreating_units, lv_unit) == true) && (UnitMagazineCount(lv_unit, "CarrierHangarGantrithor") > 4)) {
            UnitBehaviorRemove(lv_unit, "Retreating", c_unitBehaviorCountAll);
            UnitGroupRemove(lib1_gv_retreating_units, lv_unit);
            lib1_gf_IssueDefaultOrders(lv_unit);
        }
        else if ((((UnitGetPropertyFixed(lv_unit, c_unitPropLife, c_unitPropCurrent) + UnitGetPropertyFixed(lv_unit, c_unitPropShields, c_unitPropCurrent)) / (UnitGetPropertyFixed(lv_unit, c_unitPropLifeMax, c_unitPropCurrent) + UnitGetPropertyFixed(lv_unit, c_unitPropShieldsMax, c_unitPropCurrent))) >= 0.5) && (UnitGroupHasUnit(lib1_gv_retreating_units, lv_unit) == true)) {
            UnitBehaviorRemove(lv_unit, "Retreating", c_unitBehaviorCountAll);
            UnitGroupRemove(lib1_gv_retreating_units, lv_unit);
            lib1_gf_IssueDefaultOrders(lv_unit);
        }
        else if ((UnitOrderCount(lv_unit) == 0) && ((UnitGroupHasUnit(lib1_gv_tactical_units, lv_unit) == true) || (UnitGroupHasUnit(lib1_gv_defensive_units, lv_unit) == true) || (UnitGroupHasUnit(lib1_gv_aggressive_units, lv_unit) == true))) {
            lib1_gf_IssueDefaultOrders(lv_unit);
        }
        else if ((UnitOrderCount(lv_unit) == 0) && (UnitGroupHasUnit(lib1_gv_retreating_units, lv_unit) == true)) {
            lib1_gf_IssueTacticalRetreatOrders(lv_unit);
        }
        else if ((UnitOrderCount(lv_unit) == 0) && (UnitGroupHasUnit(lib1_gv_leaving_units, lv_unit) == true)) {
            lib1_gf_IssueLeaveOrders(lv_unit, c_orderQueueReplace);
        }
        else if (((UnitGroupHasUnit(lib1_gv_failed_builder_units, lv_unit) == true) || (UnitOrderCount(lv_unit) == 0)) && (UnitGroupHasUnit(lib1_gv_builder_units, lv_unit) == true)) {
            lib1_gf_ReorderBuilder(lv_unit);
        }
        if ((UnitGroupHasUnit(lib1_gv_defensive_units, lv_unit) == false) && ((UnitGetType(lv_unit) == "SwarmHostMP"))) {
            UnitIssueOrder(lv_unit, OrderTargetingPoint(AbilityCommand("SpawnLocustsTargeted", 0), RegionRandomPoint(lib1_gv_player[UnitGetOwner(lv_unit)].lv_attack_region)), c_orderQueueAddToFront);
        }

    }
    lv_team = 0;
    for ( ; ( (autoCFA8B63B_ai >= 0 && lv_team <= autoCFA8B63B_ae) || (autoCFA8B63B_ai < 0 && lv_team >= autoCFA8B63B_ae) ) ; lv_team += autoCFA8B63B_ai ) {
        auto4EA14F90_g = lib1_gv_team[lv_team];
        lv_player = -1;
        while (true) {
            lv_player = PlayerGroupNextPlayer(auto4EA14F90_g, lv_player);
            if (lv_player < 0) { break; }
            lv_unit_count = UnitGroupCount(lv_streaming_units_for_player[lv_player], c_unitCountAlive);
            if ((lv_unit_count >= 1)) {
                lv_stream_time = MinF((20.0 / lv_unit_count), 1.0);
                lv_stream_time = MinF(((20.0 / lv_unit_count) - 0.05), 1.0);
                lib1_gf_OrderStreamingUnits(lv_streaming_units_for_player[lv_player], lv_stream_time);
            }

        }
    }
}

trigger auto_lib1_gf_OrderStreamingUnits_Trigger = null;
unitgroup auto_lib1_gf_OrderStreamingUnits_lp_units;
fixed auto_lib1_gf_OrderStreamingUnits_lp_timing;

void lib1_gf_OrderStreamingUnits (unitgroup lp_units, fixed lp_timing) {
    auto_lib1_gf_OrderStreamingUnits_lp_units = lp_units;
    auto_lib1_gf_OrderStreamingUnits_lp_timing = lp_timing;

    if (auto_lib1_gf_OrderStreamingUnits_Trigger == null) {
        auto_lib1_gf_OrderStreamingUnits_Trigger = TriggerCreate("auto_lib1_gf_OrderStreamingUnits_TriggerFunc");
    }

    TriggerExecute(auto_lib1_gf_OrderStreamingUnits_Trigger, false, false);
}

bool auto_lib1_gf_OrderStreamingUnits_TriggerFunc (bool testConds, bool runActions) {
    unitgroup lp_units = auto_lib1_gf_OrderStreamingUnits_lp_units;
    fixed lp_timing = auto_lib1_gf_OrderStreamingUnits_lp_timing;

    // Variable Declarations
    unit lv_unit;
    unitgroup lv_streaming_units_for_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_streaming_units_for_player = UnitGroupEmpty();

    // Implementation
    lv_streaming_units_for_player = lp_units;
    while ((UnitGroupCount(lv_streaming_units_for_player, c_unitCountAlive) >= 1)) {
        lv_unit = UnitGroupRandomUnit(lv_streaming_units_for_player, c_unitCountAlive);
        UnitGroupRemove(lv_streaming_units_for_player, lv_unit);
        UnitGroupRemove(lib1_gv_streaming_units, lv_unit);
        UnitBehaviorRemove(lv_unit, "WaitingToMoveOut", c_unitBehaviorCountAll);
        lib1_gf_IssueDefaultOrders(lv_unit);
        Wait(lp_timing, c_timeGame);
    }
    return true;
}

trigger auto_lib1_gf_OrderStructurestoTrainUnits_Trigger = null;

void lib1_gf_OrderStructurestoTrainUnits () {
    if (auto_lib1_gf_OrderStructurestoTrainUnits_Trigger == null) {
        auto_lib1_gf_OrderStructurestoTrainUnits_Trigger = TriggerCreate("auto_lib1_gf_OrderStructurestoTrainUnits_TriggerFunc");
    }

    TriggerExecute(auto_lib1_gf_OrderStructurestoTrainUnits_Trigger, false, false);
}

bool auto_lib1_gf_OrderStructurestoTrainUnits_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_card_id;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto3156323D_g;
    int auto3156323D_u;
    unitgroup auto8A26796B_g;
    int auto8A26796B_u;
    unitgroup auto92B08140_g;
    int auto92B08140_u;
    unitgroup auto1B7AF630_g;
    int auto1B7AF630_u;
    unitgroup auto751483CE_g;
    int auto751483CE_u;
    unitgroup auto56AE3CFE_g;
    int auto56AE3CFE_u;
    unitgroup auto6FC906BE_g;
    int auto6FC906BE_u;
    unitgroup autoEB6078C0_g;
    int autoEB6078C0_u;
    unitgroup auto20C346E3_g;
    int auto20C346E3_u;
    unitgroup auto5138ED5A_g;
    int auto5138ED5A_u;

    // Variable Initialization

    // Implementation
    Wait(0.8, c_timeGame);
    auto3156323D_g = UnitGroup("Barracks", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3156323D_u = UnitGroupCount(auto3156323D_g, c_unitCountAll);
    for (;; auto3156323D_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto3156323D_g, auto3156323D_u);
        if (lv_unit == null) { break; }
        if ((UnitQueueItemTypeCheck(lv_unit, 1, c_unitProgressTypeTrain) == false)) {
            if ((UnitGetType(UnitAddOnChild(lv_unit, 0)) == "Reactor")) {
                UnitIssueOrder(lv_unit, Order(AbilityCommand("BarracksTrain", 0)), c_orderQueueReplace);
                UnitIssueOrder(lv_unit, Order(AbilityCommand("BarracksTrain", 0)), c_orderQueueReplace);
            }
            else if ((UnitGetType(UnitAddOnChild(lv_unit, 0)) == "TechLab")) {
                UnitIssueOrder(lv_unit, Order(AbilityCommand("BarracksTrain", 3)), c_orderQueueReplace);
            }
            else if (true) {
                UnitIssueOrder(lv_unit, Order(AbilityCommand("BarracksTrain", 0)), c_orderQueueReplace);
            }
        }

    }
    auto8A26796B_g = UnitGroup("Factory", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8A26796B_u = UnitGroupCount(auto8A26796B_g, c_unitCountAll);
    for (;; auto8A26796B_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto8A26796B_g, auto8A26796B_u);
        if (lv_unit == null) { break; }
        if ((UnitQueueItemTypeCheck(lv_unit, 1, c_unitProgressTypeTrain) == false)) {
            if ((UnitGetType(UnitAddOnChild(lv_unit, 0)) == "Reactor")) {
                UnitIssueOrder(lv_unit, Order(AbilityCommand("FactoryTrain", 6)), c_orderQueueReplace);
                UnitIssueOrder(lv_unit, Order(AbilityCommand("FactoryTrain", 6)), c_orderQueueReplace);
            }
            else if ((UnitGetType(UnitAddOnChild(lv_unit, 0)) == "TechLab")) {
                UnitIssueOrder(lv_unit, Order(AbilityCommand("FactoryTrain", 1)), c_orderQueueReplace);
            }
            else if ((UnitGetType(UnitAddOnChild(lv_unit, 0)) == "MachineShop")) {
                UnitIssueOrder(lv_unit, Order(AbilityCommand("FactoryTrain", 2)), c_orderQueueReplace);
            }
            else if ((UnitGetType(UnitAddOnChild(lv_unit, 0)) == "PhysicsLab")) {
                UnitIssueOrder(lv_unit, Order(AbilityCommand("FactoryTrain", 4)), c_orderQueueReplace);
            }
            else if (true) {
                UnitIssueOrder(lv_unit, Order(AbilityCommand("FactoryTrain", 6)), c_orderQueueReplace);
            }
        }

    }
    auto92B08140_g = UnitGroup("FactoryVulture", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto92B08140_u = UnitGroupCount(auto92B08140_g, c_unitCountAll);
    for (;; auto92B08140_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto92B08140_g, auto92B08140_u);
        if (lv_unit == null) { break; }
        if ((UnitQueueItemTypeCheck(lv_unit, 1, c_unitProgressTypeTrain) == false)) {
            if ((UnitGetType(UnitAddOnChild(lv_unit, 0)) == "Reactor")) {
                UnitIssueOrder(lv_unit, Order(AbilityCommand("FactoryTrain", 8)), c_orderQueueReplace);
                UnitIssueOrder(lv_unit, Order(AbilityCommand("FactoryTrain", 8)), c_orderQueueReplace);
            }
            else if ((UnitGetType(UnitAddOnChild(lv_unit, 0)) == "TechLab")) {
                UnitIssueOrder(lv_unit, Order(AbilityCommand("FactoryTrain", 1)), c_orderQueueReplace);
            }
            else if ((UnitGetType(UnitAddOnChild(lv_unit, 0)) == "MachineShop")) {
                UnitIssueOrder(lv_unit, Order(AbilityCommand("FactoryTrain", 2)), c_orderQueueReplace);
            }
            else if ((UnitGetType(UnitAddOnChild(lv_unit, 0)) == "PhysicsLab")) {
                UnitIssueOrder(lv_unit, Order(AbilityCommand("FactoryTrain", 4)), c_orderQueueReplace);
            }
            else if (true) {
                UnitIssueOrder(lv_unit, Order(AbilityCommand("FactoryTrain", 8)), c_orderQueueReplace);
            }
        }

    }
    auto1B7AF630_g = UnitGroup("Starport", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1B7AF630_u = UnitGroupCount(auto1B7AF630_g, c_unitCountAll);
    for (;; auto1B7AF630_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto1B7AF630_g, auto1B7AF630_u);
        if (lv_unit == null) { break; }
        if ((UnitQueueItemTypeCheck(lv_unit, 1, c_unitProgressTypeTrain) == false)) {
            if ((UnitGetType(UnitAddOnChild(lv_unit, 0)) == "Reactor")) {
                UnitIssueOrder(lv_unit, Order(AbilityCommand("StarportTrain", 4)), c_orderQueueReplace);
                UnitIssueOrder(lv_unit, Order(AbilityCommand("StarportTrain", 4)), c_orderQueueReplace);
            }
            else if ((UnitGetType(UnitAddOnChild(lv_unit, 0)) == "TechLab")) {
                UnitIssueOrder(lv_unit, Order(AbilityCommand("StarportTrain", 1)), c_orderQueueReplace);
            }
            else if ((UnitGetType(UnitAddOnChild(lv_unit, 0)) == "PhysicsLab")) {
                UnitIssueOrder(lv_unit, Order(AbilityCommand("StarportTrain", 3)), c_orderQueueReplace);
            }
            else if (true) {
                UnitIssueOrder(lv_unit, Order(AbilityCommand("StarportTrain", 4)), c_orderQueueReplace);
            }
        }

    }
    auto751483CE_g = UnitGroup("StarportSecretHangar", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto751483CE_u = UnitGroupCount(auto751483CE_g, c_unitCountAll);
    for (;; auto751483CE_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto751483CE_g, auto751483CE_u);
        if (lv_unit == null) { break; }
        if ((UnitQueueItemTypeCheck(lv_unit, 1, c_unitProgressTypeTrain) == false)) {
            if ((UnitGetType(UnitAddOnChild(lv_unit, 0)) == "Reactor")) {
                UnitIssueOrder(lv_unit, Order(AbilityCommand("StarportTrain", 5)), c_orderQueueReplace);
                UnitIssueOrder(lv_unit, Order(AbilityCommand("StarportTrain", 5)), c_orderQueueReplace);
            }
            else if ((UnitGetType(UnitAddOnChild(lv_unit, 0)) == "TechLab")) {
                UnitIssueOrder(lv_unit, Order(AbilityCommand("StarportTrain", 1)), c_orderQueueReplace);
            }
            else if ((UnitGetType(UnitAddOnChild(lv_unit, 0)) == "PhysicsLab")) {
                UnitIssueOrder(lv_unit, Order(AbilityCommand("StarportTrain", 3)), c_orderQueueReplace);
            }
            else if (true) {
                UnitIssueOrder(lv_unit, Order(AbilityCommand("StarportTrain", 5)), c_orderQueueReplace);
            }
        }

    }
    auto56AE3CFE_g = UnitGroup("Gateway", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto56AE3CFE_u = UnitGroupCount(auto56AE3CFE_g, c_unitCountAll);
    for (;; auto56AE3CFE_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto56AE3CFE_g, auto56AE3CFE_u);
        if (lv_unit == null) { break; }
        if ((UnitQueueItemTypeCheck(lv_unit, 1, c_unitProgressTypeTrain) == false)) {
            UnitIssueOrder(lv_unit, Order(AbilityCommand("GatewayTrain", 0)), c_orderQueueReplace);
        }

    }
    auto6FC906BE_g = UnitGroup("DragoonShrine", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6FC906BE_u = UnitGroupCount(auto6FC906BE_g, c_unitCountAll);
    for (;; auto6FC906BE_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto6FC906BE_g, auto6FC906BE_u);
        if (lv_unit == null) { break; }
        if ((UnitQueueItemTypeCheck(lv_unit, 1, c_unitProgressTypeTrain) == false)) {
            UnitIssueOrder(lv_unit, Order(AbilityCommand("GatewayTrain", 7)), c_orderQueueReplace);
        }

    }
    autoEB6078C0_g = UnitGroup("Stargate", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoEB6078C0_u = UnitGroupCount(autoEB6078C0_g, c_unitCountAll);
    for (;; autoEB6078C0_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoEB6078C0_g, autoEB6078C0_u);
        if (lv_unit == null) { break; }
        if ((UnitQueueItemTypeCheck(lv_unit, 1, c_unitProgressTypeTrain) == false)) {
            UnitIssueOrder(lv_unit, Order(AbilityCommand("StargateTrain", 0)), c_orderQueueReplace);
        }

    }
    auto20C346E3_g = UnitGroup("StargateVoid", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto20C346E3_u = UnitGroupCount(auto20C346E3_g, c_unitCountAll);
    for (;; auto20C346E3_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto20C346E3_g, auto20C346E3_u);
        if (lv_unit == null) { break; }
        if ((UnitQueueItemTypeCheck(lv_unit, 1, c_unitProgressTypeTrain) == false)) {
            UnitIssueOrder(lv_unit, Order(AbilityCommand("StargateTrain", 4)), c_orderQueueReplace);
        }

    }
    auto5138ED5A_g = UnitGroup("RoboticsFacility", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5138ED5A_u = UnitGroupCount(auto5138ED5A_g, c_unitCountAll);
    for (;; auto5138ED5A_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto5138ED5A_g, auto5138ED5A_u);
        if (lv_unit == null) { break; }
        if ((UnitQueueItemTypeCheck(lv_unit, 1, c_unitProgressTypeTrain) == false)) {
            UnitIssueOrder(lv_unit, Order(AbilityCommand("RoboticsFacilityTrain", 3)), c_orderQueueReplace);
        }

    }
    return true;
}

void lib1_gf_AddStructurePointtoPlan (point lp_point, string lp_structure_type) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto331526B3_ae = lib1_gv_mAX_STRUCTURE_PLAN_POINTS;
    const int auto331526B3_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = 0;
    for ( ; ( (auto331526B3_ai >= 0 && lv_index <= auto331526B3_ae) || (auto331526B3_ai < 0 && lv_index >= auto331526B3_ae) ) ; lv_index += auto331526B3_ai ) {
        if ((lib1_gv_planned_structure_point[lv_index] == null)) {
            lib1_gv_planned_structure_point[lv_index] = lp_point;
            lib1_gv_planned_structure_type[lv_index] = lp_structure_type;
            break;
        }

    }
    lib1_gf_RemoveStructurePointFromPlanAfterTime(PointGetX(lp_point), PointGetY(lp_point), 5.0);
}

trigger auto_lib1_gf_RemoveStructurePointFromPlanAfterTime_Trigger = null;
fixed auto_lib1_gf_RemoveStructurePointFromPlanAfterTime_lp_x;
fixed auto_lib1_gf_RemoveStructurePointFromPlanAfterTime_lp_y;
fixed auto_lib1_gf_RemoveStructurePointFromPlanAfterTime_lp_time;

void lib1_gf_RemoveStructurePointFromPlanAfterTime (fixed lp_x, fixed lp_y, fixed lp_time) {
    auto_lib1_gf_RemoveStructurePointFromPlanAfterTime_lp_x = lp_x;
    auto_lib1_gf_RemoveStructurePointFromPlanAfterTime_lp_y = lp_y;
    auto_lib1_gf_RemoveStructurePointFromPlanAfterTime_lp_time = lp_time;

    if (auto_lib1_gf_RemoveStructurePointFromPlanAfterTime_Trigger == null) {
        auto_lib1_gf_RemoveStructurePointFromPlanAfterTime_Trigger = TriggerCreate("auto_lib1_gf_RemoveStructurePointFromPlanAfterTime_TriggerFunc");
    }

    TriggerExecute(auto_lib1_gf_RemoveStructurePointFromPlanAfterTime_Trigger, false, false);
}

bool auto_lib1_gf_RemoveStructurePointFromPlanAfterTime_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_x = auto_lib1_gf_RemoveStructurePointFromPlanAfterTime_lp_x;
    fixed lp_y = auto_lib1_gf_RemoveStructurePointFromPlanAfterTime_lp_y;
    fixed lp_time = auto_lib1_gf_RemoveStructurePointFromPlanAfterTime_lp_time;

    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto28C0BC21_ae = lib1_gv_mAX_STRUCTURE_PLAN_POINTS;
    const int auto28C0BC21_ai = 1;

    // Variable Initialization

    // Implementation
    Wait(lp_time, c_timeGame);
    lv_index = 0;
    for ( ; ( (auto28C0BC21_ai >= 0 && lv_index <= auto28C0BC21_ae) || (auto28C0BC21_ai < 0 && lv_index >= auto28C0BC21_ae) ) ; lv_index += auto28C0BC21_ai ) {
        if ((lib1_gv_planned_structure_point[lv_index] != null) && (PointGetX(lib1_gv_planned_structure_point[lv_index]) == lp_x) && (PointGetY(lib1_gv_planned_structure_point[lv_index]) == lp_y)) {
            lib1_gv_planned_structure_point[lv_index] = null;
            lib1_gv_planned_structure_type[lv_index] = null;
        }

    }
    return true;
}

point lib1_gf_FindStructureBuildTarget (int lp_player, string lp_equivalent_unit_type, bool lp_defensive) {
    // Variable Declarations
    unit lv_unit;
    region lv_target_region;
    point lv_target;
    bool lv_try_again;
    bool lv_need_more_room;
    bool lv_need_even_more_room;
    int lv_try_count;
    int lv_planned_structure_index;
    fixed lv_offset;

    // Automatic Variable Declarations
    const int autoAFAB1B6B_ae = lib1_gv_mAX_STRUCTURE_PLAN_POINTS;
    const int autoAFAB1B6B_ai = 1;
    unitgroup autoDB56E17D_g;
    int autoDB56E17D_u;
    unitgroup auto26E1757B_g;
    int auto26E1757B_u;
    unitgroup auto822F146D_g;
    int auto822F146D_u;
    unitgroup auto4C8F3CBB_g;
    int auto4C8F3CBB_u;

    // Variable Initialization
    lv_try_again = true;

    // Implementation
    while ((lv_try_again == true) && (((lp_defensive == false) && (lv_try_count < 100)) || ((lp_defensive == true) && (lv_try_count < 50)))) {
        lv_try_again = false;
        if ((lp_defensive == false)) {
            if ((PlayerGroupHasPlayer(lib1_gv_team[0], lp_player) == true)) {
                lv_offset = (MaxI((lv_try_count - 55), 0) * 1.0);
            }
            else {
                lv_offset = (MaxI((lv_try_count - 55), 0) * -1.0);
            }
            lv_target = PointWithOffset(RegionRandomPoint(lib1_gv_player[lp_player].lv_structure_region), lv_offset, 0.0);
        }
        else {
            if ((PlayerGroupHasPlayer(lib1_gv_team[0], lp_player) == true)) {
                lv_offset = (MaxI((lv_try_count - 15), 0) * 1.0);
            }
            else {
                lv_offset = (MaxI((lv_try_count - 15), 0) * -1.0);
            }
            lv_target = PointWithOffset(RegionRandomPoint(lib1_gv_player[lp_player].lv_defense_region), lv_offset, 0.0);
        }
        lv_target = UnitTypePlacementTestsFromPoint(lp_equivalent_unit_type, lp_player, lv_target, 500.0, c_placementTestCliffMask);
        if ((lv_target == null)) {
            lv_try_again = true;
        }
        else {
            lv_planned_structure_index = 0;
            for ( ; ( (autoAFAB1B6B_ai >= 0 && lv_planned_structure_index <= autoAFAB1B6B_ae) || (autoAFAB1B6B_ai < 0 && lv_planned_structure_index >= autoAFAB1B6B_ae) ) ; lv_planned_structure_index += autoAFAB1B6B_ai ) {
                if ((lib1_gv_planned_structure_point[lv_planned_structure_index] != null) && (DistanceBetweenPoints(lib1_gv_planned_structure_point[lv_planned_structure_index], lv_target) < (UnitTypeGetProperty(lib1_gv_planned_structure_type[lv_planned_structure_index], c_unitPropRadius) + UnitTypeGetProperty(lp_equivalent_unit_type, c_unitPropRadius)))) {
                    lv_try_again = true;
                }

            }
            if ((lp_defensive == true)) {
                auto26E1757B_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                auto26E1757B_u = UnitGroupCount(auto26E1757B_g, c_unitCountAll);
                for (;; auto26E1757B_u -= 1) {
                    lv_unit = UnitGroupUnitFromEnd(auto26E1757B_g, auto26E1757B_u);
                    if (lv_unit == null) { break; }
                    if ((DistanceBetweenPoints(UnitGetPosition(lv_unit), lv_target) < (UnitGetPropertyFixed(lv_unit, c_unitPropRadius, c_unitPropCurrent) + UnitTypeGetProperty(lp_equivalent_unit_type, c_unitPropRadius) + lib1_gv_dEFENSIVE_STRUCTURE_SPACING)) && (UnitGetType(lv_unit) != "Reactor") && (UnitGetType(lv_unit) != "TechLab") && (UnitGetType(lv_unit) != "MachineShop") && (UnitGetType(lv_unit) != "PhysicsLab") && (UnitGetType(lv_unit) != "CreepTumor") && (UnitGetType(lv_unit) != "CreepTumorBurrowed") && (UnitGetType(lv_unit) != "CreepTumorQueen") && (UnitGetType(lv_unit) != "OracleStasisTrap")) {
                        lv_try_again = true;
                    }

                }
            }
            else {
                autoDB56E17D_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                autoDB56E17D_u = UnitGroupCount(autoDB56E17D_g, c_unitCountAll);
                for (;; autoDB56E17D_u -= 1) {
                    lv_unit = UnitGroupUnitFromEnd(autoDB56E17D_g, autoDB56E17D_u);
                    if (lv_unit == null) { break; }
                    if ((DistanceBetweenPoints(UnitGetPosition(lv_unit), lv_target) < (UnitGetPropertyFixed(lv_unit, c_unitPropRadius, c_unitPropCurrent) + UnitTypeGetProperty(lp_equivalent_unit_type, c_unitPropRadius) + lib1_gv_sTRUCTURE_SPACING)) && (UnitGetType(lv_unit) != "Reactor") && (UnitGetType(lv_unit) != "TechLab") && (UnitGetType(lv_unit) != "MachineShop") && (UnitGetType(lv_unit) != "PhysicsLab") && (UnitGetType(lv_unit) != "CreepTumor") && (UnitGetType(lv_unit) != "CreepTumorBurrowed") && (UnitGetType(lv_unit) != "CreepTumorQueen") && (UnitGetType(lv_unit) != "OracleStasisTrap")) {
                        lv_try_again = true;
                    }

                }
            }
            auto822F146D_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterBuried), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto822F146D_u = UnitGroupCount(auto822F146D_g, c_unitCountAll);
            for (;; auto822F146D_u -= 1) {
                lv_unit = UnitGroupUnitFromEnd(auto822F146D_g, auto822F146D_u);
                if (lv_unit == null) { break; }
                if ((DistanceBetweenPoints(UnitGetPosition(lv_unit), lv_target) < (UnitGetPropertyFixed(lv_unit, c_unitPropRadius, c_unitPropCurrent) + UnitTypeGetProperty(lp_equivalent_unit_type, c_unitPropRadius) + lib1_gv_bURIED_STRUCTURE_SPACING)) && (UnitGetType(lv_unit) != "CreepTumor") && (UnitGetType(lv_unit) != "CreepTumorBurrowed") && (UnitGetType(lv_unit) != "CreepTumorQueen") && (UnitGetType(lv_unit) != "OracleStasisTrap")) {
                    lv_try_again = true;
                }

            }
            auto4C8F3CBB_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto4C8F3CBB_u = UnitGroupCount(auto4C8F3CBB_g, c_unitCountAll);
            for (;; auto4C8F3CBB_u -= 1) {
                lv_unit = UnitGroupUnitFromEnd(auto4C8F3CBB_g, auto4C8F3CBB_u);
                if (lv_unit == null) { break; }
                if ((DistanceBetweenPoints(UnitGetPosition(lv_unit), lv_target) < (UnitGetPropertyFixed(lv_unit, c_unitPropRadius, c_unitPropCurrent) + UnitTypeGetProperty(lp_equivalent_unit_type, c_unitPropRadius) + lib1_gv_bURIED_STRUCTURE_SPACING)) && ((UnitGetType(lv_unit) == "SiegeTankSieged") || (UnitGetType(lv_unit) == "SiegeTankMercSieged"))) {
                    lv_try_again = true;
                }

            }
        }
        lv_try_count = (lv_try_count + 1);
    }
    lib1_gf_AddStructurePointtoPlan(lv_target, lp_equivalent_unit_type);
    return lv_target;
}

bool lib1_gf_UnitTypeIsCaster (string lp_unit_type) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_unit_type == "Raven") || (lp_unit_type == "Overseer") || (lp_unit_type == "Infestor") || (lp_unit_type == "InfestorBurrowed") || (lp_unit_type == "QueenMP") || (lp_unit_type == "DefilerMP") || (lp_unit_type == "ScienceVessel") || (lp_unit_type == "Viper") || (lp_unit_type == "Observer") || (lp_unit_type == "Changeling") || (lp_unit_type == "SwarmHostMP"))) {
        return true;
    }

    return false;
}

int lib1_gf_NumberofHeroicUnitsOwnedByPlayer (int lp_player) {
    // Variable Declarations
    int lv_count;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto61BD6598_g;
    int auto61BD6598_u;

    // Variable Initialization

    // Implementation
    auto61BD6598_g = UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 0);
    auto61BD6598_u = UnitGroupCount(auto61BD6598_g, c_unitCountAll);
    for (;; auto61BD6598_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto61BD6598_g, auto61BD6598_u);
        if (lv_unit == null) { break; }
        if ((UnitHasBehavior2(lv_unit, "Heroic") == true)) {
            lv_count = (lv_count + 1);
        }

    }
    return lv_count;
}

fixed lib1_gf_RandomAngleforSpawn (int lp_unit_owner) {
    // Automatic Variable Declarations
    // Implementation
    if ((lib1_gv_player[lp_unit_owner].lv_team == 0)) {
        return RandomFixed(315.0, 405.0);
    }

    return RandomFixed(135.0, 225.0);
}

void lib1_gf_RemoveAllStunsFromUnit (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    UnitBehaviorRemove(lp_unit, "ArbiterMPStasisField", c_unitBehaviorCountAll);
    UnitBehaviorRemove(lp_unit, "StasisFieldStructure", c_unitBehaviorCountAll);
    UnitBehaviorRemove(lp_unit, "ArbiterMPStasisFieldTimedLife", c_unitBehaviorCountAll);
    UnitBehaviorRemove(lp_unit, "StasisFieldTimedLifeStructure", c_unitBehaviorCountAll);
    UnitBehaviorRemove(lp_unit, "Contaminated", c_unitBehaviorCountAll);
    UnitBehaviorRemove(lp_unit, "OracleStasisTrapTarget", c_unitBehaviorCountAll);
    UnitBehaviorRemove(lp_unit, "UltrasonicPulseStun", c_unitBehaviorCountAll);
    UnitBehaviorRemove(lp_unit, "RavenScramblerMissile", c_unitBehaviorCountAll);
}

unitgroup lib1_gf_GetUnitAIGroup (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitGroupHasUnit(lib1_gv_aggressive_units, lp_unit) == true)) {
        return lib1_gv_aggressive_units;
    }
    else if ((UnitGroupHasUnit(lib1_gv_defensive_units, lp_unit) == true)) {
        return lib1_gv_defensive_units;
    }
    else if ((UnitGroupHasUnit(lib1_gv_tactical_units, lp_unit) == true)) {
        return lib1_gv_tactical_units;
    }
    return null;
}

point lib1_gf_RandomPointInRegionWithOffsetFromPoint (region lp_region, point lp_point, fixed lp_offset) {
    // Variable Declarations
    int lv_attempt;
    point lv_return_point;

    // Automatic Variable Declarations
    const int auto0F843FC2_ae = 1000;
    const int auto0F843FC2_ai = 1;

    // Variable Initialization

    // Implementation
    lv_return_point = RegionRandomPoint(lp_region);
    lv_attempt = 1;
    for ( ; ( (auto0F843FC2_ai >= 0 && lv_attempt <= auto0F843FC2_ae) || (auto0F843FC2_ai < 0 && lv_attempt >= auto0F843FC2_ae) ) ; lv_attempt += auto0F843FC2_ai ) {
        if ((DistanceBetweenPoints(lp_point, lv_return_point) < lp_offset)) {
            lv_return_point = RegionRandomPoint(lp_region);
        }
        else {
            break;
        }
    }
    return lv_return_point;
}

void lib1_gf_IssueDefaultOrders (unit lp_unit) {
    // Variable Declarations
    point lv_point;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((UnitGroupHasUnit(lib1_gv_ready_to_morph, lp_unit) == true) && (UnitGetType(lp_unit) == "MothershipCore")) {
        UnitIssueOrder(lp_unit, Order(AbilityCommand("MorphToMothership", 0)), c_orderQueueReplace);
    }
    else if (((UnitGroupHasUnit(lib1_gv_aggressive_units, lp_unit) == true) || ((UnitGroupHasUnit(lib1_gv_tactical_units, lp_unit) == true) && (UnitGroupHasUnit(lib1_gv_retreating_units, lp_unit) == false) && (((UnitGetPropertyFixed(lp_unit, c_unitPropLife, c_unitPropCurrent) + UnitGetPropertyFixed(lp_unit, c_unitPropShields, c_unitPropCurrent)) / (UnitGetPropertyFixed(lp_unit, c_unitPropLifeMax, c_unitPropCurrent) + UnitGetPropertyFixed(lp_unit, c_unitPropShieldsMax, c_unitPropCurrent))) > 0.5) && ((UnitGetType(lp_unit) != "Carrier") || (UnitMagazineCount(lp_unit, "CarrierHangar") > 4)) && ((UnitGetType(lp_unit) != "CarrierGantrithor") || (UnitMagazineCount(lp_unit, "CarrierHangarGantrithor") > 4))))) {
        lib1_gf_IssueAttackOrders(lp_unit);
    }
    else if ((UnitGroupHasUnit(lib1_gv_tactical_units, lp_unit) == true)) {
        UnitGroupAdd(lib1_gv_retreating_units, lp_unit);
        lib1_gf_IssueDefendOrders(lp_unit);
    }
    else if ((UnitGroupHasUnit(lib1_gv_defensive_units, lp_unit) == true)) {
        lib1_gf_IssueDefendOrders(lp_unit);
    }
    if ((UnitHasBehavior2(lp_unit, "WaitingToMoveOut") == false) && (UnitHasBehavior2(lp_unit, "CasterWaitingToMoveOut") == false)) {
        lib1_gf_ClearWaitingTint(lp_unit);
        if ((UnitGetType(lp_unit) == "FallenXelnagaAmon")) {
            libNtve_gf_SendActorMessageToUnit(lp_unit, "AnimClear Birth 0.500000");
        }

    }

}

trigger auto_lib1_gf_IssueAttackOrders_Trigger = null;
unit auto_lib1_gf_IssueAttackOrders_lp_unit;

void lib1_gf_IssueAttackOrders (unit lp_unit) {
    auto_lib1_gf_IssueAttackOrders_lp_unit = lp_unit;

    if (auto_lib1_gf_IssueAttackOrders_Trigger == null) {
        auto_lib1_gf_IssueAttackOrders_Trigger = TriggerCreate("auto_lib1_gf_IssueAttackOrders_TriggerFunc");
    }

    TriggerExecute(auto_lib1_gf_IssueAttackOrders_Trigger, false, false);
}

bool auto_lib1_gf_IssueAttackOrders_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_lib1_gf_IssueAttackOrders_lp_unit;

    // Variable Declarations
    point lv_point;
    point lv_target_point;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lib1_gf_ClearWaitingTint(lp_unit);
    lv_point = RegionRandomPoint(lib1_gv_player[UnitGetOwner(lp_unit)].lv_attack_region);
    lv_target_point = lib1_gf_RandomPointInRegionWithOffsetFromPoint(lib1_gv_player[UnitGetOwner(lp_unit)].lv_attack_region, lv_point, lib1_gv_mIN_PATROL_DISTANCE);
    if ((UnitGetType(lp_unit) == "RoachBurrowed")) {
        Wait(0.3, c_timeGame);
        UnitIssueOrder(lp_unit, Order(AbilityCommand("BurrowRoachUp", 0)), c_orderQueueReplace);
        Wait(0.6, c_timeGame);
        UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("attack", 0), lv_point), c_orderQueueReplace);
        UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 1), lv_target_point), c_orderQueueAddToEnd);
    }
    else if ((UnitGetType(lp_unit) == "RoachVileBurrowed")) {
        Wait(0.3, c_timeGame);
        UnitIssueOrder(lp_unit, Order(AbilityCommand("UnburrowRoachVile", 0)), c_orderQueueReplace);
        Wait(0.6, c_timeGame);
        UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("attack", 0), lv_point), c_orderQueueReplace);
        UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 1), lv_target_point), c_orderQueueAddToEnd);
    }
    else if ((UnitGroupHasUnit(lib1_gv_units_from_card[lib1_gf_GetCardIDByName("Baneling Bombs")], lp_unit) == true) && (UnitGetType(lp_unit) == "OverlordTransport")) {
        UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("OverlordTransport", 2), RegionRandomPoint(lib1_gv_player[UnitGetOwner(lp_unit)].lv_enemy_defense_region)), c_orderQueueReplace);
        lib1_gf_IssueLeaveOrders(lp_unit, c_orderQueueAddToEnd);
    }
    else if ((UnitGroupHasUnit(lib1_gv_units_from_card[lib1_gf_GetCardIDByName("Aerial Invasion")], lp_unit) == true) && (UnitGetType(lp_unit) == "OverlordTransport")) {
        UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("OverlordTransport", 2), RegionRandomPoint(lib1_gv_player[UnitGetOwner(lp_unit)].lv_far_drop_region)), c_orderQueueReplace);
        UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(lib1_gv_player[UnitGetOwner(lp_unit)].lv_close_drop_region)), c_orderQueueAddToFront);
        lib1_gf_IssueLeaveOrders(lp_unit, c_orderQueueAddToEnd);
    }
    else if (true) {
        if ((UnitGetType(lp_unit) == "Oracle")) {
            UnitIssueOrder(lp_unit, Order(AbilityCommand("OracleWeapon", 0)), c_orderQueueAddToFront);
        }

        UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("attack", 0), lv_point), c_orderQueueReplace);
        UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 1), lv_target_point), c_orderQueueAddToEnd);
    }
    return true;
}

trigger auto_lib1_gf_IssueDefendOrders_Trigger = null;
unit auto_lib1_gf_IssueDefendOrders_lp_unit;

void lib1_gf_IssueDefendOrders (unit lp_unit) {
    auto_lib1_gf_IssueDefendOrders_lp_unit = lp_unit;

    if (auto_lib1_gf_IssueDefendOrders_Trigger == null) {
        auto_lib1_gf_IssueDefendOrders_Trigger = TriggerCreate("auto_lib1_gf_IssueDefendOrders_TriggerFunc");
    }

    TriggerExecute(auto_lib1_gf_IssueDefendOrders_Trigger, false, false);
}

bool auto_lib1_gf_IssueDefendOrders_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_lib1_gf_IssueDefendOrders_lp_unit;

    // Variable Declarations
    point lv_point;
    point lv_target_point;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lib1_gf_ClearWaitingTint(lp_unit);
    lv_point = RegionRandomPoint(lib1_gv_player[UnitGetOwner(lp_unit)].lv_defense_region);
    lv_target_point = lib1_gf_RandomPointInRegionWithOffsetFromPoint(lib1_gv_player[UnitGetOwner(lp_unit)].lv_defense_region, lv_point, lib1_gv_mIN_PATROL_DISTANCE);
    if ((UnitGetType(lp_unit) == "WidowMine")) {
        UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 0), lv_point), c_orderQueueReplace);
        UnitIssueOrder(lp_unit, Order(AbilityCommand("WidowMineBurrow", 0)), c_orderQueueAddToEnd);
    }
    else if ((UnitGetType(lp_unit) == "SwarmHostMP")) {
        UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 0), lv_point), c_orderQueueReplace);
        UnitIssueOrder(lp_unit, Order(AbilityCommand("MorphToSwarmHostBurrowedMP", 0)), c_orderQueueAddToEnd);
    }
    else if (((UnitGetType(lp_unit) == "Overlord") || (UnitGetType(lp_unit) == "OverlordOvermind"))) {
        UnitIssueOrder(lp_unit, Order(AbilityCommand("GenerateCreep", 0)), c_orderQueueAddToFront);
        UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(lib1_gv_player[UnitGetOwner(lp_unit)].lv_structure_region)), c_orderQueueReplace);
        UnitIssueOrder(lp_unit, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    }
    else if ((UnitGetType(lp_unit) == "SwarmHostBurrowedMP")) {
        UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("SpawnLocustsTargeted", 0), RegionRandomPoint(lib1_gv_player[UnitGetOwner(lp_unit)].lv_attack_region)), c_orderQueueReplace);
    }
    else if ((UnitGetType(lp_unit) == "Medivac") && (UnitGroupCount(UnitCargoGroup(lp_unit), c_unitCountAlive) >= 1)) {
        UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("MedivacTransport", 2), lv_point), c_orderQueueReplace);
        lv_point = lib1_gf_RandomPointInRegionWithOffsetFromPoint(lib1_gv_player[UnitGetOwner(lp_unit)].lv_defense_region, lv_point, lib1_gv_mIN_PATROL_DISTANCE);
        UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 1), lv_point), c_orderQueueAddToEnd);
    }
    else if ((UnitGroupHasUnit(lib1_gv_units_from_card[lib1_gf_GetCardIDByName("Liberation Zone")], lp_unit) == true) && (UnitGetType(lp_unit) == "Liberator")) {
        UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("LiberatorAGTarget", 0), RegionRandomPoint(RegionFromId(15))), c_orderQueueAddToEnd);
    }
    else if ((UnitGroupHasUnit(lib1_gv_units_from_card[lib1_gf_GetCardIDByName("Entrench")], lp_unit) == true) && (UnitGetType(lp_unit) == "SiegeTank")) {
        UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("attack", 0), lv_point), c_orderQueueReplace);
        UnitIssueOrder(lp_unit, Order(AbilityCommand("SiegeMode", 0)), c_orderQueueAddToEnd);
    }
    else if ((UnitGetType(lp_unit) == "WarpPrism")) {
        UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(lib1_gv_player[UnitGetOwner(lp_unit)].lv_structure_region)), c_orderQueueReplace);
        UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("WarpPrismTransport", 2), UnitGetPosition(lp_unit)), c_orderQueueAddToEnd);
        UnitIssueOrder(lp_unit, Order(AbilityCommand("PhasingMode", 0)), c_orderQueueAddToEnd);
    }
    else if ((UnitGetType(lp_unit) == "RoachBurrowed")) {
        UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 0), lv_point), c_orderQueueReplace);
        UnitIssueOrder(lp_unit, Order(AbilityCommand("BurrowRoachUp", 0)), c_orderQueueAddToEnd);
    }
    else if ((UnitGetType(lp_unit) == "RoachVileBurrowed")) {
        UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 0), lv_point), c_orderQueueReplace);
        UnitIssueOrder(lp_unit, Order(AbilityCommand("UnburrowRoachVile", 0)), c_orderQueueReplace);
    }
    else if (true) {
        UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("attack", 0), lv_point), c_orderQueueReplace);
        UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 1), lv_target_point), c_orderQueueAddToEnd);
    }
    return true;
}

trigger auto_lib1_gf_IssueDefensiveRetreatOrders_Trigger = null;
unit auto_lib1_gf_IssueDefensiveRetreatOrders_lp_unit;

void lib1_gf_IssueDefensiveRetreatOrders (unit lp_unit) {
    auto_lib1_gf_IssueDefensiveRetreatOrders_lp_unit = lp_unit;

    if (auto_lib1_gf_IssueDefensiveRetreatOrders_Trigger == null) {
        auto_lib1_gf_IssueDefensiveRetreatOrders_Trigger = TriggerCreate("auto_lib1_gf_IssueDefensiveRetreatOrders_TriggerFunc");
    }

    TriggerExecute(auto_lib1_gf_IssueDefensiveRetreatOrders_Trigger, false, false);
}

bool auto_lib1_gf_IssueDefensiveRetreatOrders_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_lib1_gf_IssueDefensiveRetreatOrders_lp_unit;

    // Variable Declarations
    point lv_point;
    point lv_target_point;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lib1_gf_ClearWaitingTint(lp_unit);
    lv_point = RegionRandomPoint(lib1_gv_player[UnitGetOwner(lp_unit)].lv_defense_region);
    lv_target_point = lib1_gf_RandomPointInRegionWithOffsetFromPoint(lib1_gv_player[UnitGetOwner(lp_unit)].lv_defense_region, lv_point, lib1_gv_mIN_PATROL_DISTANCE);
    UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 0), lv_point), c_orderQueueReplace);
    UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 1), lv_target_point), c_orderQueueAddToEnd);
    return true;
}

trigger auto_lib1_gf_IssueTacticalRetreatOrders_Trigger = null;
unit auto_lib1_gf_IssueTacticalRetreatOrders_lp_unit;

void lib1_gf_IssueTacticalRetreatOrders (unit lp_unit) {
    auto_lib1_gf_IssueTacticalRetreatOrders_lp_unit = lp_unit;

    if (auto_lib1_gf_IssueTacticalRetreatOrders_Trigger == null) {
        auto_lib1_gf_IssueTacticalRetreatOrders_Trigger = TriggerCreate("auto_lib1_gf_IssueTacticalRetreatOrders_TriggerFunc");
    }

    TriggerExecute(auto_lib1_gf_IssueTacticalRetreatOrders_Trigger, false, false);
}

bool auto_lib1_gf_IssueTacticalRetreatOrders_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_lib1_gf_IssueTacticalRetreatOrders_lp_unit;

    // Variable Declarations
    point lv_from_point;
    point lv_to_point;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lib1_gf_ClearWaitingTint(lp_unit);
    UnitBehaviorAdd(lp_unit, "Retreating", lp_unit, 1);
    UnitGroupAdd(lib1_gv_retreating_units, lp_unit);
    lv_from_point = RegionRandomPoint(lib1_gv_player[UnitGetOwner(lp_unit)].lv_defense_region);
    lv_to_point = lib1_gf_RandomPointInRegionWithOffsetFromPoint(lib1_gv_player[UnitGetOwner(lp_unit)].lv_defense_region, lv_from_point, lib1_gv_mIN_PATROL_DISTANCE);
    if ((UnitGroupHasUnit(lib1_gv_units_from_card[lib1_gf_GetCardIDByName("Expedition Scout")], lp_unit) == true)) {
        lib1_gf_IssueLeaveOrders(lp_unit, c_orderQueueReplace);
    }
    else if ((UnitGetType(lp_unit) == "Battlecruiser")) {
        if ((DistanceBetweenPoints(UnitGetPosition(lp_unit), RegionGetCenter(lib1_gv_player[UnitGetOwner(lp_unit)].lv_defense_region)) >= DistanceBetweenPoints(UnitGetPosition(lp_unit), RegionGetCenter(RegionFromId(15))))) {
            UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("Hyperjump", 0), lv_from_point), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("attack", 0), lv_from_point), c_orderQueueReplace);
        }
        UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 1), lv_to_point), c_orderQueueAddToEnd);
    }
    else if ((UnitGetType(lp_unit) == "Cyclone")) {
        UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 0), lv_from_point), c_orderQueueReplace);
        UnitIssueOrder(lp_unit, OrderTargetingUnit(AbilityCommand("LockOn", 0), UnitGroupClosestToPoint(UnitGroupAlliance(UnitGetOwner(lp_unit), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_unit), 7.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), UnitGetPosition(lp_unit))), c_orderQueueAddToFront);
        UnitIssueOrder(lp_unit, OrderSetAutoCast(AbilityCommand("LockOn", 0), true), c_orderQueueAddToFront);
        UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 1), lv_to_point), c_orderQueueAddToEnd);
    }
    else if ((UnitGetType(lp_unit) == "Hyperion")) {
        if ((DistanceBetweenPoints(UnitGetPosition(lp_unit), RegionGetCenter(lib1_gv_player[UnitGetOwner(lp_unit)].lv_defense_region)) >= DistanceBetweenPoints(UnitGetPosition(lp_unit), RegionGetCenter(RegionFromId(15))))) {
            UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("Hyperjump", 0), lv_from_point), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("attack", 0), lv_from_point), c_orderQueueReplace);
        }
        UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 1), lv_to_point), c_orderQueueAddToEnd);
    }
    else if (((UnitGetType(lp_unit) == "Ghost") || (UnitGetType(lp_unit) == "GhostAlternate") || (UnitGetType(lp_unit) == "GhostNova"))) {
        if ((DistanceBetweenPoints(UnitGetPosition(lp_unit), RegionGetCenter(lib1_gv_player[UnitGetOwner(lp_unit)].lv_defense_region)) >= DistanceBetweenPoints(UnitGetPosition(lp_unit), RegionGetCenter(RegionFromId(15))))) {
            UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 0), lv_from_point), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("attack", 0), lv_from_point), c_orderQueueReplace);
        }
        UnitIssueOrder(lp_unit, Order(AbilityCommand("GhostCloak", 0)), c_orderQueueAddToFront);
        UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 1), lv_to_point), c_orderQueueAddToEnd);
    }
    else if ((UnitGetType(lp_unit) == "Spectre")) {
        if ((DistanceBetweenPoints(UnitGetPosition(lp_unit), RegionGetCenter(lib1_gv_player[UnitGetOwner(lp_unit)].lv_defense_region)) >= DistanceBetweenPoints(UnitGetPosition(lp_unit), RegionGetCenter(RegionFromId(15))))) {
            UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 0), lv_from_point), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("attack", 0), lv_from_point), c_orderQueueReplace);
        }
        UnitIssueOrder(lp_unit, Order(AbilityCommand("RogueGhostCloak", 0)), c_orderQueueAddToFront);
        UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 1), lv_to_point), c_orderQueueAddToEnd);
    }
    else if ((UnitGetType(lp_unit) == "Roach")) {
        if ((DistanceBetweenPoints(UnitGetPosition(lp_unit), RegionGetCenter(lib1_gv_player[UnitGetOwner(lp_unit)].lv_defense_region)) >= DistanceBetweenPoints(UnitGetPosition(lp_unit), RegionGetCenter(RegionFromId(15))))) {
            UnitIssueOrder(lp_unit, Order(AbilityCommand("BurrowRoachDown", 0)), c_orderQueueReplace);
            UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 0), lv_from_point), c_orderQueueAddToEnd);
            Wait(0.6, c_timeGame);
            UnitIssueOrder(lp_unit, Order(AbilityCommand("BurrowRoachUp", 0)), c_orderQueueAddToEnd);
        }
        else {
            UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("attack", 0), lv_from_point), c_orderQueueReplace);
        }
        UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 1), lv_to_point), c_orderQueueAddToEnd);
    }
    else if ((UnitGetType(lp_unit) == "RoachVile")) {
        if ((DistanceBetweenPoints(UnitGetPosition(lp_unit), RegionGetCenter(lib1_gv_player[UnitGetOwner(lp_unit)].lv_defense_region)) >= DistanceBetweenPoints(UnitGetPosition(lp_unit), RegionGetCenter(RegionFromId(15))))) {
            UnitIssueOrder(lp_unit, Order(AbilityCommand("BurrowRoachVile", 0)), c_orderQueueReplace);
            UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 0), lv_from_point), c_orderQueueAddToEnd);
            Wait(0.6, c_timeGame);
            UnitIssueOrder(lp_unit, Order(AbilityCommand("UnburrowRoachVile", 0)), c_orderQueueAddToEnd);
        }
        else {
            UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("attack", 0), lv_from_point), c_orderQueueReplace);
        }
        UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 1), lv_to_point), c_orderQueueAddToEnd);
    }
    else if ((UnitGetType(lp_unit) == "Infestor")) {
        if ((DistanceBetweenPoints(UnitGetPosition(lp_unit), RegionGetCenter(lib1_gv_player[UnitGetOwner(lp_unit)].lv_defense_region)) >= DistanceBetweenPoints(UnitGetPosition(lp_unit), RegionGetCenter(RegionFromId(15))))) {
            UnitIssueOrder(lp_unit, Order(AbilityCommand("BurrowInfestorDown", 0)), c_orderQueueReplace);
            UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 0), lv_from_point), c_orderQueueAddToEnd);
        }
        else {
            UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("attack", 0), lv_from_point), c_orderQueueReplace);
        }
        UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 1), lv_to_point), c_orderQueueAddToEnd);
    }
    else if ((UnitGetType(lp_unit) == "Stalker")) {
        if ((DistanceBetweenPoints(UnitGetPosition(lp_unit), RegionGetCenter(lib1_gv_player[UnitGetOwner(lp_unit)].lv_defense_region)) >= DistanceBetweenPoints(UnitGetPosition(lp_unit), RegionGetCenter(RegionFromId(15))))) {
            UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("Blink", 0), lv_from_point), c_orderQueueReplace);
            UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 0), lv_from_point), c_orderQueueAddToEnd);
        }
        else {
            UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("attack", 0), lv_from_point), c_orderQueueReplace);
        }
        UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 1), lv_to_point), c_orderQueueAddToEnd);
    }
    else if ((UnitGetType(lp_unit) == "StalkerPurifier")) {
        if ((DistanceBetweenPoints(UnitGetPosition(lp_unit), RegionGetCenter(lib1_gv_player[UnitGetOwner(lp_unit)].lv_defense_region)) >= DistanceBetweenPoints(UnitGetPosition(lp_unit), RegionGetCenter(RegionFromId(15))))) {
            UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("BlinkPurifier", 0), lv_from_point), c_orderQueueReplace);
            UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 0), lv_from_point), c_orderQueueAddToEnd);
        }
        else {
            UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("attack", 0), lv_from_point), c_orderQueueReplace);
        }
        UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 1), lv_to_point), c_orderQueueAddToEnd);
    }
    else if ((UnitGetType(lp_unit) == "StalkerHeroic")) {
        if ((DistanceBetweenPoints(UnitGetPosition(lp_unit), RegionGetCenter(lib1_gv_player[UnitGetOwner(lp_unit)].lv_defense_region)) >= DistanceBetweenPoints(UnitGetPosition(lp_unit), RegionGetCenter(RegionFromId(15))))) {
            UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("BlinkPurifier2", 0), lv_from_point), c_orderQueueReplace);
            UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 0), lv_from_point), c_orderQueueAddToEnd);
        }
        else {
            UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("attack", 0), lv_from_point), c_orderQueueReplace);
        }
        UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 1), lv_to_point), c_orderQueueAddToEnd);
    }
    else if ((UnitGetType(lp_unit) == "Zeratul")) {
        if ((DistanceBetweenPoints(UnitGetPosition(lp_unit), RegionGetCenter(lib1_gv_player[UnitGetOwner(lp_unit)].lv_defense_region)) >= DistanceBetweenPoints(UnitGetPosition(lp_unit), RegionGetCenter(RegionFromId(15))))) {
            UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 0), lv_from_point), c_orderQueueReplace);
            UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("DarkTemplarBlink", 0), lv_from_point), c_orderQueueAddToFront);
        }
        else {
            UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("attack", 0), lv_from_point), c_orderQueueReplace);
        }
        UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 1), lv_to_point), c_orderQueueAddToEnd);
    }
    else if ((UnitGetType(lp_unit) == "Adept")) {
        if ((DistanceBetweenPoints(UnitGetPosition(lp_unit), RegionGetCenter(lib1_gv_player[UnitGetOwner(lp_unit)].lv_defense_region)) >= DistanceBetweenPoints(UnitGetPosition(lp_unit), RegionGetCenter(RegionFromId(15))))) {
            UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("AdeptPhaseShift", 0), lv_from_point), c_orderQueueReplace);
            UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("attack", 0), lv_from_point), c_orderQueueAddToEnd);
        }
        else {
            UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("attack", 0), lv_from_point), c_orderQueueReplace);
        }
        UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 1), lv_to_point), c_orderQueueAddToEnd);
    }
    else if (true) {
        if ((UnitGetType(lp_unit) == "Oracle")) {
            UnitIssueOrder(lp_unit, Order(AbilityCommand("OracleWeapon", 1)), c_orderQueueAddToFront);
        }

        if ((DistanceBetweenPoints(UnitGetPosition(lp_unit), RegionGetCenter(lib1_gv_player[UnitGetOwner(lp_unit)].lv_defense_region)) >= DistanceBetweenPoints(UnitGetPosition(lp_unit), RegionGetCenter(RegionFromId(15))))) {
            UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 0), lv_from_point), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("attack", 0), lv_from_point), c_orderQueueReplace);
        }
        UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 1), lv_to_point), c_orderQueueAddToEnd);
    }
    return true;
}

void lib1_gf_IssueLeaveOrders (unit lp_unit, int lp_option) {
    // Variable Declarations
    point lv_point;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((UnitGroupHasUnit(lib1_gv_units_from_card[lib1_gf_GetCardIDByName("Air Support")], lp_unit) == true) && (UnitGetType(lp_unit) == "Hyperion")) {
        UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("BattlecruiserMove", 0), RegionGetCenter(lib1_gv_player[UnitGetOwner(lp_unit)].lv_attack_region)), c_orderQueueReplace);
        UnitIssueOrder(lp_unit, OrderSetAutoCast(AbilityCommand("Yamato", 0), false), c_orderQueueAddToFront);
        UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("Hyperjump", 0), RegionGetCenter(lib1_gv_player[UnitGetOwner(lp_unit)].lv_cleanup_region)), c_orderQueueAddToEnd);
    }
    else if (true) {
        UnitGroupAdd(lib1_gv_leaving_units, lp_unit);
        lv_point = PointWithOffsetPolar(RegionGetCenter(lib1_gv_player[UnitGetOwner(lp_unit)].lv_cleanup_region), RandomFixed(0.0, 1.0), libNtve_gf_RandomAngle());
        UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 0), lv_point), lp_option);
    }
}

void lib1_gf_IssueBuildOrder (unit lp_unit, abilcmd lp_order, point lp_point, fixed lp_radius) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_IncrementBuilderAttemptCount(lp_unit);
    UnitIssueOrder(lp_unit, OrderTargetingPoint(lp_order, lp_point), c_orderQueueReplace);
    if ((UnitGroupCount(UnitGroup(null, c_playerAny, RegionCircle(lp_point, lp_radius), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterStunned - 32)) | (1 << (c_targetFilterDazed - 32))), 0), c_unitCountAlive) >= 1)) {
        UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("InvisibleForceField", 0), lp_point), c_orderQueueAddToFront);
    }

}

void lib1_gf_IssueCliffAmbushOrders (unit lp_unit) {
    // Variable Declarations
    point lv_point;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    UnitSetPosition(lp_unit, RegionRandomPoint(RegionFromId(19)), false);
    lib1_gf_IssueDefaultOrders(lp_unit);
    UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(lib1_gv_player[UnitGetOwner(lp_unit)].lv_enemy_build_region)), c_orderQueueAddToFront);
}

void lib1_gf_IssueBurrowedAmbushOrders (unit lp_unit, region lp_spawn_region) {
    // Variable Declarations
    unit lv_new_unit;
    string lv_behavior;
    unitgroup lv_behavior_group;

    // Automatic Variable Declarations
    unit autoCD38A119_u;
    int autoCD38A119_i;

    // Variable Initialization
    lv_behavior_group = UnitGroupEmpty();

    // Implementation
    if ((UnitGetType(lp_unit) == "Hydralisk")) {
        UnitCreate(1, "HydraliskBurrowed", 0, UnitGetOwner(lp_unit), RegionRandomPoint(lp_spawn_region), libNtve_gf_RandomAngle());
        lv_new_unit = UnitLastCreated();
    }
    else if ((UnitGetType(lp_unit) == "Zergling")) {
        UnitCreate(1, "ZerglingBurrowed", 0, UnitGetOwner(lp_unit), RegionRandomPoint(lp_spawn_region), libNtve_gf_RandomAngle());
        lv_new_unit = UnitLastCreated();
    }
    else if ((UnitGetType(lp_unit) == "Ultralisk")) {
        UnitCreate(1, "UltraliskBurrowed", 0, UnitGetOwner(lp_unit), RegionRandomPoint(lp_spawn_region), libNtve_gf_RandomAngle());
        lv_new_unit = UnitLastCreated();
    }
    autoCD38A119_u = lp_unit;
    autoCD38A119_i = 1;
    for ( ; autoCD38A119_i <= UnitBehaviorCountAll(autoCD38A119_u) ; autoCD38A119_i += BoolToInt(lv_behavior == UnitBehaviorGet(autoCD38A119_u, autoCD38A119_i)) ) {
        lv_behavior = UnitBehaviorGet(autoCD38A119_u, autoCD38A119_i);
        if ((lv_behavior != "WaitingToMoveOut") && (lv_behavior != "CasterWaitingToMoveOut") && (lv_behavior != "Waiting1Turn") && (lv_behavior != "Waiting2Turns")) {
            UnitBehaviorAdd(lv_new_unit, lv_behavior, lv_new_unit, 1);
        }

    }
    lv_behavior_group = lib1_gf_GetUnitAIGroup(lp_unit);
    UnitGroupAdd(lib1_gv_burrow_ambush_units, lv_new_unit);
    UnitGroupAdd(lv_behavior_group, lv_new_unit);
    UnitRemove(lp_unit);
}

void lib1_gf_BuildStructure (int lp_player, int lp_card_id, string lp_builder, abilcmd lp_build_action, string lp_structure_type, bool lp_defensive, fixed lp_structure_value) {
    // Variable Declarations
    point lv_build_point;
    fixed lv_actual_structure_value;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_structure_value >= 0)) {
        lv_actual_structure_value = lp_structure_value;
    }
    else {
        lv_actual_structure_value = (MaxI(lib1_gv_card[lp_card_id].lv_mineral, 0) + MaxI(lib1_gv_card[lp_card_id].lv_gas, 0));
    }
    lv_build_point = lib1_gf_FindStructureBuildTarget(lp_player, lp_structure_type, lp_defensive);
    UnitCreate(1, lp_builder, 0, lp_player, RegionRandomPoint(lib1_gv_player[lp_player].lv_spawn_region), libNtve_gf_RandomAngle());
    UnitSetCustomValue(UnitLastCreated(), 0, lv_actual_structure_value);
    UnitGroupAdd(lib1_gv_units_from_card[lp_card_id], UnitLastCreated());
    UnitBehaviorAdd(UnitLastCreated(), "Builder", UnitLastCreated(), 1);
    UnitGroupAdd(lib1_gv_builder_units, UnitLastCreated());
    lib1_gf_AddBuildertoQueue(UnitLastCreated(), lp_build_action, lp_structure_type, lp_defensive);
    lib1_gf_IssueBuildOrder(UnitLastCreated(), lp_build_action, lv_build_point, UnitTypeGetProperty(lp_structure_type, c_unitPropRadius));
}

trigger auto_lib1_gf_UnburrowSpawn_Trigger = null;
int auto_lib1_gf_UnburrowSpawn_lp_player;
unit auto_lib1_gf_UnburrowSpawn_lp_unit;
region auto_lib1_gf_UnburrowSpawn_lp_region;
bool auto_lib1_gf_UnburrowSpawn_lp_create_new;

void lib1_gf_UnburrowSpawn (int lp_player, unit lp_unit, region lp_region, bool lp_create_new) {
    auto_lib1_gf_UnburrowSpawn_lp_player = lp_player;
    auto_lib1_gf_UnburrowSpawn_lp_unit = lp_unit;
    auto_lib1_gf_UnburrowSpawn_lp_region = lp_region;
    auto_lib1_gf_UnburrowSpawn_lp_create_new = lp_create_new;

    if (auto_lib1_gf_UnburrowSpawn_Trigger == null) {
        auto_lib1_gf_UnburrowSpawn_Trigger = TriggerCreate("auto_lib1_gf_UnburrowSpawn_TriggerFunc");
    }

    TriggerExecute(auto_lib1_gf_UnburrowSpawn_Trigger, false, false);
}

bool auto_lib1_gf_UnburrowSpawn_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_lib1_gf_UnburrowSpawn_lp_player;
    unit lp_unit = auto_lib1_gf_UnburrowSpawn_lp_unit;
    region lp_region = auto_lib1_gf_UnburrowSpawn_lp_region;
    bool lp_create_new = auto_lib1_gf_UnburrowSpawn_lp_create_new;

    // Variable Declarations
    unitgroup lv_behavior_group;
    unit lv_new_unit;
    fixed lv_unburrow_time;
    string lv_behavior;

    // Automatic Variable Declarations
    unit autoEB9678EA_u;
    int autoEB9678EA_i;

    // Variable Initialization
    lv_behavior_group = UnitGroupEmpty();

    // Implementation
    UnitBehaviorRemove(lp_unit, "Waiting1Turn", c_unitBehaviorCountAll);
    UnitBehaviorRemove(lp_unit, "Waiting2Turns", c_unitBehaviorCountAll);
    lv_unburrow_time = 1.5;
    lv_behavior_group = lib1_gf_GetUnitAIGroup(lp_unit);
    lv_new_unit = lp_unit;
    if (((UnitGetType(lp_unit) == "Roach") || (UnitGetType(lp_unit) == "RoachBurrowed"))) {
        if ((lp_create_new == true)) {
            UnitCreate(1, "RoachBurrowed", 0, lp_player, RegionRandomPoint(lp_region), libNtve_gf_RandomAngle());
            lv_new_unit = UnitLastCreated();
            UnitGroupAdd(lv_behavior_group, lv_new_unit);
        }

        UnitIssueOrder(lv_new_unit, Order(AbilityCommand("BurrowRoachUp", 0)), c_orderQueueReplace);
    }
    else if (((UnitGetType(lp_unit) == "RoachVile") || (UnitGetType(lp_unit) == "RoachVileBurrowed"))) {
        if ((lp_create_new == true)) {
            UnitCreate(1, "RoachVileBurrowed", 0, lp_player, RegionRandomPoint(lp_region), libNtve_gf_RandomAngle());
            lv_new_unit = UnitLastCreated();
            UnitGroupAdd(lv_behavior_group, lv_new_unit);
        }

        UnitIssueOrder(lv_new_unit, Order(AbilityCommand("UnburrowRoachVile", 0)), c_orderQueueReplace);
    }
    else if (((UnitGetType(lp_unit) == "Hydralisk") || (UnitGetType(lp_unit) == "HydraliskBurrowed"))) {
        if ((lp_create_new == true)) {
            UnitCreate(1, "HydraliskBurrowed", 0, lp_player, RegionRandomPoint(lp_region), libNtve_gf_RandomAngle());
            lv_new_unit = UnitLastCreated();
            UnitGroupAdd(lv_behavior_group, lv_new_unit);
        }

        UnitIssueOrder(lv_new_unit, Order(AbilityCommand("BurrowHydraliskUp", 0)), c_orderQueueReplace);
    }
    else if (((UnitGetType(lp_unit) == "HydraliskHunterKiller") || (UnitGetType(lp_unit) == "HydraliskHunterKillerBurrowed"))) {
        if ((lp_create_new == true)) {
            UnitCreate(1, "HydraliskHunterKillerBurrowed", 0, lp_player, RegionRandomPoint(lp_region), libNtve_gf_RandomAngle());
            lv_new_unit = UnitLastCreated();
            UnitGroupAdd(lv_behavior_group, lv_new_unit);
        }

        UnitIssueOrder(lv_new_unit, Order(AbilityCommand("BurrowHydraliskHunterKillerUp", 0)), c_orderQueueReplace);
    }
    else if (((UnitGetType(lp_unit) == "Zergling") || (UnitGetType(lp_unit) == "ZerglingBurrowed"))) {
        lv_unburrow_time = 1.6;
        if ((lp_create_new == true)) {
            UnitCreate(1, "ZerglingBurrowed", 0, lp_player, RegionRandomPoint(lp_region), libNtve_gf_RandomAngle());
            lv_new_unit = UnitLastCreated();
            UnitGroupAdd(lv_behavior_group, lv_new_unit);
        }

        UnitIssueOrder(lv_new_unit, Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
    }
    else if (((UnitGetType(lp_unit) == "ZerglingFast") || (UnitGetType(lp_unit) == "ZerglingFastBurrowed"))) {
        lv_unburrow_time = 1.6;
        if ((lp_create_new == true)) {
            UnitCreate(1, "ZerglingFastBurrowed", 0, lp_player, RegionRandomPoint(lp_region), libNtve_gf_RandomAngle());
            lv_new_unit = UnitLastCreated();
            UnitGroupAdd(lv_behavior_group, lv_new_unit);
        }

        UnitIssueOrder(lv_new_unit, Order(AbilityCommand("BurrowFastZerglingUp", 0)), c_orderQueueReplace);
    }
    else if (((UnitGetType(lp_unit) == "ZerglingLeaping") || (UnitGetType(lp_unit) == "ZerglingLeapingBurrowed"))) {
        lv_unburrow_time = 1.6;
        if ((lp_create_new == true)) {
            UnitCreate(1, "ZerglingLeapingBurrowed", 0, lp_player, RegionRandomPoint(lp_region), libNtve_gf_RandomAngle());
            lv_new_unit = UnitLastCreated();
            UnitGroupAdd(lv_behavior_group, lv_new_unit);
        }

        UnitIssueOrder(lv_new_unit, Order(AbilityCommand("BurrowLeapingZerglingUp", 0)), c_orderQueueReplace);
    }
    else if (((UnitGetType(lp_unit) == "ZerglingHero") || (UnitGetType(lp_unit) == "ZerglingHeroBurrowed"))) {
        lv_unburrow_time = 1.6;
        if ((lp_create_new == true)) {
            UnitCreate(1, "ZerglingHeroBurrowed", 0, lp_player, RegionRandomPoint(lp_region), libNtve_gf_RandomAngle());
            lv_new_unit = UnitLastCreated();
            UnitGroupAdd(lv_behavior_group, lv_new_unit);
        }

        UnitIssueOrder(lv_new_unit, Order(AbilityCommand("BurrowZerglingHeroicUp", 0)), c_orderQueueReplace);
    }
    else if (((UnitGetType(lp_unit) == "ZerglingSwarmer") || (UnitGetType(lp_unit) == "ZerglingSwarmerBurrowed"))) {
        lv_unburrow_time = 1.6;
        if ((lp_create_new == true)) {
            UnitCreate(1, "ZerglingSwarmerBurrowed", 0, lp_player, RegionRandomPoint(lp_region), libNtve_gf_RandomAngle());
            lv_new_unit = UnitLastCreated();
            UnitGroupAdd(lv_behavior_group, lv_new_unit);
        }

        UnitIssueOrder(lv_new_unit, Order(AbilityCommand("BurrowZerglingSwarmerUp", 0)), c_orderQueueReplace);
    }
    else if (((UnitGetType(lp_unit) == "Baneling") || (UnitGetType(lp_unit) == "BanelingBurrowed"))) {
        if ((lp_create_new == true)) {
            UnitCreate(1, "BanelingBurrowed", 0, lp_player, RegionRandomPoint(lp_region), libNtve_gf_RandomAngle());
            lv_new_unit = UnitLastCreated();
            UnitGroupAdd(lv_behavior_group, lv_new_unit);
        }

        UnitIssueOrder(lv_new_unit, Order(AbilityCommand("BurrowBanelingUp", 0)), c_orderQueueReplace);
    }
    else if (((UnitGetType(lp_unit) == "BanelingFast") || (UnitGetType(lp_unit) == "BanelingFastBurrowed"))) {
        if ((lp_create_new == true)) {
            UnitCreate(1, "BanelingFastBurrowed", 0, lp_player, RegionRandomPoint(lp_region), libNtve_gf_RandomAngle());
            lv_new_unit = UnitLastCreated();
            UnitGroupAdd(lv_behavior_group, lv_new_unit);
        }

        UnitIssueOrder(lv_new_unit, Order(AbilityCommand("BurrowFastBanelingUp", 0)), c_orderQueueReplace);
    }
    else if (((UnitGetType(lp_unit) == "BanelingHeroic") || (UnitGetType(lp_unit) == "BanelingHeroicBurrowed"))) {
        if ((lp_create_new == true)) {
            UnitCreate(1, "BanelingHeroicBurrowed", 0, lp_player, RegionRandomPoint(lp_region), libNtve_gf_RandomAngle());
            lv_new_unit = UnitLastCreated();
            UnitGroupAdd(lv_behavior_group, lv_new_unit);
        }

        UnitIssueOrder(lv_new_unit, Order(AbilityCommand("BurrowBanelingHeroicUp", 0)), c_orderQueueReplace);
    }
    else if (((UnitGetType(lp_unit) == "BanelingStructureKiller") || (UnitGetType(lp_unit) == "BanelingStructureKillerBurrowed"))) {
        if ((lp_create_new == true)) {
            UnitCreate(1, "BanelingStructureKillerBurrowed", 0, lp_player, RegionRandomPoint(lp_region), libNtve_gf_RandomAngle());
            lv_new_unit = UnitLastCreated();
            UnitGroupAdd(lv_behavior_group, lv_new_unit);
        }

        UnitIssueOrder(lv_new_unit, Order(AbilityCommand("BurrowBanelingStructureKillerUp", 0)), c_orderQueueReplace);
    }
    else if (((UnitGetType(lp_unit) == "Ultralisk") || (UnitGetType(lp_unit) == "UltraliskBurrowed"))) {
        lv_unburrow_time = 2.6;
        if ((lp_create_new == true)) {
            UnitCreate(1, "UltraliskBurrowed", 0, lp_player, RegionRandomPoint(lp_region), libNtve_gf_RandomAngle());
            lv_new_unit = UnitLastCreated();
            UnitGroupAdd(lv_behavior_group, lv_new_unit);
        }

        UnitIssueOrder(lv_new_unit, Order(AbilityCommand("BurrowUltraliskUp", 0)), c_orderQueueReplace);
    }
    else if (((UnitGetType(lp_unit) == "UltraliskTorrasque") || (UnitGetType(lp_unit) == "UltraliskTorrasqueBurrowed"))) {
        lv_unburrow_time = 2.6;
        if ((lp_create_new == true)) {
            UnitCreate(1, "UltraliskTorrasqueBurrowed", 0, lp_player, RegionRandomPoint(lp_region), libNtve_gf_RandomAngle());
            lv_new_unit = UnitLastCreated();
            UnitGroupAdd(lv_behavior_group, lv_new_unit);
        }

        UnitIssueOrder(lv_new_unit, Order(AbilityCommand("BurrowUltraliskTorrasqueUp", 0)), c_orderQueueReplace);
    }
    autoEB9678EA_u = lp_unit;
    autoEB9678EA_i = 1;
    for ( ; autoEB9678EA_i <= UnitBehaviorCountAll(autoEB9678EA_u) ; autoEB9678EA_i += BoolToInt(lv_behavior == UnitBehaviorGet(autoEB9678EA_u, autoEB9678EA_i)) ) {
        lv_behavior = UnitBehaviorGet(autoEB9678EA_u, autoEB9678EA_i);
        if ((lv_behavior != "WaitingToMoveOut") && (lv_behavior != "CasterWaitingToMoveOut") && (lv_behavior != "Waiting1Turn") && (lv_behavior != "Waiting2Turns")) {
            UnitBehaviorAdd(lv_new_unit, lv_behavior, lv_new_unit, 1);
        }

    }
    if ((lp_create_new == true)) {
        UnitRemove(lp_unit);
    }

    Wait(lv_unburrow_time, c_timeGame);
    if ((lv_new_unit != null)) {
        lib1_gf_IssueDefaultOrders(lv_new_unit);
    }

    return true;
}

trigger auto_lib1_gf_IssueMutateOrders_Trigger = null;
unit auto_lib1_gf_IssueMutateOrders_lp_unit;

void lib1_gf_IssueMutateOrders (unit lp_unit) {
    auto_lib1_gf_IssueMutateOrders_lp_unit = lp_unit;

    if (auto_lib1_gf_IssueMutateOrders_Trigger == null) {
        auto_lib1_gf_IssueMutateOrders_Trigger = TriggerCreate("auto_lib1_gf_IssueMutateOrders_TriggerFunc");
    }

    TriggerExecute(auto_lib1_gf_IssueMutateOrders_Trigger, false, false);
}

bool auto_lib1_gf_IssueMutateOrders_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_lib1_gf_IssueMutateOrders_lp_unit;

    // Variable Declarations
    bool lv_unburrow_flag;
    int lv_count;
    unit lv_target;

    // Automatic Variable Declarations
    const int autoEC1E1894_ae = 3;
    const int autoEC1E1894_ai = 1;

    // Variable Initialization

    // Implementation
    UnitGroupAdd(lib1_gv_mutated_units, lp_unit);
    lib1_gf_RemoveAllStunsFromUnit(lp_unit);
    UnitBehaviorRemove(lp_unit, "Mutable", c_unitBehaviorCountAll);
    lib1_gf_RemoveWaitingToMoveOutBuffs(lp_unit);
    if (((UnitHasBehavior2(lp_unit, "WaitingToMoveOut") == true) || (UnitHasBehavior2(lp_unit, "CasterWaitingToMoveOut") == true))) {
        UnitBehaviorRemove(lp_unit, "CasterWaitingToMoveOut", c_unitBehaviorCountAll);
        UnitBehaviorRemove(lp_unit, "WaitingToMoveOut", c_unitBehaviorCountAll);
        UnitGroupRemove(lib1_gv_one_turn_wait_units, lp_unit);
        UnitGroupRemove(lib1_gv_two_turn_wait_units, lp_unit);
        UnitGroupRemove(lib1_gv_ready_units, lp_unit);
    }

    if ((UnitGetType(lp_unit) == "ZerglingBurrowed")) {
        UnitIssueOrder(lp_unit, Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        lv_unburrow_flag = true;
    }
    else if ((UnitGetType(lp_unit) == "ZerglingFastBurrowed")) {
        UnitIssueOrder(lp_unit, Order(AbilityCommand("BurrowFastZerglingUp", 0)), c_orderQueueReplace);
        lv_unburrow_flag = true;
    }
    else if ((UnitGetType(lp_unit) == "ZerglingLeapingBurrowed")) {
        UnitIssueOrder(lp_unit, Order(AbilityCommand("BurrowLeapingZerglingUp", 0)), c_orderQueueReplace);
        lv_unburrow_flag = true;
    }
    else if ((UnitGetType(lp_unit) == "ZerglingHeroBurrowed")) {
        UnitIssueOrder(lp_unit, Order(AbilityCommand("BurrowZerglingHeroicUp", 0)), c_orderQueueReplace);
        lv_unburrow_flag = true;
    }
    else if ((UnitGetType(lp_unit) == "ZerglingSwarmer")) {
        UnitIssueOrder(lp_unit, Order(AbilityCommand("BurrowZerglingSwarmerUp", 0)), c_orderQueueReplace);
        lv_unburrow_flag = true;
    }
    else if ((UnitGetType(lp_unit) == "RoachBurrowed")) {
        UnitIssueOrder(lp_unit, Order(AbilityCommand("BurrowRoachUp", 0)), c_orderQueueReplace);
        lv_unburrow_flag = true;
    }
    else if ((UnitGetType(lp_unit) == "RoachVileBurrowed")) {
        UnitIssueOrder(lp_unit, Order(AbilityCommand("UnburrowRoachVile", 0)), c_orderQueueReplace);
        lv_unburrow_flag = true;
    }
    else if ((UnitGetType(lp_unit) == "HydraliskBurrowed")) {
        UnitIssueOrder(lp_unit, Order(AbilityCommand("BurrowHydraliskUp", 0)), c_orderQueueReplace);
        lv_unburrow_flag = true;
    }
    else if ((UnitGetType(lp_unit) == "HydraliskHunterKillerBurrowed")) {
        UnitIssueOrder(lp_unit, Order(AbilityCommand("BurrowHydraliskHunterKillerUp", 0)), c_orderQueueReplace);
        lv_unburrow_flag = true;
    }
    Wait(0.1, c_timeGame);
    if ((lv_unburrow_flag == true)) {
        Wait(1.6, c_timeGame);
    }

    if ((UnitGetType(lp_unit) == "Zergling")) {
        UnitIssueOrder(lp_unit, Order(AbilityCommand("MorphZerglingToBaneling", 0)), c_orderQueueReplace);
    }
    else if ((UnitGetType(lp_unit) == "ZerglingFast")) {
        UnitIssueOrder(lp_unit, Order(AbilityCommand("MorphZerglingFastBaneling", 0)), c_orderQueueReplace);
    }
    else if ((UnitGetType(lp_unit) == "ZerglingLeaping")) {
        UnitIssueOrder(lp_unit, Order(AbilityCommand("MorphZerglingLeapingBaneling", 0)), c_orderQueueReplace);
    }
    else if ((UnitGetType(lp_unit) == "ZerglingHero")) {
        UnitIssueOrder(lp_unit, Order(AbilityCommand("MorphZerglingHeroicToBaneling", 0)), c_orderQueueReplace);
    }
    else if ((UnitGetType(lp_unit) == "ZerglingSwarmer")) {
        UnitIssueOrder(lp_unit, Order(AbilityCommand("MorphZerglingSwarmerToBaneling", 0)), c_orderQueueReplace);
    }
    else if ((UnitGetType(lp_unit) == "Roach")) {
        UnitIssueOrder(lp_unit, Order(AbilityCommand("MorphToRavager", 0)), c_orderQueueReplace);
    }
    else if ((UnitGetType(lp_unit) == "RoachVile")) {
        UnitIssueOrder(lp_unit, Order(AbilityCommand("VileMorphToRavager", 0)), c_orderQueueReplace);
    }
    else if ((UnitGetType(lp_unit) == "Hydralisk")) {
        UnitIssueOrder(lp_unit, Order(AbilityCommand("MorphToLurker", 0)), c_orderQueueReplace);
    }
    else if ((UnitGetType(lp_unit) == "HydraliskHunterKiller")) {
        UnitIssueOrder(lp_unit, Order(AbilityCommand("MorphToLurkerHunterKiller", 0)), c_orderQueueReplace);
    }
    else if ((UnitGetType(lp_unit) == "Corruptor")) {
        UnitIssueOrder(lp_unit, Order(AbilityCommand("MorphToBroodLord", 0)), c_orderQueueReplace);
    }
    else if ((UnitGetType(lp_unit) == "Overlord")) {
        UnitIssueOrder(lp_unit, Order(AbilityCommand("MorphToOverseer", 0)), c_orderQueueReplace);
    }
    else if ((UnitGetType(lp_unit) == "Mutalisk")) {
        if ((RandomInt(1, 2) == 1)) {
            UnitIssueOrder(lp_unit, Order(AbilityCommand("MorphToDevourerMP", 0)), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(lp_unit, Order(AbilityCommand("MorphToGuardianMP", 0)), c_orderQueueReplace);
        }
    }
    else if ((UnitGetType(lp_unit) == "MutaliskKukulza")) {
        if ((RandomInt(1, 2) == 1)) {
            UnitIssueOrder(lp_unit, Order(AbilityCommand("MorphToDevourerMP", 0)), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(lp_unit, Order(AbilityCommand("MorphToGuardianMP", 0)), c_orderQueueReplace);
        }
    }
    Wait(5.5, c_timeGame);
    lib1_gf_IssueDefaultOrders(lp_unit);
    if ((UnitGroupHasUnit(lib1_gv_units_from_card[lib1_gf_GetCardIDByName("Mutable Overlord")], lp_unit) == true)) {
        lv_count = 1;
        for ( ; ( (autoEC1E1894_ai >= 0 && lv_count <= autoEC1E1894_ae) || (autoEC1E1894_ai < 0 && lv_count >= autoEC1E1894_ae) ) ; lv_count += autoEC1E1894_ai ) {
            lv_target = lib1_gf_MostExpensiveStructureforStun(UnitGetOwner(lp_unit));
            if ((lv_target != null)) {
                UnitIssueOrder(lv_target, Order(AbilityCommand("que5", 0)), c_orderQueueReplace);
                UnitIssueOrder(lv_target, Order(AbilityCommand("que5", 0)), c_orderQueueReplace);
                UnitIssueOrder(lv_target, Order(AbilityCommand("que5Addon", 0)), c_orderQueueReplace);
                UnitIssueOrder(lv_target, Order(AbilityCommand("que5Addon", 0)), c_orderQueueReplace);
                UnitBehaviorAdd(lv_target, "Contaminate1stTurn", lv_target, 1);
                if ((UnitGetPropertyFixed(lp_unit, c_unitPropEnergy, c_unitPropCurrent) < 50.0)) {
                    UnitSetPropertyFixed(lp_unit, c_unitPropEnergy, 50.0);
                }

                UnitIssueOrder(lp_unit, OrderTargetingUnit(AbilityCommand("Contaminate", 0), lv_target), c_orderQueueAddToFront);
                Wait(0.2, c_timeGame);
            }

        }
    }

    Wait(1.0, c_timeGame);
    lib1_gf_IssueDefaultOrders(lp_unit);
    return true;
}

void lib1_gf_IssuePickupOrder (unit lp_transport, unitfilter lp_target_filter, bool lp_include_heroic) {
    // Variable Declarations
    unit lv_pickup_target;
    unitgroup lv_pickup_targets;

    // Automatic Variable Declarations
    unitgroup auto3708E655_g;
    int auto3708E655_u;
    unitgroup autoE26C9A7C_g;
    int autoE26C9A7C_u;

    // Variable Initialization
    lv_pickup_targets = UnitGroupEmpty();

    // Implementation
    lv_pickup_targets = UnitGroup(null, UnitGetOwner(lp_transport), RegionEntireMap(), lp_target_filter, 0);
    if ((lp_include_heroic == false)) {
        auto3708E655_g = UnitGroup(null, UnitGetOwner(lp_transport), RegionEntireMap(), lp_target_filter, 0);
        auto3708E655_u = UnitGroupCount(auto3708E655_g, c_unitCountAll);
        for (;; auto3708E655_u -= 1) {
            lv_pickup_target = UnitGroupUnitFromEnd(auto3708E655_g, auto3708E655_u);
            if (lv_pickup_target == null) { break; }
            if ((UnitHasBehavior2(lv_pickup_target, "Heroic") == true)) {
                UnitGroupRemove(lv_pickup_targets, lv_pickup_target);
            }

        }
    }

    autoE26C9A7C_g = lv_pickup_targets;
    autoE26C9A7C_u = UnitGroupCount(autoE26C9A7C_g, c_unitCountAll);
    for (;; autoE26C9A7C_u -= 1) {
        lv_pickup_target = UnitGroupUnitFromEnd(autoE26C9A7C_g, autoE26C9A7C_u);
        if (lv_pickup_target == null) { break; }
        UnitIssueOrder(lp_transport, OrderTargetingUnit(AbilityCommand("MedivacTransport", 0), lv_pickup_target), c_orderQueueAddToFront);
    }
}

trigger auto_lib1_gf_CleanupUnit_Trigger = null;
unit auto_lib1_gf_CleanupUnit_lp_unit;

void lib1_gf_CleanupUnit (unit lp_unit) {
    auto_lib1_gf_CleanupUnit_lp_unit = lp_unit;

    if (auto_lib1_gf_CleanupUnit_Trigger == null) {
        auto_lib1_gf_CleanupUnit_Trigger = TriggerCreate("auto_lib1_gf_CleanupUnit_TriggerFunc");
    }

    TriggerExecute(auto_lib1_gf_CleanupUnit_Trigger, false, false);
}

bool auto_lib1_gf_CleanupUnit_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_lib1_gf_CleanupUnit_lp_unit;

    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SendActorMessageToUnit(lp_unit, "SetTintColor {0,50,200 10.000000} 1.000000");
    libNtve_gf_SendActorMessageToUnit(lp_unit, "SetOpacity 0.000000 1.000000");
    UnitBehaviorAdd(lp_unit, "SuppressCollision", lp_unit, 1);
    UnitBehaviorAdd(lp_unit, "PermanentlyInvulnerable", lp_unit, 1);
    Wait(1.0, c_timeGame);
    UnitRemove(lp_unit);
    return true;
}

bool lib1_gf_UnitTypeIsProtoss (string lp_unit_type) {
    // Automatic Variable Declarations
    // Implementation
    if ((CatalogFieldValueGet(c_gameCatalogUnit, lp_unit_type, "Race", c_playerAny) == "Prot")) {
        return true;
    }

    return false;
}

fixed lib1_gf_AdjustedToughnessOfUnit (unit lp_unit) {
    // Variable Declarations
    fixed lv_toughness;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_toughness = (UnitGetPropertyFixed(lp_unit, c_unitPropLife, c_unitPropCurrent) + UnitGetPropertyFixed(lp_unit, c_unitPropShields, c_unitPropCurrent));
    if ((UnitGetType(lp_unit) == "Supplicant")) {
        lv_toughness = (lv_toughness - 500.0);
    }

    return lv_toughness;
}

unitgroup lib1_gf_VisibleUnitsFromUnitGroup (int lp_player, unitgroup lp_unit_group) {
    // Variable Declarations
    unit lv_unit;
    unitgroup lv_return_unit_group;

    // Automatic Variable Declarations
    unitgroup autoBE8012BB_g;
    int autoBE8012BB_u;

    // Variable Initialization
    lv_return_unit_group = UnitGroupEmpty();

    // Implementation
    autoBE8012BB_g = lp_unit_group;
    autoBE8012BB_u = UnitGroupCount(autoBE8012BB_g, c_unitCountAll);
    for (;; autoBE8012BB_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoBE8012BB_g, autoBE8012BB_u);
        if (lv_unit == null) { break; }
        if ((UnitHasBehavior2(lv_unit, "Builder") == false) && (UnitHasBehavior2(lv_unit, "Caster") == false) && (UnitHasBehavior2(lv_unit, "AttackingCaster") == false) && (UnitFilterMatch(lv_unit, lp_player, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterBenign - 32)) | (1 << (c_targetFilterMapBoss - 32)))) == true) && (UnitGetType(lv_unit) != "PhysicsLab") && (UnitGetType(lv_unit) != "Reactor") && (UnitGetType(lv_unit) != "TechLab") && (UnitGetType(lv_unit) != "MachineShop") && (UnitGetType(lv_unit) != "Trophy") && (libNtve_gf_UnitIsVisibleToPlayer(lv_unit, lp_player) == true) && (lib1_gf_UnitIsPet(lv_unit) == false)) {
            UnitGroupAdd(lv_return_unit_group, lv_unit);
        }

    }
    return lv_return_unit_group;
}

unitgroup lib1_gf_UntargetedUnitsfromUnitGroup (int lp_player, unitgroup lp_unit_group, unitgroup lp_target_group) {
    // Variable Declarations
    unit lv_unit;
    unitgroup lv_return_unit_group;

    // Automatic Variable Declarations
    unitgroup autoAACD0280_g;
    int autoAACD0280_u;

    // Variable Initialization
    lv_return_unit_group = UnitGroupEmpty();

    // Implementation
    autoAACD0280_g = lp_unit_group;
    autoAACD0280_u = UnitGroupCount(autoAACD0280_g, c_unitCountAll);
    for (;; autoAACD0280_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoAACD0280_g, autoAACD0280_u);
        if (lv_unit == null) { break; }
        if ((UnitGroupHasUnit(lp_target_group, lv_unit) == false)) {
            UnitGroupAdd(lv_return_unit_group, lv_unit);
        }

    }
    return lv_return_unit_group;
}

void lib1_gf_ClearRemovalHistory () {
    // Automatic Variable Declarations
    // Implementation
    UnitGroupClear(lib1_gv_hard_removal_targeted_units);
    UnitGroupClear(lib1_gv_splash_targeted_units);
    UnitGroupClear(lib1_gv_stun_targeted_units);
    UnitGroupClear(lib1_gv_buff_targeted_units);
}

unit lib1_gf_RandomTargetForHardRemoval (int lp_player, unitfilter lp_filter) {
    // Variable Declarations
    unitgroup lv_possible_targets;
    unitgroup lv_filtered_targets;
    unit lv_possible_target;
    unit lv_final_target;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_possible_targets = UnitGroupEmpty();
    lv_filtered_targets = UnitGroupEmpty();

    // Implementation
    lv_possible_targets = lib1_gf_VisibleUnitsFromUnitGroup(lp_player, UnitGroupAlliance(lp_player, c_unitAllianceEnemy, RegionEntireMap(), lp_filter, 0));
    lv_filtered_targets = lib1_gf_UntargetedUnitsfromUnitGroup(lp_player, lv_possible_targets, lib1_gv_hard_removal_targeted_units);
    if ((UnitGroupCount(lv_filtered_targets, c_unitCountAlive) >= 1)) {
        lv_final_target = UnitGroupRandomUnit(lv_filtered_targets, c_unitCountAlive);
    }
    else {
        lv_final_target = UnitGroupRandomUnit(lv_possible_targets, c_unitCountAlive);
    }
    UnitGroupAdd(lib1_gv_hard_removal_targeted_units, lv_final_target);
    return lv_final_target;
}

unit lib1_gf_ToughestEnemyTargetForHardRemoval (int lp_player, unitfilter lp_filter) {
    // Variable Declarations
    unitgroup lv_possible_targets;
    unitgroup lv_filtered_targets;
    unitgroup lv_chosen_group;
    unit lv_possible_target;
    unit lv_final_target;

    // Automatic Variable Declarations
    unitgroup autoF596A94C_g;
    int autoF596A94C_u;

    // Variable Initialization
    lv_possible_targets = UnitGroupEmpty();
    lv_filtered_targets = UnitGroupEmpty();
    lv_chosen_group = UnitGroupEmpty();

    // Implementation
    lv_possible_targets = lib1_gf_VisibleUnitsFromUnitGroup(lp_player, UnitGroupAlliance(lp_player, c_unitAllianceEnemy, RegionEntireMap(), lp_filter, 0));
    lv_filtered_targets = lib1_gf_UntargetedUnitsfromUnitGroup(lp_player, lv_possible_targets, lib1_gv_hard_removal_targeted_units);
    if ((UnitGroupCount(lv_filtered_targets, c_unitCountAlive) >= 1)) {
        lv_chosen_group = lv_filtered_targets;
    }
    else {
        lv_chosen_group = lv_possible_targets;
    }
    lv_final_target = UnitGroupRandomUnit(lv_chosen_group, c_unitCountAlive);
    autoF596A94C_g = lv_chosen_group;
    autoF596A94C_u = UnitGroupCount(autoF596A94C_g, c_unitCountAll);
    for (;; autoF596A94C_u -= 1) {
        lv_possible_target = UnitGroupUnitFromEnd(autoF596A94C_g, autoF596A94C_u);
        if (lv_possible_target == null) { break; }
        if ((lib1_gf_AdjustedToughnessOfUnit(lv_possible_target) > lib1_gf_AdjustedToughnessOfUnit(lv_final_target))) {
            lv_final_target = lv_possible_target;
        }

    }
    UnitGroupAdd(lib1_gv_hard_removal_targeted_units, lv_final_target);
    return lv_final_target;
}

unit lib1_gf_ToughestEnemyTargetForHardRemovalmaxvitalityrestriction (int lp_player, unitfilter lp_filter, int lp_max_vitality) {
    // Variable Declarations
    unitgroup lv_possible_targets;
    unitgroup lv_filtered_targets;
    unitgroup lv_chosen_group;
    unit lv_possible_target;
    unit lv_final_target;

    // Automatic Variable Declarations
    unitgroup auto382F4C58_g;
    int auto382F4C58_u;
    unitgroup autoE8234315_g;
    int autoE8234315_u;

    // Variable Initialization
    lv_possible_targets = UnitGroupEmpty();
    lv_filtered_targets = UnitGroupEmpty();
    lv_chosen_group = UnitGroupEmpty();

    // Implementation
    lv_possible_targets = lib1_gf_VisibleUnitsFromUnitGroup(lp_player, UnitGroupAlliance(lp_player, c_unitAllianceEnemy, RegionEntireMap(), lp_filter, 0));
    auto382F4C58_g = lv_possible_targets;
    auto382F4C58_u = UnitGroupCount(auto382F4C58_g, c_unitCountAll);
    for (;; auto382F4C58_u -= 1) {
        lv_possible_target = UnitGroupUnitFromEnd(auto382F4C58_g, auto382F4C58_u);
        if (lv_possible_target == null) { break; }
        if ((UnitGetPropertyFixed(lv_possible_target, c_unitPropVitalityMax, c_unitPropCurrent) > lp_max_vitality)) {
            UnitGroupRemove(lv_possible_targets, lv_possible_target);
        }

    }
    lv_filtered_targets = lib1_gf_UntargetedUnitsfromUnitGroup(lp_player, lv_possible_targets, lib1_gv_hard_removal_targeted_units);
    if ((UnitGroupCount(lv_filtered_targets, c_unitCountAlive) >= 1)) {
        lv_chosen_group = lv_filtered_targets;
    }
    else {
        lv_chosen_group = lv_possible_targets;
    }
    lv_final_target = UnitGroupRandomUnit(lv_chosen_group, c_unitCountAlive);
    autoE8234315_g = lv_chosen_group;
    autoE8234315_u = UnitGroupCount(autoE8234315_g, c_unitCountAll);
    for (;; autoE8234315_u -= 1) {
        lv_possible_target = UnitGroupUnitFromEnd(autoE8234315_g, autoE8234315_u);
        if (lv_possible_target == null) { break; }
        if ((lib1_gf_AdjustedToughnessOfUnit(lv_possible_target) > lib1_gf_AdjustedToughnessOfUnit(lv_final_target))) {
            lv_final_target = lv_possible_target;
        }

    }
    UnitGroupAdd(lib1_gv_hard_removal_targeted_units, lv_final_target);
    return lv_final_target;
}

unit lib1_gf_ToughestEnemyTargetForHardRemovalOrFilters (int lp_player, unitfilter lp_filter_1, unitfilter lp_filter_2) {
    // Variable Declarations
    unitgroup lv_possible_targets;
    unitgroup lv_filtered_targets;
    unitgroup lv_chosen_group;
    unit lv_possible_target;
    unit lv_final_target;

    // Automatic Variable Declarations
    unitgroup auto8C5A780E_g;
    int auto8C5A780E_u;

    // Variable Initialization
    lv_possible_targets = UnitGroupEmpty();
    lv_filtered_targets = UnitGroupEmpty();
    lv_chosen_group = UnitGroupEmpty();

    // Implementation
    lv_possible_targets = lib1_gf_VisibleUnitsFromUnitGroup(lp_player, UnitGroupAlliance(lp_player, c_unitAllianceEnemy, RegionEntireMap(), lp_filter_1, 0));
    UnitGroupAddUnitGroup(lv_possible_targets, lib1_gf_VisibleUnitsFromUnitGroup(lp_player, UnitGroupAlliance(lp_player, c_unitAllianceEnemy, RegionEntireMap(), lp_filter_2, 0)));
    lv_filtered_targets = lib1_gf_UntargetedUnitsfromUnitGroup(lp_player, lv_possible_targets, lib1_gv_hard_removal_targeted_units);
    if ((UnitGroupCount(lv_filtered_targets, c_unitCountAlive) >= 1)) {
        lv_chosen_group = lv_filtered_targets;
    }
    else {
        lv_chosen_group = lv_possible_targets;
    }
    lv_final_target = UnitGroupRandomUnit(lv_chosen_group, c_unitCountAlive);
    auto8C5A780E_g = lv_chosen_group;
    auto8C5A780E_u = UnitGroupCount(auto8C5A780E_g, c_unitCountAll);
    for (;; auto8C5A780E_u -= 1) {
        lv_possible_target = UnitGroupUnitFromEnd(auto8C5A780E_g, auto8C5A780E_u);
        if (lv_possible_target == null) { break; }
        if ((lib1_gf_AdjustedToughnessOfUnit(lv_possible_target) > lib1_gf_AdjustedToughnessOfUnit(lv_final_target))) {
            lv_final_target = lv_possible_target;
        }

    }
    UnitGroupAdd(lib1_gv_hard_removal_targeted_units, lv_final_target);
    return lv_final_target;
}

unit lib1_gf_ToughestTargetForBuff (int lp_player, unitfilter lp_filter, bool lp_no_stack) {
    // Variable Declarations
    unitgroup lv_possible_targets;
    unitgroup lv_filtered_targets;
    unitgroup lv_chosen_group;
    unit lv_possible_target;
    unit lv_final_target;

    // Automatic Variable Declarations
    unitgroup auto9372425D_g;
    int auto9372425D_u;

    // Variable Initialization
    lv_possible_targets = UnitGroupEmpty();
    lv_filtered_targets = UnitGroupEmpty();
    lv_chosen_group = UnitGroupEmpty();

    // Implementation
    lv_possible_targets = lib1_gf_VisibleUnitsFromUnitGroup(lp_player, UnitGroupAlliance(lp_player, c_unitAllianceAny, RegionEntireMap(), lp_filter, 0));
    lv_filtered_targets = lib1_gf_UntargetedUnitsfromUnitGroup(lp_player, lv_possible_targets, lib1_gv_hard_removal_targeted_units);
    if ((lp_no_stack == true)) {
        lv_filtered_targets = lib1_gf_UntargetedUnitsfromUnitGroup(lp_player, lv_possible_targets, lib1_gv_buff_targeted_units);
    }

    if ((UnitGroupCount(lv_filtered_targets, c_unitCountAlive) >= 1)) {
        lv_chosen_group = lv_filtered_targets;
    }
    else {
        lv_chosen_group = lv_possible_targets;
    }
    lv_final_target = UnitGroupRandomUnit(lv_chosen_group, c_unitCountAlive);
    auto9372425D_g = lv_chosen_group;
    auto9372425D_u = UnitGroupCount(auto9372425D_g, c_unitCountAll);
    for (;; auto9372425D_u -= 1) {
        lv_possible_target = UnitGroupUnitFromEnd(auto9372425D_g, auto9372425D_u);
        if (lv_possible_target == null) { break; }
        if ((lib1_gf_AdjustedToughnessOfUnit(lv_possible_target) > lib1_gf_AdjustedToughnessOfUnit(lv_final_target))) {
            lv_final_target = lv_possible_target;
        }

    }
    if ((lp_no_stack == true)) {
        UnitGroupAdd(lib1_gv_buff_targeted_units, lv_final_target);
    }

    return lv_final_target;
}

unit lib1_gf_WeakestEnemyTargetForHardRemoval (int lp_player, unitfilter lp_filter) {
    // Variable Declarations
    unitgroup lv_possible_targets;
    unitgroup lv_filtered_targets;
    unitgroup lv_chosen_group;
    unit lv_possible_target;
    unit lv_final_target;

    // Automatic Variable Declarations
    unitgroup auto475964A4_g;
    int auto475964A4_u;

    // Variable Initialization
    lv_possible_targets = UnitGroupEmpty();
    lv_filtered_targets = UnitGroupEmpty();
    lv_chosen_group = UnitGroupEmpty();

    // Implementation
    lv_possible_targets = lib1_gf_VisibleUnitsFromUnitGroup(lp_player, UnitGroupAlliance(lp_player, c_unitAllianceEnemy, RegionEntireMap(), lp_filter, 0));
    lv_filtered_targets = lib1_gf_UntargetedUnitsfromUnitGroup(lp_player, lv_possible_targets, lib1_gv_hard_removal_targeted_units);
    if ((UnitGroupCount(lv_filtered_targets, c_unitCountAlive) >= 1)) {
        lv_chosen_group = lv_filtered_targets;
    }
    else {
        lv_chosen_group = lv_possible_targets;
    }
    lv_final_target = UnitGroupRandomUnit(lv_chosen_group, c_unitCountAlive);
    auto475964A4_g = lv_chosen_group;
    auto475964A4_u = UnitGroupCount(auto475964A4_g, c_unitCountAll);
    for (;; auto475964A4_u -= 1) {
        lv_possible_target = UnitGroupUnitFromEnd(auto475964A4_g, auto475964A4_u);
        if (lv_possible_target == null) { break; }
        if ((lib1_gf_AdjustedToughnessOfUnit(lv_possible_target) < lib1_gf_AdjustedToughnessOfUnit(lv_final_target))) {
            lv_final_target = lv_possible_target;
        }

    }
    UnitGroupAdd(lib1_gv_hard_removal_targeted_units, lv_final_target);
    return lv_final_target;
}

unit lib1_gf_WeakestTargetForHardRemoval (int lp_player, unitfilter lp_filter) {
    // Variable Declarations
    unitgroup lv_possible_targets;
    unitgroup lv_filtered_targets;
    unitgroup lv_chosen_group;
    unit lv_possible_target;
    unit lv_final_target;

    // Automatic Variable Declarations
    unitgroup auto6B1BBB7F_g;
    int auto6B1BBB7F_u;

    // Variable Initialization
    lv_possible_targets = UnitGroupEmpty();
    lv_filtered_targets = UnitGroupEmpty();
    lv_chosen_group = UnitGroupEmpty();

    // Implementation
    lv_possible_targets = lib1_gf_VisibleUnitsFromUnitGroup(lp_player, UnitGroupAlliance(lp_player, c_unitAllianceAny, RegionEntireMap(), lp_filter, 0));
    lv_filtered_targets = lib1_gf_UntargetedUnitsfromUnitGroup(lp_player, lv_possible_targets, lib1_gv_hard_removal_targeted_units);
    if ((UnitGroupCount(lv_filtered_targets, c_unitCountAlive) >= 1)) {
        lv_chosen_group = lv_filtered_targets;
    }
    else {
        lv_chosen_group = lv_possible_targets;
    }
    lv_final_target = UnitGroupRandomUnit(lv_chosen_group, c_unitCountAlive);
    auto6B1BBB7F_g = lv_chosen_group;
    auto6B1BBB7F_u = UnitGroupCount(auto6B1BBB7F_g, c_unitCountAll);
    for (;; auto6B1BBB7F_u -= 1) {
        lv_possible_target = UnitGroupUnitFromEnd(auto6B1BBB7F_g, auto6B1BBB7F_u);
        if (lv_possible_target == null) { break; }
        if ((lib1_gf_AdjustedToughnessOfUnit(lv_possible_target) < lib1_gf_AdjustedToughnessOfUnit(lv_final_target))) {
            lv_final_target = lv_possible_target;
        }

    }
    UnitGroupAdd(lib1_gv_hard_removal_targeted_units, lv_final_target);
    return lv_final_target;
}

unit lib1_gf_WeakestTargetForHardRemovalNotCaster (int lp_player, unit lp_caster, unitfilter lp_filter) {
    // Variable Declarations
    unitgroup lv_possible_targets;
    unitgroup lv_filtered_targets;
    unitgroup lv_chosen_group;
    unit lv_possible_target;
    unit lv_final_target;

    // Automatic Variable Declarations
    unitgroup auto94493B30_g;
    int auto94493B30_u;

    // Variable Initialization
    lv_possible_targets = UnitGroupEmpty();
    lv_filtered_targets = UnitGroupEmpty();
    lv_chosen_group = UnitGroupEmpty();

    // Implementation
    lv_possible_targets = lib1_gf_VisibleUnitsFromUnitGroup(lp_player, UnitGroupAlliance(lp_player, c_unitAllianceAny, RegionEntireMap(), lp_filter, 0));
    UnitGroupRemove(lv_possible_targets, lp_caster);
    lv_filtered_targets = lib1_gf_UntargetedUnitsfromUnitGroup(lp_player, lv_possible_targets, lib1_gv_hard_removal_targeted_units);
    if ((UnitGroupCount(lv_filtered_targets, c_unitCountAlive) >= 1)) {
        lv_chosen_group = lv_filtered_targets;
    }
    else {
        lv_chosen_group = lv_possible_targets;
    }
    lv_final_target = UnitGroupRandomUnit(lv_chosen_group, c_unitCountAlive);
    auto94493B30_g = lv_chosen_group;
    auto94493B30_u = UnitGroupCount(auto94493B30_g, c_unitCountAll);
    for (;; auto94493B30_u -= 1) {
        lv_possible_target = UnitGroupUnitFromEnd(auto94493B30_g, auto94493B30_u);
        if (lv_possible_target == null) { break; }
        if ((lib1_gf_AdjustedToughnessOfUnit(lv_possible_target) < lib1_gf_AdjustedToughnessOfUnit(lv_final_target))) {
            lv_final_target = lv_possible_target;
        }

    }
    UnitGroupAdd(lib1_gv_hard_removal_targeted_units, lv_final_target);
    return lv_final_target;
}

unit lib1_gf_RandomTargetForStun (int lp_player, unitfilter lp_filter) {
    // Variable Declarations
    unitgroup lv_possible_targets;
    unitgroup lv_filtered_targets;
    unit lv_possible_target;
    unit lv_final_target;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_possible_targets = UnitGroupEmpty();
    lv_filtered_targets = UnitGroupEmpty();

    // Implementation
    lv_possible_targets = lib1_gf_VisibleUnitsFromUnitGroup(lp_player, UnitGroupAlliance(lp_player, c_unitAllianceEnemy, RegionEntireMap(), lp_filter, 0));
    lv_filtered_targets = lib1_gf_UntargetedUnitsfromUnitGroup(lp_player, lv_possible_targets, lib1_gv_stun_targeted_units);
    lv_filtered_targets = lib1_gf_UntargetedUnitsfromUnitGroup(lp_player, lv_filtered_targets, lib1_gv_hard_removal_targeted_units);
    if ((UnitGroupCount(lv_filtered_targets, c_unitCountAlive) >= 1)) {
        lv_final_target = UnitGroupRandomUnit(lv_filtered_targets, c_unitCountAlive);
    }
    else {
        lv_final_target = UnitGroupRandomUnit(lv_possible_targets, c_unitCountAlive);
    }
    UnitGroupAdd(lib1_gv_hard_removal_targeted_units, lv_final_target);
    return lv_final_target;
}

unit lib1_gf_RandomDefensiveTargetForStun (int lp_player, unitfilter lp_filter) {
    // Variable Declarations
    unitgroup lv_possible_targets;
    unitgroup lv_filtered_targets;
    unit lv_possible_target;
    unit lv_final_target;

    // Automatic Variable Declarations
    unitgroup autoF06E4E14_g;
    int autoF06E4E14_u;

    // Variable Initialization
    lv_possible_targets = UnitGroupEmpty();
    lv_filtered_targets = UnitGroupEmpty();

    // Implementation
    lv_possible_targets = lib1_gf_VisibleUnitsFromUnitGroup(lp_player, UnitGroupAlliance(lp_player, c_unitAllianceEnemy, RegionEntireMap(), lp_filter, 0));
    autoF06E4E14_g = lv_possible_targets;
    autoF06E4E14_u = UnitGroupCount(autoF06E4E14_g, c_unitCountAll);
    for (;; autoF06E4E14_u -= 1) {
        lv_possible_target = UnitGroupUnitFromEnd(autoF06E4E14_g, autoF06E4E14_u);
        if (lv_possible_target == null) { break; }
        if ((UnitGroupHasUnit(lib1_gv_defensive_units, lv_possible_target) == false)) {
            UnitGroupRemove(lv_possible_targets, lv_possible_target);
        }

    }
    lv_filtered_targets = lib1_gf_UntargetedUnitsfromUnitGroup(lp_player, lv_possible_targets, lib1_gv_stun_targeted_units);
    lv_filtered_targets = lib1_gf_UntargetedUnitsfromUnitGroup(lp_player, lv_filtered_targets, lib1_gv_hard_removal_targeted_units);
    if ((UnitGroupCount(lv_filtered_targets, c_unitCountAlive) >= 1)) {
        lv_final_target = UnitGroupRandomUnit(lv_filtered_targets, c_unitCountAlive);
    }
    else {
        lv_final_target = UnitGroupRandomUnit(lv_possible_targets, c_unitCountAlive);
    }
    UnitGroupAdd(lib1_gv_hard_removal_targeted_units, lv_final_target);
    return lv_final_target;
}

unit lib1_gf_BestTargetforSplash (int lp_player, unitfilter lp_filter, fixed lp_splash_radius, bool lp_allow_invisible) {
    // Variable Declarations
    unitgroup lv_possible_targets;
    unitgroup lv_filtered_targets;
    unitgroup lv_chosen_group;
    unit lv_possible_target;
    int lv_possible_target_score;
    unit lv_final_target;
    int lv_final_target_score;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup autoA41DE96F_g;
    int autoA41DE96F_u;
    unitgroup auto7811BDE3_g;
    int auto7811BDE3_u;
    unitgroup autoFE9CFFE6_g;
    int autoFE9CFFE6_u;

    // Variable Initialization
    lv_possible_targets = UnitGroupEmpty();
    lv_filtered_targets = UnitGroupEmpty();
    lv_chosen_group = UnitGroupEmpty();

    // Implementation
    if ((lp_allow_invisible == true)) {
        lv_possible_targets = UnitGroupAlliance(lp_player, c_unitAllianceEnemy, RegionEntireMap(), lp_filter, 0);
        UnitGroupRemoveUnitGroup(lv_possible_targets, UnitGroup("LabBot", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    }
    else {
        lv_possible_targets = lib1_gf_VisibleUnitsFromUnitGroup(lp_player, UnitGroupAlliance(lp_player, c_unitAllianceEnemy, RegionEntireMap(), lp_filter, 0));
    }
    autoA41DE96F_g = lv_possible_targets;
    autoA41DE96F_u = UnitGroupCount(autoA41DE96F_g, c_unitCountAll);
    for (;; autoA41DE96F_u -= 1) {
        lv_possible_target = UnitGroupUnitFromEnd(autoA41DE96F_g, autoA41DE96F_u);
        if (lv_possible_target == null) { break; }
        UnitGroupAdd(lv_filtered_targets, lv_possible_target);
        if ((UnitGroupHasUnit(lib1_gv_hard_removal_targeted_units, lv_possible_target) == true)) {
            UnitGroupRemove(lv_filtered_targets, lv_possible_target);
        }
        else {
            auto7811BDE3_g = lib1_gv_splash_targeted_units;
            auto7811BDE3_u = UnitGroupCount(auto7811BDE3_g, c_unitCountAll);
            for (;; auto7811BDE3_u -= 1) {
                lv_unit = UnitGroupUnitFromEnd(auto7811BDE3_g, auto7811BDE3_u);
                if (lv_unit == null) { break; }
                if ((DistanceBetweenPoints(UnitGetPosition(lv_unit), UnitGetPosition(lv_possible_target)) < lp_splash_radius)) {
                    UnitGroupRemove(lv_filtered_targets, lv_possible_target);
                    break;
                }

            }
        }
    }
    if ((UnitGroupCount(lv_filtered_targets, c_unitCountAlive) >= 1)) {
        lv_chosen_group = lv_filtered_targets;
    }
    else {
        lv_chosen_group = lv_possible_targets;
    }
    lv_final_target = UnitGroupRandomUnit(lv_chosen_group, c_unitCountAlive);
    lv_final_target_score = UnitGroupCount(UnitGroupAlliance(lp_player, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_final_target), lp_splash_radius), UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive);
    autoFE9CFFE6_g = lv_chosen_group;
    autoFE9CFFE6_u = UnitGroupCount(autoFE9CFFE6_g, c_unitCountAll);
    for (;; autoFE9CFFE6_u -= 1) {
        lv_possible_target = UnitGroupUnitFromEnd(autoFE9CFFE6_g, autoFE9CFFE6_u);
        if (lv_possible_target == null) { break; }
        lv_possible_target_score = UnitGroupCount(UnitGroupAlliance(lp_player, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_possible_target), lp_splash_radius), UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive);
        if ((lv_possible_target_score > lv_final_target_score)) {
            lv_final_target = lv_possible_target;
        }

    }
    UnitGroupAdd(lib1_gv_splash_targeted_units, lv_final_target);
    return lv_final_target;
}

unit lib1_gf_RandomStructureForHardRemovalWithCostRestrictions (int lp_player, int lp_min_cost, int lp_max_cost) {
    // Variable Declarations
    unitgroup lv_possible_targets;
    unitgroup lv_filtered_targets;
    unit lv_possible_target;
    unit lv_final_target;

    // Automatic Variable Declarations
    unitgroup auto8D720149_g;
    int auto8D720149_u;

    // Variable Initialization
    lv_possible_targets = UnitGroupEmpty();
    lv_filtered_targets = UnitGroupEmpty();

    // Implementation
    lv_possible_targets = lib1_gf_VisibleUnitsFromUnitGroup(lp_player, UnitGroupAlliance(lp_player, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0));
    auto8D720149_g = lv_possible_targets;
    auto8D720149_u = UnitGroupCount(auto8D720149_g, c_unitCountAll);
    for (;; auto8D720149_u -= 1) {
        lv_possible_target = UnitGroupUnitFromEnd(auto8D720149_g, auto8D720149_u);
        if (lv_possible_target == null) { break; }
        if (((UnitGetCustomValue(lv_possible_target, 0) > lp_max_cost) || (UnitGetCustomValue(lv_possible_target, 0) < lp_min_cost))) {
            UnitGroupRemove(lv_possible_targets, lv_possible_target);
        }

    }
    lv_filtered_targets = lib1_gf_UntargetedUnitsfromUnitGroup(lp_player, lv_possible_targets, lib1_gv_hard_removal_targeted_units);
    if ((UnitGroupCount(lv_filtered_targets, c_unitCountAlive) >= 1)) {
        lv_final_target = UnitGroupRandomUnit(lv_filtered_targets, c_unitCountAlive);
    }
    else {
        lv_final_target = UnitGroupRandomUnit(lv_possible_targets, c_unitCountAlive);
    }
    UnitGroupAdd(lib1_gv_hard_removal_targeted_units, lv_final_target);
    return lv_final_target;
}

unit lib1_gf_MostExpensiveStructureforRemoval (int lp_player) {
    // Variable Declarations
    unitgroup lv_possible_targets;
    unitgroup lv_filtered_targets;
    unitgroup lv_chosen_group;
    unit lv_possible_target;
    unit lv_final_target;

    // Automatic Variable Declarations
    unitgroup autoF6830B69_g;
    int autoF6830B69_u;

    // Variable Initialization
    lv_possible_targets = UnitGroupEmpty();
    lv_filtered_targets = UnitGroupEmpty();
    lv_chosen_group = UnitGroupEmpty();

    // Implementation
    lv_possible_targets = lib1_gf_VisibleUnitsFromUnitGroup(lp_player, UnitGroupAlliance(lp_player, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0));
    lv_filtered_targets = lib1_gf_UntargetedUnitsfromUnitGroup(lp_player, lv_possible_targets, lib1_gv_hard_removal_targeted_units);
    if ((UnitGroupCount(lv_filtered_targets, c_unitCountAlive) >= 1)) {
        lv_chosen_group = lv_filtered_targets;
    }
    else {
        lv_chosen_group = lv_possible_targets;
    }
    lv_final_target = UnitGroupRandomUnit(lv_chosen_group, c_unitCountAlive);
    autoF6830B69_g = lv_chosen_group;
    autoF6830B69_u = UnitGroupCount(autoF6830B69_g, c_unitCountAll);
    for (;; autoF6830B69_u -= 1) {
        lv_possible_target = UnitGroupUnitFromEnd(autoF6830B69_g, autoF6830B69_u);
        if (lv_possible_target == null) { break; }
        if ((UnitGetCustomValue(lv_possible_target, 0) > UnitGetCustomValue(lv_final_target, 0))) {
            lv_final_target = lv_possible_target;
        }

    }
    UnitGroupAdd(lib1_gv_hard_removal_targeted_units, lv_final_target);
    return lv_final_target;
}

unit lib1_gf_MostExpensiveStructureforStun (int lp_player) {
    // Variable Declarations
    unitgroup lv_possible_targets;
    unitgroup lv_filtered_targets;
    unitgroup lv_chosen_group;
    unit lv_possible_target;
    unit lv_final_target;

    // Automatic Variable Declarations
    unitgroup auto3C7BE941_g;
    int auto3C7BE941_u;

    // Variable Initialization
    lv_possible_targets = UnitGroupEmpty();
    lv_filtered_targets = UnitGroupEmpty();
    lv_chosen_group = UnitGroupEmpty();

    // Implementation
    lv_possible_targets = lib1_gf_VisibleUnitsFromUnitGroup(lp_player, UnitGroupAlliance(lp_player, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0));
    lv_filtered_targets = lib1_gf_UntargetedUnitsfromUnitGroup(lp_player, lv_possible_targets, lib1_gv_hard_removal_targeted_units);
    lv_filtered_targets = UnitGroupFilter(null, c_playerAny, lv_filtered_targets, UnitFilter(0, 0, 0, (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterStunned - 32)) | (1 << (c_targetFilterDazed - 32))), 0);
    if ((UnitGroupCount(lv_filtered_targets, c_unitCountAlive) >= 1)) {
        lv_chosen_group = lv_filtered_targets;
    }
    else {
        lv_chosen_group = lv_possible_targets;
    }
    lv_final_target = UnitGroupRandomUnit(lv_chosen_group, c_unitCountAlive);
    auto3C7BE941_g = lv_chosen_group;
    auto3C7BE941_u = UnitGroupCount(auto3C7BE941_g, c_unitCountAll);
    for (;; auto3C7BE941_u -= 1) {
        lv_possible_target = UnitGroupUnitFromEnd(auto3C7BE941_g, auto3C7BE941_u);
        if (lv_possible_target == null) { break; }
        if ((UnitGetCustomValue(lv_possible_target, 0) > UnitGetCustomValue(lv_final_target, 0))) {
            lv_final_target = lv_possible_target;
        }

    }
    UnitGroupAdd(lib1_gv_hard_removal_targeted_units, lv_final_target);
    return lv_final_target;
}

unit lib1_gf_NearestTarget (int lp_player, unit lp_caster, unitfilter lp_filter, bool lp_allow_keystone) {
    // Variable Declarations
    unitgroup lv_possible_targets;
    unit lv_possible_target;
    unit lv_final_target;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_possible_targets = UnitGroupEmpty();

    // Implementation
    lv_possible_targets = lib1_gf_VisibleUnitsFromUnitGroup(lp_player, UnitGroupAlliance(lp_player, c_unitAllianceEnemy, RegionEntireMap(), lp_filter, 0));
    if ((lp_allow_keystone == true)) {
        if ((lib1_gv_player[lp_player].lv_team == 0)) {
            UnitGroupAdd(lv_possible_targets, lib1_gv_keystone[1]);
        }
        else {
            UnitGroupAdd(lv_possible_targets, lib1_gv_keystone[0]);
        }
    }

    lv_final_target = UnitGroupClosestToPoint(lv_possible_targets, UnitGetPosition(lp_caster));
    return lv_final_target;
}

void lib1_gf_CreateCargoUnitsWithStatTracking (int lp_count, string lp_unit_type, unit lp_transport) {
    // Automatic Variable Declarations
    // Implementation
    UnitCargoCreate(lp_transport, lp_unit_type, lp_count);
    if ((lib1_gv_uneven_teams == false)) {
        lib1_gv_player[UnitGetOwner(lp_transport)].lv_units_created[lib1_gf_GetPlayerRaceID(UnitGetOwner(lp_transport))] = (lib1_gv_player[UnitGetOwner(lp_transport)].lv_units_created[lib1_gf_GetPlayerRaceID(UnitGetOwner(lp_transport))] + lp_count);
    }

}

void lib1_gf_SkiptoEditor () {
    // Variable Declarations
    int lv_team;
    int lv_player;
    int lv_hand_index;
    int lv_top_of_hand;

    // Automatic Variable Declarations
    const int auto8F3F6C93_ae = 1;
    const int auto8F3F6C93_ai = 1;
    playergroup auto2577FA2E_g;
    int autoE6BF8791_ae;
    const int autoE6BF8791_ai = 1;
    playergroup autoEDA39676_g;
    unitgroup autoF8573795_g;
    int autoF8573795_u;
    unit autoF8573795_var;

    // Variable Initialization

    // Implementation
    lib1_gv_current_phase = "Menu";
    TriggerEnable(lib1_gt_PlayPhaseLoop, false);
    TriggerEnable(lib1_gt_UpdateTimer, false);
    TimerPause(lib1_gv_turn_timer, true);
    if ((lib1_gv_resource_chooser_dialog != c_invalidDialogId)) {
        lib1_gf_FadeandDestroyDialog(lib1_gv_resource_chooser_dialog, 0.0);
    }

    if ((lib1_gv_deck_tracker_dialog != c_invalidDialogId)) {
        lib1_gf_FadeandDestroyDialog(lib1_gv_deck_tracker_dialog, 0.0);
    }

    if ((lib1_gv_turn_timer_dialog != c_invalidDialogId)) {
        lib1_gf_FadeandDestroyDialog(lib1_gv_turn_timer_dialog, 0.0);
    }

    if ((lib1_gv_end_phase_dialog != c_invalidDialogId)) {
        lib1_gf_FadeandDestroyDialog(lib1_gv_end_phase_dialog, 0.0);
    }

    if ((lib1_gv_planning_instructions != c_invalidDialogId)) {
        lib1_gf_FadeandDestroyDialog(lib1_gv_planning_instructions, 0.0);
    }

    lv_team = 0;
    for ( ; ( (auto8F3F6C93_ai >= 0 && lv_team <= auto8F3F6C93_ae) || (auto8F3F6C93_ai < 0 && lv_team >= auto8F3F6C93_ae) ) ; lv_team += auto8F3F6C93_ai ) {
        auto2577FA2E_g = lib1_gv_team[lv_team];
        lv_player = -1;
        while (true) {
            lv_player = PlayerGroupNextPlayer(auto2577FA2E_g, lv_player);
            if (lv_player < 0) { break; }
            TimerPause(lib1_gv_hover_timer[lv_player], true);
            DialogDestroy(lib1_gv_player[lv_player].lv_hand.lv_hidden_overlay);
            if ((lib1_gv_card_hover_dialog[lv_player] != c_invalidDialogId)) {
                lib1_gf_FadeandDestroyDialog(lib1_gv_card_hover_dialog[lv_player], 0.0);
            }

            if ((lib1_gv_player[lv_player].lv_resources.lv_dialog != c_invalidDialogId)) {
                lib1_gf_FadeandDestroyDialog(lib1_gv_player[lv_player].lv_resources.lv_dialog, 0.0);
            }

            lv_top_of_hand = lib1_gf_TopofHand(lv_player);
            autoE6BF8791_ae = lv_top_of_hand;
            lv_hand_index = 0;
            for ( ; ( (autoE6BF8791_ai >= 0 && lv_hand_index <= autoE6BF8791_ae) || (autoE6BF8791_ai < 0 && lv_hand_index >= autoE6BF8791_ae) ) ; lv_hand_index += autoE6BF8791_ai ) {
                if ((lib1_gv_player[lv_player].lv_hand.lv_card[lv_hand_index].lv_ui.lv_dialog != c_invalidDialogId)) {
                    lib1_gf_FadeandDestroyDialog(lib1_gv_player[lv_player].lv_hand.lv_card[lv_hand_index].lv_ui.lv_dialog, 0.0);
                }

            }
        }
    }
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeInfoPanel, false);
    CinematicFade(false, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    autoEDA39676_g = PlayerGroupAll();
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoEDA39676_g, lv_player);
        if (lv_player < 0) { break; }
        lib1_gf_OpenMainMenu(lv_player);
    }
    TriggerEnable(lib1_gt_CollectionPageUpdateLoop, true);
    autoF8573795_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF8573795_u = UnitGroupCount(autoF8573795_g, c_unitCountAll);
    for (;; autoF8573795_u -= 1) {
        autoF8573795_var = UnitGroupUnitFromEnd(autoF8573795_g, autoF8573795_u);
        if (autoF8573795_var == null) { break; }
        UnitRemove(autoF8573795_var);
    }
}

void lib1_gf_CreateRewardScreen () {
    // Variable Declarations
    int lv_victory_offset;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    DialogCreate(lib1_gv_mAIN_MENU_WIDTH, lib1_gv_mAIN_MENU_HEIGHT, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    DialogSetRenderPriority(DialogLastCreated(), 0);
    lib1_gv_reward_dialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lib1_gv_mAIN_MENU_WIDTH, 300, c_anchorCenter, 0, -200, StringExternal("Param/Value/lib_1_1F4ED663"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CardCount", PlayerGroupAll());
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lib1_gv_reward_tutorial_completion_message = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lib1_gv_mAIN_MENU_WIDTH, lib1_gv_rEWARD_MESSAGE_HEIGHT, c_anchorCenter, 0, (lv_victory_offset + (lib1_gv_rEWARD_MESSAGE_HEIGHT / -2)), StringExternal("Param/Value/lib_1_B6C01F57"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "NewsHeading", PlayerGroupAll());
    lib1_gv_reward_dialog_message = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 150, 80, c_anchorCenter, 0, (lv_victory_offset + (lib1_gv_rEWARD_MESSAGE_HEIGHT / 2)), StringToText(""), StringToText(""), "");
    lib1_gv_reward_dialog_exit_button = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lib1_gv_fILTER_ICON_SIZE, lib1_gv_fILTER_ICON_SIZE, c_anchorCenter, (lib1_gv_fILTER_ICON_SIZE / -2), (lv_victory_offset + ((lib1_gv_rEWARD_MESSAGE_HEIGHT / 2) - 2)), StringToText(""), lib1_gv_credit_image, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lib1_gv_fILTER_ICON_SIZE, lib1_gv_fILTER_ICON_SIZE, c_anchorCenter, (lib1_gv_fILTER_ICON_SIZE / 2), (lv_victory_offset + (lib1_gv_rEWARD_MESSAGE_HEIGHT / 2)), StringExternal("Param/Value/lib_1_9D238D6C"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "EssenceCount", PlayerGroupAll());
    lib1_gv_reward_dialog_credits = DialogControlLastCreated();
    DialogCreate(lib1_gv_mAIN_MENU_WIDTH, lib1_gv_mAIN_MENU_HEIGHT, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    DialogSetRenderPriority(DialogLastCreated(), 0);
    lib1_gv_reward_dialog_new_player_bonus = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lib1_gv_mAIN_MENU_WIDTH, lib1_gv_rEWARD_MESSAGE_HEIGHT, c_anchorCenter, 0, (-40 + (lib1_gv_rEWARD_MESSAGE_HEIGHT / -2)), StringExternal("Param/Value/lib_1_1293006E"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "NewsHeading", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lib1_gv_mAIN_MENU_WIDTH, lib1_gv_rEWARD_MESSAGE_HEIGHT, c_anchorCenter, 0, (-5 + (lib1_gv_rEWARD_MESSAGE_HEIGHT / -2)), (StringExternal("Param/Value/lib_1_6E517B91") + IntToText((lib1_gf_MaxNewPlayerBonusGames(1) - lib1_gf_CompletedGames(1, false))) + StringExternal("Param/Value/lib_1_E21CFF4B")), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CardCount", PlayerGroupAll());
    lib1_gv_reward_dialog_message_new_player_bonus = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 170, 80, c_anchorCenter, 0, (lv_victory_offset + (lib1_gv_rEWARD_MESSAGE_HEIGHT / 2)), StringToText(""), StringToText(""), "");
    lib1_gv_reward_dialog_exit_button_new_player_bonus = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lib1_gv_fILTER_ICON_SIZE, lib1_gv_fILTER_ICON_SIZE, c_anchorCenter, ((lib1_gv_fILTER_ICON_SIZE / -2) - 5), (lv_victory_offset + ((lib1_gv_rEWARD_MESSAGE_HEIGHT / 2) - 2)), StringToText(""), lib1_gv_credit_image, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, lib1_gv_fILTER_ICON_SIZE, c_anchorCenter, ((lib1_gv_fILTER_ICON_SIZE / 2) + 15), (lv_victory_offset + (lib1_gv_rEWARD_MESSAGE_HEIGHT / 2)), StringExternal("Param/Value/lib_1_0257D952"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "EssenceCount", PlayerGroupAll());
    lib1_gv_reward_dialog_credits_new_player_bonus = DialogControlLastCreated();
}

void lib1_gf_ProcessVictory (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gv_player_collection[lp_player].lv_credits_earned = (lib1_gv_player_collection[lp_player].lv_credits_earned + lib1_gv_win_reward);
    if ((lib1_gv_uneven_teams == false)) {
        lib1_gv_player[lp_player].lv_wins[lib1_gf_GetPlayerRaceID(lp_player)][lib1_gv_game_mode] = (lib1_gv_player[lp_player].lv_wins[lib1_gf_GetPlayerRaceID(lp_player)][lib1_gv_game_mode] + 1);
    }

    lib1_gf_SaveCurrencytoBank(lp_player);
    lib1_gf_SaveWinsLossestoBank(lp_player);
    lib1_gf_SaveStatstoBank(lp_player);
    if ((lib1_gv_tutorial_flag == true)) {
        DialogControlSetVisible(lib1_gv_reward_tutorial_completion_message, PlayerGroupSingle(lp_player), true);
        libNtve_gf_SetDialogItemText(lib1_gv_reward_dialog_message, StringExternal("Param/Value/lib_1_83F4BC9B"), PlayerGroupSingle(lp_player));
    }
    else {
        libNtve_gf_SetDialogItemText(lib1_gv_reward_dialog_message, StringExternal("Param/Value/lib_1_A5727E98"), PlayerGroupSingle(lp_player));
    }
    libNtve_gf_SetDialogItemText(lib1_gv_reward_dialog_credits, (StringExternal("Param/Value/lib_1_7DAB684B") + IntToText(lib1_gv_win_reward)), PlayerGroupSingle(lp_player));
}

void lib1_gf_ProcessDefeat (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gv_player_collection[lp_player].lv_credits_earned = (lib1_gv_player_collection[lp_player].lv_credits_earned + lib1_gv_loss_reward);
    if ((lib1_gv_uneven_teams == false)) {
        lib1_gv_player[lp_player].lv_losses[lib1_gf_GetPlayerRaceID(lp_player)][lib1_gv_game_mode] = (lib1_gv_player[lp_player].lv_losses[lib1_gf_GetPlayerRaceID(lp_player)][lib1_gv_game_mode] + 1);
    }

    lib1_gf_SaveCurrencytoBank(lp_player);
    lib1_gf_SaveWinsLossestoBank(lp_player);
    lib1_gf_SaveStatstoBank(lp_player);
    libNtve_gf_SetDialogItemText(lib1_gv_reward_dialog_message, StringExternal("Param/Value/lib_1_5BE2303A"), PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemText(lib1_gv_reward_dialog_credits, (StringExternal("Param/Value/lib_1_7E019295") + IntToText(lib1_gv_loss_reward)), PlayerGroupSingle(lp_player));
}

void lib1_gf_CreateMainMenu () {
    // Variable Declarations
    int lv_lINKS_HEIGHT;
    int lv_lINKS_SPACING;
    int lv_player;

    // Automatic Variable Declarations
    const int autoC71EEE49_ae = 6;
    const int autoC71EEE49_ai = 1;

    // Variable Initialization
    lv_lINKS_HEIGHT = 50;
    lv_lINKS_SPACING = 60;

    // Implementation
    DialogCreate(lib1_gv_mAIN_MENU_WIDTH, lib1_gv_mAIN_MENU_HEIGHT, c_anchorCenter, 0, 0, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    lib1_gv_main_menu_dialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lib1_gv_mAIN_MENU_WIDTH, lib1_gv_mAIN_MENU_HEIGHT, c_anchorCenter, 0, 0, StringToText(""), lib1_gv_mAIN_MENU_BACKGROUND, c_triggerImageTypeNormal, true, Color(29.02, 29.02, 29.02), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 25.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lib1_gv_mAIN_MENU_WIDTH, lib1_gv_mAIN_MENU_HEIGHT, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_battle_metalframe_inner.dds", c_triggerImageTypeBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lib1_gv_mAIN_MENU_BUTTON_WIDTH, lib1_gv_mAIN_MENU_BUTTON_HEIGHT, c_anchorTop, FixedToInt((lib1_gv_mAIN_MENU_BUTTON_SPACE_X * -1.5)), lib1_gv_mAIN_MENU_PADDING, StringToText(""), StringExternal("Param/Value/lib_1_949825F5"), "");
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CardCostSmall", PlayerGroupAll());
    lib1_gv_main_menu_collection_button = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lib1_gv_mAIN_MENU_BUTTON_WIDTH, lib1_gv_mAIN_MENU_BUTTON_HEIGHT, c_anchorTop, FixedToInt((lib1_gv_mAIN_MENU_BUTTON_SPACE_X * -0.5)), lib1_gv_mAIN_MENU_PADDING, StringToText(""), StringExternal("Param/Value/lib_1_B2E5F7AF"), "");
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CardCostSmall", PlayerGroupAll());
    lib1_gv_main_menu_store_button = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lib1_gv_mAIN_MENU_BUTTON_WIDTH, lib1_gv_mAIN_MENU_BUTTON_HEIGHT, c_anchorTop, FixedToInt((lib1_gv_mAIN_MENU_BUTTON_SPACE_X * 0.5)), lib1_gv_mAIN_MENU_PADDING, StringToText(""), StringExternal("Param/Value/lib_1_9DDAB935"), "");
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CardCostSmall", PlayerGroupAll());
    lib1_gv_main_menu_stats_button = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lib1_gv_mAIN_MENU_BUTTON_WIDTH, lib1_gv_mAIN_MENU_BUTTON_HEIGHT, c_anchorTop, FixedToInt((lib1_gv_mAIN_MENU_BUTTON_SPACE_X * 1.5)), lib1_gv_mAIN_MENU_PADDING, StringToText(""), StringExternal("Param/Value/lib_1_00E188A4"), "");
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CardCostSmall", PlayerGroupAll());
    lib1_gv_main_menu_cosmetics_button = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), (lib1_gv_mAIN_MENU_WIDTH - (8 * lib1_gv_mAIN_MENU_PADDING)), (lib1_gv_mAIN_MENU_HEIGHT - (2 * lib1_gv_mAIN_MENU_PADDING)), c_anchorTop, 0, (lib1_gv_mAIN_MENU_PADDING + lib1_gv_mAIN_MENU_BUTTON_HEIGHT + lib1_gv_mAIN_MENU_PADDING), lib1_gv_aNNOUNCEMENT, Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "NewsBody", PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeEditBox);
    libNtve_gf_SetDialogItemEditorValue(DialogControlLastCreated(), "discord.gg/Q6jMh6c", PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 245, 55);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottom, 0, (lv_lINKS_HEIGHT + (lv_lINKS_SPACING * 2)));
    lib1_gv_discord = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeEditBox);
    libNtve_gf_SetDialogItemEditorValue(DialogControlLastCreated(), "submapdesign.wordpress.com", PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 358, 55);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottom, 0, (lv_lINKS_HEIGHT + lv_lINKS_SPACING));
    lib1_gv_blog = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeEditBox);
    libNtve_gf_SetDialogItemEditorValue(DialogControlLastCreated(), "reddit.com/r/keystonesc", PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 286, 55);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottom, 0, lv_lINKS_HEIGHT);
    lib1_gv_reddit = DialogControlLastCreated();
    DialogCreate(74, 66, c_anchorTopLeft, 0, 0, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    lib1_gv_back_to_main_menu_dialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 74, 66, c_anchorCenter, 0, 0, StringExternal("Param/Value/lib_1_3EB063A1"), StringToText(""), "");
    lib1_gv_back_to_main_menu_button = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 20, 24, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\sc2_ui_glues_icons_backbuttonarrow.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogCreate(lib1_gv_mAIN_MENU_WIDTH, lib1_gv_mAIN_MENU_HEIGHT, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    lib1_gv_main_menu_fullscreen_dialog = DialogLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeEditBox);
    lv_player = 1;
    for ( ; ( (autoC71EEE49_ai >= 0 && lv_player <= autoC71EEE49_ae) || (autoC71EEE49_ai < 0 && lv_player >= autoC71EEE49_ae) ) ; lv_player += autoC71EEE49_ai ) {
        libNtve_gf_SetDialogItemEditorValue(DialogControlLastCreated(), PlayerHandle(lv_player), PlayerGroupSingle(lv_player));
    }
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 250, 55);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomLeft, 45, 0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 50, 55, c_anchorBottomLeft, 0, 0, StringExternal("Param/Value/lib_1_A49B02CC"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CraftButton", PlayerGroupAll());
}

void lib1_gf_OpenMainMenu (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    DialogSetVisible(lib1_gv_main_menu_dialog, PlayerGroupSingle(lp_player), true);
    DialogSetVisible(lib1_gv_main_menu_fullscreen_dialog, PlayerGroupSingle(lp_player), true);
    DialogSetVisible(lib1_gv_back_to_main_menu_dialog, PlayerGroupSingle(lp_player), false);
}

trigger auto_lib1_gf_OpenCollectionEditor_Trigger = null;
int auto_lib1_gf_OpenCollectionEditor_lp_player;

void lib1_gf_OpenCollectionEditor (int lp_player) {
    auto_lib1_gf_OpenCollectionEditor_lp_player = lp_player;

    if (auto_lib1_gf_OpenCollectionEditor_Trigger == null) {
        auto_lib1_gf_OpenCollectionEditor_Trigger = TriggerCreate("auto_lib1_gf_OpenCollectionEditor_TriggerFunc");
    }

    TriggerExecute(auto_lib1_gf_OpenCollectionEditor_Trigger, false, false);
}

bool auto_lib1_gf_OpenCollectionEditor_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_lib1_gf_OpenCollectionEditor_lp_player;

    // Variable Declarations
    const fixed lv_tRANSITION_TIME = 0.0;
    int lv_button_index;

    // Automatic Variable Declarations
    const int auto5BE0DAEA_ae = 7;
    const int auto5BE0DAEA_ai = 1;
    const int auto4D76F014_ae = 7;
    const int auto4D76F014_ai = 1;
    const int autoB62EA39B_ae = 7;
    const int autoB62EA39B_ai = 1;

    // Variable Initialization

    // Implementation
    lib1_gv_player_collection[lp_player].lv_filter.lv_crafting_mode = false;
    lib1_gv_player_collection[lp_player].lv_scroll_level = 0;
    DialogSetVisible(lib1_gv_collection_dialog, PlayerGroupSingle(lp_player), true);
    DialogSetVisible(lib1_gv_collection_interaction_dialog, PlayerGroupSingle(lp_player), true);
    DialogSetVisible(lib1_gv_deck_dialog, PlayerGroupSingle(lp_player), true);
    DialogSetVisible(lib1_gv_decklist_dialog, PlayerGroupSingle(lp_player), true);
    DialogSetVisible(lib1_gv_filter_dialog, PlayerGroupSingle(lp_player), true);
    DialogSetVisible(lib1_gv_back_to_main_menu_dialog, PlayerGroupSingle(lp_player), true);
    if ((lib1_gv_player_collection[lp_player].lv_filter.lv_race == lib1_gv_tERRAN)) {
        DialogControlSetVisible(lib1_gv_collection_dialog_bg_t, PlayerGroupSingle(lp_player), true);
        DialogControlSetVisible(lib1_gv_deck_dialog_bg_t, PlayerGroupSingle(lp_player), true);
        DialogControlSetVisible(lib1_gv_filter_dialog_bg_t, PlayerGroupSingle(lp_player), true);
        DialogControlFadeTransparency(lib1_gv_collection_dialog_bg_t, PlayerGroupSingle(lp_player), 0.0, 100.0);
        DialogControlFadeTransparency(lib1_gv_collection_dialog_bg_t, PlayerGroupSingle(lp_player), lv_tRANSITION_TIME, 0.0);
        DialogControlFadeTransparency(lib1_gv_deck_dialog_bg_t, PlayerGroupSingle(lp_player), 0.0, 100.0);
        DialogControlFadeTransparency(lib1_gv_deck_dialog_bg_t, PlayerGroupSingle(lp_player), lv_tRANSITION_TIME, 0.0);
        DialogControlFadeTransparency(lib1_gv_filter_dialog_bg_t, PlayerGroupSingle(lp_player), 0.0, 100.0);
        DialogControlFadeTransparency(lib1_gv_filter_dialog_bg_t, PlayerGroupSingle(lp_player), lv_tRANSITION_TIME, 0.0);
        DialogControlFadeTransparency(lib1_gv_collection_dialog_bg_z, PlayerGroupSingle(lp_player), lv_tRANSITION_TIME, 100.0);
        DialogControlFadeTransparency(lib1_gv_collection_dialog_bg_p, PlayerGroupSingle(lp_player), lv_tRANSITION_TIME, 100.0);
        DialogControlFadeTransparency(lib1_gv_deck_dialog_bg_z, PlayerGroupSingle(lp_player), lv_tRANSITION_TIME, 100.0);
        DialogControlFadeTransparency(lib1_gv_deck_dialog_bg_p, PlayerGroupSingle(lp_player), lv_tRANSITION_TIME, 100.0);
        DialogControlFadeTransparency(lib1_gv_filter_dialog_bg_z, PlayerGroupSingle(lp_player), lv_tRANSITION_TIME, 100.0);
        DialogControlFadeTransparency(lib1_gv_filter_dialog_bg_p, PlayerGroupSingle(lp_player), lv_tRANSITION_TIME, 100.0);
        Wait(lv_tRANSITION_TIME, c_timeGame);
        DialogControlSetVisible(lib1_gv_collection_dialog_bg_z, PlayerGroupSingle(lp_player), false);
        DialogControlSetVisible(lib1_gv_collection_dialog_bg_p, PlayerGroupSingle(lp_player), false);
        DialogControlSetVisible(lib1_gv_deck_dialog_bg_z, PlayerGroupSingle(lp_player), false);
        DialogControlSetVisible(lib1_gv_deck_dialog_bg_p, PlayerGroupSingle(lp_player), false);
        DialogControlSetVisible(lib1_gv_filter_dialog_bg_z, PlayerGroupSingle(lp_player), false);
        DialogControlSetVisible(lib1_gv_filter_dialog_bg_p, PlayerGroupSingle(lp_player), false);
        lv_button_index = 0;
        for ( ; ( (auto5BE0DAEA_ai >= 0 && lv_button_index <= auto5BE0DAEA_ae) || (auto5BE0DAEA_ai < 0 && lv_button_index >= auto5BE0DAEA_ae) ) ; lv_button_index += auto5BE0DAEA_ai ) {
            libNtve_gf_SetDialogItemImage2(lib1_gv_collection_card_button[lv_button_index], "Assets\\Textures\\ui_button_generic_normaloverpressedover_terran.dds", PlayerGroupSingle(lp_player));
            libNtve_gf_SetDialogItemImage(lib1_gv_collection_card_button[lv_button_index], "Assets\\Textures\\ui_button_generic_normalpressed_terran.dds", PlayerGroupSingle(lp_player));
        }
    }
    else if ((lib1_gv_player_collection[lp_player].lv_filter.lv_race == lib1_gv_zERG)) {
        DialogControlSetVisible(lib1_gv_collection_dialog_bg_z, PlayerGroupSingle(lp_player), true);
        DialogControlSetVisible(lib1_gv_deck_dialog_bg_z, PlayerGroupSingle(lp_player), true);
        DialogControlSetVisible(lib1_gv_filter_dialog_bg_z, PlayerGroupSingle(lp_player), true);
        DialogControlFadeTransparency(lib1_gv_collection_dialog_bg_z, PlayerGroupSingle(lp_player), 0.0, 100.0);
        DialogControlFadeTransparency(lib1_gv_collection_dialog_bg_z, PlayerGroupSingle(lp_player), lv_tRANSITION_TIME, 0.0);
        DialogControlFadeTransparency(lib1_gv_deck_dialog_bg_z, PlayerGroupSingle(lp_player), 0.0, 100.0);
        DialogControlFadeTransparency(lib1_gv_deck_dialog_bg_z, PlayerGroupSingle(lp_player), lv_tRANSITION_TIME, 0.0);
        DialogControlFadeTransparency(lib1_gv_filter_dialog_bg_z, PlayerGroupSingle(lp_player), 0.0, 100.0);
        DialogControlFadeTransparency(lib1_gv_filter_dialog_bg_z, PlayerGroupSingle(lp_player), lv_tRANSITION_TIME, 0.0);
        DialogControlFadeTransparency(lib1_gv_collection_dialog_bg_t, PlayerGroupSingle(lp_player), lv_tRANSITION_TIME, 100.0);
        DialogControlFadeTransparency(lib1_gv_collection_dialog_bg_p, PlayerGroupSingle(lp_player), lv_tRANSITION_TIME, 100.0);
        DialogControlFadeTransparency(lib1_gv_deck_dialog_bg_t, PlayerGroupSingle(lp_player), lv_tRANSITION_TIME, 100.0);
        DialogControlFadeTransparency(lib1_gv_deck_dialog_bg_p, PlayerGroupSingle(lp_player), lv_tRANSITION_TIME, 100.0);
        DialogControlFadeTransparency(lib1_gv_filter_dialog_bg_t, PlayerGroupSingle(lp_player), lv_tRANSITION_TIME, 100.0);
        DialogControlFadeTransparency(lib1_gv_filter_dialog_bg_p, PlayerGroupSingle(lp_player), lv_tRANSITION_TIME, 100.0);
        Wait(lv_tRANSITION_TIME, c_timeGame);
        DialogControlSetVisible(lib1_gv_collection_dialog_bg_t, PlayerGroupSingle(lp_player), false);
        DialogControlSetVisible(lib1_gv_collection_dialog_bg_p, PlayerGroupSingle(lp_player), false);
        DialogControlSetVisible(lib1_gv_deck_dialog_bg_t, PlayerGroupSingle(lp_player), false);
        DialogControlSetVisible(lib1_gv_deck_dialog_bg_p, PlayerGroupSingle(lp_player), false);
        DialogControlSetVisible(lib1_gv_filter_dialog_bg_t, PlayerGroupSingle(lp_player), false);
        DialogControlSetVisible(lib1_gv_filter_dialog_bg_p, PlayerGroupSingle(lp_player), false);
        lv_button_index = 0;
        for ( ; ( (auto4D76F014_ai >= 0 && lv_button_index <= auto4D76F014_ae) || (auto4D76F014_ai < 0 && lv_button_index >= auto4D76F014_ae) ) ; lv_button_index += auto4D76F014_ai ) {
            libNtve_gf_SetDialogItemImage2(lib1_gv_collection_card_button[lv_button_index], "Assets\\Textures\\ui_button_generic_normaloverpressedover_zerg.dds", PlayerGroupSingle(lp_player));
            libNtve_gf_SetDialogItemImage(lib1_gv_collection_card_button[lv_button_index], "Assets\\Textures\\ui_button_generic_normalpressed_zerg.dds", PlayerGroupSingle(lp_player));
        }
    }
    else if ((lib1_gv_player_collection[lp_player].lv_filter.lv_race == lib1_gv_pROTOSS)) {
        DialogControlSetVisible(lib1_gv_collection_dialog_bg_p, PlayerGroupSingle(lp_player), true);
        DialogControlSetVisible(lib1_gv_deck_dialog_bg_p, PlayerGroupSingle(lp_player), true);
        DialogControlSetVisible(lib1_gv_filter_dialog_bg_p, PlayerGroupSingle(lp_player), true);
        DialogControlFadeTransparency(lib1_gv_collection_dialog_bg_p, PlayerGroupSingle(lp_player), 0.0, 100.0);
        DialogControlFadeTransparency(lib1_gv_collection_dialog_bg_p, PlayerGroupSingle(lp_player), lv_tRANSITION_TIME, 0.0);
        DialogControlFadeTransparency(lib1_gv_deck_dialog_bg_p, PlayerGroupSingle(lp_player), 0.0, 100.0);
        DialogControlFadeTransparency(lib1_gv_deck_dialog_bg_p, PlayerGroupSingle(lp_player), lv_tRANSITION_TIME, 0.0);
        DialogControlFadeTransparency(lib1_gv_filter_dialog_bg_p, PlayerGroupSingle(lp_player), 0.0, 100.0);
        DialogControlFadeTransparency(lib1_gv_filter_dialog_bg_p, PlayerGroupSingle(lp_player), lv_tRANSITION_TIME, 0.0);
        DialogControlFadeTransparency(lib1_gv_collection_dialog_bg_t, PlayerGroupSingle(lp_player), lv_tRANSITION_TIME, 100.0);
        DialogControlFadeTransparency(lib1_gv_collection_dialog_bg_z, PlayerGroupSingle(lp_player), lv_tRANSITION_TIME, 100.0);
        DialogControlFadeTransparency(lib1_gv_deck_dialog_bg_t, PlayerGroupSingle(lp_player), lv_tRANSITION_TIME, 100.0);
        DialogControlFadeTransparency(lib1_gv_deck_dialog_bg_z, PlayerGroupSingle(lp_player), lv_tRANSITION_TIME, 100.0);
        DialogControlFadeTransparency(lib1_gv_filter_dialog_bg_t, PlayerGroupSingle(lp_player), lv_tRANSITION_TIME, 100.0);
        DialogControlFadeTransparency(lib1_gv_filter_dialog_bg_z, PlayerGroupSingle(lp_player), lv_tRANSITION_TIME, 100.0);
        Wait(lv_tRANSITION_TIME, c_timeGame);
        DialogControlSetVisible(lib1_gv_collection_dialog_bg_t, PlayerGroupSingle(lp_player), false);
        DialogControlSetVisible(lib1_gv_collection_dialog_bg_z, PlayerGroupSingle(lp_player), false);
        DialogControlSetVisible(lib1_gv_deck_dialog_bg_t, PlayerGroupSingle(lp_player), false);
        DialogControlSetVisible(lib1_gv_deck_dialog_bg_z, PlayerGroupSingle(lp_player), false);
        DialogControlSetVisible(lib1_gv_filter_dialog_bg_t, PlayerGroupSingle(lp_player), false);
        DialogControlSetVisible(lib1_gv_filter_dialog_bg_z, PlayerGroupSingle(lp_player), false);
        lv_button_index = 0;
        for ( ; ( (autoB62EA39B_ai >= 0 && lv_button_index <= autoB62EA39B_ae) || (autoB62EA39B_ai < 0 && lv_button_index >= autoB62EA39B_ae) ) ; lv_button_index += autoB62EA39B_ai ) {
            libNtve_gf_SetDialogItemImage2(lib1_gv_collection_card_button[lv_button_index], "Assets\\Textures\\ui_button_generic_normaloverpressedover_protoss.dds", PlayerGroupSingle(lp_player));
            libNtve_gf_SetDialogItemImage(lib1_gv_collection_card_button[lv_button_index], "Assets\\Textures\\ui_button_generic_normalpressed_protoss.dds", PlayerGroupSingle(lp_player));
        }
    }
    if ((lib1_gv_player_collection[lp_player].lv_decklist_border[0] == c_invalidDialogControlId)) {
        lib1_gf_LoadCurrentDecklist(lp_player);
    }

    lib1_gf_UpdateDecklistUI(lp_player);
    lib1_gv_player_collection[lp_player].lv_filter.lv_crafting_mode = false;
    DialogControlSetEnabled(lib1_gv_include_craftable_button_image, PlayerGroupSingle(lp_player), false);
    return true;
}

trigger auto_lib1_gf_CloseCollectionEditor_Trigger = null;
int auto_lib1_gf_CloseCollectionEditor_lp_player;

void lib1_gf_CloseCollectionEditor (int lp_player) {
    auto_lib1_gf_CloseCollectionEditor_lp_player = lp_player;

    if (auto_lib1_gf_CloseCollectionEditor_Trigger == null) {
        auto_lib1_gf_CloseCollectionEditor_Trigger = TriggerCreate("auto_lib1_gf_CloseCollectionEditor_TriggerFunc");
    }

    TriggerExecute(auto_lib1_gf_CloseCollectionEditor_Trigger, false, false);
}

bool auto_lib1_gf_CloseCollectionEditor_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_lib1_gf_CloseCollectionEditor_lp_player;

    // Variable Declarations
    const fixed lv_tRANSITION_TIME = 1.0;
    int lv_button_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lib1_gf_CloseCurrentCollectionPage(lp_player);
    DialogSetVisible(lib1_gv_collection_dialog, PlayerGroupSingle(lp_player), false);
    DialogSetVisible(lib1_gv_collection_interaction_dialog, PlayerGroupSingle(lp_player), false);
    DialogSetVisible(lib1_gv_deck_dialog, PlayerGroupSingle(lp_player), false);
    DialogSetVisible(lib1_gv_decklist_dialog, PlayerGroupSingle(lp_player), false);
    DialogSetVisible(lib1_gv_filter_dialog, PlayerGroupSingle(lp_player), false);
    DialogSetVisible(lib1_gv_crafting_dialog, PlayerGroupSingle(lp_player), false);
    return true;
}

int lib1_gf_CollectionWidth () {
    // Automatic Variable Declarations
    // Implementation
    return ((lib1_gv_cOLLECTION_CARD_PADDING * 2) + (lib1_gv_cOLLECTION_CARD_SPACE_X * (lib1_gv_cOLLECTION_CARD_COLUMNS - 1)) + (lib1_gv_cOLLECTION_CARD_COLUMNS * lib1_gv_cARD_WIDTH));
}

int lib1_gf_CollectionWidthwithMargin () {
    // Automatic Variable Declarations
    // Implementation
    return ((lib1_gv_cOLLECTION_CARD_PADDING * 2) + (lib1_gv_cOLLECTION_CARD_SPACE_X * (lib1_gv_cOLLECTION_CARD_COLUMNS - 1)) + (lib1_gv_cOLLECTION_CARD_COLUMNS * lib1_gv_cARD_WIDTH) + (2 + lib1_gv_cOLLECTION_CARD_SIDE_MARGIN));
}

int lib1_gf_CollectionHeight () {
    // Automatic Variable Declarations
    // Implementation
    return ((lib1_gv_cOLLECTION_CARD_PADDING * 2) + (lib1_gv_cOLLECTION_CARD_SPACE_Y * (lib1_gv_cOLLECTION_CARD_ROWS - 1)) + (lib1_gv_cOLLECTION_CARD_ROWS * lib1_gv_cARD_HEIGHT));
}

int lib1_gf_CollectionHeightwithMargin () {
    // Automatic Variable Declarations
    // Implementation
    return ((lib1_gv_cOLLECTION_CARD_PADDING * 2) + (lib1_gv_cOLLECTION_CARD_SPACE_Y * (lib1_gv_cOLLECTION_CARD_ROWS - 1)) + (lib1_gv_cOLLECTION_CARD_ROWS * lib1_gv_cARD_HEIGHT) + (lib1_gv_cOLLECTION_CARD_TOP_MARGIN * 2));
}

int lib1_gf_CollectionX () {
    // Automatic Variable Declarations
    // Implementation
    return ((lib1_gf_DeckWidth() + lib1_gv_sPACE_BETWEEN_COLLECTION_WINDOWS) / -2);
}

int lib1_gf_CollectionY () {
    // Automatic Variable Declarations
    // Implementation
    return ((lib1_gf_FilterHeight() + lib1_gv_sPACE_BETWEEN_COLLECTION_WINDOWS) / 2);
}

int lib1_gf_CollectionCardX (int lp_index) {
    // Variable Declarations
    int lv_row_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_index <= (((lib1_gv_cOLLECTION_CARD_COLUMNS * lib1_gv_cOLLECTION_CARD_ROWS) / 2) - 1))) {
        lv_row_index = lp_index;
    }
    else {
        lv_row_index = (lp_index - lib1_gv_cOLLECTION_CARD_COLUMNS);
    }
    return (lib1_gf_CollectionX() + (((lib1_gv_cARD_WIDTH + lib1_gv_cOLLECTION_CARD_SPACE_X) * ((2 * lv_row_index) - (lib1_gv_cOLLECTION_CARD_COLUMNS - 1))) / 2));
}

int lib1_gf_CollectionCardY (int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_index <= (((lib1_gv_cOLLECTION_CARD_COLUMNS * lib1_gv_cOLLECTION_CARD_ROWS) / 2) - 1))) {
        return (((lib1_gv_cARD_HEIGHT + lib1_gv_cOLLECTION_CARD_SPACE_Y) / -2) + lib1_gf_CollectionY());
    }
    else {
        return (((lib1_gv_cARD_HEIGHT + lib1_gv_cOLLECTION_CARD_SPACE_Y) / 2) + lib1_gf_CollectionY());
    }
}

int lib1_gf_DeckHeight () {
    // Automatic Variable Declarations
    // Implementation
    return (lib1_gf_FilterHeight() + lib1_gv_sPACE_BETWEEN_COLLECTION_WINDOWS + lib1_gf_CollectionHeight());
}

int lib1_gf_DeckWidth () {
    // Automatic Variable Declarations
    // Implementation
    return ((lib1_gv_dECK_PADDING * 2) + lib1_gv_lIST_CARD_WIDTH + 30);
}

int lib1_gf_DeckX () {
    // Automatic Variable Declarations
    // Implementation
    return ((lib1_gf_CollectionWidth() + lib1_gv_sPACE_BETWEEN_COLLECTION_WINDOWS) / 2);
}

int lib1_gf_FilterHeight () {
    // Automatic Variable Declarations
    // Implementation
    return (lib1_gv_fILTER_TOP_PADDING + lib1_gv_fILTER_ICON_SIZE + lib1_gv_fILTER_TOP_PADDING);
}

int lib1_gf_FilterY () {
    // Automatic Variable Declarations
    // Implementation
    return ((lib1_gf_CollectionHeight() + lib1_gv_sPACE_BETWEEN_COLLECTION_WINDOWS) / -2);
}

int lib1_gf_DecklistBorderY (int lp_slot_index) {
    // Automatic Variable Declarations
    // Implementation
    return (lp_slot_index * lib1_gv_dECKLIST_CARD_SPACING);
}

int lib1_gf_DecklistIconY (int lp_slot_index) {
    // Automatic Variable Declarations
    // Implementation
    return ((lp_slot_index * lib1_gv_dECKLIST_CARD_SPACING) + (((lib1_gv_dECKLIST_CARD_HEIGHT - lib1_gv_dECKLIST_CARD_ICON_SIZE) / 2) + 0));
}

void lib1_gf_CalculateCardOrder () {
    // Variable Declarations
    int lv_card_id;
    int lv_sort_index;
    int lv_max_sort_index;
    bool lv_sorted;

    // Automatic Variable Declarations
    const int auto163FB8A7_ae = lib1_gv_mAX_CARD_ID;
    const int auto163FB8A7_ai = 1;
    int autoE1B84BAF_ae;
    const int autoE1B84BAF_ai = 1;

    // Variable Initialization

    // Implementation
    lv_card_id = 0;
    for ( ; ( (auto163FB8A7_ai >= 0 && lv_card_id <= auto163FB8A7_ae) || (auto163FB8A7_ai < 0 && lv_card_id >= auto163FB8A7_ae) ) ; lv_card_id += auto163FB8A7_ai ) {
        if ((lib1_gv_card[lv_card_id].lv_name != "")) {
            lib1_gv_ordered_card[lv_sort_index] = lv_card_id;
            lv_sort_index = (lv_sort_index + 1);
        }

    }
    lv_max_sort_index = (lv_sort_index - 1);
    while ((lv_sorted == false)) {
        lv_sorted = true;
        autoE1B84BAF_ae = (lv_max_sort_index - 1);
        lv_sort_index = 0;
        for ( ; ( (autoE1B84BAF_ai >= 0 && lv_sort_index <= autoE1B84BAF_ae) || (autoE1B84BAF_ai < 0 && lv_sort_index >= autoE1B84BAF_ae) ) ; lv_sort_index += autoE1B84BAF_ai ) {
            if ((lib1_gf_CardsInOrder(lib1_gv_ordered_card[lv_sort_index], lib1_gv_ordered_card[(lv_sort_index + 1)]) == false)) {
                lv_sorted = false;
                lv_card_id = lib1_gv_ordered_card[lv_sort_index];
                lib1_gv_ordered_card[lv_sort_index] = lib1_gv_ordered_card[(lv_sort_index + 1)];
                lib1_gv_ordered_card[(lv_sort_index + 1)] = lv_card_id;
            }

        }
    }
}

bool lib1_gf_CardsInOrder (int lp_first_card_id, int lp_second_card_id) {
    // Automatic Variable Declarations
    // Implementation
    if (((MaxI(lib1_gv_card[lp_first_card_id].lv_mineral, 0) + MaxI(lib1_gv_card[lp_first_card_id].lv_gas, 0)) < (MaxI(lib1_gv_card[lp_second_card_id].lv_mineral, 0) + MaxI(lib1_gv_card[lp_second_card_id].lv_gas, 0)))) {
        return true;
    }
    else if (((MaxI(lib1_gv_card[lp_first_card_id].lv_mineral, 0) + MaxI(lib1_gv_card[lp_first_card_id].lv_gas, 0)) == (MaxI(lib1_gv_card[lp_second_card_id].lv_mineral, 0) + MaxI(lib1_gv_card[lp_second_card_id].lv_gas, 0))) && (MaxI(lib1_gv_card[lp_first_card_id].lv_gas, 0) < MaxI(lib1_gv_card[lp_second_card_id].lv_gas, 0))) {
        return true;
    }
    else if (((MaxI(lib1_gv_card[lp_first_card_id].lv_mineral, 0) + MaxI(lib1_gv_card[lp_first_card_id].lv_gas, 0)) == (MaxI(lib1_gv_card[lp_second_card_id].lv_mineral, 0) + MaxI(lib1_gv_card[lp_second_card_id].lv_gas, 0))) && (MaxI(lib1_gv_card[lp_first_card_id].lv_gas, 0) == MaxI(lib1_gv_card[lp_second_card_id].lv_gas, 0)) && (StringCompare(lib1_gv_card[lp_first_card_id].lv_name, lib1_gv_card[lp_second_card_id].lv_name, c_stringNoCase) < 0)) {
        return true;
    }
    return false;
}

void lib1_gf_CreateCollectionWindow () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    DialogCreate(lib1_gf_CollectionWidthwithMargin(), lib1_gf_CollectionHeightwithMargin(), c_anchorCenter, lib1_gf_CollectionX(), lib1_gf_CollectionY(), true);
    DialogSetRenderPriority(DialogLastCreated(), 0);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    lib1_gv_collection_dialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lib1_gf_CollectionWidth(), lib1_gf_CollectionHeight(), c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_tooltip_frame_terran.dds", c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lib1_gv_collection_dialog_bg_t = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lib1_gf_CollectionWidth(), lib1_gf_CollectionHeight(), c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_tooltip_frame_zerg.dds", c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lib1_gv_collection_dialog_bg_z = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lib1_gf_CollectionWidth(), lib1_gf_CollectionHeight(), c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_tooltip_frame_protoss.dds", c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lib1_gv_collection_dialog_bg_p = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 50, 50, c_anchorCenter, (lib1_gf_CollectionWidth() / -2), 0, StringToText(""), "Assets\\Textures\\ui_glues_icons_smallpagearrow_left_normal.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    lib1_gv_collection_arrow_left = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 75, 75, c_anchorCenter, (lib1_gf_CollectionWidth() / -2), 0, StringToText(""), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    lib1_gv_collection_arrow_left_button = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 50, 50, c_anchorCenter, (lib1_gf_CollectionWidth() / 2), 0, StringToText(""), "Assets\\Textures\\ui_glues_icons_smallpagearrow_right_normal.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    lib1_gv_collection_arrow_right = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 75, 75, c_anchorCenter, (lib1_gf_CollectionWidth() / 2), 0, StringToText(""), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    lib1_gv_collection_arrow_right_button = DialogControlLastCreated();
}

void lib1_gf_OpenCollectionPage (int lp_player, int lp_page) {
    // Variable Declarations
    int lv_collection_card_index;
    int lv_card_index;
    int lv_current_page;
    int lv_current_page_card_index;
    const fixed lv_tRANSITION_TIME = 1.0;

    // Automatic Variable Declarations
    const int auto1E99D338_ae = lib1_gv_mAX_CARD_ID;
    const int auto1E99D338_ai = 1;

    // Variable Initialization

    // Implementation
    lib1_gv_player_collection[lp_player].lv_page = lp_page;
    if ((lp_page == 0)) {
        DialogControlSetVisible(lib1_gv_collection_arrow_left, PlayerGroupSingle(lp_player), false);
        DialogControlSetEnabled(lib1_gv_collection_arrow_left_button, PlayerGroupSingle(lp_player), false);
    }
    else {
        DialogControlSetVisible(lib1_gv_collection_arrow_left, PlayerGroupSingle(lp_player), true);
        DialogControlSetEnabled(lib1_gv_collection_arrow_left_button, PlayerGroupSingle(lp_player), true);
    }
    if ((lp_page == lib1_gf_MaxCollectionPage(lp_player))) {
        DialogControlSetVisible(lib1_gv_collection_arrow_right, PlayerGroupSingle(lp_player), false);
        DialogControlSetEnabled(lib1_gv_collection_arrow_right_button, PlayerGroupSingle(lp_player), false);
    }
    else {
        DialogControlSetVisible(lib1_gv_collection_arrow_right, PlayerGroupSingle(lp_player), true);
        DialogControlSetEnabled(lib1_gv_collection_arrow_right_button, PlayerGroupSingle(lp_player), true);
    }
    lv_card_index = 0;
    for ( ; ( (auto1E99D338_ai >= 0 && lv_card_index <= auto1E99D338_ae) || (auto1E99D338_ai < 0 && lv_card_index >= auto1E99D338_ae) ) ; lv_card_index += auto1E99D338_ai ) {
        if ((lib1_gv_ordered_card[lv_card_index] < 0)) {
            break;
        }
        else {
            if ((lib1_gf_CollectionCardVisible(lp_player, lib1_gv_ordered_card[lv_card_index]) == true)) {
                if ((lv_current_page < lp_page) && (lv_current_page_card_index < ((lib1_gv_cOLLECTION_CARD_ROWS * lib1_gv_cOLLECTION_CARD_COLUMNS) - 1))) {
                    lv_current_page_card_index = (lv_current_page_card_index + 1);
                }
                else if ((lv_current_page < lp_page) && (lv_current_page_card_index == ((lib1_gv_cOLLECTION_CARD_ROWS * lib1_gv_cOLLECTION_CARD_COLUMNS) - 1))) {
                    lv_current_page_card_index = 0;
                    lv_current_page = (lv_current_page + 1);
                }
                else if ((lv_current_page == lp_page) && (lv_current_page_card_index < ((lib1_gv_cOLLECTION_CARD_ROWS * lib1_gv_cOLLECTION_CARD_COLUMNS) - 1))) {
                    lib1_gv_player_collection[lp_player].lv_collection_card_id[lv_current_page_card_index] = lib1_gv_ordered_card[lv_card_index];
                    lib1_gv_player_collection[lp_player].lv_collection_card_transformed[lv_current_page_card_index] = false;
                    lib1_gf_CreateCard(lp_player, lib1_gf_CollectionCardX(lv_current_page_card_index), lib1_gf_CollectionCardY(lv_current_page_card_index), lib1_gv_ordered_card[lv_card_index], "collection", lv_current_page_card_index, "", 0);
                    lib1_gf_SetCollectionCardEnabledDisabled(lp_player, lv_current_page_card_index);
                    lv_current_page_card_index = (lv_current_page_card_index + 1);
                }
                else if ((lv_current_page == lp_page) && (lv_current_page_card_index == ((lib1_gv_cOLLECTION_CARD_ROWS * lib1_gv_cOLLECTION_CARD_COLUMNS) - 1))) {
                    lib1_gv_player_collection[lp_player].lv_collection_card_id[lv_current_page_card_index] = lib1_gv_ordered_card[lv_card_index];
                    lib1_gv_player_collection[lp_player].lv_collection_card_transformed[lv_current_page_card_index] = false;
                    lib1_gf_CreateCard(lp_player, lib1_gf_CollectionCardX(lv_current_page_card_index), lib1_gf_CollectionCardY(lv_current_page_card_index), lib1_gv_ordered_card[lv_card_index], "collection", lv_current_page_card_index, "", 0);
                    lib1_gf_SetCollectionCardEnabledDisabled(lp_player, lv_current_page_card_index);
                    break;
                }
            }

        }
    }
}

void lib1_gf_SetCollectionCardEnabledDisabled (int lp_player, int lp_page_slot_index) {
    // Automatic Variable Declarations
    // Implementation
    if (((lib1_gv_player_collection[lp_player].lv_filter.lv_crafting_mode == true) || (lib1_gf_CountinDecklist(lp_player, lib1_gv_player_collection[lp_player].lv_filter.lv_race, lib1_gv_player_collection[lp_player].lv_current_decklist, lib1_gv_player_collection[lp_player].lv_collection_card_id[lp_page_slot_index]) < lib1_gf_CardOwnedCountCapped(lp_player, lib1_gv_player_collection[lp_player].lv_collection_card_id[lp_page_slot_index])))) {
        DialogControlSetVisible(lib1_gv_collection_card_button[lp_page_slot_index], PlayerGroupSingle(lp_player), true);
        DialogControlSetEnabled(lib1_gv_collection_card_button[lp_page_slot_index], PlayerGroupSingle(lp_player), true);
        lib1_gv_player_collection[lp_player].lv_collection_card_enabled[lp_page_slot_index] = true;
        DialogSetEnabled(lib1_gv_player_collection[lp_player].lv_collection_card_ui[lp_page_slot_index].lv_dialog, true);
    }
    else {
        DialogControlSetVisible(lib1_gv_collection_card_button[lp_page_slot_index], PlayerGroupSingle(lp_player), true);
        if ((lib1_gv_shift[lp_player] == false)) {
            DialogControlSetEnabled(lib1_gv_collection_card_button[lp_page_slot_index], PlayerGroupSingle(lp_player), false);
            lib1_gv_player_collection[lp_player].lv_collection_card_enabled[lp_page_slot_index] = false;
        }

        DialogSetEnabled(lib1_gv_player_collection[lp_player].lv_collection_card_ui[lp_page_slot_index].lv_dialog, false);
    }
}

void lib1_gf_CloseCurrentCollectionPage (int lp_player) {
    // Variable Declarations
    int lv_card_index;

    // Automatic Variable Declarations
    int autoFB4E80C8_ae;
    const int autoFB4E80C8_ai = 1;

    // Variable Initialization

    // Implementation
    if ((lib1_gv_player_collection[lp_player].lv_filter.lv_crafting_mode == true)) {
        lib1_gf_ResetCraftingWindow(lp_player);
    }

    autoFB4E80C8_ae = ((lib1_gv_cOLLECTION_CARD_ROWS * lib1_gv_cOLLECTION_CARD_COLUMNS) - 1);
    lv_card_index = 0;
    for ( ; ( (autoFB4E80C8_ai >= 0 && lv_card_index <= autoFB4E80C8_ae) || (autoFB4E80C8_ai < 0 && lv_card_index >= autoFB4E80C8_ae) ) ; lv_card_index += autoFB4E80C8_ai ) {
        if ((lib1_gv_player_collection[lp_player].lv_collection_card_ui[lv_card_index].lv_dialog != c_invalidDialogId)) {
            DialogDestroy(lib1_gv_player_collection[lp_player].lv_collection_card_ui[lv_card_index].lv_dialog);
        }

        if ((lib1_gv_player_collection[lp_player].lv_collection_card_count[lv_card_index].lv_dialog != c_invalidDialogId)) {
            DialogDestroy(lib1_gv_player_collection[lp_player].lv_collection_card_count[lv_card_index].lv_dialog);
        }

        lib1_gv_player_collection[lp_player].lv_collection_card_ui[lv_card_index].lv_dialog = c_invalidDialogId;
        DialogControlSetEnabled(lib1_gv_collection_card_button[lv_card_index], PlayerGroupSingle(lp_player), false);
        DialogControlSetVisible(lib1_gv_collection_card_button[lv_card_index], PlayerGroupSingle(lp_player), false);
    }
}

int lib1_gf_MaxCollectionPage (int lp_player) {
    // Variable Declarations
    int lv_card_id;
    int lv_count;

    // Automatic Variable Declarations
    const int auto2D1CDE13_ae = lib1_gv_mAX_CARD_ID;
    const int auto2D1CDE13_ai = 1;

    // Variable Initialization

    // Implementation
    lv_card_id = 0;
    for ( ; ( (auto2D1CDE13_ai >= 0 && lv_card_id <= auto2D1CDE13_ae) || (auto2D1CDE13_ai < 0 && lv_card_id >= auto2D1CDE13_ae) ) ; lv_card_id += auto2D1CDE13_ai ) {
        if ((lib1_gv_ordered_card[lv_card_id] >= 0) && (lib1_gf_CollectionCardVisible(lp_player, lib1_gv_ordered_card[lv_card_id]) == true)) {
            lv_count = (lv_count + 1);
        }

    }
    if ((lv_count == 0)) {
        return 0;
    }
    else if ((ModI(lv_count, (lib1_gv_cOLLECTION_CARD_ROWS * lib1_gv_cOLLECTION_CARD_COLUMNS)) == 0)) {
        return ((lv_count / (lib1_gv_cOLLECTION_CARD_ROWS * lib1_gv_cOLLECTION_CARD_COLUMNS)) - 1);
    }
    return (CeilingI((IntToFixed(lv_count) / (lib1_gv_cOLLECTION_CARD_ROWS * lib1_gv_cOLLECTION_CARD_COLUMNS))) - 1);
}

void lib1_gf_InitializeCollectionFilters (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((PlayerRace(lp_player) == "Terr")) {
        lib1_gv_player_collection[lp_player].lv_filter.lv_race = lib1_gv_tERRAN;
    }
    else if ((PlayerRace(lp_player) == "Zerg")) {
        lib1_gv_player_collection[lp_player].lv_filter.lv_race = lib1_gv_zERG;
    }
    else if ((PlayerRace(lp_player) == "Prot")) {
        lib1_gv_player_collection[lp_player].lv_filter.lv_race = lib1_gv_pROTOSS;
    }
}

void lib1_gf_TransformCollectionCard (int lp_player, int lp_index) {
    // Variable Declarations
    int lv_old_card;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_old_card = c_invalidDialogId;

    // Implementation
    lv_old_card = lib1_gv_player_collection[lp_player].lv_collection_card_ui[lp_index].lv_dialog;
    if ((lib1_gv_player_collection[lp_player].lv_collection_card_transformed[lp_index] == false)) {
        lib1_gf_CreateCard(lp_player, lib1_gf_CollectionCardX(lp_index), lib1_gf_CollectionCardY(lp_index), lib1_gv_card[lib1_gv_player_collection[lp_player].lv_collection_card_id[lp_index]].lv_transform, "collection", lp_index, "transform", lib1_gv_player_collection[lp_player].lv_collection_card_id[lp_index]);
    }
    else {
        lib1_gf_CreateCard(lp_player, lib1_gf_CollectionCardX(lp_index), lib1_gf_CollectionCardY(lp_index), lib1_gv_player_collection[lp_player].lv_collection_card_id[lp_index], "collection", lp_index, "transform", lib1_gv_player_collection[lp_player].lv_collection_card_id[lp_index]);
    }
    DialogSetRenderPriority(lv_old_card, (DialogGetRenderPriority(lib1_gv_player_collection[lp_player].lv_collection_card_ui[lp_index].lv_dialog) + 1));
    lib1_gf_FadeandDestroyDialog(lv_old_card, 0.5);
    lib1_gv_player_collection[lp_player].lv_collection_card_transformed[lp_index] = !(lib1_gv_player_collection[lp_player].lv_collection_card_transformed[lp_index]);
    lib1_gf_SetCollectionCardEnabledDisabled(lp_player, lp_index);
}

void lib1_gf_EnableCollectionShiftClick (int lp_player) {
    // Variable Declarations
    int lv_page_slot_index;

    // Automatic Variable Declarations
    const int autoD8C4616E_ae = 7;
    const int autoD8C4616E_ai = 1;

    // Variable Initialization

    // Implementation
    lv_page_slot_index = 0;
    for ( ; ( (autoD8C4616E_ai >= 0 && lv_page_slot_index <= autoD8C4616E_ae) || (autoD8C4616E_ai < 0 && lv_page_slot_index >= autoD8C4616E_ae) ) ; lv_page_slot_index += autoD8C4616E_ai ) {
        if ((lib1_gv_card[lib1_gv_player_collection[lp_player].lv_collection_card_id[lv_page_slot_index]].lv_transform >= 0)) {
            DialogControlSetEnabled(lib1_gv_collection_card_button[lv_page_slot_index], PlayerGroupSingle(lp_player), true);
        }

    }
}

void lib1_gf_CreateDeckWindow () {
    // Automatic Variable Declarations
    // Implementation
    DialogCreate(lib1_gf_DeckWidth(), lib1_gf_DeckHeight(), c_anchorCenter, lib1_gf_DeckX(), 0, true);
    DialogSetRenderPriority(DialogLastCreated(), 0);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    lib1_gv_deck_dialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lib1_gf_DeckWidth(), lib1_gf_DeckHeight(), c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_tooltip_frame_terran.dds", c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lib1_gv_deck_dialog_bg_t = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lib1_gf_DeckWidth(), lib1_gf_DeckHeight(), c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_tooltip_frame_zerg.dds", c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lib1_gv_deck_dialog_bg_z = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lib1_gf_DeckWidth(), lib1_gf_DeckHeight(), c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_tooltip_frame_protoss.dds", c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lib1_gv_deck_dialog_bg_p = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), (lib1_gf_DeckWidth() - 80), lib1_gv_dECK_NAME_HEIGHT, c_anchorTop, 0, lib1_gv_dECK_PADDING, StringExternal("Param/Value/lib_1_44FD4DDC"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "DecklistName", PlayerGroupAll());
    lib1_gv_current_deck_name = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeEditBox);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, 0, (lib1_gv_dECK_PADDING - 3));
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), (lib1_gf_DeckWidth() - 80), (lib1_gv_dECK_NAME_HEIGHT + 6));
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "DecklistRename", PlayerGroupAll());
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lib1_gv_change_deck_name_edit_box = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lib1_gv_dECKLIST_ICON_SIZE, lib1_gv_dECKLIST_ICON_SIZE, c_anchorTopRight, 10, lib1_gv_dECK_PADDING, StringToText(""), lib1_gv_eDIT_ICON, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    lib1_gv_change_deck_name_icon = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lib1_gv_dECKLIST_ICON_SIZE, lib1_gv_dECKLIST_ICON_SIZE, c_anchorTopRight, 10, lib1_gv_dECK_PADDING, StringExternal("Param/Value/lib_1_4FB08AF8"), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    lib1_gv_change_deck_name_button = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lib1_gv_dECKLIST_ICON_SIZE, lib1_gv_dECKLIST_ICON_SIZE, c_anchorTopRight, 10, lib1_gv_dECK_PADDING, StringToText(""), lib1_gv_cHECK_ICON, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lib1_gv_save_deck_name_icon = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lib1_gv_dECKLIST_ICON_SIZE, lib1_gv_dECKLIST_ICON_SIZE, c_anchorTopRight, 10, lib1_gv_dECK_PADDING, StringExternal("Param/Value/lib_1_30F15157"), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lib1_gv_save_deck_name_button = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 195, lib1_gv_cHANGE_DECK_BUTTON_HEIGHT, c_anchorTop, 0, (lib1_gv_dECK_PADDING + lib1_gv_dECK_NAME_HEIGHT), StringToText(""), StringExternal("Param/Value/lib_1_E226FDD2"), "");
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CollectionEditorSmallText", PlayerGroupAll());
    lib1_gv_change_decks_button = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lib1_gv_sAVE_DECK_BUTTON_WIDTH, lib1_gv_cHANGE_DECK_BUTTON_HEIGHT, c_anchorBottom, (lib1_gv_dECK_COUNT_LABEL_WIDTH / -2), lib1_gv_dECK_PADDING, StringExternal("Param/Value/lib_1_6992E723"), StringExternal("Param/Value/lib_1_8B1A04EB"), "");
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CollectionEditorSmallText", PlayerGroupAll());
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    lib1_gv_save_deck_button = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lib1_gv_dECK_COUNT_LABEL_WIDTH, lib1_gv_cHANGE_DECK_BUTTON_HEIGHT, c_anchorBottom, (lib1_gv_sAVE_DECK_BUTTON_WIDTH / 2), lib1_gv_dECK_PADDING, StringExternal("Param/Value/lib_1_CA26633A"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "DeckCardCount", PlayerGroupAll());
    lib1_gv_decklist_card_count = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 33, 39, c_anchorCenter, 0, -360, StringToText(""), "Assets\\Textures\\ui_glues_icons_smallpagearrow_left_normal.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), 90, PlayerGroupAll());
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lib1_gv_decklist_arrow_up = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 50, 50, c_anchorCenter, 0, -360, StringToText(""), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    lib1_gv_decklist_arrow_up_button = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 33, 39, c_anchorCenter, 0, 413, StringToText(""), "Assets\\Textures\\ui_glues_icons_smallpagearrow_right_normal.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), 90, PlayerGroupAll());
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lib1_gv_decklist_arrow_down = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 50, 50, c_anchorCenter, 0, 413, StringToText(""), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    lib1_gv_decklist_arrow_down_button = DialogControlLastCreated();
    DialogCreate(lib1_gf_DeckWidth(), (lib1_gf_DeckHeight() - (lib1_gv_cOLLECTION_CARD_PADDING + lib1_gv_dECK_NAME_HEIGHT + 160 + lib1_gv_cOLLECTION_CARD_PADDING)), c_anchorCenter, lib1_gf_DeckX(), lib1_gv_dECKLIST_Y, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    DialogSetRenderPriority(DialogLastCreated(), 50);
    lib1_gv_decklist_dialog = DialogLastCreated();
}

void lib1_gf_OpenDeckWindow (int lp_player) {
    // Variable Declarations
    int lv_test;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    DialogSetVisible(lib1_gv_deck_dialog, PlayerGroupSingle(lp_player), true);
    DialogSetVisible(lib1_gv_decklist_dialog, PlayerGroupSingle(lp_player), true);
    DialogSetVisible(lib1_gv_crafting_dialog, PlayerGroupSingle(lp_player), false);
    lib1_gf_ResetCraftingWindow(lp_player);
    lib1_gf_ShowHideDecklistArrows(lp_player);
    lib1_gf_UpdateDecklistUI(lp_player);
}

trigger auto_lib1_gf_AddCardtoCurrentDeck_Trigger = null;
int auto_lib1_gf_AddCardtoCurrentDeck_lp_player;
int auto_lib1_gf_AddCardtoCurrentDeck_lp_page_slot_index;

void lib1_gf_AddCardtoCurrentDeck (int lp_player, int lp_page_slot_index) {
    auto_lib1_gf_AddCardtoCurrentDeck_lp_player = lp_player;
    auto_lib1_gf_AddCardtoCurrentDeck_lp_page_slot_index = lp_page_slot_index;

    if (auto_lib1_gf_AddCardtoCurrentDeck_Trigger == null) {
        auto_lib1_gf_AddCardtoCurrentDeck_Trigger = TriggerCreate("auto_lib1_gf_AddCardtoCurrentDeck_TriggerFunc");
    }

    TriggerExecute(auto_lib1_gf_AddCardtoCurrentDeck_Trigger, false, false);
}

bool auto_lib1_gf_AddCardtoCurrentDeck_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_lib1_gf_AddCardtoCurrentDeck_lp_player;
    int lp_page_slot_index = auto_lib1_gf_AddCardtoCurrentDeck_lp_page_slot_index;

    // Variable Declarations
    int lv_deck_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lib1_gf_DecklistTotalCardCount(lp_player, lib1_gv_player_collection[lp_player].lv_filter.lv_race, lib1_gv_player_collection[lp_player].lv_current_decklist) < 40)) {
        lib1_gf_AddCardtoDecklist(lp_player, lib1_gv_player_collection[lp_player].lv_filter.lv_race, lib1_gv_player_collection[lp_player].lv_current_decklist, lib1_gv_player_collection[lp_player].lv_collection_card_id[lp_page_slot_index]);
        lib1_gf_SetCollectionCardEnabledDisabled(lp_player, lp_page_slot_index);
        lib1_gf_UpdateDecklistUI(lp_player);
        lib1_gf_ShowHideDecklistArrows(lp_player);
        lib1_gv_player_collection[lp_player].lv_decklist[lib1_gv_player_collection[lp_player].lv_filter.lv_race][lib1_gv_player_collection[lp_player].lv_current_decklist].lv_unsaved_changes = true;
    }
    else {
        SoundPlayForPlayer(SoundLink("UI_GenericError", 0), c_maxPlayers, PlayerGroupSingle(lp_player), 100.0, 0.0);
        libNtve_gf_SetDialogItemColor(lib1_gv_decklist_card_count, Color(100.00, 0.00, 0.00), PlayerGroupSingle(lp_player));
        Wait(0.5, c_timeGame);
        libNtve_gf_SetDialogItemColor(lib1_gv_decklist_card_count, Color(100,100,100), PlayerGroupSingle(lp_player));
    }
    return true;
}

trigger auto_lib1_gf_RemoveCardfromCurrentDeck_Trigger = null;
int auto_lib1_gf_RemoveCardfromCurrentDeck_lp_player;
int auto_lib1_gf_RemoveCardfromCurrentDeck_lp_deck_slot_index;

void lib1_gf_RemoveCardfromCurrentDeck (int lp_player, int lp_deck_slot_index) {
    auto_lib1_gf_RemoveCardfromCurrentDeck_lp_player = lp_player;
    auto_lib1_gf_RemoveCardfromCurrentDeck_lp_deck_slot_index = lp_deck_slot_index;

    if (auto_lib1_gf_RemoveCardfromCurrentDeck_Trigger == null) {
        auto_lib1_gf_RemoveCardfromCurrentDeck_Trigger = TriggerCreate("auto_lib1_gf_RemoveCardfromCurrentDeck_TriggerFunc");
    }

    TriggerExecute(auto_lib1_gf_RemoveCardfromCurrentDeck_Trigger, false, false);
}

bool auto_lib1_gf_RemoveCardfromCurrentDeck_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_lib1_gf_RemoveCardfromCurrentDeck_lp_player;
    int lp_deck_slot_index = auto_lib1_gf_RemoveCardfromCurrentDeck_lp_deck_slot_index;

    // Variable Declarations
    int lv_page_card_index;

    // Automatic Variable Declarations
    int auto212555FC_ae;
    const int auto212555FC_ai = 1;

    // Variable Initialization

    // Implementation
    lib1_gf_RemoveCardfromDecklist(lp_player, lib1_gv_player_collection[lp_player].lv_filter.lv_race, lib1_gv_player_collection[lp_player].lv_current_decklist, lib1_gv_player_collection[lp_player].lv_decklist[lib1_gv_player_collection[lp_player].lv_filter.lv_race][lib1_gv_player_collection[lp_player].lv_current_decklist].lv_card_id[lp_deck_slot_index]);
    auto212555FC_ae = ((lib1_gv_cOLLECTION_CARD_ROWS * lib1_gv_cOLLECTION_CARD_COLUMNS) - 1);
    lv_page_card_index = 0;
    for ( ; ( (auto212555FC_ai >= 0 && lv_page_card_index <= auto212555FC_ae) || (auto212555FC_ai < 0 && lv_page_card_index >= auto212555FC_ae) ) ; lv_page_card_index += auto212555FC_ai ) {
        if ((lib1_gv_player_collection[lp_player].lv_collection_card_ui[lv_page_card_index].lv_dialog != c_invalidDialogId)) {
            lib1_gf_SetCollectionCardEnabledDisabled(lp_player, lv_page_card_index);
        }

    }
    lib1_gf_UpdateDecklistUI(lp_player);
    lib1_gf_ShowHideDecklistArrows(lp_player);
    lib1_gv_player_collection[lp_player].lv_decklist[lib1_gv_player_collection[lp_player].lv_filter.lv_race][lib1_gv_player_collection[lp_player].lv_current_decklist].lv_unsaved_changes = true;
    return true;
}

void lib1_gf_UpdateDecklistUI (int lp_player) {
    // Variable Declarations
    int lv_deck_index;

    // Automatic Variable Declarations
    const int autoB0F4EF41_ae = lib1_gv_dECKLIST_LIMIT;
    const int autoB0F4EF41_ai = 1;

    // Variable Initialization

    // Implementation
    lv_deck_index = 0;
    for ( ; ( (autoB0F4EF41_ai >= 0 && lv_deck_index <= autoB0F4EF41_ae) || (autoB0F4EF41_ai < 0 && lv_deck_index >= autoB0F4EF41_ae) ) ; lv_deck_index += autoB0F4EF41_ai ) {
        if ((lv_deck_index >= lib1_gf_DecklistArrayLength(lp_player, lib1_gv_player_collection[lp_player].lv_filter.lv_race, lib1_gv_player_collection[lp_player].lv_current_decklist)) && (lib1_gv_player_collection[lp_player].lv_decklist_border[lv_deck_index] == c_invalidDialogControlId)) {
            break;
        }
        else if ((lv_deck_index >= lib1_gf_DecklistArrayLength(lp_player, lib1_gv_player_collection[lp_player].lv_filter.lv_race, lib1_gv_player_collection[lp_player].lv_current_decklist)) && (lib1_gv_player_collection[lp_player].lv_decklist_border[lv_deck_index] != c_invalidDialogControlId)) {
            lib1_gf_DestroyDecklistCard(lp_player, lv_deck_index);
        }
        else if ((lib1_gv_player_collection[lp_player].lv_decklist_border[lv_deck_index] == c_invalidDialogControlId)) {
            lib1_gf_CreateDecklistCard(lp_player, lib1_gv_player_collection[lp_player].lv_decklist[lib1_gv_player_collection[lp_player].lv_filter.lv_race][lib1_gv_player_collection[lp_player].lv_current_decklist].lv_card_id[lv_deck_index], lv_deck_index);
            lib1_gf_UpdateDecklistCard(lp_player, lib1_gv_player_collection[lp_player].lv_decklist[lib1_gv_player_collection[lp_player].lv_filter.lv_race][lib1_gv_player_collection[lp_player].lv_current_decklist].lv_card_id[lv_deck_index], lv_deck_index);
        }
        else if (true) {
            lib1_gf_UpdateDecklistCard(lp_player, lib1_gv_player_collection[lp_player].lv_decklist[lib1_gv_player_collection[lp_player].lv_filter.lv_race][lib1_gv_player_collection[lp_player].lv_current_decklist].lv_card_id[lv_deck_index], lv_deck_index);
        }
    }
    libNtve_gf_SetDialogItemText(lib1_gv_decklist_card_count, (IntToText(lib1_gf_DecklistTotalCardCount(lp_player, lib1_gv_player_collection[lp_player].lv_filter.lv_race, lib1_gv_player_collection[lp_player].lv_current_decklist)) + StringExternal("Param/Value/lib_1_4E7A0915")), PlayerGroupSingle(lp_player));
    if ((lib1_gf_DecklistLegal(lp_player, lib1_gv_player_collection[lp_player].lv_filter.lv_race, lib1_gv_player_collection[lp_player].lv_current_decklist) == true) && (lib1_gv_player_collection[lp_player].lv_decklist[lib1_gv_player_collection[lp_player].lv_filter.lv_race][lib1_gv_player_collection[lp_player].lv_current_decklist].lv_unsaved_changes == true)) {
        DialogControlSetEnabled(lib1_gv_save_deck_button, PlayerGroupSingle(lp_player), true);
    }
    else {
        DialogControlSetEnabled(lib1_gv_save_deck_button, PlayerGroupSingle(lp_player), false);
    }
    lib1_gf_ShowHideDecklistArrows(lp_player);
}

void lib1_gf_LoadCurrentDecklist (int lp_player) {
    // Variable Declarations
    int lv_deck_index;

    // Automatic Variable Declarations
    const int autoC9CB5277_ae = lib1_gv_dECKLIST_LIMIT;
    const int autoC9CB5277_ai = 1;

    // Variable Initialization

    // Implementation
    lv_deck_index = 0;
    for ( ; ( (autoC9CB5277_ai >= 0 && lv_deck_index <= autoC9CB5277_ae) || (autoC9CB5277_ai < 0 && lv_deck_index >= autoC9CB5277_ae) ) ; lv_deck_index += autoC9CB5277_ai ) {
        if ((lib1_gv_player_collection[lp_player].lv_decklist[lib1_gv_player_collection[lp_player].lv_filter.lv_race][lib1_gv_player_collection[lp_player].lv_current_decklist].lv_count[lv_deck_index] > 0)) {
            lib1_gf_CreateDecklistCard(lp_player, lib1_gv_player_collection[lp_player].lv_decklist[lib1_gv_player_collection[lp_player].lv_filter.lv_race][lib1_gv_player_collection[lp_player].lv_current_decklist].lv_card_id[lv_deck_index], lv_deck_index);
        }

    }
    libNtve_gf_SetDialogItemText(lib1_gv_current_deck_name, StringToText(lib1_gv_player_collection[lp_player].lv_decklist[lib1_gv_player_collection[lp_player].lv_filter.lv_race][lib1_gv_player_collection[lp_player].lv_current_decklist].lv_name), PlayerGroupSingle(lp_player));
    lib1_gf_UpdateDecklistUI(lp_player);
}

void lib1_gf_CloseCurrentDecklist (int lp_player) {
    // Variable Declarations
    int lv_deck_index;

    // Automatic Variable Declarations
    const int autoC812956F_ae = lib1_gv_dECKLIST_LIMIT;
    const int autoC812956F_ai = 1;

    // Variable Initialization

    // Implementation
    lv_deck_index = 0;
    for ( ; ( (autoC812956F_ai >= 0 && lv_deck_index <= autoC812956F_ae) || (autoC812956F_ai < 0 && lv_deck_index >= autoC812956F_ae) ) ; lv_deck_index += autoC812956F_ai ) {
        if ((lib1_gv_player_collection[lp_player].lv_decklist[lib1_gv_player_collection[lp_player].lv_filter.lv_race][lib1_gv_player_collection[lp_player].lv_current_decklist].lv_count[lv_deck_index] > 0)) {
            lib1_gf_DestroyDecklistCard(lp_player, lv_deck_index);
        }

    }
}

void lib1_gf_CreateDecklistCard (int lp_player, int lp_card_id, int lp_decklist_slot) {
    // Variable Declarations
    string lv_frame;
    string lv_button_hover;
    string lv_button;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lib1_gv_player_collection[lp_player].lv_filter.lv_race == lib1_gv_tERRAN)) {
        lv_frame = "Assets\\Textures\\ui_help_frame_tips_portrait_terran.dds";
        lv_button = "Assets\\Textures\\ui_button_generic_normalpressed_terran.dds";
        lv_button_hover = "Assets\\Textures\\ui_button_generic_normaloverpressedover_terran.dds";
    }
    else if ((lib1_gv_player_collection[lp_player].lv_filter.lv_race == lib1_gv_zERG)) {
        lv_frame = "Assets\\Textures\\ui_help_frame_tips_portrait_zerg.dds";
        lv_button = "Assets\\Textures\\ui_button_generic_normalpressed_zerg.dds";
        lv_button_hover = "Assets\\Textures\\ui_button_generic_normaloverpressedover_zerg.dds";
    }
    else if ((lib1_gv_player_collection[lp_player].lv_filter.lv_race == lib1_gv_pROTOSS)) {
        lv_frame = "Assets\\Textures\\ui_help_frame_tips_portrait_protoss.dds";
        lv_button = "Assets\\Textures\\ui_button_generic_normalpressed_protoss.dds";
        lv_button_hover = "Assets\\Textures\\ui_button_generic_normaloverpressedover_protoss.dds";
    }
    libNtve_gf_CreateDialogItemImage(lib1_gv_decklist_dialog, lib1_gv_dECKLIST_CARD_ICON_SIZE, lib1_gv_dECKLIST_CARD_ICON_SIZE, c_anchorTop, (lib1_gv_dECKLIST_ICON_X - lib1_gv_dECKLIST_CARD_ICON_SIZE), lib1_gf_DecklistIconY(lp_decklist_slot), StringToText(""), lib1_gv_card[lp_card_id].lv_image, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(lp_player), true);
    lib1_gv_player_collection[lp_player].lv_decklist_image[lp_decklist_slot] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(lib1_gv_decklist_dialog, lib1_gv_dECKLIST_CARD_ICON_SIZE, lib1_gv_dECKLIST_CARD_ICON_SIZE, c_anchorTop, lib1_gv_dECKLIST_ICON_X, lib1_gf_DecklistIconY(lp_decklist_slot), StringToText(""), "Assets\\Textures\\icon-mineral.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(lp_player), true);
    lib1_gv_player_collection[lp_player].lv_decklist_mineral_icon[lp_decklist_slot] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(lib1_gv_decklist_dialog, lib1_gv_dECKLIST_CARD_ICON_SIZE, lib1_gv_dECKLIST_CARD_ICON_SIZE, c_anchorTop, (lib1_gv_dECKLIST_ICON_X + lib1_gv_dECKLIST_CARD_ICON_SIZE), lib1_gf_DecklistIconY(lp_decklist_slot), StringToText(""), "Assets\\Textures\\icon-gas-terran.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(lp_player), true);
    lib1_gv_player_collection[lp_player].lv_decklist_gas_icon[lp_decklist_slot] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(lib1_gv_decklist_dialog, (lib1_gf_DeckWidth() - 80), lib1_gv_dECKLIST_CARD_HEIGHT, c_anchorTop, -10, lib1_gf_DecklistBorderY(lp_decklist_slot), StringToText(""), lv_frame, c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(lp_player), true);
    lib1_gv_player_collection[lp_player].lv_decklist_border[lp_decklist_slot] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(lib1_gv_decklist_dialog, lib1_gv_dECKLIST_CARD_ICON_SIZE, lib1_gv_dECKLIST_CARD_ICON_SIZE, c_anchorTop, (lib1_gv_dECKLIST_ICON_X + lib1_gv_dECKLIST_CARD_ICON_SIZE + lib1_gv_dECKLIST_CARD_ICON_SIZE + 7), lib1_gf_DecklistIconY(lp_decklist_slot), (StringExternal("Param/Value/lib_1_AFF3B495") + IntToText(lib1_gf_CountinDecklist(lp_player, lib1_gv_player_collection[lp_player].lv_filter.lv_race, lib1_gv_player_collection[lp_player].lv_current_decklist, lp_card_id))), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CardListCount", PlayerGroupAll());
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(lp_player), true);
    lib1_gv_player_collection[lp_player].lv_decklist_count_text[lp_decklist_slot] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(lib1_gv_decklist_dialog, (lib1_gf_DeckWidth() - 80), lib1_gv_dECKLIST_CARD_HEIGHT, c_anchorTop, -10, lib1_gf_DecklistBorderY(lp_decklist_slot), StringToText(""), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 90.0);
    libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), lv_button_hover, PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), lv_button, PlayerGroupAll());
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(lp_player), true);
    lib1_gv_player_collection[lp_player].lv_decklist_button[lp_decklist_slot] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(lib1_gv_decklist_dialog, (lib1_gf_DeckWidth() - 90), lib1_gv_dECKLIST_CARD_HEIGHT, c_anchorTop, 0, (lib1_gf_DecklistBorderY(lp_decklist_slot) + 1), StringToText(lib1_gv_card[lp_card_id].lv_name), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CardNameList", PlayerGroupAll());
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(lp_player), true);
    lib1_gv_player_collection[lp_player].lv_decklist_name[lp_decklist_slot] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(lib1_gv_decklist_dialog, lib1_gv_dECKLIST_CARD_ICON_SIZE, lib1_gv_dECKLIST_CARD_ICON_SIZE, c_anchorTop, (lib1_gv_dECKLIST_ICON_X + 2), (lib1_gf_DecklistIconY(lp_decklist_slot) + 2), IntToText(MaxI(lib1_gv_card[lp_card_id].lv_mineral, 0)), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CardCostTiny", PlayerGroupAll());
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(lp_player), true);
    lib1_gv_player_collection[lp_player].lv_decklist_mineral_cost[lp_decklist_slot] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(lib1_gv_decklist_dialog, lib1_gv_dECKLIST_CARD_ICON_SIZE, lib1_gv_dECKLIST_CARD_ICON_SIZE, c_anchorTop, ((lib1_gv_dECKLIST_ICON_X + lib1_gv_dECKLIST_CARD_ICON_SIZE) + 2), (lib1_gf_DecklistIconY(lp_decklist_slot) + 2), IntToText(MaxI(lib1_gv_card[lp_card_id].lv_gas, 0)), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CardCostTiny", PlayerGroupAll());
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(lp_player), true);
    lib1_gv_player_collection[lp_player].lv_decklist_gas_cost[lp_decklist_slot] = DialogControlLastCreated();
}

void lib1_gf_UpdateDecklistCard (int lp_player, int lp_card_id, int lp_decklist_slot) {
    // Variable Declarations
    string lv_frame;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    DialogControlSetPosition(lib1_gv_player_collection[lp_player].lv_decklist_name[lp_decklist_slot], PlayerGroupSingle(lp_player), c_anchorTop, 0, ((lib1_gf_DecklistBorderY(lp_decklist_slot) + 1) + (lib1_gv_player_collection[lp_player].lv_scroll_level * lib1_gv_dECKLIST_CARD_SPACING)));
    libNtve_gf_SetDialogItemText(lib1_gv_player_collection[lp_player].lv_decklist_name[lp_decklist_slot], StringToText(lib1_gv_card[lp_card_id].lv_cname), PlayerGroupSingle(lp_player));
    DialogControlSetPosition(lib1_gv_player_collection[lp_player].lv_decklist_image[lp_decklist_slot], PlayerGroupSingle(lp_player), c_anchorTop, (lib1_gv_dECKLIST_ICON_X - lib1_gv_dECKLIST_CARD_ICON_SIZE), (lib1_gf_DecklistIconY(lp_decklist_slot) + (lib1_gv_player_collection[lp_player].lv_scroll_level * lib1_gv_dECKLIST_CARD_SPACING)));
    libNtve_gf_SetDialogItemImage(lib1_gv_player_collection[lp_player].lv_decklist_image[lp_decklist_slot], lib1_gv_card[lp_card_id].lv_image, PlayerGroupSingle(lp_player));
    DialogControlSetPosition(lib1_gv_player_collection[lp_player].lv_decklist_mineral_icon[lp_decklist_slot], PlayerGroupSingle(lp_player), c_anchorTop, lib1_gv_dECKLIST_ICON_X, (lib1_gf_DecklistIconY(lp_decklist_slot) + (lib1_gv_player_collection[lp_player].lv_scroll_level * lib1_gv_dECKLIST_CARD_SPACING)));
    DialogControlSetPosition(lib1_gv_player_collection[lp_player].lv_decklist_mineral_cost[lp_decklist_slot], PlayerGroupSingle(lp_player), c_anchorTop, (lib1_gv_dECKLIST_ICON_X + 2), ((lib1_gf_DecklistIconY(lp_decklist_slot) + 2) + (lib1_gv_player_collection[lp_player].lv_scroll_level * lib1_gv_dECKLIST_CARD_SPACING)));
    libNtve_gf_SetDialogItemText(lib1_gv_player_collection[lp_player].lv_decklist_mineral_cost[lp_decklist_slot], IntToText(MaxI(lib1_gv_card[lp_card_id].lv_mineral, 0)), PlayerGroupSingle(lp_player));
    DialogControlSetPosition(lib1_gv_player_collection[lp_player].lv_decklist_gas_icon[lp_decklist_slot], PlayerGroupSingle(lp_player), c_anchorTop, (lib1_gv_dECKLIST_ICON_X + lib1_gv_dECKLIST_CARD_ICON_SIZE), (lib1_gf_DecklistIconY(lp_decklist_slot) + (lib1_gv_player_collection[lp_player].lv_scroll_level * lib1_gv_dECKLIST_CARD_SPACING)));
    DialogControlSetPosition(lib1_gv_player_collection[lp_player].lv_decklist_gas_cost[lp_decklist_slot], PlayerGroupSingle(lp_player), c_anchorTop, ((lib1_gv_dECKLIST_ICON_X + lib1_gv_dECKLIST_CARD_ICON_SIZE) + 2), ((lib1_gf_DecklistIconY(lp_decklist_slot) + 2) + (lib1_gv_player_collection[lp_player].lv_scroll_level * lib1_gv_dECKLIST_CARD_SPACING)));
    libNtve_gf_SetDialogItemText(lib1_gv_player_collection[lp_player].lv_decklist_gas_cost[lp_decklist_slot], IntToText(MaxI(lib1_gv_card[lp_card_id].lv_gas, 0)), PlayerGroupSingle(lp_player));
    DialogControlSetPosition(lib1_gv_player_collection[lp_player].lv_decklist_border[lp_decklist_slot], PlayerGroupSingle(lp_player), c_anchorTop, -10, (lib1_gf_DecklistBorderY(lp_decklist_slot) + (lib1_gv_player_collection[lp_player].lv_scroll_level * lib1_gv_dECKLIST_CARD_SPACING)));
    DialogControlSetPosition(lib1_gv_player_collection[lp_player].lv_decklist_count_text[lp_decklist_slot], PlayerGroupSingle(lp_player), c_anchorTop, (lib1_gv_dECKLIST_ICON_X + lib1_gv_dECKLIST_CARD_ICON_SIZE + lib1_gv_dECKLIST_CARD_ICON_SIZE + 7), (lib1_gf_DecklistIconY(lp_decklist_slot) + (lib1_gv_player_collection[lp_player].lv_scroll_level * lib1_gv_dECKLIST_CARD_SPACING)));
    libNtve_gf_SetDialogItemText(lib1_gv_player_collection[lp_player].lv_decklist_count_text[lp_decklist_slot], (StringExternal("Param/Value/lib_1_D354F797") + IntToText(lib1_gf_CountinDecklist(lp_player, lib1_gv_player_collection[lp_player].lv_filter.lv_race, lib1_gv_player_collection[lp_player].lv_current_decklist, lp_card_id))), PlayerGroupSingle(lp_player));
    DialogControlSetPosition(lib1_gv_player_collection[lp_player].lv_decklist_button[lp_decklist_slot], PlayerGroupSingle(lp_player), c_anchorTop, -10, (lib1_gf_DecklistBorderY(lp_decklist_slot) + (lib1_gv_player_collection[lp_player].lv_scroll_level * lib1_gv_dECKLIST_CARD_SPACING)));
}

void lib1_gf_DestroyDecklistCard (int lp_player, int lp_decklist_slot) {
    // Variable Declarations
    string lv_frame;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    DialogControlDestroy(lib1_gv_player_collection[lp_player].lv_decklist_name[lp_decklist_slot]);
    DialogControlDestroy(lib1_gv_player_collection[lp_player].lv_decklist_image[lp_decklist_slot]);
    DialogControlDestroy(lib1_gv_player_collection[lp_player].lv_decklist_mineral_icon[lp_decklist_slot]);
    DialogControlDestroy(lib1_gv_player_collection[lp_player].lv_decklist_mineral_cost[lp_decklist_slot]);
    DialogControlDestroy(lib1_gv_player_collection[lp_player].lv_decklist_gas_icon[lp_decklist_slot]);
    DialogControlDestroy(lib1_gv_player_collection[lp_player].lv_decklist_gas_cost[lp_decklist_slot]);
    DialogControlDestroy(lib1_gv_player_collection[lp_player].lv_decklist_border[lp_decklist_slot]);
    lib1_gv_player_collection[lp_player].lv_decklist_border[lp_decklist_slot] = c_invalidDialogControlId;
    DialogControlDestroy(lib1_gv_player_collection[lp_player].lv_decklist_count_text[lp_decklist_slot]);
    DialogControlDestroy(lib1_gv_player_collection[lp_player].lv_decklist_button[lp_decklist_slot]);
}

void lib1_gf_ShowHideDecklistArrows (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((lib1_gv_player_collection[lp_player].lv_scroll_level >= 0)) {
        DialogControlSetVisible(lib1_gv_decklist_arrow_up, PlayerGroupSingle(lp_player), false);
        DialogControlSetEnabled(lib1_gv_decklist_arrow_up_button, PlayerGroupSingle(lp_player), false);
    }
    else {
        DialogControlSetVisible(lib1_gv_decklist_arrow_up, PlayerGroupSingle(lp_player), true);
        DialogControlSetEnabled(lib1_gv_decklist_arrow_up_button, PlayerGroupSingle(lp_player), true);
    }
    if ((lib1_gf_DecklistArrayLength(lp_player, lib1_gv_player_collection[lp_player].lv_filter.lv_race, lib1_gv_player_collection[lp_player].lv_current_decklist) > (20 - lib1_gv_player_collection[lp_player].lv_scroll_level))) {
        DialogControlSetVisible(lib1_gv_decklist_arrow_down, PlayerGroupSingle(lp_player), true);
        DialogControlSetEnabled(lib1_gv_decklist_arrow_down_button, PlayerGroupSingle(lp_player), true);
    }
    else {
        DialogControlSetVisible(lib1_gv_decklist_arrow_down, PlayerGroupSingle(lp_player), false);
        DialogControlSetEnabled(lib1_gv_decklist_arrow_down_button, PlayerGroupSingle(lp_player), false);
    }
}

void lib1_gf_ScrollDecklistUp (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gv_player_collection[lp_player].lv_scroll_level = MinI((lib1_gv_player_collection[lp_player].lv_scroll_level + 1), 0);
    lib1_gf_UpdateDecklistUI(lp_player);
}

void lib1_gf_ScrollDecklistDown (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gv_player_collection[lp_player].lv_scroll_level = MaxI((lib1_gv_player_collection[lp_player].lv_scroll_level - 1), ((lib1_gf_DecklistArrayLength(lp_player, lib1_gv_player_collection[lp_player].lv_filter.lv_race, lib1_gv_player_collection[lp_player].lv_current_decklist) - 20) * -1));
    lib1_gf_UpdateDecklistUI(lp_player);
}

void lib1_gf_ShowDeckRenamingInterface (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemEditorValue(lib1_gv_change_deck_name_edit_box, lib1_gv_player_collection[lp_player].lv_decklist[lib1_gv_player_collection[lp_player].lv_filter.lv_race][lib1_gv_player_collection[lp_player].lv_current_decklist].lv_name, PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemTooltip(lib1_gv_change_decks_button, StringExternal("Param/Value/lib_1_3B39CAC4"), PlayerGroupSingle(lp_player));
    DialogControlSetEnabled(lib1_gv_change_decks_button, PlayerGroupSingle(lp_player), false);
    DialogControlSetVisible(lib1_gv_current_deck_name, PlayerGroupSingle(lp_player), false);
    DialogControlSetVisible(lib1_gv_change_deck_name_button, PlayerGroupSingle(lp_player), false);
    DialogControlSetVisible(lib1_gv_change_deck_name_icon, PlayerGroupSingle(lp_player), false);
    DialogControlSetVisible(lib1_gv_change_deck_name_edit_box, PlayerGroupSingle(lp_player), true);
    DialogControlSetVisible(lib1_gv_save_deck_name_button, PlayerGroupSingle(lp_player), true);
    DialogControlSetVisible(lib1_gv_save_deck_name_icon, PlayerGroupSingle(lp_player), true);
}

void lib1_gf_SetNewDeckName (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gv_player_collection[lp_player].lv_decklist[lib1_gv_player_collection[lp_player].lv_filter.lv_race][lib1_gv_player_collection[lp_player].lv_current_decklist].lv_name = libNtve_gf_DialogItemEditValue(lib1_gv_change_deck_name_edit_box, lp_player);
    libNtve_gf_SetDialogItemText(lib1_gv_current_deck_name, StringToText(lib1_gv_player_collection[lp_player].lv_decklist[lib1_gv_player_collection[lp_player].lv_filter.lv_race][lib1_gv_player_collection[lp_player].lv_current_decklist].lv_name), PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemTooltip(lib1_gv_change_decks_button, StringToText(""), PlayerGroupSingle(lp_player));
    DialogControlSetEnabled(lib1_gv_change_decks_button, PlayerGroupSingle(lp_player), true);
    DialogControlSetVisible(lib1_gv_change_deck_name_edit_box, PlayerGroupSingle(lp_player), false);
    DialogControlSetVisible(lib1_gv_current_deck_name, PlayerGroupSingle(lp_player), true);
    DialogControlSetVisible(lib1_gv_change_deck_name_button, PlayerGroupSingle(lp_player), true);
    DialogControlSetVisible(lib1_gv_change_deck_name_icon, PlayerGroupSingle(lp_player), true);
    DialogControlSetVisible(lib1_gv_save_deck_name_button, PlayerGroupSingle(lp_player), false);
    DialogControlSetVisible(lib1_gv_save_deck_name_icon, PlayerGroupSingle(lp_player), false);
    lib1_gv_player_collection[lp_player].lv_decklist[lib1_gv_player_collection[lp_player].lv_filter.lv_race][lib1_gv_player_collection[lp_player].lv_current_decklist].lv_unsaved_changes = true;
    lib1_gf_UpdateDecklistUI(lp_player);
}

int lib1_gf_CraftingCost (int lp_rarity, int lp_set_id) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_rarity == lib1_gv_cOMMON)) {
        return lib1_gv_set[lp_set_id].lv_common_cost;
    }
    else if ((lp_rarity == lib1_gv_uNCOMMON)) {
        return lib1_gv_set[lp_set_id].lv_uncommon_cost;
    }
    else if ((lp_rarity == lib1_gv_rARE)) {
        return lib1_gv_set[lp_set_id].lv_rare_cost;
    }
    else if ((lp_rarity == lib1_gv_uNIQUE)) {
        return lib1_gv_set[lp_set_id].lv_unique_cost;
    }
    return -1;
}

int lib1_gf_DestroyReward (int lp_rarity, int lp_set_id) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_rarity == lib1_gv_cOMMON)) {
        return lib1_gv_set[lp_set_id].lv_common_sell;
    }
    else if ((lp_rarity == lib1_gv_uNCOMMON)) {
        return lib1_gv_set[lp_set_id].lv_uncommon_sell;
    }
    else if ((lp_rarity == lib1_gv_rARE)) {
        return lib1_gv_set[lp_set_id].lv_rare_sell;
    }
    else if ((lp_rarity == lib1_gv_uNIQUE)) {
        return lib1_gv_set[lp_set_id].lv_unique_sell;
    }
    return -1;
}

void lib1_gf_CreateCraftingWindow () {
    // Automatic Variable Declarations
    // Implementation
    DialogCreate(lib1_gf_DeckWidth(), lib1_gf_DeckHeight(), c_anchorCenter, lib1_gf_DeckX(), 0, true);
    DialogSetRenderPriority(DialogLastCreated(), 0);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    lib1_gv_crafting_dialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lib1_gf_DeckWidth(), lib1_gf_DeckHeight(), c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_tooltip_frame_terran.dds", c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lib1_gv_crafting_dialog_bg_t = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lib1_gf_DeckWidth(), lib1_gf_DeckHeight(), c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_tooltip_frame_zerg.dds", c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lib1_gv_crafting_dialog_bg_z = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lib1_gf_DeckWidth(), lib1_gf_DeckHeight(), c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_tooltip_frame_protoss.dds", c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lib1_gv_crafting_dialog_bg_p = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(lib1_gv_crafting_dialog, lib1_gf_DeckWidth(), 50, c_anchorTop, 0, lib1_gv_dECK_PADDING, StringExternal("Param/Value/lib_1_4A97C870"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CardCostSmall", PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lib1_gv_fILTER_ICON_SIZE, lib1_gv_fILTER_ICON_SIZE, c_anchorBottomLeft, lib1_gv_dECK_PADDING, lib1_gv_dECK_PADDING, StringToText(""), "Assets\\Textures\\ui_battlenet_glues_pageassets_graphiclistitem_border_glow.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lib1_gv_fILTER_ICON_SMALL, lib1_gv_fILTER_ICON_SMALL, c_anchorBottomLeft, (lib1_gv_dECK_PADDING + ((lib1_gv_fILTER_ICON_SIZE - lib1_gv_fILTER_ICON_SMALL) / 2)), (lib1_gv_dECK_PADDING + ((lib1_gv_fILTER_ICON_SIZE - lib1_gv_fILTER_ICON_SMALL) / 2)), StringToText(""), "Assets\\Textures\\btn-ability-zerg-dehaka-essencecollector.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lib1_gf_DeckWidth(), lib1_gv_fILTER_ICON_SIZE, c_anchorBottomLeft, (lib1_gv_dECK_PADDING + lib1_gv_fILTER_ICON_SIZE + 6), lib1_gv_dECK_PADDING, StringExternal("Param/Value/lib_1_DE470F3F"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "EssenceCount", PlayerGroupAll());
    lib1_gv_essence_count = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 140, 80, c_anchorCenter, 0, ((lib1_gv_cARD_HEIGHT / -2) + -30), StringToText(""), StringExternal("Param/Value/lib_1_67BF83B0"), "");
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CraftButton", PlayerGroupAll());
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lib1_gv_craft_button = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 140, 80, c_anchorCenter, 0, ((lib1_gv_cARD_HEIGHT / 2) + 50), StringToText(""), StringExternal("Param/Value/lib_1_1418CD9E"), "");
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CraftButton", PlayerGroupAll());
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lib1_gv_destroy_button = DialogControlLastCreated();
}

void lib1_gf_OpenCraftingWindow (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    DialogSetVisible(lib1_gv_crafting_dialog, PlayerGroupSingle(lp_player), true);
    DialogSetVisible(lib1_gv_deck_dialog, PlayerGroupSingle(lp_player), false);
    DialogSetVisible(lib1_gv_decklist_dialog, PlayerGroupSingle(lp_player), false);
    libNtve_gf_SetDialogItemText(lib1_gv_essence_count, (StringExternal("Param/Value/lib_1_9B83C97C") + IntToText(lib1_gf_PlayerEssence(lp_player))), PlayerGroupSingle(lp_player));
    if ((lib1_gv_player_collection[lp_player].lv_filter.lv_race == lib1_gv_tERRAN)) {
        DialogControlSetVisible(lib1_gv_crafting_dialog_bg_t, PlayerGroupSingle(lp_player), true);
        DialogControlSetVisible(lib1_gv_crafting_dialog_bg_z, PlayerGroupSingle(lp_player), false);
        DialogControlSetVisible(lib1_gv_crafting_dialog_bg_p, PlayerGroupSingle(lp_player), false);
    }
    else if ((lib1_gv_player_collection[lp_player].lv_filter.lv_race == lib1_gv_zERG)) {
        DialogControlSetVisible(lib1_gv_crafting_dialog_bg_z, PlayerGroupSingle(lp_player), true);
        DialogControlSetVisible(lib1_gv_crafting_dialog_bg_t, PlayerGroupSingle(lp_player), false);
        DialogControlSetVisible(lib1_gv_crafting_dialog_bg_p, PlayerGroupSingle(lp_player), false);
    }
    else if ((lib1_gv_player_collection[lp_player].lv_filter.lv_race == lib1_gv_pROTOSS)) {
        DialogControlSetVisible(lib1_gv_crafting_dialog_bg_p, PlayerGroupSingle(lp_player), true);
        DialogControlSetVisible(lib1_gv_crafting_dialog_bg_t, PlayerGroupSingle(lp_player), false);
        DialogControlSetVisible(lib1_gv_crafting_dialog_bg_z, PlayerGroupSingle(lp_player), false);
    }
}

void lib1_gf_SelectCardforCrafting (int lp_player, int lp_page_slot_index) {
    // Variable Declarations
    int lv_cost;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lib1_gv_player_collection[lp_player].lv_selected_page_slot_index = lp_page_slot_index;
    lib1_gf_CreateCard(lp_player, lib1_gf_DeckX(), 0, lib1_gv_player_collection[lp_player].lv_collection_card_id[lp_page_slot_index], "collection", 0, "crafting", 0);
    if ((lib1_gv_card[lib1_gv_player_collection[lp_player].lv_collection_card_id[lp_page_slot_index]].lv_rarity == lib1_gv_cOMMON)) {
        libNtve_gf_SetDialogItemText(lib1_gv_craft_button, (StringExternal("Param/Value/lib_1_EAF6E558") + IntToText(lib1_gv_set[lib1_gv_card[lib1_gv_player_collection[lp_player].lv_collection_card_id[lp_page_slot_index]].lv_set].lv_common_cost)), PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemText(lib1_gv_destroy_button, (StringExternal("Param/Value/lib_1_AF41C396") + IntToText(lib1_gv_set[lib1_gv_card[lib1_gv_player_collection[lp_player].lv_collection_card_id[lp_page_slot_index]].lv_set].lv_common_sell)), PlayerGroupSingle(lp_player));
        lv_cost = lib1_gv_set[lib1_gv_card[lib1_gv_player_collection[lp_player].lv_collection_card_id[lp_page_slot_index]].lv_set].lv_common_cost;
    }
    else if ((lib1_gv_card[lib1_gv_player_collection[lp_player].lv_collection_card_id[lp_page_slot_index]].lv_rarity == lib1_gv_uNCOMMON)) {
        libNtve_gf_SetDialogItemText(lib1_gv_craft_button, (StringExternal("Param/Value/lib_1_A2716D36") + IntToText(lib1_gv_set[lib1_gv_card[lib1_gv_player_collection[lp_player].lv_collection_card_id[lp_page_slot_index]].lv_set].lv_uncommon_cost)), PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemText(lib1_gv_destroy_button, (StringExternal("Param/Value/lib_1_DE6EAC37") + IntToText(lib1_gv_set[lib1_gv_card[lib1_gv_player_collection[lp_player].lv_collection_card_id[lp_page_slot_index]].lv_set].lv_uncommon_sell)), PlayerGroupSingle(lp_player));
        lv_cost = lib1_gv_set[lib1_gv_card[lib1_gv_player_collection[lp_player].lv_collection_card_id[lp_page_slot_index]].lv_set].lv_uncommon_cost;
    }
    else if ((lib1_gv_card[lib1_gv_player_collection[lp_player].lv_collection_card_id[lp_page_slot_index]].lv_rarity == lib1_gv_rARE)) {
        libNtve_gf_SetDialogItemText(lib1_gv_craft_button, (StringExternal("Param/Value/lib_1_547D7125") + IntToText(lib1_gv_set[lib1_gv_card[lib1_gv_player_collection[lp_player].lv_collection_card_id[lp_page_slot_index]].lv_set].lv_rare_cost)), PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemText(lib1_gv_destroy_button, (StringExternal("Param/Value/lib_1_AC93EC11") + IntToText(lib1_gv_set[lib1_gv_card[lib1_gv_player_collection[lp_player].lv_collection_card_id[lp_page_slot_index]].lv_set].lv_rare_sell)), PlayerGroupSingle(lp_player));
        lv_cost = lib1_gv_set[lib1_gv_card[lib1_gv_player_collection[lp_player].lv_collection_card_id[lp_page_slot_index]].lv_set].lv_rare_cost;
    }
    else if ((lib1_gv_card[lib1_gv_player_collection[lp_player].lv_collection_card_id[lp_page_slot_index]].lv_rarity == lib1_gv_uNIQUE)) {
        libNtve_gf_SetDialogItemText(lib1_gv_craft_button, (StringExternal("Param/Value/lib_1_E9981F17") + IntToText(lib1_gv_set[lib1_gv_card[lib1_gv_player_collection[lp_player].lv_collection_card_id[lp_page_slot_index]].lv_set].lv_unique_cost)), PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemText(lib1_gv_destroy_button, (StringExternal("Param/Value/lib_1_A082B33B") + IntToText(lib1_gv_set[lib1_gv_card[lib1_gv_player_collection[lp_player].lv_collection_card_id[lp_page_slot_index]].lv_set].lv_unique_sell)), PlayerGroupSingle(lp_player));
        lv_cost = lib1_gv_set[lib1_gv_card[lib1_gv_player_collection[lp_player].lv_collection_card_id[lp_page_slot_index]].lv_set].lv_unique_cost;
    }
    DialogControlSetVisible(lib1_gv_craft_button, PlayerGroupSingle(lp_player), true);
    libNtve_gf_SetDialogItemTooltip(lib1_gv_craft_button, StringExternal("Param/Value/lib_1_8A118E6E"), PlayerGroupSingle(lp_player));
    DialogControlSetVisible(lib1_gv_destroy_button, PlayerGroupSingle(lp_player), true);
    libNtve_gf_SetDialogItemTooltip(lib1_gv_destroy_button, StringExternal("Param/Value/lib_1_3C268AF4"), PlayerGroupSingle(lp_player));
    if (((lib1_gf_CardOwnedCountCapped(lp_player, lib1_gv_player_collection[lp_player].lv_collection_card_id[lp_page_slot_index]) == 2) || ((lib1_gf_CardOwnedCountCapped(lp_player, lib1_gv_player_collection[lp_player].lv_collection_card_id[lp_page_slot_index]) == 1) && (lib1_gv_card[lib1_gv_player_collection[lp_player].lv_collection_card_id[lp_page_slot_index]].lv_rarity == lib1_gv_uNIQUE)))) {
        DialogControlSetEnabled(lib1_gv_craft_button, PlayerGroupSingle(lp_player), false);
        libNtve_gf_SetDialogItemTooltip(lib1_gv_craft_button, StringExternal("Param/Value/lib_1_103BD12F"), PlayerGroupSingle(lp_player));
        DialogControlSetEnabled(lib1_gv_destroy_button, PlayerGroupSingle(lp_player), true);
    }
    else if ((lib1_gf_CardOwnedCountCapped(lp_player, lib1_gv_player_collection[lp_player].lv_collection_card_id[lp_page_slot_index]) == 1)) {
        if ((lib1_gf_PlayerEssence(lp_player) >= lv_cost)) {
            DialogControlSetEnabled(lib1_gv_craft_button, PlayerGroupSingle(lp_player), true);
        }
        else {
            DialogControlSetEnabled(lib1_gv_craft_button, PlayerGroupSingle(lp_player), false);
        }
        DialogControlSetEnabled(lib1_gv_destroy_button, PlayerGroupSingle(lp_player), true);
    }
    else if ((lib1_gf_CardOwnedCountCapped(lp_player, lib1_gv_player_collection[lp_player].lv_collection_card_id[lp_page_slot_index]) == 0)) {
        if ((lib1_gf_PlayerEssence(lp_player) >= lv_cost)) {
            DialogControlSetEnabled(lib1_gv_craft_button, PlayerGroupSingle(lp_player), true);
        }
        else {
            DialogControlSetEnabled(lib1_gv_craft_button, PlayerGroupSingle(lp_player), false);
        }
        DialogControlSetEnabled(lib1_gv_destroy_button, PlayerGroupSingle(lp_player), false);
        libNtve_gf_SetDialogItemTooltip(lib1_gv_destroy_button, StringExternal("Param/Value/lib_1_148B93AB"), PlayerGroupSingle(lp_player));
    }
}

void lib1_gf_ResetCraftingWindow (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    DialogDestroy(lib1_gv_crafting_card_dialog[lp_player]);
    DialogControlSetVisible(lib1_gv_craft_button, PlayerGroupSingle(lp_player), false);
    DialogControlSetVisible(lib1_gv_destroy_button, PlayerGroupSingle(lp_player), false);
    lib1_gv_player_collection[lp_player].lv_selected_page_slot_index = -1;
    libNtve_gf_SetDialogItemText(lib1_gv_essence_count, (StringExternal("Param/Value/lib_1_993F2F67") + IntToText(lib1_gf_PlayerEssence(lp_player))), PlayerGroupSingle(lp_player));
}

trigger auto_lib1_gf_CraftCard_Trigger = null;
int auto_lib1_gf_CraftCard_lp_player;
int auto_lib1_gf_CraftCard_lp_page_slot_index;

void lib1_gf_CraftCard (int lp_player, int lp_page_slot_index) {
    auto_lib1_gf_CraftCard_lp_player = lp_player;
    auto_lib1_gf_CraftCard_lp_page_slot_index = lp_page_slot_index;

    if (auto_lib1_gf_CraftCard_Trigger == null) {
        auto_lib1_gf_CraftCard_Trigger = TriggerCreate("auto_lib1_gf_CraftCard_TriggerFunc");
    }

    TriggerExecute(auto_lib1_gf_CraftCard_Trigger, false, false);
}

bool auto_lib1_gf_CraftCard_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_lib1_gf_CraftCard_lp_player;
    int lp_page_slot_index = auto_lib1_gf_CraftCard_lp_page_slot_index;

    // Automatic Variable Declarations
    // Implementation
    lib1_gv_player_collection[lp_player].lv_essence_earned = (lib1_gv_player_collection[lp_player].lv_essence_earned - lib1_gf_CraftingCost(lib1_gv_card[lib1_gv_player_collection[lp_player].lv_collection_card_id[lp_page_slot_index]].lv_rarity, lib1_gv_card[lib1_gv_player_collection[lp_player].lv_collection_card_id[lp_page_slot_index]].lv_set));
    lib1_gv_player_collection[lp_player].lv_bought[lib1_gv_player_collection[lp_player].lv_collection_card_id[lp_page_slot_index]] = (lib1_gv_player_collection[lp_player].lv_bought[lib1_gv_player_collection[lp_player].lv_collection_card_id[lp_page_slot_index]] + 1);
    lib1_gf_SaveCurrencytoBank(lp_player);
    lib1_gf_SaveCollectiontoBank(lp_player);
    SoundPlayForPlayer(SoundLink("Core_BeamLaunch", 0), c_maxPlayers, PlayerGroupSingle(lp_player), 100.0, 0.0);
    lib1_gf_CloseCurrentCollectionPage(lp_player);
    lib1_gf_SelectCardforCrafting(lp_player, lp_page_slot_index);
    lib1_gf_OpenCollectionPage(lp_player, lib1_gv_player_collection[lp_player].lv_page);
    return true;
}

trigger auto_lib1_gf_DestroyCard_Trigger = null;
int auto_lib1_gf_DestroyCard_lp_player;
int auto_lib1_gf_DestroyCard_lp_page_slot_index;

void lib1_gf_DestroyCard (int lp_player, int lp_page_slot_index) {
    auto_lib1_gf_DestroyCard_lp_player = lp_player;
    auto_lib1_gf_DestroyCard_lp_page_slot_index = lp_page_slot_index;

    if (auto_lib1_gf_DestroyCard_Trigger == null) {
        auto_lib1_gf_DestroyCard_Trigger = TriggerCreate("auto_lib1_gf_DestroyCard_TriggerFunc");
    }

    TriggerExecute(auto_lib1_gf_DestroyCard_Trigger, false, false);
}

bool auto_lib1_gf_DestroyCard_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_lib1_gf_DestroyCard_lp_player;
    int lp_page_slot_index = auto_lib1_gf_DestroyCard_lp_page_slot_index;

    // Automatic Variable Declarations
    // Implementation
    lib1_gv_player_collection[lp_player].lv_essence_earned = (lib1_gv_player_collection[lp_player].lv_essence_earned + lib1_gf_DestroyReward(lib1_gv_card[lib1_gv_player_collection[lp_player].lv_collection_card_id[lp_page_slot_index]].lv_rarity, lib1_gv_card[lib1_gv_player_collection[lp_player].lv_collection_card_id[lp_page_slot_index]].lv_set));
    lib1_gv_player_collection[lp_player].lv_sold[lib1_gv_player_collection[lp_player].lv_collection_card_id[lp_page_slot_index]] = (lib1_gv_player_collection[lp_player].lv_sold[lib1_gv_player_collection[lp_player].lv_collection_card_id[lp_page_slot_index]] + 1);
    lib1_gf_SaveCurrencytoBank(lp_player);
    lib1_gf_SaveCollectiontoBank(lp_player);
    lib1_gf_CloseCurrentCollectionPage(lp_player);
    lib1_gf_SelectCardforCrafting(lp_player, lp_page_slot_index);
    lib1_gf_OpenCollectionPage(lp_player, lib1_gv_player_collection[lp_player].lv_page);
    SoundPlayForPlayer(SoundLink("Zerg_ExplosionTiny", 0), c_maxPlayers, PlayerGroupSingle(lp_player), 100.0, 0.0);
    Wait(0.2, c_timeGame);
    if ((lib1_gv_card[lib1_gv_player_collection[lp_player].lv_collection_card_id[lp_page_slot_index]].lv_rarity == lib1_gv_uNIQUE)) {
        SoundPlayForPlayer(SoundLink("Essence", 2), c_maxPlayers, PlayerGroupSingle(lp_player), 100.0, 0.0);
    }
    else if ((lib1_gv_card[lib1_gv_player_collection[lp_player].lv_collection_card_id[lp_page_slot_index]].lv_rarity == lib1_gv_rARE)) {
        SoundPlayForPlayer(SoundLink("Essence", 1), c_maxPlayers, PlayerGroupSingle(lp_player), 75.0, 0.0);
    }
    else if (true) {
        SoundPlayForPlayer(SoundLink("Essence", 0), c_maxPlayers, PlayerGroupSingle(lp_player), 50.0, 0.0);
    }
    return true;
}

void lib1_gf_CreateFilterWindow () {
    // Variable Declarations
    int lv_filter_index;

    // Automatic Variable Declarations
    const int auto25AD40CB_ae = lib1_gv_mAX_COST_FILTER_INDEX;
    const int auto25AD40CB_ai = 1;

    // Variable Initialization

    // Implementation
    DialogCreate(lib1_gf_CollectionWidth(), lib1_gf_FilterHeight(), c_anchorCenter, lib1_gf_CollectionX(), lib1_gf_FilterY(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    lib1_gv_filter_dialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lib1_gf_CollectionWidth(), lib1_gf_FilterHeight(), c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_tooltip_frame_terran.dds", c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lib1_gv_filter_dialog_bg_t = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lib1_gf_CollectionWidth(), lib1_gf_FilterHeight(), c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_tooltip_frame_zerg.dds", c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lib1_gv_filter_dialog_bg_z = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lib1_gf_CollectionWidth(), lib1_gf_FilterHeight(), c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_tooltip_frame_protoss.dds", c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lib1_gv_filter_dialog_bg_p = DialogControlLastCreated();
    lv_filter_index = 0;
    for ( ; ( (auto25AD40CB_ai >= 0 && lv_filter_index <= auto25AD40CB_ae) || (auto25AD40CB_ai < 0 && lv_filter_index >= auto25AD40CB_ae) ) ; lv_filter_index += auto25AD40CB_ai ) {
        lib1_gf_CreateTotalCostFilterButton(lv_filter_index);
    }
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeEditBox);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CardNameLarge", PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 275, 55);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, (lib1_gv_cOLLECTION_CARD_PADDING + ((lib1_gv_fILTER_ICON_SIZE + lib1_gv_fILTER_ICON_SPACING) * 8)), 0);
    lib1_gv_search_filter = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lib1_gv_sEARCH_ICON_SIZE, lib1_gv_sEARCH_ICON_SIZE, c_anchorCenter, lib1_gv_sEARCH_ICON_X, 0, StringToText(""), "Assets\\Textures\\ui_battlenet_glues_standardbuttons_small_icon_search_normal.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    lib1_gv_search_button_image = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lib1_gv_sEARCH_ICON_SIZE, lib1_gv_sEARCH_ICON_SIZE, c_anchorCenter, lib1_gv_sEARCH_ICON_X, 0, StringToText(""), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    lib1_gv_search_button = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(lib1_gv_filter_dialog, (lib1_gv_fILTER_ICON_SIZE * 3), lib1_gv_fILTER_ICON_SIZE, c_anchorRight, lib1_gv_cRAFTING_BUTTON_OFFSET, 0, StringToText(""), StringToText(""), "");
    lib1_gv_include_craftable_button = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(lib1_gv_filter_dialog, lib1_gv_fILTER_ICON_SMALL, lib1_gv_fILTER_ICON_SMALL, c_anchorRight, (lib1_gv_cRAFTING_BUTTON_OFFSET + FixedToInt((lib1_gv_fILTER_ICON_SIZE * 2.0))), 0, StringToText(""), "Assets\\Textures\\btn-ability-zerg-dehaka-essencecollector.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 25.0);
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    lib1_gv_include_craftable_button_image = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), (lib1_gv_fILTER_ICON_SIZE * 2), lib1_gv_fILTER_ICON_SIZE, c_anchorRight, (lib1_gv_cRAFTING_BUTTON_OFFSET + FixedToInt((lib1_gv_fILTER_ICON_SIZE * 0.1))), 0, StringExternal("Param/Value/lib_1_A4C6511F"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CardNameSmall", PlayerGroupAll());
}

void lib1_gf_CreateTotalCostFilterButton (int lp_index) {
    // Variable Declarations
    string lv_string;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_string = "";

    // Implementation
    libNtve_gf_CreateDialogItemButton(lib1_gv_filter_dialog, lib1_gv_fILTER_ICON_SIZE, lib1_gv_fILTER_ICON_SIZE, c_anchorLeft, (lib1_gv_cOLLECTION_CARD_PADDING + ((lib1_gv_fILTER_ICON_SIZE + lib1_gv_fILTER_ICON_SPACING) * lp_index)), 0, StringToText(""), StringToText(""), "");
    lib1_gv_filter_total_cost_button[lp_index] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(lib1_gv_filter_dialog, lib1_gv_fILTER_ICON_SIZE, lib1_gv_fILTER_ICON_SIZE, c_anchorLeft, (lib1_gv_cOLLECTION_CARD_PADDING + ((lib1_gv_fILTER_ICON_SIZE + lib1_gv_fILTER_ICON_SPACING) * lp_index)), 0, StringToText(""), "Assets\\Textures\\icon-highyieldmineral-nobg.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    lib1_gv_filter_total_cost_icon[lp_index] = DialogControlLastCreated();
    if ((lp_index == 0)) {
        lv_string = "1-";
        libNtve_gf_CreateDialogItemLabel(lib1_gv_filter_dialog, lib1_gv_fILTER_ICON_SIZE, lib1_gv_fILTER_ICON_SIZE, c_anchorLeft, (2 + (lib1_gv_cOLLECTION_CARD_PADDING + ((lib1_gv_fILTER_ICON_SIZE + lib1_gv_fILTER_ICON_SPACING) * lp_index))), 0, StringToText(lv_string), Color(100,100,100), false, 2.0);
    }
    else if ((lp_index == lib1_gv_mAX_COST_FILTER_INDEX)) {
        lv_string = "8+";
        libNtve_gf_CreateDialogItemLabel(lib1_gv_filter_dialog, lib1_gv_fILTER_ICON_SIZE, lib1_gv_fILTER_ICON_SIZE, c_anchorLeft, (3 + (lib1_gv_cOLLECTION_CARD_PADDING + ((lib1_gv_fILTER_ICON_SIZE + lib1_gv_fILTER_ICON_SPACING) * lp_index))), 0, StringToText(lv_string), Color(100,100,100), false, 2.0);
    }
    else if (true) {
        lv_string = IntToString((lp_index + 1));
        libNtve_gf_CreateDialogItemLabel(lib1_gv_filter_dialog, lib1_gv_fILTER_ICON_SIZE, lib1_gv_fILTER_ICON_SIZE, c_anchorLeft, (lib1_gv_cOLLECTION_CARD_PADDING + ((lib1_gv_fILTER_ICON_SIZE + lib1_gv_fILTER_ICON_SPACING) * lp_index)), 0, StringToText(lv_string), Color(100,100,100), false, 2.0);
    }
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "FilterCost", PlayerGroupAll());
}

void lib1_gf_DisableAllTotalCostsExcept (int lp_player, int lp_exception) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto2715A3D8_ae = lib1_gv_mAX_COST_FILTER_INDEX;
    const int auto2715A3D8_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = 0;
    for ( ; ( (auto2715A3D8_ai >= 0 && lv_index <= auto2715A3D8_ae) || (auto2715A3D8_ai < 0 && lv_index >= auto2715A3D8_ae) ) ; lv_index += auto2715A3D8_ai ) {
        if ((lp_exception == lv_index)) {
            lib1_gf_EnableTotalCost(lp_player, lv_index);
        }
        else {
            lib1_gf_DisableTotalCost(lp_player, lv_index);
        }
    }
}

void lib1_gf_EnableAllTotalCosts (int lp_player) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int autoBC90B344_ae = lib1_gv_mAX_COST_FILTER_INDEX;
    const int autoBC90B344_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = 0;
    for ( ; ( (autoBC90B344_ai >= 0 && lv_index <= autoBC90B344_ae) || (autoBC90B344_ai < 0 && lv_index >= autoBC90B344_ae) ) ; lv_index += autoBC90B344_ai ) {
        lib1_gf_EnableTotalCost(lp_player, lv_index);
    }
}

void lib1_gf_EnableTotalCost (int lp_player, int lp_cost) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gv_player_collection[lp_player].lv_filter.lv_total_cost[lp_cost] = true;
    DialogControlSetEnabled(lib1_gv_filter_total_cost_icon[lp_cost], PlayerGroupSingle(lp_player), true);
}

void lib1_gf_DisableTotalCost (int lp_player, int lp_cost) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gv_player_collection[lp_player].lv_filter.lv_total_cost[lp_cost] = false;
    DialogControlSetEnabled(lib1_gv_filter_total_cost_icon[lp_cost], PlayerGroupSingle(lp_player), false);
}

bool lib1_gf_CollectionCardVisible (int lp_player, int lp_card_id) {
    // Variable Declarations
    int lv_search_word;
    int lv_total_cost_filter_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lib1_gv_player_collection[lp_player].lv_filter.lv_race >= 0) && (((lib1_gv_player_collection[lp_player].lv_filter.lv_race == lib1_gv_tERRAN) && (lib1_gv_card[lp_card_id].lv_race != lib1_gv_tERRAN) && (lib1_gv_card[lp_card_id].lv_race != lib1_gv_tERRAN_ZERG_UED) && (lib1_gv_card[lp_card_id].lv_race != lib1_gv_pROTOSS_TERRAN_FENIX) && (lib1_gv_card[lp_card_id].lv_race != lib1_gv_vOID)) || ((lib1_gv_player_collection[lp_player].lv_filter.lv_race == lib1_gv_zERG) && (lib1_gv_card[lp_card_id].lv_race != lib1_gv_zERG) && (lib1_gv_card[lp_card_id].lv_race != lib1_gv_tERRAN_ZERG_UED) && (lib1_gv_card[lp_card_id].lv_race != lib1_gv_zERG_PROTOSS_KERRIGAN) && (lib1_gv_card[lp_card_id].lv_race != lib1_gv_vOID)) || ((lib1_gv_player_collection[lp_player].lv_filter.lv_race == lib1_gv_pROTOSS) && (lib1_gv_card[lp_card_id].lv_race != lib1_gv_pROTOSS) && (lib1_gv_card[lp_card_id].lv_race != lib1_gv_pROTOSS_TERRAN_FENIX) && (lib1_gv_card[lp_card_id].lv_race != lib1_gv_zERG_PROTOSS_KERRIGAN) && (lib1_gv_card[lp_card_id].lv_race != lib1_gv_vOID)))) {
        return false;
    }

    if (((lib1_gv_player_collection[lp_player].lv_filter.lv_total_cost[0] == false) || (lib1_gf_TotalCost(lp_card_id) > 1)) && ((lib1_gv_player_collection[lp_player].lv_filter.lv_total_cost[1] == false) || (lib1_gf_TotalCost(lp_card_id) != 2)) && ((lib1_gv_player_collection[lp_player].lv_filter.lv_total_cost[2] == false) || (lib1_gf_TotalCost(lp_card_id) != 3)) && ((lib1_gv_player_collection[lp_player].lv_filter.lv_total_cost[3] == false) || (lib1_gf_TotalCost(lp_card_id) != 4)) && ((lib1_gv_player_collection[lp_player].lv_filter.lv_total_cost[4] == false) || (lib1_gf_TotalCost(lp_card_id) != 5)) && ((lib1_gv_player_collection[lp_player].lv_filter.lv_total_cost[5] == false) || (lib1_gf_TotalCost(lp_card_id) != 6)) && ((lib1_gv_player_collection[lp_player].lv_filter.lv_total_cost[6] == false) || (lib1_gf_TotalCost(lp_card_id) != 7)) && ((lib1_gv_player_collection[lp_player].lv_filter.lv_total_cost[7] == false) || (lib1_gf_TotalCost(lp_card_id) < 8))) {
        return false;
    }

    if ((lib1_gf_CardOwnedCountCapped(lp_player, lp_card_id) == 0) && (lib1_gv_player_collection[lp_player].lv_filter.lv_crafting_mode == false)) {
        return false;
    }

    if ((lib1_gv_card[lp_card_id].lv_set == lib1_gv_uNCOLLECTIBLE)) {
        return false;
    }

    if ((lib1_gv_test_mode == false) && (lib1_gv_set[lib1_gv_card[lp_card_id].lv_set].lv_state == lib1_gv_uNAVAILABLE) && (lib1_gv_card[lp_card_id].lv_promo == false)) {
        return false;
    }

    if ((StringLength(libNtve_gf_DialogItemEditValue(lib1_gv_search_filter, lp_player)) > 0)) {
        lv_search_word = 1;
        while ((StringWord(libNtve_gf_DialogItemEditValue(lib1_gv_search_filter, lp_player), lv_search_word) != null)) {
            if (((StringContains(lib1_gf_GetUnitStatsForFiltering(lp_card_id), StringWord(libNtve_gf_DialogItemEditValue(lib1_gv_search_filter, lp_player), lv_search_word), c_stringAnywhere, c_stringNoCase) == true) || (StringContains(lib1_gv_set[lib1_gv_card[lp_card_id].lv_set].lv_name, StringWord(libNtve_gf_DialogItemEditValue(lib1_gv_search_filter, lp_player), lv_search_word), c_stringAnywhere, c_stringNoCase) == true) || (StringContains(lib1_gv_card[lp_card_id].lv_name, StringWord(libNtve_gf_DialogItemEditValue(lib1_gv_search_filter, lp_player), lv_search_word), c_stringAnywhere, c_stringNoCase) == true) || (StringContains(lib1_gv_card[lp_card_id].lv_default_text, StringWord(libNtve_gf_DialogItemEditValue(lib1_gv_search_filter, lp_player), lv_search_word), c_stringAnywhere, c_stringNoCase) == true) || (StringContains(lib1_gv_card[lp_card_id].lv_type, StringWord(libNtve_gf_DialogItemEditValue(lib1_gv_search_filter, lp_player), lv_search_word), c_stringAnywhere, c_stringNoCase) == true) || (StringContains(lib1_gv_card[lp_card_id].lv_subtype, StringWord(libNtve_gf_DialogItemEditValue(lib1_gv_search_filter, lp_player), lv_search_word), c_stringAnywhere, c_stringNoCase) == true) || (((StringCompare("detect", StringWord(libNtve_gf_DialogItemEditValue(lib1_gv_search_filter, lp_player), lv_search_word), c_stringNoCase) == 0) || (StringCompare("detection", StringWord(libNtve_gf_DialogItemEditValue(lib1_gv_search_filter, lp_player), lv_search_word), c_stringNoCase) == 0) || (StringCompare("detector", StringWord(libNtve_gf_DialogItemEditValue(lib1_gv_search_filter, lp_player), lv_search_word), c_stringNoCase) == 0)) && (lib1_gv_card[lp_card_id].lv_detection == true)) || ((StringCompare("common", StringWord(libNtve_gf_DialogItemEditValue(lib1_gv_search_filter, lp_player), lv_search_word), c_stringNoCase) == 0) && (lib1_gv_card[lp_card_id].lv_rarity == lib1_gv_cOMMON)) || ((StringCompare("uncommon", StringWord(libNtve_gf_DialogItemEditValue(lib1_gv_search_filter, lp_player), lv_search_word), c_stringNoCase) == 0) && (lib1_gv_card[lp_card_id].lv_rarity == lib1_gv_uNCOMMON)) || ((StringCompare("rare", StringWord(libNtve_gf_DialogItemEditValue(lib1_gv_search_filter, lp_player), lv_search_word), c_stringNoCase) == 0) && (lib1_gv_card[lp_card_id].lv_rarity == lib1_gv_rARE)) || ((StringCompare("unique", StringWord(libNtve_gf_DialogItemEditValue(lib1_gv_search_filter, lp_player), lv_search_word), c_stringNoCase) == 0) && (lib1_gv_card[lp_card_id].lv_rarity == lib1_gv_uNIQUE)))) {
                lv_search_word = (lv_search_word + 1);
            }
            else {
                return false;
            }
        }
    }

    return true;
}

void lib1_gf_CreateCollectionInteractionLayer () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int autoB2D86E5E_ae;
    const int autoB2D86E5E_ai = 1;

    // Variable Initialization

    // Implementation
    DialogCreate(0, 0, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    DialogSetTransparency(DialogLastCreated(), 0.0);
    DialogSetRenderPriority(DialogLastCreated(), 1000);
    lib1_gv_collection_interaction_dialog = DialogLastCreated();
    autoB2D86E5E_ae = ((lib1_gv_cOLLECTION_CARD_ROWS * lib1_gv_cOLLECTION_CARD_COLUMNS) - 1);
    lv_index = 0;
    for ( ; ( (autoB2D86E5E_ai >= 0 && lv_index <= autoB2D86E5E_ae) || (autoB2D86E5E_ai < 0 && lv_index >= autoB2D86E5E_ae) ) ; lv_index += autoB2D86E5E_ai ) {
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lib1_gv_cARD_WIDTH - 10), (lib1_gv_cARD_HEIGHT - 40), c_anchorCenter, lib1_gf_CollectionCardX(lv_index), (lib1_gf_CollectionCardY(lv_index) + 8), StringToText(""), StringToText(""), "");
        DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
        lib1_gv_collection_card_button[lv_index] = DialogControlLastCreated();
    }
}

int lib1_gf_DeckChooserHeight () {
    // Automatic Variable Declarations
    // Implementation
    return lib1_gv_dECK_CHOOSER_HEIGHT;
}

int lib1_gf_DecklistY (int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return (lib1_gv_dECK_MODIFIER_PADDING + lib1_gv_dECKLIST_TITLE_HEIGHT + 20 + (lp_index * lib1_gv_dECKLIST_BUTTON_HEIGHT));
}

int lib1_gf_DecklistNewDeckY (int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return (lib1_gf_DecklistY(lp_index) + (lib1_gv_dECKLIST_BUTTON_HEIGHT / 3));
}

int lib1_gf_DecklistButtonWidth () {
    // Automatic Variable Declarations
    // Implementation
    return (lib1_gf_DeckWidth() - (2 * lib1_gv_dECK_MODIFIER_PADDING));
}

int lib1_gf_DecklistDeleteX (int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return ((lib1_gf_DecklistButtonWidth() / 2) - 25);
}

int lib1_gf_DecklistDeleteY (int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return (lib1_gf_DecklistY(lp_index) + (lib1_gv_dECKLIST_BUTTON_HEIGHT / -2) + 62);
}

int lib1_gf_DecklistEditY (int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return (lib1_gf_DecklistY(lp_index) + (lib1_gv_dECKLIST_BUTTON_HEIGHT / 2) + 10);
}

int lib1_gf_RibbonX (int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return ((lib1_gf_DecklistButtonWidth() / -2) + 28);
}

void lib1_gf_EnableAllDecklistButtons (int lp_player) {
    // Variable Declarations
    int lv_race;
    int lv_decklist;

    // Automatic Variable Declarations
    const int auto07808E79_ae = 2;
    const int auto07808E79_ai = 1;
    const int autoB4232215_ae = lib1_gv_dECKLIST_PER_RACE_LIMIT;
    const int autoB4232215_ai = 1;

    // Variable Initialization

    // Implementation
    lv_race = 0;
    for ( ; ( (auto07808E79_ai >= 0 && lv_race <= auto07808E79_ae) || (auto07808E79_ai < 0 && lv_race >= auto07808E79_ae) ) ; lv_race += auto07808E79_ai ) {
        DialogControlSetEnabled(lib1_gv_player_collection[lp_player].lv_add_deck_button[lv_race], PlayerGroupAll(), true);
        lv_decklist = 0;
        for ( ; ( (autoB4232215_ai >= 0 && lv_decklist <= autoB4232215_ae) || (autoB4232215_ai < 0 && lv_decklist >= autoB4232215_ae) ) ; lv_decklist += autoB4232215_ai ) {
            DialogControlSetEnabled(lib1_gv_player_collection[lp_player].lv_decklist[lv_race][lv_decklist].lv_button, PlayerGroupAll(), true);
            DialogControlSetEnabled(lib1_gv_player_collection[lp_player].lv_decklist[lv_race][lv_decklist].lv_delete_button, PlayerGroupAll(), true);
            DialogControlSetEnabled(lib1_gv_player_collection[lp_player].lv_decklist[lv_race][lv_decklist].lv_main_deck_ribbon_button, PlayerGroupAll(), true);
        }
    }
}

void lib1_gf_DisableAllDecklistButtons (int lp_player) {
    // Variable Declarations
    int lv_race;
    int lv_decklist;

    // Automatic Variable Declarations
    const int autoB7E98F17_ae = 2;
    const int autoB7E98F17_ai = 1;
    const int autoBF26C6D9_ae = lib1_gv_dECKLIST_PER_RACE_LIMIT;
    const int autoBF26C6D9_ai = 1;

    // Variable Initialization

    // Implementation
    lv_race = 0;
    for ( ; ( (autoB7E98F17_ai >= 0 && lv_race <= autoB7E98F17_ae) || (autoB7E98F17_ai < 0 && lv_race >= autoB7E98F17_ae) ) ; lv_race += autoB7E98F17_ai ) {
        DialogControlSetEnabled(lib1_gv_player_collection[lp_player].lv_add_deck_button[lv_race], PlayerGroupAll(), false);
        lv_decklist = 0;
        for ( ; ( (autoBF26C6D9_ai >= 0 && lv_decklist <= autoBF26C6D9_ae) || (autoBF26C6D9_ai < 0 && lv_decklist >= autoBF26C6D9_ae) ) ; lv_decklist += autoBF26C6D9_ai ) {
            DialogControlSetEnabled(lib1_gv_player_collection[lp_player].lv_decklist[lv_race][lv_decklist].lv_button, PlayerGroupAll(), false);
            DialogControlSetEnabled(lib1_gv_player_collection[lp_player].lv_decklist[lv_race][lv_decklist].lv_delete_button, PlayerGroupAll(), false);
            DialogControlSetEnabled(lib1_gv_player_collection[lp_player].lv_decklist[lv_race][lv_decklist].lv_main_deck_ribbon_button, PlayerGroupAll(), false);
        }
    }
}

bool lib1_gf_DecklistButtonsAreDisabled (int lp_player) {
    // Variable Declarations
    int lv_race;
    int lv_decklist;

    // Automatic Variable Declarations
    const int auto9888A817_ae = 2;
    const int auto9888A817_ai = 1;
    const int autoA2C4AFA0_ae = lib1_gv_dECKLIST_PER_RACE_LIMIT;
    const int autoA2C4AFA0_ai = 1;

    // Variable Initialization

    // Implementation
    lv_race = 0;
    for ( ; ( (auto9888A817_ai >= 0 && lv_race <= auto9888A817_ae) || (auto9888A817_ai < 0 && lv_race >= auto9888A817_ae) ) ; lv_race += auto9888A817_ai ) {
        if ((DialogControlIsEnabled(lib1_gv_player_collection[lp_player].lv_add_deck_button[lv_race], lp_player) == true)) {
            return false;
        }

        lv_decklist = 0;
        for ( ; ( (autoA2C4AFA0_ai >= 0 && lv_decklist <= autoA2C4AFA0_ae) || (autoA2C4AFA0_ai < 0 && lv_decklist >= autoA2C4AFA0_ae) ) ; lv_decklist += autoA2C4AFA0_ai ) {
            if ((DialogControlIsEnabled(lib1_gv_player_collection[lp_player].lv_decklist[lv_race][lv_decklist].lv_button, lp_player) == true)) {
                return false;
            }

            if ((DialogControlIsEnabled(lib1_gv_player_collection[lp_player].lv_decklist[lv_race][lv_decklist].lv_delete_button, lp_player) == true)) {
                return false;
            }

            if ((DialogControlIsEnabled(lib1_gv_player_collection[lp_player].lv_decklist[lv_race][lv_decklist].lv_main_deck_ribbon_button, lp_player) == true)) {
                return false;
            }

        }
    }
    return true;
}

void lib1_gf_CreateDeckManager () {
    // Automatic Variable Declarations
    // Implementation
    DialogCreate(lib1_gf_DeckWidth(), lib1_gf_DeckChooserHeight(), c_anchorCenter, (-1 * (lib1_gf_DeckWidth() + lib1_gv_sPACE_BETWEEN_COLLECTION_WINDOWS)), 0, true);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    DialogSetImageVisible(DialogLastCreated(), false);
    lib1_gv_terran_decks = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lib1_gf_DeckWidth(), lib1_gf_DeckChooserHeight(), c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_tooltip_frame_storymode.dds", c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lib1_gf_DeckWidth(), lib1_gv_dECKLIST_TITLE_HEIGHT, c_anchorTop, 0, lib1_gv_dECK_MODIFIER_PADDING, StringExternal("Param/Value/lib_1_26D7AEC5"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CardCostSmall", PlayerGroupAll());
    DialogCreate(lib1_gf_DeckWidth(), lib1_gf_DeckChooserHeight(), c_anchorCenter, 0, 0, true);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    DialogSetImageVisible(DialogLastCreated(), false);
    lib1_gv_zerg_decks = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lib1_gf_DeckWidth(), lib1_gv_dECK_CHOOSER_HEIGHT, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_tooltip_frame_storymode.dds", c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lib1_gf_DeckWidth(), lib1_gv_dECKLIST_TITLE_HEIGHT, c_anchorTop, 0, lib1_gv_dECK_MODIFIER_PADDING, StringExternal("Param/Value/lib_1_8552FBF6"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CardCostSmall", PlayerGroupAll());
    DialogCreate(lib1_gf_DeckWidth(), lib1_gf_DeckChooserHeight(), c_anchorCenter, (1 * (lib1_gf_DeckWidth() + lib1_gv_sPACE_BETWEEN_COLLECTION_WINDOWS)), 0, true);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    DialogSetImageVisible(DialogLastCreated(), false);
    lib1_gv_protoss_decks = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lib1_gf_DeckWidth(), lib1_gv_dECK_CHOOSER_HEIGHT, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_tooltip_frame_storymode.dds", c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lib1_gf_DeckWidth(), lib1_gv_dECKLIST_TITLE_HEIGHT, c_anchorTop, 0, lib1_gv_dECK_MODIFIER_PADDING, StringExternal("Param/Value/lib_1_C0BDFB61"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CardCostSmall", PlayerGroupAll());
}

void lib1_gf_OpenDeckManager (int lp_player) {
    // Variable Declarations
    int lv_race;
    int lv_deck;

    // Automatic Variable Declarations
    const int autoB2F5A791_ae = 2;
    const int autoB2F5A791_ai = 1;
    const int auto4904FA0B_ae = lib1_gv_dECKLIST_PER_RACE_LIMIT;
    const int auto4904FA0B_ai = 1;

    // Variable Initialization

    // Implementation
    DialogSetVisible(lib1_gv_terran_decks, PlayerGroupSingle(lp_player), true);
    DialogSetVisible(lib1_gv_zerg_decks, PlayerGroupSingle(lp_player), true);
    DialogSetVisible(lib1_gv_protoss_decks, PlayerGroupSingle(lp_player), true);
    lv_race = 0;
    for ( ; ( (autoB2F5A791_ai >= 0 && lv_race <= autoB2F5A791_ae) || (autoB2F5A791_ai < 0 && lv_race >= autoB2F5A791_ae) ) ; lv_race += autoB2F5A791_ai ) {
        lv_deck = 0;
        for ( ; ( (auto4904FA0B_ai >= 0 && lv_deck <= auto4904FA0B_ae) || (auto4904FA0B_ai < 0 && lv_deck >= auto4904FA0B_ae) ) ; lv_deck += auto4904FA0B_ai ) {
            if ((lib1_gv_player_collection[lp_player].lv_decklist[lv_race][lv_deck].lv_name != "") && (lib1_gv_player_collection[lp_player].lv_decklist[lv_race][lv_deck].lv_button == c_invalidDialogControlId)) {
                lib1_gf_CreateDecklistUIinManager(lp_player, lv_race, lv_deck);
                lib1_gf_UpdateDecklistUIinManager(lp_player, lv_race, lv_deck);
            }
            else if ((lib1_gv_player_collection[lp_player].lv_decklist[lv_race][lv_deck].lv_name != "")) {
                lib1_gf_UpdateDecklistUIinManager(lp_player, lv_race, lv_deck);
            }
            else if (true) {
                break;
            }
        }
    }
    lib1_gf_UpdateNewDeckButtons(lp_player);
}

void lib1_gf_CloseDeckManager (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    DialogSetVisible(lib1_gv_terran_decks, PlayerGroupSingle(lp_player), false);
    DialogSetVisible(lib1_gv_zerg_decks, PlayerGroupSingle(lp_player), false);
    DialogSetVisible(lib1_gv_protoss_decks, PlayerGroupSingle(lp_player), false);
}

void lib1_gf_CreateDecklistUIinManager (int lp_player, int lp_race, int lp_decklist) {
    // Variable Declarations
    int lv_race_deck_dialog;
    string lv_ribbon_button_message;
    string lv_ribbon_message;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_race_deck_dialog = c_invalidDialogId;
    lv_ribbon_button_message = "";
    lv_ribbon_message = "";

    // Implementation
    if ((lp_race == lib1_gv_tERRAN)) {
        lv_race_deck_dialog = lib1_gv_terran_decks;
        lv_ribbon_button_message = "Use this deck when you play Terran.";
        lv_ribbon_message = "If you select Terran in the lobby, you will use this deck.";
    }
    else if ((lp_race == lib1_gv_zERG)) {
        lv_race_deck_dialog = lib1_gv_zerg_decks;
        lv_ribbon_button_message = "Use this deck when you play Zerg.";
        lv_ribbon_message = "If you select Zerg in the lobby, you will use this deck.";
    }
    else if ((lp_race == lib1_gv_pROTOSS)) {
        lv_race_deck_dialog = lib1_gv_protoss_decks;
        lv_ribbon_button_message = "Use this deck when you play Protoss.";
        lv_ribbon_message = "If you select Protoss in the lobby, you will use this deck.";
    }
    libNtve_gf_CreateDialogItemButton(lv_race_deck_dialog, lib1_gf_DecklistButtonWidth(), lib1_gv_dECKLIST_BUTTON_HEIGHT, c_anchorTop, 0, lib1_gf_DecklistY(lp_decklist), StringExternal("Param/Value/lib_1_3D2E8A0E"), StringToText(lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist].lv_name), "");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(lp_player), true);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "DecklistNameSmall", PlayerGroupAll());
    lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist].lv_button = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(lv_race_deck_dialog, lib1_gv_dECKLIST_ICON_SIZE, lib1_gv_dECKLIST_ICON_SIZE, c_anchorTop, lib1_gf_DecklistDeleteX(lp_decklist), lib1_gf_DecklistDeleteY(lp_decklist), StringToText(""), lib1_gv_dELETE_ICON, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist].lv_delete_icon = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(lv_race_deck_dialog, lib1_gv_dECKLIST_ICON_SIZE, lib1_gv_dECKLIST_ICON_SIZE, c_anchorTop, lib1_gf_DecklistDeleteX(lp_decklist), lib1_gf_DecklistDeleteY(lp_decklist), StringExternal("Param/Value/lib_1_CEAA3A56"), StringToText(""), "");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(lp_player), true);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist].lv_delete_button = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(lv_race_deck_dialog, 25, 34, c_anchorTop, lib1_gf_RibbonX(lp_decklist), lib1_gf_DecklistDeleteY(lp_decklist), StringToText(lv_ribbon_message), lib1_gv_mAIN_DECK_RIBBON, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    if ((lib1_gv_player_collection[lp_player].lv_default_decklist[lp_race] == lp_decklist)) {
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(lp_player), true);
    }
    else {
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupSingle(lp_player), 0.0, 75.0);
    }
    lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist].lv_main_deck_ribbon = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(lv_race_deck_dialog, 25, 34, c_anchorTop, lib1_gf_RibbonX(lp_decklist), lib1_gf_DecklistDeleteY(lp_decklist), StringToText(lv_ribbon_button_message), StringToText(""), "");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(lp_player), true);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist].lv_main_deck_ribbon_button = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(lv_race_deck_dialog, 34, 34, c_anchorTop, (lib1_gf_RibbonX(lp_decklist) + 34), lib1_gf_DecklistDeleteY(lp_decklist), StringExternal("Param/Value/lib_1_E0058E28"), lib1_gv_wARNING_ICON, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist].lv_illegal_deck_icon = DialogControlLastCreated();
}

void lib1_gf_UpdateDecklistUIinManager (int lp_player, int lp_race, int lp_decklist) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist].lv_button, StringToText(lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist].lv_name), PlayerGroupSingle(lp_player));
    if ((lib1_gf_DecklistLegal(lp_player, lp_race, lp_decklist) == true) && (lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist].lv_unsaved_changes == false)) {
        DialogControlSetVisible(lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist].lv_illegal_deck_icon, PlayerGroupSingle(lp_player), false);
    }
    else {
        DialogControlSetVisible(lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist].lv_illegal_deck_icon, PlayerGroupSingle(lp_player), true);
    }
}

void lib1_gf_CreateNewDeckButton (int lp_player, int lp_race, int lp_decklist) {
    // Variable Declarations
    int lv_race_deck_dialog;
    string lv_create_message;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_race_deck_dialog = c_invalidDialogId;
    lv_create_message = "";

    // Implementation
    if ((lp_race == lib1_gv_tERRAN)) {
        lv_race_deck_dialog = lib1_gv_terran_decks;
        lv_create_message = "Create a new Terran deck.";
    }
    else if ((lp_race == lib1_gv_zERG)) {
        lv_race_deck_dialog = lib1_gv_zerg_decks;
        lv_create_message = "Create a new Zerg deck.";
    }
    else if ((lp_race == lib1_gv_pROTOSS)) {
        lv_race_deck_dialog = lib1_gv_protoss_decks;
        lv_create_message = "Create a new Protoss deck.";
    }
    libNtve_gf_CreateDialogItemImage(lv_race_deck_dialog, lib1_gv_dECKLIST_ICON_SIZE, lib1_gv_dECKLIST_ICON_SIZE, c_anchorTop, 0, lib1_gf_DecklistNewDeckY(lp_decklist), StringToText(""), lib1_gv_aDD_ICON, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(lp_player), true);
    lib1_gv_player_collection[lp_player].lv_add_deck_icon[lp_race] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(lv_race_deck_dialog, lib1_gv_dECKLIST_ICON_SIZE, lib1_gv_dECKLIST_ICON_SIZE, c_anchorTop, 0, lib1_gf_DecklistNewDeckY(lp_decklist), StringToText(lv_create_message), StringToText(""), "");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(lp_player), true);
    lib1_gv_player_collection[lp_player].lv_add_deck_button[lp_race] = DialogControlLastCreated();
}

void lib1_gf_UpdateNewDeckButtons (int lp_player) {
    // Variable Declarations
    int lv_race;
    int lv_deck;

    // Automatic Variable Declarations
    const int autoBC94076E_ae = 2;
    const int autoBC94076E_ai = 1;
    const int auto7505048A_ae = lib1_gv_dECKLIST_PER_RACE_LIMIT;
    const int auto7505048A_ai = 1;

    // Variable Initialization

    // Implementation
    lv_race = 0;
    for ( ; ( (autoBC94076E_ai >= 0 && lv_race <= autoBC94076E_ae) || (autoBC94076E_ai < 0 && lv_race >= autoBC94076E_ae) ) ; lv_race += autoBC94076E_ai ) {
        if ((lib1_gv_player_collection[lp_player].lv_add_deck_button[lv_race] != c_invalidDialogControlId)) {
            DialogControlDestroy(lib1_gv_player_collection[lp_player].lv_add_deck_button[lv_race]);
            DialogControlDestroy(lib1_gv_player_collection[lp_player].lv_add_deck_icon[lv_race]);
            lib1_gv_player_collection[lp_player].lv_add_deck_button[lv_race] = c_invalidDialogControlId;
            lib1_gv_player_collection[lp_player].lv_add_deck_icon[lv_race] = c_invalidDialogControlId;
        }

        lv_deck = 0;
        for ( ; ( (auto7505048A_ai >= 0 && lv_deck <= auto7505048A_ae) || (auto7505048A_ai < 0 && lv_deck >= auto7505048A_ae) ) ; lv_deck += auto7505048A_ai ) {
            if ((lib1_gf_DecklistEmpty(lp_player, lv_race, lv_deck) == true)) {
                lib1_gf_CreateNewDeckButton(lp_player, lv_race, lv_deck);
                break;
            }

        }
    }
}

void lib1_gf_AddNewDecklistInManager (int lp_player, int lp_race) {
    // Variable Declarations
    int lv_first_empty_decklist;

    // Automatic Variable Declarations
    const int auto3BBD3BDF_ae = lib1_gv_dECKLIST_PER_RACE_LIMIT;
    const int auto3BBD3BDF_ai = 1;

    // Variable Initialization

    // Implementation
    lv_first_empty_decklist = 0;
    for ( ; ( (auto3BBD3BDF_ai >= 0 && lv_first_empty_decklist <= auto3BBD3BDF_ae) || (auto3BBD3BDF_ai < 0 && lv_first_empty_decklist >= auto3BBD3BDF_ae) ) ; lv_first_empty_decklist += auto3BBD3BDF_ai ) {
        if ((lib1_gf_DecklistEmpty(lp_player, lp_race, lv_first_empty_decklist) == true)) {
            break;
        }

    }
    lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lv_first_empty_decklist].lv_name = "New Deck";
    lib1_gf_CreateDecklistUIinManager(lp_player, lp_race, lv_first_empty_decklist);
    lib1_gf_CloseCurrentDecklist(lp_player);
    lib1_gv_player_collection[lp_player].lv_current_decklist = lv_first_empty_decklist;
    lib1_gv_player_collection[lp_player].lv_filter.lv_race = lp_race;
    lib1_gf_CloseDeckManager(lp_player);
    lib1_gf_OpenCollectionEditor(lp_player);
    lib1_gf_OpenCollectionPage(lp_player, 0);
}

void lib1_gf_RemoveDecklistinManager (int lp_player, int lp_race, int lp_decklist) {
    // Variable Declarations
    int lv_deck_index;
    int lv_bottom_deck_index;
    int lv_card_index;

    // Automatic Variable Declarations
    const int autoF0B0AE63_ae = lib1_gv_dECKLIST_PER_RACE_LIMIT;
    const int autoF0B0AE63_ai = 1;
    int autoE3FA7CB3_ae;
    const int autoE3FA7CB3_ai = 1;
    int auto13FCD54B_ae;
    int auto13FCD54B_ai;
    int auto7E7B7B38_ae;
    int auto7E7B7B38_ai;

    // Variable Initialization
    lv_bottom_deck_index = -1;

    // Implementation
    lv_deck_index = 0;
    for ( ; ( (autoF0B0AE63_ai >= 0 && lv_deck_index <= autoF0B0AE63_ae) || (autoF0B0AE63_ai < 0 && lv_deck_index >= autoF0B0AE63_ae) ) ; lv_deck_index += autoF0B0AE63_ai ) {
        if ((lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lv_deck_index].lv_button != c_invalidDialogControlId)) {
            lv_bottom_deck_index = (lv_bottom_deck_index + 1);
        }

    }
    if ((lib1_gv_player_collection[lp_player].lv_default_decklist[lp_race] >= lp_decklist)) {
        lib1_gv_player_collection[lp_player].lv_default_decklist[lp_race] = (lib1_gv_player_collection[lp_player].lv_default_decklist[lp_race] - 1);
    }

    autoE3FA7CB3_ae = lv_bottom_deck_index;
    lv_deck_index = lp_decklist;
    for ( ; ( (autoE3FA7CB3_ai >= 0 && lv_deck_index <= autoE3FA7CB3_ae) || (autoE3FA7CB3_ai < 0 && lv_deck_index >= autoE3FA7CB3_ae) ) ; lv_deck_index += autoE3FA7CB3_ai ) {
        if ((lv_deck_index == lv_bottom_deck_index)) {
            DialogControlDestroy(lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lv_deck_index].lv_button);
            DialogControlDestroy(lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lv_deck_index].lv_delete_button);
            DialogControlDestroy(lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lv_deck_index].lv_delete_icon);
            DialogControlDestroy(lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lv_deck_index].lv_main_deck_ribbon);
            DialogControlDestroy(lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lv_deck_index].lv_main_deck_ribbon_button);
            DialogControlDestroy(lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lv_deck_index].lv_illegal_deck_icon);
            lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lv_deck_index].lv_button = c_invalidDialogControlId;
            lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lv_deck_index].lv_delete_button = c_invalidDialogControlId;
            lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lv_deck_index].lv_delete_icon = c_invalidDialogControlId;
            lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lv_deck_index].lv_main_deck_ribbon = c_invalidDialogControlId;
            lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lv_deck_index].lv_main_deck_ribbon_button = c_invalidDialogControlId;
            lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lv_deck_index].lv_illegal_deck_icon = c_invalidDialogControlId;
            lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lv_deck_index].lv_name = "";
            lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lv_deck_index].lv_unsaved_changes = false;
            auto13FCD54B_ae = lib1_gv_dECKLIST_LIMIT;
            auto13FCD54B_ai = 1;
            lv_card_index = 0;
            for ( ; ( (auto13FCD54B_ai >= 0 && lv_card_index <= auto13FCD54B_ae) || (auto13FCD54B_ai <= 0 && lv_card_index >= auto13FCD54B_ae) ) ; lv_card_index += auto13FCD54B_ai ) {
                lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lv_deck_index].lv_count[lv_card_index] = 0;
                lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lv_deck_index].lv_card_id[lv_card_index] = -1;
            }
            lib1_gf_DeleteDeckfromBank(lp_player, lp_race, lv_deck_index);
        }
        else if ((lv_deck_index >= lp_decklist)) {
            lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lv_deck_index].lv_name = lib1_gv_player_collection[lp_player].lv_decklist[lp_race][(lv_deck_index + 1)].lv_name;
            lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lv_deck_index].lv_unsaved_changes = lib1_gv_player_collection[lp_player].lv_decklist[lp_race][(lv_deck_index + 1)].lv_unsaved_changes;
            auto7E7B7B38_ae = lib1_gv_dECKLIST_LIMIT;
            auto7E7B7B38_ai = 1;
            lv_card_index = 0;
            for ( ; ( (auto7E7B7B38_ai >= 0 && lv_card_index <= auto7E7B7B38_ae) || (auto7E7B7B38_ai <= 0 && lv_card_index >= auto7E7B7B38_ae) ) ; lv_card_index += auto7E7B7B38_ai ) {
                lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lv_deck_index].lv_count[lv_card_index] = lib1_gv_player_collection[lp_player].lv_decklist[lp_race][(lv_deck_index + 1)].lv_count[lv_card_index];
                lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lv_deck_index].lv_card_id[lv_card_index] = lib1_gv_player_collection[lp_player].lv_decklist[lp_race][(lv_deck_index + 1)].lv_card_id[lv_card_index];
            }
            lib1_gf_UpdateDecklistUIinManager(lp_player, lp_race, lv_deck_index);
            lib1_gf_SaveDecktoBankCopyFromNextDeck(lp_player, lp_race, lv_deck_index);
        }
    }
    lib1_gf_CloseCurrentDecklist(lp_player);
    lib1_gf_LoadCurrentDecklist(lp_player);
    lib1_gf_SetDecklistasMainDecklist(lp_player, lp_race, lib1_gv_player_collection[lp_player].lv_default_decklist[lp_race]);
    lib1_gf_UpdateNewDeckButtons(lp_player);
}

void lib1_gf_SelectDecklistInManager (int lp_player, int lp_race, int lp_decklist) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_race != lib1_gv_player_collection[lp_player].lv_filter.lv_race) || (lp_decklist != lib1_gv_player_collection[lp_player].lv_current_decklist))) {
        lib1_gf_CloseCurrentDecklist(lp_player);
        lib1_gv_player_collection[lp_player].lv_filter.lv_race = lp_race;
        lib1_gv_player_collection[lp_player].lv_current_decklist = lp_decklist;
        lib1_gf_LoadCurrentDecklist(lp_player);
    }

    lib1_gf_CloseDeckManager(lp_player);
    lib1_gf_OpenCollectionEditor(lp_player);
    lib1_gf_OpenCollectionPage(lp_player, 0);
}

void lib1_gf_SetDecklistasMainDecklist (int lp_player, int lp_race, int lp_decklist) {
    // Variable Declarations
    int lv_deck_index;

    // Automatic Variable Declarations
    const int auto6E06BD46_ae = lib1_gv_dECKLIST_PER_RACE_LIMIT;
    const int auto6E06BD46_ai = 1;

    // Variable Initialization

    // Implementation
    lib1_gf_SaveDeckasMainDeck(lp_player, lp_race, lp_decklist);
    lib1_gv_player_collection[lp_player].lv_default_decklist[lp_race] = lp_decklist;
    lv_deck_index = 0;
    for ( ; ( (auto6E06BD46_ai >= 0 && lv_deck_index <= auto6E06BD46_ae) || (auto6E06BD46_ai < 0 && lv_deck_index >= auto6E06BD46_ae) ) ; lv_deck_index += auto6E06BD46_ai ) {
        if ((lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lv_deck_index].lv_main_deck_ribbon_button != c_invalidDialogControlId)) {
            if ((lib1_gv_player_collection[lp_player].lv_default_decklist[lp_race] == lv_deck_index)) {
                DialogControlSetVisible(lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lv_deck_index].lv_delete_button, PlayerGroupSingle(lp_player), false);
                DialogControlSetVisible(lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lv_deck_index].lv_delete_icon, PlayerGroupSingle(lp_player), false);
                DialogControlSetVisible(lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lv_deck_index].lv_main_deck_ribbon, PlayerGroupSingle(lp_player), true);
                DialogControlFadeTransparency(lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lv_deck_index].lv_main_deck_ribbon, PlayerGroupSingle(lp_player), 0.0, 0.0);
                DialogControlSetVisible(lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lv_deck_index].lv_main_deck_ribbon_button, PlayerGroupSingle(lp_player), false);
            }
            else {
                DialogControlSetVisible(lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lv_deck_index].lv_main_deck_ribbon, PlayerGroupSingle(lp_player), false);
                DialogControlFadeTransparency(lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lv_deck_index].lv_main_deck_ribbon, PlayerGroupSingle(lp_player), 0.0, 75.0);
            }
        }

    }
}

void lib1_gf_MouseEnterDecklist (int lp_player, int lp_race, int lp_decklist) {
    // Automatic Variable Declarations
    // Implementation
    if ((lib1_gv_player_collection[lp_player].lv_default_decklist[lp_race] != lp_decklist)) {
        DialogControlSetVisible(lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist].lv_delete_icon, PlayerGroupSingle(lp_player), true);
        if ((lib1_gf_DecklistLegal(lp_player, lp_race, lp_decklist) == true) && (lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist].lv_unsaved_changes == false)) {
            DialogControlSetVisible(lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist].lv_main_deck_ribbon, PlayerGroupSingle(lp_player), true);
            DialogControlSetVisible(lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist].lv_main_deck_ribbon_button, PlayerGroupSingle(lp_player), true);
        }
        else {
            DialogControlSetVisible(lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist].lv_main_deck_ribbon, PlayerGroupSingle(lp_player), false);
            DialogControlSetVisible(lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist].lv_main_deck_ribbon_button, PlayerGroupSingle(lp_player), false);
        }
    }
    else {
        DialogControlSetVisible(lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist].lv_delete_button, PlayerGroupSingle(lp_player), false);
        DialogControlSetVisible(lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist].lv_main_deck_ribbon_button, PlayerGroupSingle(lp_player), false);
    }
}

void lib1_gf_MouseExitDecklist (int lp_player, int lp_race, int lp_decklist) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist].lv_delete_icon, PlayerGroupSingle(lp_player), false);
    DialogControlSetVisible(lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist].lv_delete_button, PlayerGroupSingle(lp_player), true);
    libNtve_gf_SetDialogItemImage(lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist].lv_delete_icon, lib1_gv_dELETE_ICON, PlayerGroupSingle(lp_player));
    if ((lib1_gv_player_collection[lp_player].lv_default_decklist[lp_race] != lp_decklist)) {
        DialogControlSetVisible(lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist].lv_main_deck_ribbon, PlayerGroupSingle(lp_player), false);
        DialogControlFadeTransparency(lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist].lv_main_deck_ribbon, PlayerGroupSingle(lp_player), 0.0, 75.0);
    }

}

void lib1_gf_MouseEnterDecklistDelete (int lp_player, int lp_race, int lp_decklist) {
    // Automatic Variable Declarations
    // Implementation
    if ((lib1_gv_player_collection[lp_player].lv_default_decklist[lp_race] != lp_decklist)) {
        DialogControlSetVisible(lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist].lv_delete_icon, PlayerGroupSingle(lp_player), true);
        libNtve_gf_SetDialogItemImage(lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist].lv_delete_icon, lib1_gv_dELETE_ICON_HIGHLIGHTED, PlayerGroupSingle(lp_player));
        if ((lib1_gf_DecklistLegal(lp_player, lp_race, lp_decklist) == true)) {
            DialogControlSetVisible(lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist].lv_main_deck_ribbon, PlayerGroupSingle(lp_player), true);
        }

    }
    else {
        DialogControlSetVisible(lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist].lv_delete_button, PlayerGroupSingle(lp_player), false);
    }
}

void lib1_gf_MouseEnterMainDeckRibbon (int lp_player, int lp_race, int lp_decklist) {
    // Automatic Variable Declarations
    // Implementation
    if ((lib1_gv_player_collection[lp_player].lv_default_decklist[lp_race] != lp_decklist)) {
        DialogControlSetVisible(lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist].lv_main_deck_ribbon, PlayerGroupSingle(lp_player), true);
        DialogControlFadeTransparency(lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist].lv_main_deck_ribbon, PlayerGroupSingle(lp_player), 0.0, 0.0);
        DialogControlSetVisible(lib1_gv_player_collection[lp_player].lv_decklist[lp_race][lp_decklist].lv_delete_icon, PlayerGroupSingle(lp_player), true);
    }

}

void lib1_gf_MouseEnterAddDeckButton (int lp_player, int lp_race) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemImage(lib1_gv_player_collection[lp_player].lv_add_deck_icon[lp_race], lib1_gv_aDD_ICON_HIGHLIGHTED, PlayerGroupSingle(lp_player));
}

void lib1_gf_MouseExitAddDeckButton (int lp_player, int lp_race) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemImage(lib1_gv_player_collection[lp_player].lv_add_deck_icon[lp_race], lib1_gv_aDD_ICON, PlayerGroupSingle(lp_player));
}

int lib1_gf_PackCardX (int lp_index) {
    // Variable Declarations
    int lv_row_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_index <= (((3 * lib1_gv_cOLLECTION_CARD_ROWS) / 2) - 1))) {
        lv_row_index = lp_index;
    }
    else {
        lv_row_index = (lp_index - 3);
    }
    return (((lib1_gv_cARD_WIDTH + lib1_gv_pACK_CARD_SPACE_X) * ((2 * lv_row_index) - (3 - 1))) / 2);
}

int lib1_gf_PackCardY (int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_index <= (((3 * lib1_gv_cOLLECTION_CARD_ROWS) / 2) - 1))) {
        return ((lib1_gv_cARD_HEIGHT + lib1_gv_pACK_CARD_SPACE_Y) / -2);
    }
    else {
        return ((lib1_gv_cARD_HEIGHT + lib1_gv_pACK_CARD_SPACE_Y) / 2);
    }
}

void lib1_gf_CreateStore () {
    // Variable Declarations
    int lv_set_id;
    int lv_purchase_index;

    // Automatic Variable Declarations
    const int autoF09866BD_ae = 2;
    const int autoF09866BD_ai = 1;
    const int autoFEF8B6AE_ae = 1;
    const int autoFEF8B6AE_ai = 1;

    // Variable Initialization

    // Implementation
    DialogCreate(1450, 100, c_anchorCenter, 0, ((lib1_gv_fILTER_ICON_SIZE + lib1_gv_pURCHASE_SPACING) / -2), true);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    DialogSetImageVisible(DialogLastCreated(), false);
    lib1_gv_store_arrow_dialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 44, 52, c_anchorLeft, 0, 0, StringToText(""), "Assets\\Textures\\ui_glues_icons_smallpagearrow_left_normal.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lib1_gv_store_left_arrow_image = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 44, 52, c_anchorLeft, 0, 0, StringToText(""), StringExternal("Param/Value/lib_1_BDFC2DB5"), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    lib1_gv_store_left_arrow_button = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 44, 52, c_anchorRight, 0, 0, StringToText(""), "Assets\\Textures\\ui_glues_icons_smallpagearrow_right_normal.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lib1_gv_store_right_arrow_image = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 44, 52, c_anchorRight, 0, 0, StringToText(""), StringExternal("Param/Value/lib_1_BB9AE23B"), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    lib1_gv_store_right_arrow_button = DialogControlLastCreated();
    DialogCreate(lib1_gv_pURCHASE_CREDIT_WIDTH, lib1_gv_fILTER_ICON_SIZE, c_anchorCenter, 50, ((lib1_gv_pURCHASE_HEIGHT + lib1_gv_pURCHASE_SPACING) / 2), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    lib1_gv_store_dialog_credits = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lib1_gv_fILTER_ICON_SIZE, lib1_gv_fILTER_ICON_SIZE, c_anchorLeft, 0, 0, StringToText(""), "Assets\\Textures\\btn-tips-credit.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lib1_gv_pURCHASE_CREDIT_WIDTH, lib1_gv_fILTER_ICON_SIZE, c_anchorLeft, (lib1_gv_fILTER_ICON_SIZE + 5), 0, StringExternal("Param/Value/lib_1_3BAF2E78"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "EssenceCount", PlayerGroupAll());
    lib1_gv_store_dialog_credits_amount = DialogControlLastCreated();
    lv_purchase_index = 0;
    for ( ; ( (autoF09866BD_ai >= 0 && lv_purchase_index <= autoF09866BD_ae) || (autoF09866BD_ai < 0 && lv_purchase_index >= autoF09866BD_ae) ) ; lv_purchase_index += autoF09866BD_ai ) {
        DialogCreate(lib1_gv_pURCHASE_WIDTH, lib1_gv_pURCHASE_HEIGHT, c_anchorCenter, ((lib1_gv_pURCHASE_SPACING + lib1_gv_pURCHASE_WIDTH) * (lv_purchase_index - 1)), ((lib1_gv_fILTER_ICON_SIZE + lib1_gv_pURCHASE_SPACING) / -2), true);
        DialogSetImageVisible(DialogLastCreated(), false);
        DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
        lib1_gv_store_dialog_odd[lv_purchase_index] = DialogLastCreated();
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lib1_gv_pURCHASE_WIDTH, lib1_gv_pURCHASE_HEIGHT, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_tooltip_frame_storymode.dds", c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lib1_gv_pURCHASE_WIDTH, 75, c_anchorTop, 0, 25, StringExternal("Param/Value/lib_1_FCC91DA3"), Color(100,100,100), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CardCostSmall", PlayerGroupAll());
        lib1_gv_store_dialog_odd_set_name[lv_purchase_index] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 215, 215, c_anchorTop, 0, 80, StringToText(""), "Assets\\Textures\\btn-ability-terran-liftoff.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 90.0);
        lib1_gv_store_dialog_odd_icon[lv_purchase_index] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), (lib1_gv_pURCHASE_WIDTH - 40), 215, c_anchorTop, 0, 80, StringExternal("Param/Value/lib_1_7676F5D9"), Color(100,100,100), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "SetDescription", PlayerGroupAll());
        lib1_gv_store_dialog_odd_set_description[lv_purchase_index] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 400, 10, c_anchorBottom, 0, 279, StringToText(""), "Assets\\Textures\\ui_battlenet_glues_topnav_buttonselectedline.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 380, 228, c_anchorBottom, 0, 55, StringToText(""), "Assets\\Textures\\ui_battlenet_glues_pageassets_homepanel_upgrade.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        lib1_gv_store_dialog_odd_image[lv_purchase_index] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lib1_gv_pURCHASE_WIDTH - 10), 56, c_anchorBottom, 0, 4, StringToText(""), StringExternal("Param/Value/lib_1_1D119413"), "");
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CraftButton", PlayerGroupAll());
        lib1_gv_store_dialog_odd_button[lv_purchase_index] = DialogControlLastCreated();
    }
    lv_purchase_index = 0;
    for ( ; ( (autoFEF8B6AE_ai >= 0 && lv_purchase_index <= autoFEF8B6AE_ae) || (autoFEF8B6AE_ai < 0 && lv_purchase_index >= autoFEF8B6AE_ae) ) ; lv_purchase_index += autoFEF8B6AE_ai ) {
        DialogCreate(lib1_gv_pURCHASE_WIDTH, lib1_gv_pURCHASE_HEIGHT, c_anchorCenter, (((lib1_gv_pURCHASE_SPACING + lib1_gv_pURCHASE_WIDTH) * (lv_purchase_index - 1)) + ((lib1_gv_pURCHASE_SPACING + lib1_gv_pURCHASE_WIDTH) / 2)), ((lib1_gv_fILTER_ICON_SIZE + lib1_gv_pURCHASE_SPACING) / -2), true);
        DialogSetImageVisible(DialogLastCreated(), false);
        DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
        lib1_gv_store_dialog_even[lv_purchase_index] = DialogLastCreated();
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lib1_gv_pURCHASE_WIDTH, lib1_gv_pURCHASE_HEIGHT, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_tooltip_frame_storymode.dds", c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lib1_gv_pURCHASE_WIDTH, 75, c_anchorTop, 0, 25, StringExternal("Param/Value/lib_1_C7189338"), Color(100,100,100), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CardCostSmall", PlayerGroupAll());
        lib1_gv_store_dialog_even_set_name[lv_purchase_index] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 215, 215, c_anchorTop, 0, 80, StringToText(""), "Assets\\Textures\\btn-ability-terran-liftoff.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 90.0);
        lib1_gv_store_dialog_even_icon[lv_purchase_index] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), (lib1_gv_pURCHASE_WIDTH - 40), 215, c_anchorTop, 0, 80, StringExternal("Param/Value/lib_1_A86CE953"), Color(100,100,100), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "SetDescription", PlayerGroupAll());
        lib1_gv_store_dialog_even_set_description[lv_purchase_index] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 400, 10, c_anchorBottom, 0, 279, StringToText(""), "Assets\\Textures\\ui_battlenet_glues_topnav_buttonselectedline.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 380, 228, c_anchorBottom, 0, 55, StringToText(""), "Assets\\Textures\\ui_battlenet_glues_pageassets_homepanel_upgrade.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        lib1_gv_store_dialog_even_image[lv_purchase_index] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (lib1_gv_pURCHASE_WIDTH - 10), 56, c_anchorBottom, 0, 4, StringToText(""), StringExternal("Param/Value/lib_1_C10D91C5"), "");
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CraftButton", PlayerGroupAll());
        lib1_gv_store_dialog_even_button[lv_purchase_index] = DialogControlLastCreated();
    }
    DialogCreate(74, 66, c_anchorTopLeft, 0, 0, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    lib1_gv_pack_dialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 74, 66, c_anchorCenter, 0, 0, StringExternal("Param/Value/lib_1_8A950F82"), StringToText(""), "");
    lib1_gv_pack_finish_button = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 20, 24, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\sc2_ui_glues_icons_backbuttonarrow.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
}

void lib1_gf_OpenStore (int lp_player, int lp_page) {
    // Variable Declarations
    int lv_purchase_index;

    // Automatic Variable Declarations
    const int auto96BF1571_ae = 2;
    const int auto96BF1571_ai = 1;
    const int auto1DEA8FE7_ae = 1;
    const int auto1DEA8FE7_ai = 1;

    // Variable Initialization

    // Implementation
    lib1_gv_player_collection[lp_player].lv_page = lp_page;
    DialogSetVisible(lib1_gv_store_dialog_credits, PlayerGroupSingle(lp_player), true);
    DialogSetVisible(lib1_gv_back_to_main_menu_dialog, PlayerGroupSingle(lp_player), true);
    DialogSetVisible(lib1_gv_store_arrow_dialog, PlayerGroupSingle(lp_player), true);
    lib1_gf_UpdatePlayerStoreCredits(lp_player);
    lv_purchase_index = 0;
    for ( ; ( (auto96BF1571_ai >= 0 && lv_purchase_index <= auto96BF1571_ae) || (auto96BF1571_ai < 0 && lv_purchase_index >= auto96BF1571_ae) ) ; lv_purchase_index += auto96BF1571_ai ) {
        DialogSetVisible(lib1_gv_store_dialog_odd[lv_purchase_index], PlayerGroupSingle(lp_player), false);
    }
    lv_purchase_index = 0;
    for ( ; ( (auto1DEA8FE7_ai >= 0 && lv_purchase_index <= auto1DEA8FE7_ae) || (auto1DEA8FE7_ai < 0 && lv_purchase_index >= auto1DEA8FE7_ae) ) ; lv_purchase_index += auto1DEA8FE7_ai ) {
        DialogSetVisible(lib1_gv_store_dialog_even[lv_purchase_index], PlayerGroupSingle(lp_player), false);
    }
    if ((lp_page == 0)) {
        lib1_gf_DisplaySetinStoreOdd(lp_player, lib1_gv_cORE, 0);
        lib1_gf_DisplaySetinStoreOdd(lp_player, lib1_gv_dESPERATE_ALLIANCES, 1);
        lib1_gf_DisplaySetinStoreOdd(lp_player, lib1_gv_uNNATURAL_EXPERIMENTS, 2);
        DialogControlSetVisible(lib1_gv_store_left_arrow_image, PlayerGroupSingle(lp_player), false);
        DialogControlSetEnabled(lib1_gv_store_left_arrow_button, PlayerGroupSingle(lp_player), false);
        DialogControlSetVisible(lib1_gv_store_right_arrow_image, PlayerGroupSingle(lp_player), true);
        DialogControlSetEnabled(lib1_gv_store_right_arrow_button, PlayerGroupSingle(lp_player), true);
    }
    else if ((lp_page == 1)) {
        lib1_gf_DisplaySetinStoreOdd(lp_player, lib1_gv_fIRST_CONTACT, 0);
        DialogControlSetVisible(lib1_gv_store_left_arrow_image, PlayerGroupSingle(lp_player), true);
        DialogControlSetEnabled(lib1_gv_store_left_arrow_button, PlayerGroupSingle(lp_player), true);
        DialogControlSetVisible(lib1_gv_store_right_arrow_image, PlayerGroupSingle(lp_player), false);
        DialogControlSetEnabled(lib1_gv_store_right_arrow_button, PlayerGroupSingle(lp_player), false);
    }
}

void lib1_gf_CloseStore (int lp_player) {
    // Variable Declarations
    int lv_purchase_index;

    // Automatic Variable Declarations
    const int auto78798EC0_ae = 2;
    const int auto78798EC0_ai = 1;
    const int auto21E28B43_ae = 1;
    const int auto21E28B43_ai = 1;

    // Variable Initialization

    // Implementation
    DialogSetVisible(lib1_gv_back_to_main_menu_dialog, PlayerGroupSingle(lp_player), false);
    DialogSetVisible(lib1_gv_store_dialog_credits, PlayerGroupSingle(lp_player), false);
    DialogSetVisible(lib1_gv_store_arrow_dialog, PlayerGroupSingle(lp_player), false);
    lv_purchase_index = 0;
    for ( ; ( (auto78798EC0_ai >= 0 && lv_purchase_index <= auto78798EC0_ae) || (auto78798EC0_ai < 0 && lv_purchase_index >= auto78798EC0_ae) ) ; lv_purchase_index += auto78798EC0_ai ) {
        DialogSetVisible(lib1_gv_store_dialog_odd[lv_purchase_index], PlayerGroupSingle(lp_player), false);
    }
    lv_purchase_index = 0;
    for ( ; ( (auto21E28B43_ai >= 0 && lv_purchase_index <= auto21E28B43_ae) || (auto21E28B43_ai < 0 && lv_purchase_index >= auto21E28B43_ae) ) ; lv_purchase_index += auto21E28B43_ai ) {
        DialogSetVisible(lib1_gv_store_dialog_even[lv_purchase_index], PlayerGroupSingle(lp_player), false);
    }
}

void lib1_gf_UpdatePlayerStoreCredits (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(lib1_gv_store_dialog_credits_amount, (StringExternal("Param/Value/lib_1_EC0A7878") + IntToText(lib1_gf_PlayerCredits(lp_player))), PlayerGroupSingle(lp_player));
}

void lib1_gf_DisplaySetinStoreOdd (int lp_player, int lp_set_id, int lp_slot) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(lib1_gv_store_dialog_odd_set_name[lp_slot], StringToText(lib1_gv_set[lp_set_id].lv_name), PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemText(lib1_gv_store_dialog_odd_set_description[lp_slot], StringToText(lib1_gv_set[lp_set_id].lv_description), PlayerGroupSingle(lp_player));
    if ((lib1_gv_set[lp_set_id].lv_state == lib1_gv_aVAILABLE)) {
        libNtve_gf_SetDialogItemText(lib1_gv_store_dialog_odd_button[lp_slot], (StringExternal("Param/Value/lib_1_E81BA771") + IntToText(lib1_gv_set[lp_set_id].lv_price) + StringExternal("Param/Value/lib_1_97A2281A")), PlayerGroupSingle(lp_player));
    }
    else {
        libNtve_gf_SetDialogItemText(lib1_gv_store_dialog_odd_button[lp_slot], StringExternal("Param/Value/lib_1_8D8CA3C7"), PlayerGroupSingle(lp_player));
    }
    libNtve_gf_SetDialogItemImage(lib1_gv_store_dialog_odd_image[lp_slot], lib1_gv_set[lp_set_id].lv_store_image, PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemImage(lib1_gv_store_dialog_odd_icon[lp_slot], lib1_gv_set[lp_set_id].lv_icon, PlayerGroupSingle(lp_player));
    DialogSetVisible(lib1_gv_store_dialog_odd[lp_slot], PlayerGroupSingle(lp_player), true);
    libNtve_gf_SetDialogItemCurrentValue(lib1_gv_store_dialog_odd_button[lp_slot], lp_set_id, PlayerGroupSingle(lp_player));
    if (((lib1_gv_set[FixedToInt(libNtve_gf_DialogItemValue(lib1_gv_store_dialog_odd_button[lp_slot], lp_player))].lv_price > lib1_gf_PlayerCredits(lp_player)) || (lib1_gv_set[lp_set_id].lv_state != lib1_gv_aVAILABLE))) {
        DialogControlSetEnabled(lib1_gv_store_dialog_odd_button[lp_slot], PlayerGroupSingle(lp_player), false);
    }
    else {
        DialogControlSetEnabled(lib1_gv_store_dialog_odd_button[lp_slot], PlayerGroupSingle(lp_player), true);
    }
}

void lib1_gf_DisplaySetinStoreEven (int lp_player, int lp_set_id, int lp_slot) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(lib1_gv_store_dialog_even_set_name[lp_slot], StringToText(lib1_gv_set[lp_set_id].lv_name), PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemText(lib1_gv_store_dialog_even_set_description[lp_slot], StringToText(lib1_gv_set[lp_set_id].lv_description), PlayerGroupSingle(lp_player));
    if ((lib1_gv_set[lp_set_id].lv_state == lib1_gv_aVAILABLE)) {
        libNtve_gf_SetDialogItemText(lib1_gv_store_dialog_even_button[lp_slot], (StringExternal("Param/Value/lib_1_F8963ED0") + IntToText(lib1_gv_set[lp_set_id].lv_price) + StringExternal("Param/Value/lib_1_28C10C48")), PlayerGroupSingle(lp_player));
    }
    else {
        libNtve_gf_SetDialogItemText(lib1_gv_store_dialog_even_button[lp_slot], StringExternal("Param/Value/lib_1_F89D4915"), PlayerGroupSingle(lp_player));
    }
    libNtve_gf_SetDialogItemImage(lib1_gv_store_dialog_even_image[lp_slot], lib1_gv_set[lp_set_id].lv_store_image, PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemImage(lib1_gv_store_dialog_even_icon[lp_slot], lib1_gv_set[lp_set_id].lv_icon, PlayerGroupSingle(lp_player));
    DialogSetVisible(lib1_gv_store_dialog_even[lp_slot], PlayerGroupSingle(lp_player), true);
    libNtve_gf_SetDialogItemCurrentValue(lib1_gv_store_dialog_even_button[lp_slot], lp_set_id, PlayerGroupSingle(lp_player));
    if (((lib1_gv_set[FixedToInt(libNtve_gf_DialogItemValue(lib1_gv_store_dialog_even_button[lp_slot], lp_player))].lv_price > lib1_gf_PlayerCredits(lp_player)) || (lib1_gv_set[lp_set_id].lv_state != lib1_gv_aVAILABLE))) {
        DialogControlSetEnabled(lib1_gv_store_dialog_even_button[lp_slot], PlayerGroupSingle(lp_player), false);
    }
    else {
        DialogControlSetEnabled(lib1_gv_store_dialog_even_button[lp_slot], PlayerGroupSingle(lp_player), true);
    }
}

trigger auto_lib1_gf_BuyPack_Trigger = null;
int auto_lib1_gf_BuyPack_lp_player;
int auto_lib1_gf_BuyPack_lp_set_id;

void lib1_gf_BuyPack (int lp_player, int lp_set_id) {
    auto_lib1_gf_BuyPack_lp_player = lp_player;
    auto_lib1_gf_BuyPack_lp_set_id = lp_set_id;

    if (auto_lib1_gf_BuyPack_Trigger == null) {
        auto_lib1_gf_BuyPack_Trigger = TriggerCreate("auto_lib1_gf_BuyPack_TriggerFunc");
    }

    TriggerExecute(auto_lib1_gf_BuyPack_Trigger, false, false);
}

bool auto_lib1_gf_BuyPack_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_lib1_gf_BuyPack_lp_player;
    int lp_set_id = auto_lib1_gf_BuyPack_lp_set_id;

    // Variable Declarations
    int[6] lv_pack;
    bool[6] lv_pack_sell_animate;
    int lv_random;
    int lv_pack_slot;
    int lv_transparency;

    // Automatic Variable Declarations
    const int autoC430134D_ae = 4;
    const int autoC430134D_ai = 1;
    const int auto18BC077A_ae = 5;
    const int auto18BC077A_ai = 1;
    const int auto2B177733_ae = 5;
    const int auto2B177733_ai = 1;
    const int autoDDA82CCC_ae = 0;
    const int autoDDA82CCC_ai = -10;
    const int auto1AD97D4F_ae = 5;
    const int auto1AD97D4F_ai = 1;

    // Variable Initialization

    // Implementation
    lib1_gf_CloseStore(lp_player);
    lv_pack_slot = 0;
    for ( ; ( (autoC430134D_ai >= 0 && lv_pack_slot <= autoC430134D_ae) || (autoC430134D_ai < 0 && lv_pack_slot >= autoC430134D_ae) ) ; lv_pack_slot += autoC430134D_ai ) {
        lv_random = RandomInt(1, 100);
        if ((lv_random <= lib1_gv_cOMMON_FREQ_T1)) {
            lv_pack[lv_pack_slot] = lib1_gf_GetRandomCardWithRarityFromSet(lp_set_id, lib1_gv_cOMMON);
        }
        else if ((lv_random <= (lib1_gv_cOMMON_FREQ_T1 + lib1_gv_uNCOMMON_FREQ_T1))) {
            lv_pack[lv_pack_slot] = lib1_gf_GetRandomCardWithRarityFromSet(lp_set_id, lib1_gv_uNCOMMON);
        }
        else if ((lv_random <= (lib1_gv_cOMMON_FREQ_T1 + lib1_gv_uNCOMMON_FREQ_T1 + lib1_gv_rARE_FREQ_T1))) {
            lv_pack[lv_pack_slot] = lib1_gf_GetRandomCardWithRarityFromSet(lp_set_id, lib1_gv_rARE);
        }
        else if (true) {
            lv_pack[lv_pack_slot] = lib1_gf_GetRandomCardWithRarityFromSet(lp_set_id, lib1_gv_uNIQUE);
        }
    }
    lv_pack_slot = 5;
    if ((lib1_gv_player_collection[lp_player].lv_packs_opened[lp_set_id] == 0)) {
        if ((lp_set_id == lib1_gv_uNNATURAL_EXPERIMENTS)) {
            lv_pack[lv_pack_slot] = lib1_gf_GetCardIDByName("Amon");
        }
        else {
            lv_pack[lv_pack_slot] = lib1_gf_GetRandomCardWithRarityFromSet(lp_set_id, lib1_gv_uNIQUE);
        }
    }
    else {
        lv_random = RandomInt(1, 100);
        if ((lv_random <= lib1_gv_cOMMON_FREQ_T2)) {
            lv_pack[lv_pack_slot] = lib1_gf_GetRandomCardWithRarityFromSet(lp_set_id, lib1_gv_cOMMON);
        }
        else if ((lv_random <= (lib1_gv_cOMMON_FREQ_T2 + lib1_gv_uNCOMMON_FREQ_T2))) {
            lv_pack[lv_pack_slot] = lib1_gf_GetRandomCardWithRarityFromSet(lp_set_id, lib1_gv_uNCOMMON);
        }
        else if ((lv_random <= (lib1_gv_cOMMON_FREQ_T2 + lib1_gv_uNCOMMON_FREQ_T2 + lib1_gv_rARE_FREQ_T2))) {
            lv_pack[lv_pack_slot] = lib1_gf_GetRandomCardWithRarityFromSet(lp_set_id, lib1_gv_rARE);
        }
        else if (true) {
            lv_pack[lv_pack_slot] = lib1_gf_GetRandomCardWithRarityFromSet(lp_set_id, lib1_gv_uNIQUE);
        }
    }
    lib1_gv_player_collection[lp_player].lv_packs_opened[lp_set_id] = (lib1_gv_player_collection[lp_player].lv_packs_opened[lp_set_id] + 1);
    lv_pack_slot = 0;
    for ( ; ( (auto18BC077A_ai >= 0 && lv_pack_slot <= auto18BC077A_ae) || (auto18BC077A_ai < 0 && lv_pack_slot >= auto18BC077A_ae) ) ; lv_pack_slot += auto18BC077A_ai ) {
        lib1_gv_player_collection[lp_player].lv_unpacked[lv_pack[lv_pack_slot]] = (lib1_gv_player_collection[lp_player].lv_unpacked[lv_pack[lv_pack_slot]] + 1);
        if (((lib1_gf_CardOwnedCountActual(lp_player, lv_pack[lv_pack_slot]) > 2) || ((lib1_gv_card[lv_pack[lv_pack_slot]].lv_rarity == lib1_gv_uNIQUE) && (lib1_gf_CardOwnedCountActual(lp_player, lv_pack[lv_pack_slot]) > 1)))) {
            lib1_gv_player_collection[lp_player].lv_sold[lv_pack[lv_pack_slot]] = (lib1_gv_player_collection[lp_player].lv_sold[lv_pack[lv_pack_slot]] + 1);
            lv_pack_sell_animate[lv_pack_slot] = true;
            lib1_gv_player_collection[lp_player].lv_essence_earned = (lib1_gv_player_collection[lp_player].lv_essence_earned + lib1_gf_DestroyReward(lib1_gv_card[lv_pack[lv_pack_slot]].lv_rarity, lp_set_id));
        }

    }
    lib1_gf_SaveCollectiontoBank(lp_player);
    lib1_gf_SavePackPurchasestoBank(lp_player, lp_set_id);
    lib1_gf_SaveCurrencytoBank(lp_player);
    lv_pack_slot = 0;
    for ( ; ( (auto2B177733_ai >= 0 && lv_pack_slot <= auto2B177733_ae) || (auto2B177733_ai < 0 && lv_pack_slot >= auto2B177733_ae) ) ; lv_pack_slot += auto2B177733_ai ) {
        lib1_gf_CreateCard(lp_player, lib1_gf_PackCardX(lv_pack_slot), lib1_gf_PackCardY(lv_pack_slot), lv_pack[lv_pack_slot], "pack", lv_pack_slot, "", 0);
        SoundPlayForPlayer(SoundLink("Core_BeamLaunch", 0), c_maxPlayers, PlayerGroupSingle(lp_player), 100.0, 0.0);
        lv_transparency = 100;
        for ( ; ( (autoDDA82CCC_ai >= 0 && lv_transparency <= autoDDA82CCC_ae) || (autoDDA82CCC_ai < 0 && lv_transparency >= autoDDA82CCC_ae) ) ; lv_transparency += autoDDA82CCC_ai ) {
            DialogSetTransparency(lib1_gv_player_collection[lp_player].lv_pack_card[lv_pack_slot], IntToFixed(lv_transparency));
            Wait(0.01, c_timeGame);
        }
        Wait(0.3, c_timeGame);
    }
    lv_pack_slot = 0;
    for ( ; ( (auto1AD97D4F_ai >= 0 && lv_pack_slot <= auto1AD97D4F_ae) || (auto1AD97D4F_ai < 0 && lv_pack_slot >= auto1AD97D4F_ae) ) ; lv_pack_slot += auto1AD97D4F_ai ) {
        if ((lv_pack_sell_animate[lv_pack_slot] == true)) {
            lib1_gf_FadeandDestroyDialog(lib1_gv_player_collection[lp_player].lv_pack_card[lv_pack_slot], 1.0);
            DialogCreate(300, 400, c_anchorCenter, lib1_gf_PackCardX(lv_pack_slot), lib1_gf_PackCardY(lv_pack_slot), true);
            DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
            DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(lp_player), true);
            DialogSetImageVisible(DialogLastCreated(), false);
            lib1_gv_player_collection[lp_player].lv_pack_card[lv_pack_slot] = DialogLastCreated();
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 400, c_anchorCenter, 0, 0, (StringExternal("Param/Value/lib_1_6E72F2DF") + IntToText(lib1_gf_DestroyReward(lib1_gv_card[lv_pack[lv_pack_slot]].lv_rarity, lp_set_id)) + StringExternal("Param/Value/lib_1_5AF71FF6")), Color(100,100,100), false, 2.0);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CardCostSmall", PlayerGroupAll());
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 2.0, 0.0);
        }

    }
    DialogSetVisible(lib1_gv_pack_dialog, PlayerGroupSingle(lp_player), true);
    return true;
}

void lib1_gf_ClosePack (int lp_player) {
    // Variable Declarations
    int lv_pack_slot;

    // Automatic Variable Declarations
    const int auto5F5AB883_ae = 5;
    const int auto5F5AB883_ai = 1;

    // Variable Initialization

    // Implementation
    DialogSetVisible(lib1_gv_pack_dialog, PlayerGroupSingle(lp_player), false);
    lv_pack_slot = 0;
    for ( ; ( (auto5F5AB883_ai >= 0 && lv_pack_slot <= auto5F5AB883_ae) || (auto5F5AB883_ai < 0 && lv_pack_slot >= auto5F5AB883_ae) ) ; lv_pack_slot += auto5F5AB883_ai ) {
        if ((lib1_gv_player_collection[lp_player].lv_pack_card[lv_pack_slot] != c_invalidDialogId)) {
            DialogDestroy(lib1_gv_player_collection[lp_player].lv_pack_card[lv_pack_slot]);
        }

    }
}

void lib1_gf_CreateStatsPage () {
    // Variable Declarations
    int lv_current_y;
    const int lv_bUTTON_SPACING_X = 30;
    const int lv_bUTTON_HEIGHT = 60;
    const int lv_bUTTON_WIDTH = 150;
    const int lv_rESET_BUTTON_WIDTH = 350;
    const int lv_sPACING_Y = 30;
    const int lv_mAIN_WINDOW_PADDING = 80;
    const int lv_mAIN_WINDOW_COLUMN_HEIGHT = 700;
    const int lv_mAIN_WINDOW_COLUMN_WIDTH = 250;
    const int lv_mAIN_WINDOW_COLUMN_COUNT = 3;
    const int lv_cURRENT_RACE_HEIGHT = 40;
    const int lv_lINE_SPACING = 15;
    const int lv_sTAT_HEIGHT = 25;
    int lv_main_window_width;
    int lv_main_window_height;
    int lv_button_position_y;
    int lv_main_window_position_y;
    int lv_main_window_column_1_x;
    int lv_main_window_column_2_x;
    int lv_main_window_column_3_x;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_main_window_width = (lv_mAIN_WINDOW_PADDING + (lv_mAIN_WINDOW_COLUMN_WIDTH * lv_mAIN_WINDOW_COLUMN_COUNT) + lv_mAIN_WINDOW_PADDING);
    lv_main_window_height = (lv_mAIN_WINDOW_PADDING + lv_mAIN_WINDOW_COLUMN_HEIGHT + lv_mAIN_WINDOW_PADDING);
    lv_button_position_y = ((lv_main_window_height + lv_sPACING_Y) / -2);
    lv_main_window_position_y = ((lv_bUTTON_HEIGHT + lv_sPACING_Y) / 2);
    lv_main_window_column_1_x = (lv_mAIN_WINDOW_COLUMN_WIDTH * -1);
    lv_main_window_column_3_x = lv_mAIN_WINDOW_COLUMN_WIDTH;
    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    lib1_gv_stats_button_dialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lv_bUTTON_WIDTH, lv_bUTTON_HEIGHT, c_anchorCenter, ((lv_bUTTON_WIDTH * -1) - lv_bUTTON_SPACING_X), lv_button_position_y, StringToText(""), StringExternal("Param/Value/lib_1_58F05B96"), "");
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CraftButton", PlayerGroupAll());
    lib1_gv_stats_terran_button = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lv_bUTTON_WIDTH, lv_bUTTON_HEIGHT, c_anchorCenter, 0, lv_button_position_y, StringToText(""), StringExternal("Param/Value/lib_1_186757D2"), "");
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CraftButton", PlayerGroupAll());
    lib1_gv_stats_zerg_button = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lv_bUTTON_WIDTH, lv_bUTTON_HEIGHT, c_anchorCenter, (lv_bUTTON_WIDTH + lv_bUTTON_SPACING_X), lv_button_position_y, StringToText(""), StringExternal("Param/Value/lib_1_6F8B17BD"), "");
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CraftButton", PlayerGroupAll());
    lib1_gv_stats_protoss_button = DialogControlLastCreated();
    DialogCreate(lv_main_window_width, lv_main_window_height, c_anchorCenter, 0, lv_main_window_position_y, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    lib1_gv_stats_frame_dialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_main_window_width, lv_main_window_height, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_tooltip_frame_terran.dds", c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    lib1_gv_stats_frame = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lv_rESET_BUTTON_WIDTH, lv_bUTTON_HEIGHT, c_anchorBottom, 0, lv_mAIN_WINDOW_PADDING, StringToText(""), StringExternal("Param/Value/lib_1_F841CA6B"), "");
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CraftButton", PlayerGroupAll());
    lib1_gv_stats_reset_button = DialogControlLastCreated();
    lv_current_y = lv_mAIN_WINDOW_PADDING;
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lv_main_window_width, lv_cURRENT_RACE_HEIGHT, c_anchorTop, 0, lv_current_y, StringExternal("Param/Value/lib_1_B5A32C23"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CardCostSmall", PlayerGroupAll());
    lib1_gv_stats_current_race = DialogControlLastCreated();
    lv_current_y = (lv_current_y + lv_cURRENT_RACE_HEIGHT);
    lv_current_y = (lv_current_y + (lv_lINE_SPACING * 2));
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lv_main_window_width, lv_sTAT_HEIGHT, c_anchorTop, 0, lv_current_y, StringExternal("Param/Value/lib_1_6C3C7735"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CraftButton", PlayerGroupAll());
    lib1_gv_stats_wins = DialogControlLastCreated();
    lv_current_y = (lv_current_y + lv_sTAT_HEIGHT);
    lv_current_y = (lv_current_y + lv_lINE_SPACING);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lv_main_window_width, lv_sTAT_HEIGHT, c_anchorTop, 0, lv_current_y, StringExternal("Param/Value/lib_1_4DA9092A"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CraftButton", PlayerGroupAll());
    lib1_gv_stats_losses = DialogControlLastCreated();
    lv_current_y = (lv_current_y + lv_sTAT_HEIGHT);
    lv_current_y = (lv_current_y + (lv_lINE_SPACING * 4));
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lv_main_window_width, lv_sTAT_HEIGHT, c_anchorTop, 0, lv_current_y, StringExternal("Param/Value/lib_1_D6357F80"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CraftButton", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lv_main_window_width, lv_sTAT_HEIGHT, c_anchorTop, lv_main_window_column_3_x, lv_current_y, StringExternal("Param/Value/lib_1_D1DA5CC7"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CraftButton", PlayerGroupAll());
    lv_current_y = (lv_current_y + lv_sTAT_HEIGHT);
    lv_current_y = (lv_current_y + (lv_lINE_SPACING * 2));
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lv_mAIN_WINDOW_COLUMN_WIDTH, lv_sTAT_HEIGHT, c_anchorTop, lv_main_window_column_1_x, lv_current_y, StringExternal("Param/Value/lib_1_F850F1D4"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RowType", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lv_mAIN_WINDOW_COLUMN_WIDTH, lv_sTAT_HEIGHT, c_anchorTop, lv_main_window_column_2_x, lv_current_y, StringExternal("Param/Value/lib_1_3FF4D484"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CraftButton", PlayerGroupAll());
    lib1_gv_stats_damage_dealt_average = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lv_mAIN_WINDOW_COLUMN_WIDTH, lv_sTAT_HEIGHT, c_anchorTop, lv_main_window_column_3_x, lv_current_y, StringExternal("Param/Value/lib_1_2C9AD6D0"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CraftButton", PlayerGroupAll());
    lib1_gv_stats_damage_dealt_this = DialogControlLastCreated();
    lv_current_y = (lv_current_y + lv_sTAT_HEIGHT);
    lv_current_y = (lv_current_y + lv_lINE_SPACING);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lv_mAIN_WINDOW_COLUMN_WIDTH, lv_sTAT_HEIGHT, c_anchorTop, lv_main_window_column_1_x, lv_current_y, StringExternal("Param/Value/lib_1_D9B54338"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RowType", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lv_mAIN_WINDOW_COLUMN_WIDTH, lv_sTAT_HEIGHT, c_anchorTop, lv_main_window_column_2_x, lv_current_y, StringExternal("Param/Value/lib_1_C90C20B8"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CraftButton", PlayerGroupAll());
    lib1_gv_stats_damage_received_average = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lv_mAIN_WINDOW_COLUMN_WIDTH, lv_sTAT_HEIGHT, c_anchorTop, lv_main_window_column_3_x, lv_current_y, StringExternal("Param/Value/lib_1_870C93F2"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CraftButton", PlayerGroupAll());
    lib1_gv_stats_damage_received_this = DialogControlLastCreated();
    lv_current_y = (lv_current_y + lv_sTAT_HEIGHT);
    lv_current_y = (lv_current_y + (lv_lINE_SPACING * 2));
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lv_mAIN_WINDOW_COLUMN_WIDTH, lv_sTAT_HEIGHT, c_anchorTop, lv_main_window_column_1_x, lv_current_y, StringExternal("Param/Value/lib_1_AA86C1EC"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RowType", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lv_mAIN_WINDOW_COLUMN_WIDTH, lv_sTAT_HEIGHT, c_anchorTop, lv_main_window_column_2_x, lv_current_y, StringExternal("Param/Value/lib_1_C3FB45B2"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CraftButton", PlayerGroupAll());
    lib1_gv_stats_units_killed_average = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lv_mAIN_WINDOW_COLUMN_WIDTH, lv_sTAT_HEIGHT, c_anchorTop, lv_main_window_column_3_x, lv_current_y, StringExternal("Param/Value/lib_1_1E3904F9"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CraftButton", PlayerGroupAll());
    lib1_gv_stats_units_killed_this = DialogControlLastCreated();
    lv_current_y = (lv_current_y + lv_sTAT_HEIGHT);
    lv_current_y = (lv_current_y + lv_lINE_SPACING);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lv_mAIN_WINDOW_COLUMN_WIDTH, lv_sTAT_HEIGHT, c_anchorTop, lv_main_window_column_1_x, lv_current_y, StringExternal("Param/Value/lib_1_EFFD2413"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RowType", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lv_mAIN_WINDOW_COLUMN_WIDTH, lv_sTAT_HEIGHT, c_anchorTop, lv_main_window_column_2_x, lv_current_y, StringExternal("Param/Value/lib_1_ED8133E0"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CraftButton", PlayerGroupAll());
    lib1_gv_stats_heroes_killed_average = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lv_mAIN_WINDOW_COLUMN_WIDTH, lv_sTAT_HEIGHT, c_anchorTop, lv_main_window_column_3_x, lv_current_y, StringExternal("Param/Value/lib_1_32A2D0B7"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CraftButton", PlayerGroupAll());
    lib1_gv_stats_heroes_killed_this = DialogControlLastCreated();
    lv_current_y = (lv_current_y + lv_sTAT_HEIGHT);
    lv_current_y = (lv_current_y + lv_lINE_SPACING);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lv_mAIN_WINDOW_COLUMN_WIDTH, lv_sTAT_HEIGHT, c_anchorTop, lv_main_window_column_1_x, lv_current_y, StringExternal("Param/Value/lib_1_BA047ED7"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RowType", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lv_mAIN_WINDOW_COLUMN_WIDTH, lv_sTAT_HEIGHT, c_anchorTop, lv_main_window_column_2_x, lv_current_y, StringExternal("Param/Value/lib_1_9E32540B"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CraftButton", PlayerGroupAll());
    lib1_gv_stats_structures_killed_average = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lv_mAIN_WINDOW_COLUMN_WIDTH, lv_sTAT_HEIGHT, c_anchorTop, lv_main_window_column_3_x, lv_current_y, StringExternal("Param/Value/lib_1_01AFF3F2"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CraftButton", PlayerGroupAll());
    lib1_gv_stats_structures_killed_this = DialogControlLastCreated();
    lv_current_y = (lv_current_y + lv_sTAT_HEIGHT);
    lv_current_y = (lv_current_y + (lv_lINE_SPACING * 2));
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lv_mAIN_WINDOW_COLUMN_WIDTH, lv_sTAT_HEIGHT, c_anchorTop, lv_main_window_column_1_x, lv_current_y, StringExternal("Param/Value/lib_1_1D2AB60B"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RowType", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lv_mAIN_WINDOW_COLUMN_WIDTH, lv_sTAT_HEIGHT, c_anchorTop, lv_main_window_column_2_x, lv_current_y, StringExternal("Param/Value/lib_1_D356213C"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CraftButton", PlayerGroupAll());
    lib1_gv_stats_units_created_average = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lv_mAIN_WINDOW_COLUMN_WIDTH, lv_sTAT_HEIGHT, c_anchorTop, lv_main_window_column_3_x, lv_current_y, StringExternal("Param/Value/lib_1_179D19D8"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CraftButton", PlayerGroupAll());
    lib1_gv_stats_units_created_this = DialogControlLastCreated();
    lv_current_y = (lv_current_y + lv_sTAT_HEIGHT);
    lv_current_y = (lv_current_y + lv_lINE_SPACING);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lv_mAIN_WINDOW_COLUMN_WIDTH, lv_sTAT_HEIGHT, c_anchorTop, lv_main_window_column_1_x, lv_current_y, StringExternal("Param/Value/lib_1_1C207670"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RowType", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lv_mAIN_WINDOW_COLUMN_WIDTH, lv_sTAT_HEIGHT, c_anchorTop, lv_main_window_column_2_x, lv_current_y, StringExternal("Param/Value/lib_1_D8E3B1AA"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CraftButton", PlayerGroupAll());
    lib1_gv_stats_heroes_created_average = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lv_mAIN_WINDOW_COLUMN_WIDTH, lv_sTAT_HEIGHT, c_anchorTop, lv_main_window_column_3_x, lv_current_y, StringExternal("Param/Value/lib_1_84676D01"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CraftButton", PlayerGroupAll());
    lib1_gv_stats_heroes_created_this = DialogControlLastCreated();
    lv_current_y = (lv_current_y + lv_sTAT_HEIGHT);
    lv_current_y = (lv_current_y + lv_lINE_SPACING);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lv_mAIN_WINDOW_COLUMN_WIDTH, lv_sTAT_HEIGHT, c_anchorTop, lv_main_window_column_1_x, lv_current_y, StringExternal("Param/Value/lib_1_793CFA3F"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RowType", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lv_mAIN_WINDOW_COLUMN_WIDTH, lv_sTAT_HEIGHT, c_anchorTop, lv_main_window_column_2_x, lv_current_y, StringExternal("Param/Value/lib_1_09E4FC12"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CraftButton", PlayerGroupAll());
    lib1_gv_stats_structures_created_average = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lv_mAIN_WINDOW_COLUMN_WIDTH, lv_sTAT_HEIGHT, c_anchorTop, lv_main_window_column_3_x, lv_current_y, StringExternal("Param/Value/lib_1_DE91171F"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CraftButton", PlayerGroupAll());
    lib1_gv_stats_structures_created_this = DialogControlLastCreated();
}

void lib1_gf_OpenStatsPage (int lp_player, int lp_race) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetEnabled(lib1_gv_stats_reset_button, PlayerGroupSingle(lp_player), true);
    lib1_gv_player_collection[lp_player].lv_current_stats_race = lp_race;
    DialogSetVisible(lib1_gv_back_to_main_menu_dialog, PlayerGroupSingle(lp_player), true);
    DialogSetVisible(lib1_gv_stats_button_dialog, PlayerGroupSingle(lp_player), true);
    DialogSetVisible(lib1_gv_stats_frame_dialog, PlayerGroupSingle(lp_player), true);
    if ((lp_race == lib1_gv_tERRAN)) {
        libNtve_gf_SetDialogItemText(lib1_gv_stats_current_race, StringExternal("Param/Value/lib_1_F0939ED4"), PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemText(lib1_gv_stats_reset_button, StringExternal("Param/Value/lib_1_62178C31"), PlayerGroupSingle(lp_player));
        DialogControlSetEnabled(lib1_gv_stats_terran_button, PlayerGroupSingle(lp_player), false);
        DialogControlSetEnabled(lib1_gv_stats_zerg_button, PlayerGroupSingle(lp_player), true);
        DialogControlSetEnabled(lib1_gv_stats_protoss_button, PlayerGroupSingle(lp_player), true);
        libNtve_gf_SetDialogItemImage(lib1_gv_stats_frame, "Assets\\Textures\\ui_tooltip_frame_terran.dds", PlayerGroupSingle(lp_player));
    }
    else if ((lp_race == lib1_gv_zERG)) {
        libNtve_gf_SetDialogItemText(lib1_gv_stats_current_race, StringExternal("Param/Value/lib_1_777AF58D"), PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemText(lib1_gv_stats_reset_button, StringExternal("Param/Value/lib_1_BBA5A5CC"), PlayerGroupSingle(lp_player));
        DialogControlSetEnabled(lib1_gv_stats_terran_button, PlayerGroupSingle(lp_player), true);
        DialogControlSetEnabled(lib1_gv_stats_zerg_button, PlayerGroupSingle(lp_player), false);
        DialogControlSetEnabled(lib1_gv_stats_protoss_button, PlayerGroupSingle(lp_player), true);
        libNtve_gf_SetDialogItemImage(lib1_gv_stats_frame, "Assets\\Textures\\ui_tooltip_frame_zerg.dds", PlayerGroupSingle(lp_player));
    }
    else if ((lp_race == lib1_gv_pROTOSS)) {
        libNtve_gf_SetDialogItemText(lib1_gv_stats_current_race, StringExternal("Param/Value/lib_1_5CF62774"), PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemText(lib1_gv_stats_reset_button, StringExternal("Param/Value/lib_1_97D32AAB"), PlayerGroupSingle(lp_player));
        DialogControlSetEnabled(lib1_gv_stats_terran_button, PlayerGroupSingle(lp_player), true);
        DialogControlSetEnabled(lib1_gv_stats_zerg_button, PlayerGroupSingle(lp_player), true);
        DialogControlSetEnabled(lib1_gv_stats_protoss_button, PlayerGroupSingle(lp_player), false);
        libNtve_gf_SetDialogItemImage(lib1_gv_stats_frame, "Assets\\Textures\\ui_tooltip_frame_protoss.dds", PlayerGroupSingle(lp_player));
    }
    libNtve_gf_SetDialogItemText(lib1_gv_stats_wins, (StringExternal("Param/Value/lib_1_DD29C17C") + IntToText(lib1_gf_TotalWinsforRace(lp_player, lp_race, true))), PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemText(lib1_gv_stats_losses, (StringExternal("Param/Value/lib_1_161F5800") + IntToText(lib1_gf_TotalLossesforRace(lp_player, lp_race, true))), PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemText(lib1_gv_stats_damage_dealt_average, IntToText(lib1_gf_GetAverageDamageDealt(lp_player, lp_race)), PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemText(lib1_gv_stats_damage_received_average, IntToText(lib1_gf_GetAverageDamageReceived(lp_player, lp_race)), PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemText(lib1_gv_stats_units_killed_average, IntToText(lib1_gf_GetAverageUnitsKilled(lp_player, lp_race, true)), PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemText(lib1_gv_stats_heroes_killed_average, IntToText(lib1_gf_GetAverageHeroesKilled(lp_player, lp_race, true)), PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemText(lib1_gv_stats_structures_killed_average, IntToText(lib1_gf_GetAverageStructuresKilled(lp_player, lp_race, true)), PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemText(lib1_gv_stats_units_created_average, IntToText(lib1_gf_GetAverageUnitsCreated(lp_player, lp_race, true)), PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemText(lib1_gv_stats_heroes_created_average, IntToText(lib1_gf_GetAverageHeroesCreated(lp_player, lp_race, true)), PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemText(lib1_gv_stats_structures_created_average, IntToText(lib1_gf_GetAverageStructuresCreated(lp_player, lp_race, true)), PlayerGroupSingle(lp_player));
    if ((lib1_gv_uneven_teams == false) && (lp_race == lib1_gf_GetPlayerRaceID(lp_player))) {
        libNtve_gf_SetDialogItemText(lib1_gv_stats_damage_dealt_this, IntToText(lib1_gf_GetDamageDealt(lp_player, lp_race)), PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemText(lib1_gv_stats_damage_received_this, IntToText(lib1_gf_GetDamageReceived(lp_player, lp_race)), PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemText(lib1_gv_stats_units_killed_this, IntToText(lib1_gv_player[lp_player].lv_units_killed[lp_race]), PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemText(lib1_gv_stats_heroes_killed_this, IntToText(lib1_gv_player[lp_player].lv_heroes_killed[lp_race]), PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemText(lib1_gv_stats_structures_killed_this, IntToText(lib1_gv_player[lp_player].lv_structures_killed[lp_race]), PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemText(lib1_gv_stats_units_created_this, IntToText(lib1_gv_player[lp_player].lv_units_created[lp_race]), PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemText(lib1_gv_stats_heroes_created_this, IntToText(lib1_gv_player[lp_player].lv_heroes_created[lp_race]), PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemText(lib1_gv_stats_structures_created_this, IntToText(lib1_gv_player[lp_player].lv_structures_created[lp_race]), PlayerGroupSingle(lp_player));
    }
    else {
        libNtve_gf_SetDialogItemText(lib1_gv_stats_damage_dealt_this, StringExternal("Param/Value/lib_1_9CE88E22"), PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemText(lib1_gv_stats_damage_received_this, StringExternal("Param/Value/lib_1_48C6029A"), PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemText(lib1_gv_stats_units_killed_this, StringExternal("Param/Value/lib_1_7CE91A47"), PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemText(lib1_gv_stats_heroes_killed_this, StringExternal("Param/Value/lib_1_B7F93253"), PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemText(lib1_gv_stats_structures_killed_this, StringExternal("Param/Value/lib_1_02D4CB8D"), PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemText(lib1_gv_stats_units_created_this, StringExternal("Param/Value/lib_1_1119067C"), PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemText(lib1_gv_stats_heroes_created_this, StringExternal("Param/Value/lib_1_3AB6354C"), PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemText(lib1_gv_stats_structures_created_this, StringExternal("Param/Value/lib_1_F6AA3C4E"), PlayerGroupSingle(lp_player));
    }
}

void lib1_gf_CloseStatsPage (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    DialogSetVisible(lib1_gv_back_to_main_menu_dialog, PlayerGroupSingle(lp_player), false);
    DialogSetVisible(lib1_gv_stats_button_dialog, PlayerGroupSingle(lp_player), false);
    DialogSetVisible(lib1_gv_stats_frame_dialog, PlayerGroupSingle(lp_player), false);
}

void lib1_gf_ResetStats (int lp_player, int lp_race) {
    // Variable Declarations
    int lv_mode;

    // Automatic Variable Declarations
    const int auto90806B3F_ae = lib1_gv_mAX_MODE_ID;
    const int auto90806B3F_ai = 1;

    // Variable Initialization

    // Implementation
    lib1_gv_player[lp_player].lv_forced_reset_id = lib1_gv_mAX_PLAYERS2;
    lv_mode = 0;
    for ( ; ( (auto90806B3F_ai >= 0 && lv_mode <= auto90806B3F_ae) || (auto90806B3F_ai < 0 && lv_mode >= auto90806B3F_ae) ) ; lv_mode += auto90806B3F_ai ) {
        lib1_gv_player[lp_player].lv_wins_reset_point[lp_race][lv_mode] = lib1_gv_player[lp_player].lv_wins[lp_race][lv_mode];
        lib1_gv_player[lp_player].lv_losses_reset_point[lp_race][lv_mode] = lib1_gv_player[lp_player].lv_losses[lp_race][lv_mode];
        lib1_gv_player[lp_player].lv_quits_reset_point[lp_race][lv_mode] = lib1_gv_player[lp_player].lv_quits[lp_race][lv_mode];
    }
    lib1_gv_player[lp_player].lv_damage_dealt_average[lp_race] = 0.0;
    lib1_gv_player[lp_player].lv_damage_received_average[lp_race] = 0.0;
    lib1_gv_player[lp_player].lv_units_killed_reset_point[lp_race] = lib1_gv_player[lp_player].lv_units_killed_total[lp_race];
    lib1_gv_player[lp_player].lv_heroes_killed_reset_point[lp_race] = lib1_gv_player[lp_player].lv_heroes_killed_total[lp_race];
    lib1_gv_player[lp_player].lv_structures_killed_reset_point[lp_race] = lib1_gv_player[lp_player].lv_structures_killed_total[lp_race];
    lib1_gv_player[lp_player].lv_units_created_reset_point[lp_race] = lib1_gv_player[lp_player].lv_units_created_total[lp_race];
    lib1_gv_player[lp_player].lv_heroes_created_reset_point[lp_race] = lib1_gv_player[lp_player].lv_heroes_created_total[lp_race];
    lib1_gv_player[lp_player].lv_structures_created_reset_point[lp_race] = lib1_gv_player[lp_player].lv_structures_created_total[lp_race];
    lib1_gf_SaveStatsResetPointtoBank(lp_player);
}

void lib1_gf_OpenTrophyPage (int lp_player, int lp_page) {
    // Variable Declarations
    int lv_cosmetic_slot;
    int lv_possible_cosmetic_slot;
    int lv_slot;
    int lv_cosmetic_id;
    int lv_start_slot;
    int lv_end_slot;
    bool lv_show_next_page_button;

    // Automatic Variable Declarations
    const int auto4961B425_ae = 2;
    const int auto4961B425_ai = 1;
    const int autoC3355760_ae = lib1_gv_tROPHY_LIMIT;
    const int autoC3355760_ai = 1;

    // Variable Initialization

    // Implementation
    lib1_gv_player_collection[lp_player].lv_trophy_page = lp_page;
    lv_slot = 0;
    for ( ; ( (auto4961B425_ai >= 0 && lv_slot <= auto4961B425_ae) || (auto4961B425_ai < 0 && lv_slot >= auto4961B425_ae) ) ; lv_slot += auto4961B425_ai ) {
        DialogControlSetVisible(lib1_gv_trophy_button[lv_slot], PlayerGroupSingle(lp_player), false);
        DialogControlSetVisible(lib1_gv_trophy_image[lv_slot], PlayerGroupSingle(lp_player), false);
        DialogControlSetVisible(lib1_gv_trophy_image_border[lv_slot], PlayerGroupSingle(lp_player), false);
        DialogControlSetVisible(lib1_gv_trophy_name[lv_slot], PlayerGroupSingle(lp_player), false);
        DialogControlSetVisible(lib1_gv_trophy_name_border[lv_slot], PlayerGroupSingle(lp_player), false);
        DialogControlSetVisible(lib1_gv_trophy_enabled_text[lv_slot], PlayerGroupSingle(lp_player), false);
    }
    lv_start_slot = (lp_page * 3);
    lv_end_slot = (lv_start_slot + 2);
    lv_possible_cosmetic_slot = 0;
    for ( ; ( (autoC3355760_ai >= 0 && lv_possible_cosmetic_slot <= autoC3355760_ae) || (autoC3355760_ai < 0 && lv_possible_cosmetic_slot >= autoC3355760_ae) ) ; lv_possible_cosmetic_slot += autoC3355760_ai ) {
        lv_cosmetic_id = lib1_gv_trophy_store[lv_possible_cosmetic_slot];
        if ((lv_cosmetic_id >= 0) && (lib1_gv_cosmetic_trophy[lv_cosmetic_id].lv_available == true) && ((lib1_gv_player_cosmetics[lp_player].lv_trophy_owned[lv_cosmetic_id] == true) || (lib1_gv_cosmetic_trophy[lv_cosmetic_id].lv_exclusive == false))) {
            if ((lv_cosmetic_slot < lv_start_slot)) {
                lv_cosmetic_slot = (lv_cosmetic_slot + 1);
            }
            else if ((lv_cosmetic_slot >= lv_start_slot) && (lv_cosmetic_slot <= lv_end_slot)) {
                lib1_gf_ShowCosmeticInStoreSlot(lp_player, (lv_cosmetic_slot - lv_start_slot), lv_cosmetic_id, lib1_ge_CosmeticType_Trophy);
                lv_cosmetic_slot = (lv_cosmetic_slot + 1);
            }
            else if ((lv_cosmetic_slot > lv_end_slot) && (lv_cosmetic_slot < lib1_gf_VisibleTrophyCount(lp_player))) {
                lv_show_next_page_button = true;
                break;
            }
        }

    }
    if ((lp_page > 0)) {
        DialogControlSetVisible(lib1_gv_trophy_left_arrow, PlayerGroupSingle(lp_player), true);
        DialogControlSetEnabled(lib1_gv_trophy_left_arrow_button, PlayerGroupSingle(lp_player), true);
    }
    else {
        DialogControlSetVisible(lib1_gv_trophy_left_arrow, PlayerGroupSingle(lp_player), false);
        DialogControlSetEnabled(lib1_gv_trophy_left_arrow_button, PlayerGroupSingle(lp_player), false);
    }
    if ((lv_show_next_page_button == true)) {
        DialogControlSetVisible(lib1_gv_trophy_right_arrow, PlayerGroupSingle(lp_player), true);
        DialogControlSetEnabled(lib1_gv_trophy_right_arrow_button, PlayerGroupSingle(lp_player), true);
    }
    else {
        DialogControlSetVisible(lib1_gv_trophy_right_arrow, PlayerGroupSingle(lp_player), false);
        DialogControlSetEnabled(lib1_gv_trophy_right_arrow_button, PlayerGroupSingle(lp_player), false);
    }
}

void lib1_gf_UpdateTrophyStatus (int lp_player, int lp_slot, int lp_cosmetic_id) {
    // Automatic Variable Declarations
    // Implementation
    if ((lib1_gv_player_cosmetics[lp_player].lv_trophy_owned[lp_cosmetic_id] == false)) {
        DialogControlSetSize(lib1_gv_trophy_button[lp_slot], PlayerGroupSingle(lp_player), DialogControlGetWidth(lib1_gv_trophy_button[lp_slot], lp_player), lib1_gv_cOSMETIC_BUTTON_SIZE);
        libNtve_gf_SetDialogItemText(lib1_gv_trophy_button[lp_slot], (StringExternal("Param/Value/lib_1_CB2AC29A") + IntToText(lib1_gv_cosmetic_trophy[lp_cosmetic_id].lv_cost) + StringExternal("Param/Value/lib_1_B4B79A2B")), PlayerGroupSingle(lp_player));
        if ((lib1_gf_PlayerCredits(lp_player) >= lib1_gv_cosmetic_trophy[lp_cosmetic_id].lv_cost)) {
            DialogControlSetEnabled(lib1_gv_trophy_button[lp_slot], PlayerGroupSingle(lp_player), true);
        }
        else {
            DialogControlSetEnabled(lib1_gv_trophy_button[lp_slot], PlayerGroupSingle(lp_player), false);
        }
    }
    else if ((lib1_gv_player_cosmetics[lp_player].lv_trophy_owned[lp_cosmetic_id] == true) && (lib1_gv_player_cosmetics[lp_player].lv_trophy_enabled != lp_cosmetic_id)) {
        libNtve_gf_SetDialogItemText(lib1_gv_trophy_button[lp_slot], StringExternal("Param/Value/lib_1_485FCA8A"), PlayerGroupSingle(lp_player));
        DialogControlSetSize(lib1_gv_trophy_button[lp_slot], PlayerGroupSingle(lp_player), DialogControlGetWidth(lib1_gv_trophy_button[lp_slot], lp_player), lib1_gv_cOSMETIC_BUTTON_SIZE);
        DialogControlSetEnabled(lib1_gv_trophy_button[lp_slot], PlayerGroupSingle(lp_player), true);
        DialogControlSetVisible(lib1_gv_trophy_enabled_text[lp_slot], PlayerGroupSingle(lp_player), false);
    }
    else if ((lib1_gv_player_cosmetics[lp_player].lv_trophy_owned[lp_cosmetic_id] == true) && (lib1_gv_player_cosmetics[lp_player].lv_trophy_enabled == lp_cosmetic_id)) {
        libNtve_gf_SetDialogItemText(lib1_gv_trophy_button[lp_slot], StringExternal("Param/Value/lib_1_F86E1F30"), PlayerGroupSingle(lp_player));
        DialogControlSetSize(lib1_gv_trophy_button[lp_slot], PlayerGroupSingle(lp_player), DialogControlGetWidth(lib1_gv_trophy_button[lp_slot], lp_player), ((lib1_gv_cOSMETIC_BUTTON_SIZE * 4) / 7));
        DialogControlSetEnabled(lib1_gv_trophy_button[lp_slot], PlayerGroupSingle(lp_player), true);
        DialogControlSetVisible(lib1_gv_trophy_enabled_text[lp_slot], PlayerGroupSingle(lp_player), true);
    }
}

void lib1_gf_PressTrophyButton (int lp_player, int lp_slot) {
    // Variable Declarations
    int lv_cosmetic_id;
    int lv_other_cosmetic_id;
    int lv_other_slot;

    // Automatic Variable Declarations
    const int auto0F50120A_ae = 2;
    const int auto0F50120A_ai = 1;

    // Variable Initialization

    // Implementation
    lv_cosmetic_id = FixedToInt(libNtve_gf_DialogItemValue(lib1_gv_trophy_button[lp_slot], lp_player));
    if ((lib1_gv_player_cosmetics[lp_player].lv_trophy_owned[lv_cosmetic_id] == false) && (lib1_gf_PlayerCredits(lp_player) >= lib1_gv_cosmetic_trophy[lv_cosmetic_id].lv_cost)) {
        lib1_gf_DisableAllCosmeticStoreButtons(lp_player);
        lib1_gv_player[lp_player].lv_button_click_time = GameGetMissionTime();
        lib1_gv_player_collection[lp_player].lv_trophy_to_buy = lv_cosmetic_id;
        SoundPlayForPlayer(SoundLink("C_UI_Money01", 0), c_maxPlayers, PlayerGroupSingle(lp_player), 100.0, 0.0);
    }
    else if ((lib1_gv_player_cosmetics[lp_player].lv_trophy_owned[lv_cosmetic_id] == true) && (lib1_gv_player_cosmetics[lp_player].lv_trophy_enabled != lv_cosmetic_id)) {
        lib1_gv_player_cosmetics[lp_player].lv_trophy_enabled = lv_cosmetic_id;
        lv_other_slot = 0;
        for ( ; ( (auto0F50120A_ai >= 0 && lv_other_slot <= auto0F50120A_ae) || (auto0F50120A_ai < 0 && lv_other_slot >= auto0F50120A_ae) ) ; lv_other_slot += auto0F50120A_ai ) {
            if ((DialogControlIsVisible(lib1_gv_trophy_image[lv_other_slot], lp_player) == true)) {
                lib1_gf_UpdateTrophyStatus(lp_player, lv_other_slot, FixedToInt(libNtve_gf_DialogItemValue(lib1_gv_trophy_button[lv_other_slot], lp_player)));
            }

        }
        lib1_gf_SaveCosmeticstoBank(lp_player);
    }
    else if ((lib1_gv_player_cosmetics[lp_player].lv_trophy_owned[lv_cosmetic_id] == true) && (lib1_gv_player_cosmetics[lp_player].lv_trophy_enabled == lv_cosmetic_id)) {
        lib1_gv_player_cosmetics[lp_player].lv_trophy_enabled = -1;
        lib1_gf_UpdateTrophyStatus(lp_player, lp_slot, lv_cosmetic_id);
        lib1_gf_SaveCosmeticstoBank(lp_player);
    }
}

void lib1_gf_OpenPetPage (int lp_player, int lp_page) {
    // Variable Declarations
    int lv_cosmetic_slot;
    int lv_possible_cosmetic_slot;
    int lv_slot;
    int lv_cosmetic_id;
    int lv_start_slot;
    int lv_end_slot;
    bool lv_show_next_page_button;

    // Automatic Variable Declarations
    const int autoB03BD409_ae = 2;
    const int autoB03BD409_ai = 1;
    const int auto998ECBD8_ae = lib1_gv_pET_LIMIT;
    const int auto998ECBD8_ai = 1;

    // Variable Initialization

    // Implementation
    lib1_gv_player_collection[lp_player].lv_pet_page = lp_page;
    lv_slot = 0;
    for ( ; ( (autoB03BD409_ai >= 0 && lv_slot <= autoB03BD409_ae) || (autoB03BD409_ai < 0 && lv_slot >= autoB03BD409_ae) ) ; lv_slot += autoB03BD409_ai ) {
        DialogControlSetVisible(lib1_gv_pet_button[lv_slot], PlayerGroupSingle(lp_player), false);
        DialogControlSetVisible(lib1_gv_pet_image[lv_slot], PlayerGroupSingle(lp_player), false);
        DialogControlSetVisible(lib1_gv_pet_image_border[lv_slot], PlayerGroupSingle(lp_player), false);
        DialogControlSetVisible(lib1_gv_pet_name[lv_slot], PlayerGroupSingle(lp_player), false);
        DialogControlSetVisible(lib1_gv_pet_name_border[lv_slot], PlayerGroupSingle(lp_player), false);
        DialogControlSetVisible(lib1_gv_pet_enabled_text[lv_slot], PlayerGroupSingle(lp_player), false);
    }
    lv_start_slot = (lp_page * 3);
    lv_end_slot = (lv_start_slot + 2);
    lv_possible_cosmetic_slot = 0;
    for ( ; ( (auto998ECBD8_ai >= 0 && lv_possible_cosmetic_slot <= auto998ECBD8_ae) || (auto998ECBD8_ai < 0 && lv_possible_cosmetic_slot >= auto998ECBD8_ae) ) ; lv_possible_cosmetic_slot += auto998ECBD8_ai ) {
        lv_cosmetic_id = lib1_gv_pet_store[lv_possible_cosmetic_slot];
        if ((lv_cosmetic_id >= 0) && (lib1_gv_cosmetic_pet[lv_cosmetic_id].lv_available == true) && ((lib1_gv_player_cosmetics[lp_player].lv_pet_owned[lv_cosmetic_id] == true) || (lib1_gv_cosmetic_pet[lv_cosmetic_id].lv_exclusive == false))) {
            if ((lv_cosmetic_slot < lv_start_slot)) {
                lv_cosmetic_slot = (lv_cosmetic_slot + 1);
            }
            else if ((lv_cosmetic_slot >= lv_start_slot) && (lv_cosmetic_slot <= lv_end_slot)) {
                lib1_gf_ShowCosmeticInStoreSlot(lp_player, (lv_cosmetic_slot - lv_start_slot), lv_cosmetic_id, lib1_ge_CosmeticType_Pet);
                lv_cosmetic_slot = (lv_cosmetic_slot + 1);
            }
            else if ((lv_possible_cosmetic_slot > lv_end_slot)) {
                lv_show_next_page_button = true;
                break;
            }
        }

    }
    if ((lp_page > 0)) {
        DialogControlSetVisible(lib1_gv_pet_left_arrow, PlayerGroupSingle(lp_player), true);
        DialogControlSetEnabled(lib1_gv_pet_left_arrow_button, PlayerGroupSingle(lp_player), true);
    }
    else {
        DialogControlSetVisible(lib1_gv_pet_left_arrow, PlayerGroupSingle(lp_player), false);
        DialogControlSetEnabled(lib1_gv_pet_left_arrow_button, PlayerGroupSingle(lp_player), false);
    }
    if ((lv_show_next_page_button == true)) {
        DialogControlSetVisible(lib1_gv_pet_right_arrow, PlayerGroupSingle(lp_player), true);
        DialogControlSetEnabled(lib1_gv_pet_right_arrow_button, PlayerGroupSingle(lp_player), true);
    }
    else {
        DialogControlSetVisible(lib1_gv_pet_right_arrow, PlayerGroupSingle(lp_player), false);
        DialogControlSetEnabled(lib1_gv_pet_right_arrow_button, PlayerGroupSingle(lp_player), false);
    }
}

void lib1_gf_UpdatePetStatus (int lp_player, int lp_slot, int lp_cosmetic_id) {
    // Automatic Variable Declarations
    // Implementation
    if ((lib1_gv_player_cosmetics[lp_player].lv_pet_owned[lp_cosmetic_id] == false)) {
        DialogControlSetSize(lib1_gv_pet_button[lp_slot], PlayerGroupSingle(lp_player), DialogControlGetWidth(lib1_gv_pet_button[lp_slot], lp_player), lib1_gv_cOSMETIC_BUTTON_SIZE);
        libNtve_gf_SetDialogItemText(lib1_gv_pet_button[lp_slot], (StringExternal("Param/Value/lib_1_A615102D") + IntToText(lib1_gv_cosmetic_pet[lp_cosmetic_id].lv_cost) + StringExternal("Param/Value/lib_1_909B9ABB")), PlayerGroupSingle(lp_player));
        if ((lib1_gf_PlayerCredits(lp_player) >= lib1_gv_cosmetic_pet[lp_cosmetic_id].lv_cost)) {
            DialogControlSetEnabled(lib1_gv_pet_button[lp_slot], PlayerGroupSingle(lp_player), true);
        }
        else {
            DialogControlSetEnabled(lib1_gv_pet_button[lp_slot], PlayerGroupSingle(lp_player), false);
        }
    }
    else if ((lib1_gv_player_cosmetics[lp_player].lv_pet_owned[lp_cosmetic_id] == true) && (lib1_gv_player_cosmetics[lp_player].lv_pet_enabled != lp_cosmetic_id)) {
        libNtve_gf_SetDialogItemText(lib1_gv_pet_button[lp_slot], StringExternal("Param/Value/lib_1_B16EB56A"), PlayerGroupSingle(lp_player));
        DialogControlSetSize(lib1_gv_pet_button[lp_slot], PlayerGroupSingle(lp_player), DialogControlGetWidth(lib1_gv_pet_button[lp_slot], lp_player), lib1_gv_cOSMETIC_BUTTON_SIZE);
        DialogControlSetEnabled(lib1_gv_pet_button[lp_slot], PlayerGroupSingle(lp_player), true);
        DialogControlSetVisible(lib1_gv_pet_enabled_text[lp_slot], PlayerGroupSingle(lp_player), false);
    }
    else if ((lib1_gv_player_cosmetics[lp_player].lv_pet_owned[lp_cosmetic_id] == true) && (lib1_gv_player_cosmetics[lp_player].lv_pet_enabled == lp_cosmetic_id)) {
        libNtve_gf_SetDialogItemText(lib1_gv_pet_button[lp_slot], StringExternal("Param/Value/lib_1_80B8A72A"), PlayerGroupSingle(lp_player));
        DialogControlSetSize(lib1_gv_pet_button[lp_slot], PlayerGroupSingle(lp_player), DialogControlGetWidth(lib1_gv_pet_button[lp_slot], lp_player), ((lib1_gv_cOSMETIC_BUTTON_SIZE * 4) / 7));
        DialogControlSetEnabled(lib1_gv_pet_button[lp_slot], PlayerGroupSingle(lp_player), true);
        DialogControlSetVisible(lib1_gv_pet_enabled_text[lp_slot], PlayerGroupSingle(lp_player), true);
    }
}

void lib1_gf_PressPetButton (int lp_player, int lp_slot) {
    // Variable Declarations
    int lv_cosmetic_id;
    int lv_other_cosmetic_id;
    int lv_other_slot;

    // Automatic Variable Declarations
    const int auto69300B7A_ae = 2;
    const int auto69300B7A_ai = 1;

    // Variable Initialization

    // Implementation
    lv_cosmetic_id = FixedToInt(libNtve_gf_DialogItemValue(lib1_gv_pet_button[lp_slot], lp_player));
    if ((lib1_gv_player_cosmetics[lp_player].lv_pet_owned[lv_cosmetic_id] == false) && (lib1_gf_PlayerCredits(lp_player) >= lib1_gv_cosmetic_pet[lv_cosmetic_id].lv_cost)) {
        lib1_gf_DisableAllCosmeticStoreButtons(lp_player);
        lib1_gv_player[lp_player].lv_button_click_time = GameGetMissionTime();
        lib1_gv_player_collection[lp_player].lv_pet_to_buy = lv_cosmetic_id;
        SoundPlayForPlayer(SoundLink("C_UI_Money01", 0), c_maxPlayers, PlayerGroupSingle(lp_player), 100.0, 0.0);
    }
    else if ((lib1_gv_player_cosmetics[lp_player].lv_pet_owned[lv_cosmetic_id] == true) && (lib1_gv_player_cosmetics[lp_player].lv_pet_enabled != lv_cosmetic_id)) {
        lib1_gv_player_cosmetics[lp_player].lv_pet_enabled = lv_cosmetic_id;
        lv_other_slot = 0;
        for ( ; ( (auto69300B7A_ai >= 0 && lv_other_slot <= auto69300B7A_ae) || (auto69300B7A_ai < 0 && lv_other_slot >= auto69300B7A_ae) ) ; lv_other_slot += auto69300B7A_ai ) {
            if ((DialogControlIsVisible(lib1_gv_pet_image[lv_other_slot], lp_player) == true)) {
                lib1_gf_UpdatePetStatus(lp_player, lv_other_slot, FixedToInt(libNtve_gf_DialogItemValue(lib1_gv_pet_button[lv_other_slot], lp_player)));
            }

        }
        lib1_gf_SaveCosmeticstoBank(lp_player);
    }
    else if ((lib1_gv_player_cosmetics[lp_player].lv_pet_owned[lv_cosmetic_id] == true) && (lib1_gv_player_cosmetics[lp_player].lv_pet_enabled == lv_cosmetic_id)) {
        lib1_gv_player_cosmetics[lp_player].lv_pet_enabled = -1;
        lib1_gf_UpdatePetStatus(lp_player, lp_slot, lv_cosmetic_id);
        lib1_gf_SaveCosmeticstoBank(lp_player);
    }
}

void lib1_gf_OpenDecorationPage (int lp_player, int lp_page) {
    // Variable Declarations
    int lv_cosmetic_slot;
    int lv_possible_cosmetic_slot;
    int lv_slot;
    int lv_cosmetic_id;
    int lv_start_slot;
    int lv_end_slot;
    bool lv_show_next_page_button;

    // Automatic Variable Declarations
    const int auto1CEDC79E_ae = 2;
    const int auto1CEDC79E_ai = 1;
    const int autoBE641590_ae = lib1_gv_dECORATION_LIMIT;
    const int autoBE641590_ai = 1;

    // Variable Initialization

    // Implementation
    lib1_gv_player_collection[lp_player].lv_decoration_page = lp_page;
    lv_slot = 0;
    for ( ; ( (auto1CEDC79E_ai >= 0 && lv_slot <= auto1CEDC79E_ae) || (auto1CEDC79E_ai < 0 && lv_slot >= auto1CEDC79E_ae) ) ; lv_slot += auto1CEDC79E_ai ) {
        DialogControlSetVisible(lib1_gv_decoration_button[lv_slot], PlayerGroupSingle(lp_player), false);
        DialogControlSetVisible(lib1_gv_decoration_image[lv_slot], PlayerGroupSingle(lp_player), false);
        DialogControlSetVisible(lib1_gv_decoration_image_border[lv_slot], PlayerGroupSingle(lp_player), false);
        DialogControlSetVisible(lib1_gv_decoration_name[lv_slot], PlayerGroupSingle(lp_player), false);
        DialogControlSetVisible(lib1_gv_decoration_name_border[lv_slot], PlayerGroupSingle(lp_player), false);
        DialogControlSetVisible(lib1_gv_decoration_enabled_text[lv_slot], PlayerGroupSingle(lp_player), false);
    }
    lv_start_slot = (lp_page * 3);
    lv_end_slot = (lv_start_slot + 2);
    lv_possible_cosmetic_slot = 0;
    for ( ; ( (autoBE641590_ai >= 0 && lv_possible_cosmetic_slot <= autoBE641590_ae) || (autoBE641590_ai < 0 && lv_possible_cosmetic_slot >= autoBE641590_ae) ) ; lv_possible_cosmetic_slot += autoBE641590_ai ) {
        lv_cosmetic_id = lib1_gv_decoration_store[lv_possible_cosmetic_slot];
        if ((lv_cosmetic_id >= 0) && (lib1_gv_cosmetic_decoration[lv_cosmetic_id].lv_available == true) && ((lib1_gv_player_cosmetics[lp_player].lv_decoration_owned[lv_cosmetic_id] == true) || (lib1_gv_cosmetic_decoration[lv_cosmetic_id].lv_exclusive == false))) {
            if ((lv_cosmetic_slot < lv_start_slot)) {
                lv_cosmetic_slot = (lv_cosmetic_slot + 1);
            }
            else if ((lv_cosmetic_slot >= lv_start_slot) && (lv_cosmetic_slot <= lv_end_slot)) {
                lib1_gf_ShowCosmeticInStoreSlot(lp_player, (lv_cosmetic_slot - lv_start_slot), lv_cosmetic_id, lib1_ge_CosmeticType_Decoration);
                lv_cosmetic_slot = (lv_cosmetic_slot + 1);
            }
            else if ((lv_possible_cosmetic_slot > lv_end_slot)) {
                lv_show_next_page_button = true;
                break;
            }
        }

    }
    if ((lp_page > 0)) {
        DialogControlSetVisible(lib1_gv_decoration_left_arrow, PlayerGroupSingle(lp_player), true);
        DialogControlSetEnabled(lib1_gv_decoration_left_arrow_button, PlayerGroupSingle(lp_player), true);
    }
    else {
        DialogControlSetVisible(lib1_gv_decoration_left_arrow, PlayerGroupSingle(lp_player), false);
        DialogControlSetEnabled(lib1_gv_decoration_left_arrow_button, PlayerGroupSingle(lp_player), false);
    }
    if ((lv_show_next_page_button == true)) {
        DialogControlSetVisible(lib1_gv_decoration_right_arrow, PlayerGroupSingle(lp_player), true);
        DialogControlSetEnabled(lib1_gv_decoration_right_arrow_button, PlayerGroupSingle(lp_player), true);
    }
    else {
        DialogControlSetVisible(lib1_gv_decoration_right_arrow, PlayerGroupSingle(lp_player), false);
        DialogControlSetEnabled(lib1_gv_decoration_right_arrow_button, PlayerGroupSingle(lp_player), false);
    }
}

void lib1_gf_UpdateDecorationStatus (int lp_player, int lp_slot, int lp_cosmetic_id) {
    // Automatic Variable Declarations
    // Implementation
    if ((lib1_gv_player_cosmetics[lp_player].lv_decoration_owned[lp_cosmetic_id] == false)) {
        DialogControlSetSize(lib1_gv_decoration_button[lp_slot], PlayerGroupSingle(lp_player), DialogControlGetWidth(lib1_gv_decoration_button[lp_slot], lp_player), lib1_gv_cOSMETIC_BUTTON_SIZE);
        libNtve_gf_SetDialogItemText(lib1_gv_decoration_button[lp_slot], (StringExternal("Param/Value/lib_1_F1C4F11C") + IntToText(lib1_gv_cosmetic_decoration[lp_cosmetic_id].lv_cost) + StringExternal("Param/Value/lib_1_6A77FE67")), PlayerGroupSingle(lp_player));
        if ((lib1_gf_PlayerCredits(lp_player) >= lib1_gv_cosmetic_decoration[lp_cosmetic_id].lv_cost)) {
            DialogControlSetEnabled(lib1_gv_decoration_button[lp_slot], PlayerGroupSingle(lp_player), true);
        }
        else {
            DialogControlSetEnabled(lib1_gv_decoration_button[lp_slot], PlayerGroupSingle(lp_player), false);
        }
    }
    else if ((lib1_gv_player_cosmetics[lp_player].lv_decoration_owned[lp_cosmetic_id] == true) && (lib1_gv_player_cosmetics[lp_player].lv_decoration_enabled[lp_cosmetic_id] != true)) {
        libNtve_gf_SetDialogItemText(lib1_gv_decoration_button[lp_slot], StringExternal("Param/Value/lib_1_EC5330A4"), PlayerGroupSingle(lp_player));
        DialogControlSetSize(lib1_gv_decoration_button[lp_slot], PlayerGroupSingle(lp_player), DialogControlGetWidth(lib1_gv_decoration_button[lp_slot], lp_player), lib1_gv_cOSMETIC_BUTTON_SIZE);
        DialogControlSetEnabled(lib1_gv_decoration_button[lp_slot], PlayerGroupSingle(lp_player), true);
        DialogControlSetVisible(lib1_gv_decoration_enabled_text[lp_slot], PlayerGroupSingle(lp_player), false);
    }
    else if ((lib1_gv_player_cosmetics[lp_player].lv_decoration_owned[lp_cosmetic_id] == true) && (lib1_gv_player_cosmetics[lp_player].lv_decoration_enabled[lp_cosmetic_id] == true)) {
        libNtve_gf_SetDialogItemText(lib1_gv_decoration_button[lp_slot], StringExternal("Param/Value/lib_1_980810AF"), PlayerGroupSingle(lp_player));
        DialogControlSetSize(lib1_gv_decoration_button[lp_slot], PlayerGroupSingle(lp_player), DialogControlGetWidth(lib1_gv_decoration_button[lp_slot], lp_player), ((lib1_gv_cOSMETIC_BUTTON_SIZE * 4) / 7));
        DialogControlSetEnabled(lib1_gv_decoration_button[lp_slot], PlayerGroupSingle(lp_player), true);
        DialogControlSetVisible(lib1_gv_decoration_enabled_text[lp_slot], PlayerGroupSingle(lp_player), true);
    }
}

void lib1_gf_PressDecorationButton (int lp_player, int lp_slot) {
    // Variable Declarations
    int lv_cosmetic_id;
    int lv_other_cosmetic_id;
    int lv_other_slot;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_cosmetic_id = FixedToInt(libNtve_gf_DialogItemValue(lib1_gv_decoration_button[lp_slot], lp_player));
    if ((lib1_gv_player_cosmetics[lp_player].lv_decoration_owned[lv_cosmetic_id] == false) && (lib1_gf_PlayerCredits(lp_player) >= lib1_gv_cosmetic_decoration[lv_cosmetic_id].lv_cost)) {
        lib1_gf_DisableAllCosmeticStoreButtons(lp_player);
        lib1_gv_player[lp_player].lv_button_click_time = GameGetMissionTime();
        lib1_gv_player_collection[lp_player].lv_decoration_to_buy = lv_cosmetic_id;
        SoundPlayForPlayer(SoundLink("C_UI_Money01", 0), c_maxPlayers, PlayerGroupSingle(lp_player), 100.0, 0.0);
    }
    else if ((lib1_gv_player_cosmetics[lp_player].lv_decoration_owned[lv_cosmetic_id] == true) && (lib1_gv_player_cosmetics[lp_player].lv_decoration_enabled[lv_cosmetic_id] == false)) {
        lib1_gv_player_cosmetics[lp_player].lv_decoration_enabled[lv_cosmetic_id] = true;
        lib1_gf_UpdateDecorationStatus(lp_player, lp_slot, lv_cosmetic_id);
        lib1_gf_SaveCosmeticstoBank(lp_player);
    }
    else if ((lib1_gv_player_cosmetics[lp_player].lv_decoration_owned[lv_cosmetic_id] == true) && (lib1_gv_player_cosmetics[lp_player].lv_decoration_enabled[lv_cosmetic_id] == true)) {
        lib1_gv_player_cosmetics[lp_player].lv_decoration_enabled[lv_cosmetic_id] = false;
        lib1_gf_UpdateDecorationStatus(lp_player, lp_slot, lv_cosmetic_id);
        lib1_gf_SaveCosmeticstoBank(lp_player);
    }
}

void lib1_gf_CreateCosmeticMenu () {
    // Variable Declarations
    int lv_slot;
    const int lv_dESCRIPTION_DIALOG_WIDTH = 250;
    const int lv_cOSMETIC_TYPE_DIALOG_HEIGHT = 60;
    const int lv_cOSMETIC_DESCRIPTION_DIALOG_HEIGHT = 120;
    const int lv_sTORE_DIALOG_WIDTH = 1000;
    const int lv_cOSMETIC_DIALOG_HEIGHT = 350;
    const int lv_cOSMETIC_DIALOG_VERTICAL_SPACE = 390;
    const int lv_cOSMETIC_ITEM_HORIZONTAL_SPACE = 275;
    const int lv_aRROW_X = 50;
    int lv_store_x;
    int lv_store_description_x;

    // Automatic Variable Declarations
    const int auto33C9BCFF_ae = 2;
    const int auto33C9BCFF_ai = 1;
    const int autoCD6C01DA_ae = 2;
    const int autoCD6C01DA_ai = 1;
    const int autoBE4A6A6D_ae = 2;
    const int autoBE4A6A6D_ai = 1;

    // Variable Initialization

    // Implementation
    lv_store_x = (lv_dESCRIPTION_DIALOG_WIDTH / 2);
    lv_store_description_x = (lv_sTORE_DIALOG_WIDTH / -2);
    DialogCreate(lv_sTORE_DIALOG_WIDTH, lv_cOSMETIC_DIALOG_HEIGHT, c_anchorCenter, lv_store_x, (-1 * lv_cOSMETIC_DIALOG_VERTICAL_SPACE), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    lib1_gv_trophy_dialog = DialogLastCreated();
    lv_slot = 0;
    for ( ; ( (auto33C9BCFF_ai >= 0 && lv_slot <= auto33C9BCFF_ae) || (auto33C9BCFF_ai < 0 && lv_slot >= auto33C9BCFF_ae) ) ; lv_slot += auto33C9BCFF_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 240, lv_cOSMETIC_DIALOG_HEIGHT, c_anchorTop, (lv_cOSMETIC_ITEM_HORIZONTAL_SPACE * (lv_slot - 1)), 0, StringToText(""), "Assets\\Textures\\ui_tooltip_frame_storymode.dds", c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
        lib1_gv_trophy_name_border[lv_slot] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 75, c_anchorTop, (lv_cOSMETIC_ITEM_HORIZONTAL_SPACE * (lv_slot - 1)), 5, StringExternal("Param/Value/lib_1_3752F525"), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CraftButton", PlayerGroupAll());
        lib1_gv_trophy_name[lv_slot] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 180, 180, c_anchorCenter, (lv_cOSMETIC_ITEM_HORIZONTAL_SPACE * (lv_slot - 1)), -9, StringToText(""), "Assets\\Textures\\trophy-ue-UnstableVoidCrystal.tga", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        lib1_gv_trophy_image[lv_slot] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 190, 190, c_anchorCenter, (lv_cOSMETIC_ITEM_HORIZONTAL_SPACE * (lv_slot - 1)), -9, StringToText(""), "Assets\\Textures\\ui_ingame_replay_selectionframe_transparent_background.dds", c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
        lib1_gv_trophy_image_border[lv_slot] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 72, c_anchorBottom, (lv_cOSMETIC_ITEM_HORIZONTAL_SPACE * (lv_slot - 1)), 15, StringToText(""), StringExternal("Param/Value/lib_1_472ED862"), "");
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CosmeticPurchaseButton", PlayerGroupAll());
        lib1_gv_trophy_button[lv_slot] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, (lib1_gv_cOSMETIC_BUTTON_SIZE / 2), c_anchorBottom, (lv_cOSMETIC_ITEM_HORIZONTAL_SPACE * (lv_slot - 1)), (15 + (lib1_gv_cOSMETIC_BUTTON_SIZE / 2)), StringExternal("Param/Value/lib_1_201C4B68"), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CosmeticPurchaseButton", PlayerGroupAll());
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        lib1_gv_trophy_enabled_text[lv_slot] = DialogControlLastCreated();
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 44, 52, c_anchorLeft, lv_aRROW_X, 0, StringToText(""), "Assets\\Textures\\ui_glues_icons_smallpagearrow_left_normal.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lib1_gv_trophy_left_arrow = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 44, 52, c_anchorLeft, lv_aRROW_X, 0, StringToText(""), StringExternal("Param/Value/lib_1_B0CCB2B3"), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    lib1_gv_trophy_left_arrow_button = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 44, 52, c_anchorRight, lv_aRROW_X, 0, StringToText(""), "Assets\\Textures\\ui_glues_icons_smallpagearrow_right_normal.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lib1_gv_trophy_right_arrow = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 44, 52, c_anchorRight, lv_aRROW_X, 0, StringToText(""), StringExternal("Param/Value/lib_1_577592B4"), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    lib1_gv_trophy_right_arrow_button = DialogControlLastCreated();
    DialogCreate(lv_sTORE_DIALOG_WIDTH, lv_cOSMETIC_DIALOG_HEIGHT, c_anchorCenter, lv_store_x, 0, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    lib1_gv_pet_dialog = DialogLastCreated();
    lv_slot = 0;
    for ( ; ( (autoCD6C01DA_ai >= 0 && lv_slot <= autoCD6C01DA_ae) || (autoCD6C01DA_ai < 0 && lv_slot >= autoCD6C01DA_ae) ) ; lv_slot += autoCD6C01DA_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 240, lv_cOSMETIC_DIALOG_HEIGHT, c_anchorTop, (lv_cOSMETIC_ITEM_HORIZONTAL_SPACE * (lv_slot - 1)), 0, StringToText(""), "Assets\\Textures\\ui_tooltip_frame_storymode.dds", c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
        lib1_gv_pet_name_border[lv_slot] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 75, c_anchorTop, (lv_cOSMETIC_ITEM_HORIZONTAL_SPACE * (lv_slot - 1)), 5, StringExternal("Param/Value/lib_1_58CF6A4A"), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CraftButton", PlayerGroupAll());
        lib1_gv_pet_name[lv_slot] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 180, 180, c_anchorCenter, (lv_cOSMETIC_ITEM_HORIZONTAL_SPACE * (lv_slot - 1)), -9, StringToText(""), "Assets\\Textures\\trophy-ue-UnstableVoidCrystal.tga", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        lib1_gv_pet_image[lv_slot] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 190, 190, c_anchorCenter, (lv_cOSMETIC_ITEM_HORIZONTAL_SPACE * (lv_slot - 1)), -9, StringToText(""), "Assets\\Textures\\ui_ingame_replay_selectionframe_transparent_background.dds", c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
        lib1_gv_pet_image_border[lv_slot] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 72, c_anchorBottom, (lv_cOSMETIC_ITEM_HORIZONTAL_SPACE * (lv_slot - 1)), 15, StringToText(""), StringExternal("Param/Value/lib_1_30064A8A"), "");
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CosmeticPurchaseButton", PlayerGroupAll());
        lib1_gv_pet_button[lv_slot] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, (lib1_gv_cOSMETIC_BUTTON_SIZE / 2), c_anchorBottom, (lv_cOSMETIC_ITEM_HORIZONTAL_SPACE * (lv_slot - 1)), (15 + (lib1_gv_cOSMETIC_BUTTON_SIZE / 2)), StringExternal("Param/Value/lib_1_7651DE38"), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CosmeticPurchaseButton", PlayerGroupAll());
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        lib1_gv_pet_enabled_text[lv_slot] = DialogControlLastCreated();
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 44, 52, c_anchorLeft, lv_aRROW_X, 0, StringToText(""), "Assets\\Textures\\ui_glues_icons_smallpagearrow_left_normal.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lib1_gv_pet_left_arrow = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 44, 52, c_anchorLeft, lv_aRROW_X, 0, StringToText(""), StringExternal("Param/Value/lib_1_4E90304B"), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    lib1_gv_pet_left_arrow_button = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 44, 52, c_anchorRight, lv_aRROW_X, 0, StringToText(""), "Assets\\Textures\\ui_glues_icons_smallpagearrow_right_normal.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lib1_gv_pet_right_arrow = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 44, 52, c_anchorRight, lv_aRROW_X, 0, StringToText(""), StringExternal("Param/Value/lib_1_925F8C79"), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    lib1_gv_pet_right_arrow_button = DialogControlLastCreated();
    DialogCreate(lv_sTORE_DIALOG_WIDTH, lv_cOSMETIC_DIALOG_HEIGHT, c_anchorCenter, lv_store_x, lv_cOSMETIC_DIALOG_VERTICAL_SPACE, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    lib1_gv_decoration_dialog = DialogLastCreated();
    lv_slot = 0;
    for ( ; ( (autoBE4A6A6D_ai >= 0 && lv_slot <= autoBE4A6A6D_ae) || (autoBE4A6A6D_ai < 0 && lv_slot >= autoBE4A6A6D_ae) ) ; lv_slot += autoBE4A6A6D_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 240, lv_cOSMETIC_DIALOG_HEIGHT, c_anchorTop, (lv_cOSMETIC_ITEM_HORIZONTAL_SPACE * (lv_slot - 1)), 0, StringToText(""), "Assets\\Textures\\ui_tooltip_frame_storymode.dds", c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
        lib1_gv_decoration_name_border[lv_slot] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 75, c_anchorTop, (lv_cOSMETIC_ITEM_HORIZONTAL_SPACE * (lv_slot - 1)), 5, StringExternal("Param/Value/lib_1_D1FF9641"), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CraftButton", PlayerGroupAll());
        lib1_gv_decoration_name[lv_slot] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 180, 180, c_anchorCenter, (lv_cOSMETIC_ITEM_HORIZONTAL_SPACE * (lv_slot - 1)), -9, StringToText(""), "Assets\\Textures\\trophy-ue-UnstableVoidCrystal.tga", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        lib1_gv_decoration_image[lv_slot] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 190, 190, c_anchorCenter, (lv_cOSMETIC_ITEM_HORIZONTAL_SPACE * (lv_slot - 1)), -9, StringToText(""), "Assets\\Textures\\ui_ingame_replay_selectionframe_transparent_background.dds", c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
        lib1_gv_decoration_image_border[lv_slot] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 72, c_anchorBottom, (lv_cOSMETIC_ITEM_HORIZONTAL_SPACE * (lv_slot - 1)), 15, StringToText(""), StringExternal("Param/Value/lib_1_1B6818FF"), "");
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CosmeticPurchaseButton", PlayerGroupAll());
        lib1_gv_decoration_button[lv_slot] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, (lib1_gv_cOSMETIC_BUTTON_SIZE / 2), c_anchorBottom, (lv_cOSMETIC_ITEM_HORIZONTAL_SPACE * (lv_slot - 1)), (15 + (lib1_gv_cOSMETIC_BUTTON_SIZE / 2)), StringExternal("Param/Value/lib_1_1B3A6D74"), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CosmeticPurchaseButton", PlayerGroupAll());
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        lib1_gv_decoration_enabled_text[lv_slot] = DialogControlLastCreated();
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 44, 52, c_anchorLeft, lv_aRROW_X, 0, StringToText(""), "Assets\\Textures\\ui_glues_icons_smallpagearrow_left_normal.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lib1_gv_decoration_left_arrow = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 44, 52, c_anchorLeft, lv_aRROW_X, 0, StringToText(""), StringExternal("Param/Value/lib_1_C37B1728"), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    lib1_gv_decoration_left_arrow_button = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 44, 52, c_anchorRight, lv_aRROW_X, 0, StringToText(""), "Assets\\Textures\\ui_glues_icons_smallpagearrow_right_normal.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lib1_gv_decoration_right_arrow = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 44, 52, c_anchorRight, lv_aRROW_X, 0, StringToText(""), StringExternal("Param/Value/lib_1_5E817227"), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    lib1_gv_decoration_right_arrow_button = DialogControlLastCreated();
    DialogCreate(0, 0, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    lib1_gv_cosmetic_store_dialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 2000, 10, c_anchorCenter, 0, ((-1 * lv_cOSMETIC_DIALOG_VERTICAL_SPACE) / 2), StringToText(""), "Assets\\Textures\\ui_battlenet_glues_topnav_buttonselectedline2.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 2000, 10, c_anchorCenter, 0, (lv_cOSMETIC_DIALOG_VERTICAL_SPACE / 2), StringToText(""), "Assets\\Textures\\ui_battlenet_glues_topnav_buttonselectedline2.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lv_dESCRIPTION_DIALOG_WIDTH, lv_cOSMETIC_TYPE_DIALOG_HEIGHT, c_anchorCenter, lv_store_description_x, ((lv_cOSMETIC_DESCRIPTION_DIALOG_HEIGHT / -2) + (-1 * lv_cOSMETIC_DIALOG_VERTICAL_SPACE)), StringExternal("Param/Value/lib_1_AECEA8C8"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CardCostSmall", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lv_dESCRIPTION_DIALOG_WIDTH, lv_cOSMETIC_TYPE_DIALOG_HEIGHT, c_anchorCenter, lv_store_description_x, (lv_cOSMETIC_DESCRIPTION_DIALOG_HEIGHT / -2), StringExternal("Param/Value/lib_1_393A327F"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CardCostSmall", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lv_dESCRIPTION_DIALOG_WIDTH, lv_cOSMETIC_TYPE_DIALOG_HEIGHT, c_anchorCenter, lv_store_description_x, ((lv_cOSMETIC_DESCRIPTION_DIALOG_HEIGHT / -2) + lv_cOSMETIC_DIALOG_VERTICAL_SPACE), StringExternal("Param/Value/lib_1_B9A50022"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CardCostSmall", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lv_dESCRIPTION_DIALOG_WIDTH, lv_cOSMETIC_DESCRIPTION_DIALOG_HEIGHT, c_anchorCenter, lv_store_description_x, ((lv_cOSMETIC_TYPE_DIALOG_HEIGHT / 2) + (-1 * lv_cOSMETIC_DIALOG_VERTICAL_SPACE)), StringExternal("Param/Value/lib_1_4F4FB9AB"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CosmeticPurchaseButton", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lv_dESCRIPTION_DIALOG_WIDTH, lv_cOSMETIC_DESCRIPTION_DIALOG_HEIGHT, c_anchorCenter, lv_store_description_x, (lv_cOSMETIC_TYPE_DIALOG_HEIGHT / 2), StringExternal("Param/Value/lib_1_1F0CA0A9"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CosmeticPurchaseButton", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lv_dESCRIPTION_DIALOG_WIDTH, lv_cOSMETIC_DESCRIPTION_DIALOG_HEIGHT, c_anchorCenter, lv_store_description_x, ((lv_cOSMETIC_TYPE_DIALOG_HEIGHT / 2) + lv_cOSMETIC_DIALOG_VERTICAL_SPACE), StringExternal("Param/Value/lib_1_86598CFC"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CosmeticPurchaseButton", PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lib1_gv_fILTER_ICON_SIZE, lib1_gv_fILTER_ICON_SIZE, c_anchorBottomLeft, 10, 10, StringToText(""), "Assets\\Textures\\btn-tips-credit.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lib1_gv_pURCHASE_CREDIT_WIDTH, lib1_gv_fILTER_ICON_SIZE, c_anchorBottomLeft, (lib1_gv_fILTER_ICON_SIZE + 15), 10, StringExternal("Param/Value/lib_1_972A312C"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "EssenceCount", PlayerGroupAll());
    lib1_gv_cosmetic_store_credits_ui = DialogControlLastCreated();
}

void lib1_gf_OpenCosmeticMenu (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    DialogSetVisible(lib1_gv_trophy_dialog, PlayerGroupSingle(lp_player), true);
    DialogSetVisible(lib1_gv_pet_dialog, PlayerGroupSingle(lp_player), true);
    DialogSetVisible(lib1_gv_decoration_dialog, PlayerGroupSingle(lp_player), true);
    DialogSetVisible(lib1_gv_cosmetic_store_dialog, PlayerGroupSingle(lp_player), true);
    DialogSetVisible(lib1_gv_back_to_main_menu_dialog, PlayerGroupSingle(lp_player), true);
    lib1_gf_OpenTrophyPage(lp_player, 0);
    lib1_gf_OpenPetPage(lp_player, 0);
    lib1_gf_OpenDecorationPage(lp_player, 0);
    lib1_gf_UpdateCosmeticStoreCredits(lp_player);
}

void lib1_gf_CloseCosmeticMenu (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    DialogSetVisible(lib1_gv_trophy_dialog, PlayerGroupSingle(lp_player), false);
    DialogSetVisible(lib1_gv_pet_dialog, PlayerGroupSingle(lp_player), false);
    DialogSetVisible(lib1_gv_decoration_dialog, PlayerGroupSingle(lp_player), false);
    DialogSetVisible(lib1_gv_cosmetic_store_dialog, PlayerGroupSingle(lp_player), false);
    DialogSetVisible(lib1_gv_back_to_main_menu_dialog, PlayerGroupSingle(lp_player), false);
}

void lib1_gf_ShowCosmeticInStoreSlot (int lp_player, int lp_slot, int lp_cosmetic_id, int lp_type) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_type == lib1_ge_CosmeticType_Trophy)) {
        libNtve_gf_SetDialogItemText(lib1_gv_trophy_name[lp_slot], StringToText(lib1_gv_cosmetic_trophy[lp_cosmetic_id].lv_name), PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemCurrentValue(lib1_gv_trophy_button[lp_slot], IntToFixed(lp_cosmetic_id), PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemImage(lib1_gv_trophy_image[lp_slot], lib1_gv_cosmetic_trophy[lp_cosmetic_id].lv_image, PlayerGroupSingle(lp_player));
        DialogControlSetVisible(lib1_gv_trophy_name[lp_slot], PlayerGroupSingle(lp_player), true);
        DialogControlSetVisible(lib1_gv_trophy_name_border[lp_slot], PlayerGroupSingle(lp_player), true);
        DialogControlSetVisible(lib1_gv_trophy_button[lp_slot], PlayerGroupSingle(lp_player), true);
        DialogControlSetVisible(lib1_gv_trophy_image[lp_slot], PlayerGroupSingle(lp_player), true);
        DialogControlSetVisible(lib1_gv_trophy_image_border[lp_slot], PlayerGroupSingle(lp_player), true);
        lib1_gf_UpdateTrophyStatus(lp_player, lp_slot, lp_cosmetic_id);
    }
    else if ((lp_type == lib1_ge_CosmeticType_Pet)) {
        libNtve_gf_SetDialogItemText(lib1_gv_pet_name[lp_slot], StringToText(lib1_gv_cosmetic_pet[lp_cosmetic_id].lv_name), PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemCurrentValue(lib1_gv_pet_button[lp_slot], IntToFixed(lp_cosmetic_id), PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemImage(lib1_gv_pet_image[lp_slot], lib1_gv_cosmetic_pet[lp_cosmetic_id].lv_image, PlayerGroupSingle(lp_player));
        DialogControlSetVisible(lib1_gv_pet_name[lp_slot], PlayerGroupSingle(lp_player), true);
        DialogControlSetVisible(lib1_gv_pet_name_border[lp_slot], PlayerGroupSingle(lp_player), true);
        DialogControlSetVisible(lib1_gv_pet_button[lp_slot], PlayerGroupSingle(lp_player), true);
        DialogControlSetVisible(lib1_gv_pet_image[lp_slot], PlayerGroupSingle(lp_player), true);
        DialogControlSetVisible(lib1_gv_pet_image_border[lp_slot], PlayerGroupSingle(lp_player), true);
        lib1_gf_UpdatePetStatus(lp_player, lp_slot, lp_cosmetic_id);
    }
    else if ((lp_type == lib1_ge_CosmeticType_Decoration)) {
        libNtve_gf_SetDialogItemText(lib1_gv_decoration_name[lp_slot], StringToText(lib1_gv_cosmetic_decoration[lp_cosmetic_id].lv_name), PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemCurrentValue(lib1_gv_decoration_button[lp_slot], IntToFixed(lp_cosmetic_id), PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemImage(lib1_gv_decoration_image[lp_slot], lib1_gv_cosmetic_decoration[lp_cosmetic_id].lv_image, PlayerGroupSingle(lp_player));
        DialogControlSetVisible(lib1_gv_decoration_name[lp_slot], PlayerGroupSingle(lp_player), true);
        DialogControlSetVisible(lib1_gv_decoration_name_border[lp_slot], PlayerGroupSingle(lp_player), true);
        DialogControlSetVisible(lib1_gv_decoration_button[lp_slot], PlayerGroupSingle(lp_player), true);
        DialogControlSetVisible(lib1_gv_decoration_image[lp_slot], PlayerGroupSingle(lp_player), true);
        DialogControlSetVisible(lib1_gv_decoration_image_border[lp_slot], PlayerGroupSingle(lp_player), true);
        lib1_gf_UpdateDecorationStatus(lp_player, lp_slot, lp_cosmetic_id);
    }
}

void lib1_gf_UpdateCosmeticStoreCredits (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(lib1_gv_cosmetic_store_credits_ui, (StringExternal("Param/Value/lib_1_84623057") + IntToText(lib1_gf_PlayerCredits(lp_player))), PlayerGroupSingle(lp_player));
}

void lib1_gf_DisableAllCosmeticStoreButtons (int lp_player) {
    // Variable Declarations
    int lv_slot;

    // Automatic Variable Declarations
    const int autoA2541CC4_ae = 2;
    const int autoA2541CC4_ai = 1;

    // Variable Initialization

    // Implementation
    lv_slot = 0;
    for ( ; ( (autoA2541CC4_ai >= 0 && lv_slot <= autoA2541CC4_ae) || (autoA2541CC4_ai < 0 && lv_slot >= autoA2541CC4_ae) ) ; lv_slot += autoA2541CC4_ai ) {
        DialogControlSetEnabled(lib1_gv_trophy_button[lv_slot], PlayerGroupSingle(lp_player), false);
        DialogControlSetEnabled(lib1_gv_pet_button[lv_slot], PlayerGroupSingle(lp_player), false);
        DialogControlSetEnabled(lib1_gv_decoration_button[lv_slot], PlayerGroupSingle(lp_player), false);
    }
    DialogControlSetEnabled(lib1_gv_back_to_main_menu_button, PlayerGroupSingle(lp_player), false);
    DialogControlSetEnabled(lib1_gv_trophy_left_arrow_button, PlayerGroupSingle(lp_player), false);
    DialogControlSetEnabled(lib1_gv_trophy_right_arrow_button, PlayerGroupSingle(lp_player), false);
    DialogControlSetEnabled(lib1_gv_pet_left_arrow_button, PlayerGroupSingle(lp_player), false);
    DialogControlSetEnabled(lib1_gv_pet_right_arrow_button, PlayerGroupSingle(lp_player), false);
    DialogControlSetEnabled(lib1_gv_decoration_left_arrow_button, PlayerGroupSingle(lp_player), false);
    DialogControlSetEnabled(lib1_gv_decoration_right_arrow_button, PlayerGroupSingle(lp_player), false);
}

bool lib1_gf_CosmeticStoreButtonsAreDisabled (int lp_player) {
    // Variable Declarations
    int lv_slot;

    // Automatic Variable Declarations
    const int autoE9A2A1B6_ae = 2;
    const int autoE9A2A1B6_ai = 1;

    // Variable Initialization

    // Implementation
    lv_slot = 0;
    for ( ; ( (autoE9A2A1B6_ai >= 0 && lv_slot <= autoE9A2A1B6_ae) || (autoE9A2A1B6_ai < 0 && lv_slot >= autoE9A2A1B6_ae) ) ; lv_slot += autoE9A2A1B6_ai ) {
        if (((DialogControlIsEnabled(lib1_gv_trophy_button[lv_slot], lp_player) == true) || (DialogControlIsEnabled(lib1_gv_pet_button[lv_slot], lp_player) == true) || (DialogControlIsEnabled(lib1_gv_decoration_button[lv_slot], lp_player) == true))) {
            return false;
        }

    }
    if (((DialogControlIsEnabled(lib1_gv_back_to_main_menu_button, lp_player) == true) || (DialogControlIsEnabled(lib1_gv_trophy_left_arrow_button, lp_player) == true) || (DialogControlIsEnabled(lib1_gv_trophy_right_arrow_button, lp_player) == true) || (DialogControlIsEnabled(lib1_gv_pet_left_arrow_button, lp_player) == true) || (DialogControlIsEnabled(lib1_gv_pet_right_arrow_button, lp_player) == true) || (DialogControlIsEnabled(lib1_gv_decoration_left_arrow_button, lp_player) == true) || (DialogControlIsEnabled(lib1_gv_decoration_right_arrow_button, lp_player) == true))) {
        return false;
    }

    return true;
}

bool lib1_gf_WaitingForResponse (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if (((lib1_gv_player_collection[lp_player].lv_card_to_add >= 0) || (lib1_gv_player_collection[lp_player].lv_card_to_remove >= 0) || (lib1_gv_player_collection[lp_player].lv_page_change == true) || (lib1_gv_player_collection[lp_player].lv_craft == true) || (lib1_gv_player_collection[lp_player].lv_destroy == true) || (lib1_gv_player_collection[lp_player].lv_pack_to_purchase >= 0) || ((GameGetMissionTime() - lib1_gv_player[lp_player].lv_button_click_time) < lib1_gv_rESPONSE_TIME))) {
        return true;
    }

    return false;
}

bool lib1_gf_UnitIsPet (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitHasBehavior2(lp_unit, "Pet") == true)) {
        return true;
    }

    return false;
}

void lib1_gf_InitializeTrophyRegions () {
    // Variable Declarations
    playergroup lv_players_with_trophies;
    int lv_player;
    int lv_count;

    // Automatic Variable Declarations
    playergroup autoA54AEEDA_g;
    playergroup auto577883A4_g;
    playergroup autoFC7FAB81_g;
    playergroup auto86F02296_g;
    playergroup auto60F8953A_g;
    playergroup auto30398845_g;
    playergroup auto7F6D182D_g;
    playergroup auto417718A4_g;

    // Variable Initialization
    lv_players_with_trophies = PlayerGroupEmpty();

    // Implementation
    lv_players_with_trophies = libNtve_gf_IntersectionOfPlayerGroups(lib1_gv_team[0], PlayerGroupActive());
    autoA54AEEDA_g = lv_players_with_trophies;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoA54AEEDA_g, lv_player);
        if (lv_player < 0) { break; }
        if ((lib1_gv_player_cosmetics[lv_player].lv_trophy_enabled == -1)) {
            PlayerGroupRemove(lv_players_with_trophies, lv_player);
        }

    }
    if ((PlayerGroupCount(lv_players_with_trophies) == 0)) {
        lib1_gf_HideAllTrophiesInRegion(RegionFromId(36));
        lib1_gf_HideAllTrophiesInRegion(RegionFromId(35));
        lib1_gf_HideAllTrophiesInRegion(RegionFromId(37));
    }
    else if ((PlayerGroupCount(lv_players_with_trophies) == 1)) {
        lib1_gf_HideAllTrophiesInRegion(RegionFromId(36));
        lib1_gf_HideAllTrophiesInRegion(RegionFromId(37));
        auto577883A4_g = lv_players_with_trophies;
        lv_player = -1;
        while (true) {
            lv_player = PlayerGroupNextPlayer(auto577883A4_g, lv_player);
            if (lv_player < 0) { break; }
            lib1_gv_player[lv_player].lv_trophy_region = RegionFromId(35);
        }
    }
    else if ((PlayerGroupCount(lv_players_with_trophies) == 2)) {
        lib1_gf_HideAllTrophiesInRegion(RegionFromId(35));
        lv_count = 1;
        autoFC7FAB81_g = lv_players_with_trophies;
        lv_player = -1;
        while (true) {
            lv_player = PlayerGroupNextPlayer(autoFC7FAB81_g, lv_player);
            if (lv_player < 0) { break; }
            if ((lv_count == 1)) {
                lib1_gv_player[lv_player].lv_trophy_region = RegionFromId(36);
            }
            else if ((lv_count == 2)) {
                lib1_gv_player[lv_player].lv_trophy_region = RegionFromId(37);
            }
            lv_count = (lv_count + 1);
        }
    }
    else if ((PlayerGroupCount(lv_players_with_trophies) == 3)) {
        lv_count = 1;
        auto86F02296_g = lv_players_with_trophies;
        lv_player = -1;
        while (true) {
            lv_player = PlayerGroupNextPlayer(auto86F02296_g, lv_player);
            if (lv_player < 0) { break; }
            if ((lv_count == 1)) {
                lib1_gv_player[lv_player].lv_trophy_region = RegionFromId(36);
            }
            else if ((lv_count == 2)) {
                lib1_gv_player[lv_player].lv_trophy_region = RegionFromId(35);
            }
            else if ((lv_count == 3)) {
                lib1_gv_player[lv_player].lv_trophy_region = RegionFromId(37);
            }
            lv_count = (lv_count + 1);
        }
    }
    lv_players_with_trophies = libNtve_gf_IntersectionOfPlayerGroups(lib1_gv_team[1], PlayerGroupActive());
    auto60F8953A_g = lv_players_with_trophies;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto60F8953A_g, lv_player);
        if (lv_player < 0) { break; }
        if ((lib1_gv_player_cosmetics[lv_player].lv_trophy_enabled == -1)) {
            PlayerGroupRemove(lv_players_with_trophies, lv_player);
        }

    }
    if ((PlayerGroupCount(lv_players_with_trophies) == 0)) {
        lib1_gf_HideAllTrophiesInRegion(RegionFromId(39));
        lib1_gf_HideAllTrophiesInRegion(RegionFromId(38));
        lib1_gf_HideAllTrophiesInRegion(RegionFromId(40));
    }
    else if ((PlayerGroupCount(lv_players_with_trophies) == 1)) {
        lib1_gf_HideAllTrophiesInRegion(RegionFromId(39));
        lib1_gf_HideAllTrophiesInRegion(RegionFromId(40));
        auto30398845_g = lv_players_with_trophies;
        lv_player = -1;
        while (true) {
            lv_player = PlayerGroupNextPlayer(auto30398845_g, lv_player);
            if (lv_player < 0) { break; }
            lib1_gv_player[lv_player].lv_trophy_region = RegionFromId(38);
        }
    }
    else if ((PlayerGroupCount(lv_players_with_trophies) == 2)) {
        lib1_gf_HideAllTrophiesInRegion(RegionFromId(38));
        lv_count = 1;
        auto7F6D182D_g = lv_players_with_trophies;
        lv_player = -1;
        while (true) {
            lv_player = PlayerGroupNextPlayer(auto7F6D182D_g, lv_player);
            if (lv_player < 0) { break; }
            if ((lv_count == 1)) {
                lib1_gv_player[lv_player].lv_trophy_region = RegionFromId(39);
            }
            else if ((lv_count == 2)) {
                lib1_gv_player[lv_player].lv_trophy_region = RegionFromId(40);
            }
            lv_count = (lv_count + 1);
        }
    }
    else if ((PlayerGroupCount(lv_players_with_trophies) == 3)) {
        lv_count = 1;
        auto417718A4_g = lv_players_with_trophies;
        lv_player = -1;
        while (true) {
            lv_player = PlayerGroupNextPlayer(auto417718A4_g, lv_player);
            if (lv_player < 0) { break; }
            if ((lv_count == 1)) {
                lib1_gv_player[lv_player].lv_trophy_region = RegionFromId(39);
            }
            else if ((lv_count == 2)) {
                lib1_gv_player[lv_player].lv_trophy_region = RegionFromId(38);
            }
            else if ((lv_count == 3)) {
                lib1_gv_player[lv_player].lv_trophy_region = RegionFromId(40);
            }
            lv_count = (lv_count + 1);
        }
    }
}

void lib1_gf_FixBackerRewardsfromPatch35bug (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((lib1_gv_player_cosmetics[lp_player].lv_decoration_owned[0] == true)) {
        lib1_gv_player_cosmetics[lp_player].lv_decoration_enabled[0] = true;
    }

    if ((lib1_gv_player_cosmetics[lp_player].lv_decoration_owned[1] == true)) {
        lib1_gv_player_cosmetics[lp_player].lv_decoration_enabled[1] = true;
    }

}

void lib1_gf_InitializeDecorationCosmeticsforTeam (int lp_team) {
    // Variable Declarations
    region lv_xelnaga_foundation_1;
    region lv_xelnaga_foundation_2;
    region lv_xelnaga_foundation_3;
    region lv_xelnaga_crystals;
    region lv_xelnaga_light_1;
    region lv_xelnaga_light_2;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_team == 0)) {
        lv_xelnaga_foundation_1 = RegionFromId(29);
        lv_xelnaga_foundation_2 = RegionFromId(31);
        lv_xelnaga_foundation_3 = RegionFromId(33);
        lv_xelnaga_crystals = RegionFromId(27);
        lv_xelnaga_light_1 = RegionFromId(42);
        lv_xelnaga_light_2 = RegionFromId(41);
    }
    else {
        lv_xelnaga_foundation_1 = RegionFromId(30);
        lv_xelnaga_foundation_2 = RegionFromId(32);
        lv_xelnaga_foundation_3 = RegionFromId(34);
        lv_xelnaga_crystals = RegionFromId(28);
        lv_xelnaga_light_1 = RegionFromId(43);
        lv_xelnaga_light_2 = RegionFromId(44);
    }
    if ((lib1_gf_TeamCosmeticDecorationDisabled(lib1_gf_GetDecorationIDByName("Xel'naga Foundation"), lp_team) == true)) {
        libNtve_gf_RemoveDoodadsinRegion(lv_xelnaga_foundation_1, "XelNaga_Curb");
        libNtve_gf_RemoveDoodadsinRegion(lv_xelnaga_foundation_1, "Purifier_Curb");
        libNtve_gf_RemoveDoodadsinRegion(lv_xelnaga_foundation_1, "SpacePlatform_Lantern_Blue");
        libNtve_gf_RemoveDoodadsinRegion(lv_xelnaga_foundation_1, "XelNaga_LargeCrates_Flat");
    }
    else {
        libNtve_gf_RemoveDoodadsinRegion(lv_xelnaga_foundation_2, "Elsecaro_Curb");
        libNtve_gf_RemoveDoodadsinRegion(lv_xelnaga_foundation_3, "Elsecaro_Curb");
    }
    if ((lib1_gf_TeamCosmeticDecorationDisabled(lib1_gf_GetDecorationIDByName("Xel'naga Crystals"), lp_team) == true)) {
        libNtve_gf_RemoveDoodadsinRegion(lv_xelnaga_crystals, "Elsecaro_Curb");
        libNtve_gf_RemoveDoodadsinRegion(lv_xelnaga_crystals, "XelNaga_Curb");
        libNtve_gf_RemoveDoodadsinRegion(lv_xelnaga_crystals, "XelNaga_Temple_Small");
    }

    if ((lib1_gf_TeamCosmeticDecorationDisabled(lib1_gf_GetDecorationIDByName("Light of the Xel'naga"), lp_team) == true)) {
        libNtve_gf_RemoveDoodadsinRegion(lv_xelnaga_light_1, "Aiur_Fireflies");
        libNtve_gf_RemoveDoodadsinRegion(lv_xelnaga_light_2, "Aiur_Fireflies");
    }
    else {
        libNtve_gf_SendActorMessageToGameRegion(lv_xelnaga_light_1, libNtve_gf_Signal("XelnagaLight"));
        libNtve_gf_SendActorMessageToGameRegion(lv_xelnaga_light_2, libNtve_gf_Signal("XelnagaLight"));
    }
}

void lib1_gf_InitializePetandTrophyCosmeticsforPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((lib1_gv_player_cosmetics[lp_player].lv_pet_enabled >= 0) && (lib1_gv_player_cosmetics[lp_player].lv_pet_owned[lib1_gv_player_cosmetics[lp_player].lv_pet_enabled] == true)) {
        UnitCreate(1, lib1_gv_cosmetic_pet[lib1_gv_player_cosmetics[lp_player].lv_pet_enabled].lv_unit_type, 0, lp_player, RegionRandomPoint(lib1_gv_player[lp_player].lv_spawn_region), libNtve_gf_RandomAngle());
        UnitSelect(UnitLastCreated(), lp_player, true);
        UnitGroupAdd(lib1_gv_pets, UnitLastCreated());
    }

    if ((lib1_gv_player_cosmetics[lp_player].lv_trophy_enabled >= 0) && (lib1_gv_player_cosmetics[lp_player].lv_trophy_owned[lib1_gv_player_cosmetics[lp_player].lv_trophy_enabled] == true)) {
        lib1_gf_ShowTrophyForPlayer(lp_player, lib1_gv_player_cosmetics[lp_player].lv_trophy_enabled, lib1_gv_player[lp_player].lv_trophy_region);
    }
    else {
        lib1_gf_HideAllTrophiesInRegion(lib1_gv_player[lp_player].lv_trophy_region);
    }
}

void lib1_gf_ShowTrophyForPlayer (int lp_player, int lp_trophy, region lp_region) {
    // Variable Declarations
    int lv_trophy_index;

    // Automatic Variable Declarations
    const int autoF133A346_ae = lib1_gv_tROPHY_LIMIT;
    const int autoF133A346_ai = 1;

    // Variable Initialization

    // Implementation
    lv_trophy_index = 0;
    for ( ; ( (autoF133A346_ai >= 0 && lv_trophy_index <= autoF133A346_ae) || (autoF133A346_ai < 0 && lv_trophy_index >= autoF133A346_ae) ) ; lv_trophy_index += autoF133A346_ai ) {
        if ((lp_trophy != lv_trophy_index)) {
            lib1_gf_HideTrophyInRegion(lv_trophy_index, lp_region);
        }
        else {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Trophy", c_unitCreateIgnorePlacement, lp_player, RegionGetCenter(lp_region));
        }
    }
}

void lib1_gf_HideAllTrophiesInRegion (region lp_region) {
    // Variable Declarations
    int lv_trophy_index;

    // Automatic Variable Declarations
    const int autoBE589F8B_ae = lib1_gv_tROPHY_LIMIT;
    const int autoBE589F8B_ai = 1;

    // Variable Initialization

    // Implementation
    lv_trophy_index = 0;
    for ( ; ( (autoBE589F8B_ai >= 0 && lv_trophy_index <= autoBE589F8B_ae) || (autoBE589F8B_ai < 0 && lv_trophy_index >= autoBE589F8B_ae) ) ; lv_trophy_index += autoBE589F8B_ai ) {
        lib1_gf_HideTrophyInRegion(lv_trophy_index, lp_region);
    }
}

void lib1_gf_HideTrophyInRegion (int lp_trophy_id, region lp_region) {
    // Variable Declarations
    int lv_doodad_index;

    // Automatic Variable Declarations
    const int autoAF0D7A72_ae = lib1_gv_tROPHY_DOODAD_LIMIT;
    const int autoAF0D7A72_ai = 1;

    // Variable Initialization

    // Implementation
    lv_doodad_index = 0;
    for ( ; ( (autoAF0D7A72_ai >= 0 && lv_doodad_index <= autoAF0D7A72_ae) || (autoAF0D7A72_ai < 0 && lv_doodad_index >= autoAF0D7A72_ae) ) ; lv_doodad_index += autoAF0D7A72_ai ) {
        if ((lib1_gv_cosmetic_trophy[lp_trophy_id].lv_doodad_type[lv_doodad_index] != null)) {
            libNtve_gf_RemoveDoodadsinRegion(lp_region, lib1_gv_cosmetic_trophy[lp_trophy_id].lv_doodad_type[lv_doodad_index]);
        }
        else {
            break;
        }
    }
}

void lib1_gf_ShowTrophyName (int lp_viewing_player, int lp_owner) {
    // Automatic Variable Declarations
    // Implementation
    TextTagCreate(StringToText(lib1_gv_cosmetic_trophy[lib1_gv_player_cosmetics[lp_owner].lv_trophy_enabled].lv_name), 24, RegionGetCenter(lib1_gv_player[lp_owner].lv_trophy_region), 3.0, true, false, PlayerGroupSingle(lp_viewing_player));
    lib1_gv_trophy_name_text_tag[lp_viewing_player] = TextTagLastCreated();
}

void lib1_gf_HideTrophyName (int lp_viewing_player) {
    // Automatic Variable Declarations
    // Implementation
    TextTagDestroy(lib1_gv_trophy_name_text_tag[lp_viewing_player]);
}

trigger auto_lib1_gf_GameEndOvermindAnimation_Trigger = null;
unit auto_lib1_gf_GameEndOvermindAnimation_lp_overmind_model;

void lib1_gf_GameEndOvermindAnimation (unit lp_overmind_model) {
    auto_lib1_gf_GameEndOvermindAnimation_lp_overmind_model = lp_overmind_model;

    if (auto_lib1_gf_GameEndOvermindAnimation_Trigger == null) {
        auto_lib1_gf_GameEndOvermindAnimation_Trigger = TriggerCreate("auto_lib1_gf_GameEndOvermindAnimation_TriggerFunc");
    }

    TriggerExecute(auto_lib1_gf_GameEndOvermindAnimation_Trigger, false, false);
}

bool auto_lib1_gf_GameEndOvermindAnimation_TriggerFunc (bool testConds, bool runActions) {
    unit lp_overmind_model = auto_lib1_gf_GameEndOvermindAnimation_lp_overmind_model;

    // Automatic Variable Declarations
    // Implementation
    Wait(0.5, c_timeGame);
    UnitSetHeight(lp_overmind_model, 0.0, 1.0);
    Wait(1.0, c_timeGame);
    UnitKill(lp_overmind_model);
    return true;
}

void lib1_gf_InitializeBackerRewards (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_UnnaturalExperimentsBackerRewards(lp_player);
    lib1_gf_DesperateAlliancesBackerRewards(lp_player);
}

void lib1_gf_UnnaturalExperimentsBackerRewards (int lp_player) {
    // Variable Declarations
    int lv_team;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((PlayerHandle(lp_player) == "1-S2-1-7869026") || (PlayerHandle(lp_player) == "1-S2-1-8608950") || (PlayerHandle(lp_player) == "1-S2-1-674907") || (PlayerHandle(lp_player) == "1-S2-1-339495") || (PlayerHandle(lp_player) == "1-S2-1-6011607") || (PlayerHandle(lp_player) == "2-S2-1-204440") || (PlayerHandle(lp_player) == "2-S2-1-5177550") || (PlayerHandle(lp_player) == "1-S2-1-3315373") || (PlayerHandle(lp_player) == "1-S2-1-1481679") || (PlayerHandle(lp_player) == "1-S2-1-8290075") || (PlayerHandle(lp_player) == "1-S2-1-4116165") || (PlayerHandle(lp_player) == "1-S2-1-8320718") || (PlayerHandle(lp_player) == "1-S2-1-3698670") || (PlayerHandle(lp_player) == "1-S2-1-20307979") || (PlayerHandle(lp_player) == "1-S2-1-1116310"))) {
        lib1_gv_player_collection[lp_player].lv_special_credits = (lib1_gv_player_collection[lp_player].lv_special_credits + 6000);
    }

    if (((PlayerHandle(lp_player) == "1-S2-1-6389275") || (PlayerHandle(lp_player) == "1-S2-1-432821") || (PlayerHandle(lp_player) == "1-S2-1-9720254"))) {
        lib1_gv_player_collection[lp_player].lv_special_credits = (lib1_gv_player_collection[lp_player].lv_special_credits + 12000);
    }

    if (((PlayerHandle(lp_player) == "1-S2-1-951602"))) {
        lib1_gv_player_collection[lp_player].lv_special_credits = (lib1_gv_player_collection[lp_player].lv_special_credits + 18000);
    }

    if (((PlayerHandle(lp_player) == "2-S2-1-3821916"))) {
        lib1_gv_player_collection[lp_player].lv_special_credits = (lib1_gv_player_collection[lp_player].lv_special_credits + 24000);
    }

    if (((PlayerHandle(lp_player) == "1-S2-1-9720254") || (PlayerHandle(lp_player) == "1-S2-1-674907") || (PlayerHandle(lp_player) == "1-S2-1-2155288") || (PlayerHandle(lp_player) == "2-S2-1-204440") || (PlayerHandle(lp_player) == "1-S2-1-432821") || (PlayerHandle(lp_player) == "2-S2-1-218353") || (PlayerHandle(lp_player) == "1-S2-1-3315373") || (PlayerHandle(lp_player) == "1-S2-1-5356059") || (PlayerHandle(lp_player) == "2-S2-1-244305") || (PlayerHandle(lp_player) == "1-S2-1-688814") || (PlayerHandle(lp_player) == "2-S2-2-142858") || (PlayerHandle(lp_player) == "1-S2-1-4716354"))) {
        lib1_gv_player_cosmetics[lp_player].lv_decoration_owned[lib1_gf_GetDecorationIDByName("Xel'naga Foundation")] = true;
        lib1_gv_player_cosmetics[lp_player].lv_decoration_owned[lib1_gf_GetDecorationIDByName("Xel'naga Crystals")] = true;
    }

    if (((PlayerHandle(lp_player) == "1-S2-1-688814"))) {
        lib1_gv_player_cosmetics[lp_player].lv_pet_owned[lib1_gf_GetPetIDByName("Lab Bot")] = true;
    }

    if (((PlayerHandle(lp_player) == "1-S2-1-468864") || (PlayerHandle(lp_player) == "1-S2-1-1441166") || (PlayerHandle(lp_player) == "1-S2-1-1712597") || (PlayerHandle(lp_player) == "1-S2-1-492987") || (PlayerHandle(lp_player) == "1-S2-1-724648") || (PlayerHandle(lp_player) == "1-S2-1-324131") || (PlayerHandle(lp_player) == "1-S2-1-20157391") || (PlayerHandle(lp_player) == "1-S2-1-5024169") || (PlayerHandle(lp_player) == "2-S2-1-1708316") || (PlayerHandle(lp_player) == "3-S2-1-6353557") || (PlayerHandle(lp_player) == "1-S2-1-4669352") || (PlayerHandle(lp_player) == "1-S2-1-4889793") || (PlayerHandle(lp_player) == "1-S2-1-1692842"))) {
        lib1_gv_player_collection[lp_player].lv_special_credits = (lib1_gv_player_collection[lp_player].lv_special_credits + 6000);
        lib1_gv_player_cosmetics[lp_player].lv_decoration_owned[lib1_gf_GetDecorationIDByName("Xel'naga Foundation")] = true;
        lib1_gv_player_cosmetics[lp_player].lv_decoration_owned[lib1_gf_GetDecorationIDByName("Xel'naga Crystals")] = true;
        lib1_gv_player_cosmetics[lp_player].lv_pet_owned[lib1_gf_GetPetIDByName("Lab Bot")] = true;
    }

}

void lib1_gf_DesperateAlliancesBackerRewards (int lp_player) {
    // Variable Declarations
    int lv_team;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((PlayerHandle(lp_player) == "2-S2-2-142858") || (PlayerHandle(lp_player) == "1-S2-1-3315373") || (PlayerHandle(lp_player) == "1-S2-1-2946587") || (PlayerHandle(lp_player) == "1-S2-1-8608950") || (PlayerHandle(lp_player) == "2-S2-1-2197582") || (PlayerHandle(lp_player) == "1-S2-1-4461793") || (PlayerHandle(lp_player) == "3-S2-1-229654") || (PlayerHandle(lp_player) == "1-S2-1-3272622") || (PlayerHandle(lp_player) == "2-S2-1-5402073") || (PlayerHandle(lp_player) == "2-S2-1-3471966") || (PlayerHandle(lp_player) == "2-S2-1-559121") || (PlayerHandle(lp_player) == "1-S2-1-986127") || (PlayerHandle(lp_player) == "3-S2-1-4902486") || (PlayerHandle(lp_player) == "2-S2-1-6004431") || (PlayerHandle(lp_player) == "1-S2-1-3520653") || (PlayerHandle(lp_player) == "1-S2-1-468864") || (PlayerHandle(lp_player) == "1-S2-1-1441166") || (PlayerHandle(lp_player) == "1-S2-1-4396899") || (PlayerHandle(lp_player) == "1-S2-1-1475270") || (PlayerHandle(lp_player) == "1-S2-1-20157391"))) {
        lib1_gv_player_collection[lp_player].lv_special_credits = (lib1_gv_player_collection[lp_player].lv_special_credits + 6000);
    }

    if (((PlayerHandle(lp_player) == "1-S2-1-724648") || (PlayerHandle(lp_player) == "1-S2-1-674907") || (PlayerHandle(lp_player) == "1-S2-1-339495") || (PlayerHandle(lp_player) == "1-S2-1-4431527") || (PlayerHandle(lp_player) == "2-S2-1-511677") || (PlayerHandle(lp_player) == "1-S2-1-1851719"))) {
        lib1_gv_player_collection[lp_player].lv_special_credits = (lib1_gv_player_collection[lp_player].lv_special_credits + 12000);
    }

    if (((PlayerHandle(lp_player) == "1-S2-1-3469900") || (PlayerHandle(lp_player) == "1-S2-1-459164"))) {
        lib1_gv_player_collection[lp_player].lv_special_credits = (lib1_gv_player_collection[lp_player].lv_special_credits + 18000);
    }

    if (((PlayerHandle(lp_player) == "1-S2-1-4889793"))) {
        lib1_gv_player_collection[lp_player].lv_special_credits = (lib1_gv_player_collection[lp_player].lv_special_credits + 48000);
    }

    if (((PlayerHandle(lp_player) == "2-S2-1-559121") || (PlayerHandle(lp_player) == "1-S2-1-2662855") || (PlayerHandle(lp_player) == "1-S2-1-1495480"))) {
        lib1_gv_player_collection[lp_player].lv_special_credits = (lib1_gv_player_collection[lp_player].lv_special_credits + 8000);
        lib1_gv_player_cosmetics[lp_player].lv_trophy_owned[lib1_gf_GetTrophyIDByName("Slave Broods")] = true;
    }
    else {
        lib1_gv_player_cosmetics[lp_player].lv_trophy_owned[lib1_gf_GetTrophyIDByName("Slave Broods")] = false;
    }
    if (((PlayerHandle(lp_player) == "1-S2-1-5826620"))) {
        lib1_gv_player_collection[lp_player].lv_special_credits = (lib1_gv_player_collection[lp_player].lv_special_credits + 8000);
        lib1_gv_player_cosmetics[lp_player].lv_trophy_owned[lib1_gf_GetTrophyIDByName("Survivors of Aiur")] = true;
    }
    else {
        lib1_gv_player_cosmetics[lp_player].lv_trophy_owned[lib1_gf_GetTrophyIDByName("Survivors of Aiur")] = false;
    }
    if (((PlayerHandle(lp_player) == "1-S2-1-7724889"))) {
        lib1_gv_player_collection[lp_player].lv_special_credits = (lib1_gv_player_collection[lp_player].lv_special_credits + 8000);
        lib1_gv_player_cosmetics[lp_player].lv_trophy_owned[lib1_gf_GetTrophyIDByName("Queen of Deception")] = true;
    }
    else {
        lib1_gv_player_cosmetics[lp_player].lv_trophy_owned[lib1_gf_GetTrophyIDByName("Queen of Deception")] = false;
    }
    if (((PlayerHandle(lp_player) == "2-S2-1-218353"))) {
        lib1_gv_player_cosmetics[lp_player].lv_trophy_owned[lib1_gf_GetTrophyIDByName("Lost Temple")] = true;
    }
    else {
        lib1_gv_player_cosmetics[lp_player].lv_trophy_owned[lib1_gf_GetTrophyIDByName("Lost Temple")] = false;
    }
    if (((PlayerHandle(lp_player) == "1-S2-1-5257616") || (PlayerHandle(lp_player) == "2-S2-1-1159671") || (PlayerHandle(lp_player) == "1-S2-1-10172512"))) {
        lib1_gv_player_cosmetics[lp_player].lv_pet_owned[lib1_gf_GetPetIDByName("Ursadon")] = true;
    }

    if (((PlayerHandle(lp_player) == "1-S2-1-5024169") || (PlayerHandle(lp_player) == "2-S2-1-1708316") || (PlayerHandle(lp_player) == "3-S2-1-6353557") || (PlayerHandle(lp_player) == "2-S2-2-142858") || (PlayerHandle(lp_player) == "1-S2-1-724648"))) {
        lib1_gv_player_collection[lp_player].lv_special_credits = (lib1_gv_player_collection[lp_player].lv_special_credits + 6000);
        lib1_gv_player_collection[lp_player].lv_special_credits = (lib1_gv_player_collection[lp_player].lv_special_credits + 8000);
        lib1_gv_player_cosmetics[lp_player].lv_trophy_owned[lib1_gf_GetTrophyIDByName("Slave Broods")] = true;
        lib1_gv_player_collection[lp_player].lv_special_credits = (lib1_gv_player_collection[lp_player].lv_special_credits + 8000);
        lib1_gv_player_cosmetics[lp_player].lv_trophy_owned[lib1_gf_GetTrophyIDByName("Survivors of Aiur")] = true;
        lib1_gv_player_collection[lp_player].lv_special_credits = (lib1_gv_player_collection[lp_player].lv_special_credits + 8000);
        lib1_gv_player_cosmetics[lp_player].lv_trophy_owned[lib1_gf_GetTrophyIDByName("Queen of Deception")] = true;
        lib1_gv_player_cosmetics[lp_player].lv_pet_owned[lib1_gf_GetPetIDByName("Ursadon")] = true;
    }

    if (((PlayerHandle(lp_player) == "1-S2-1-865892") || (PlayerHandle(lp_player) == "2-S2-1-1810289") || (PlayerHandle(lp_player) == "1-S2-1-492987") || (PlayerHandle(lp_player) == "1-S2-1-5356059") || (PlayerHandle(lp_player) == "1-S2-1-1712597") || (PlayerHandle(lp_player) == "1-S2-1-4944954") || (PlayerHandle(lp_player) == "2-S2-1-254588"))) {
        lib1_gv_player_collection[lp_player].lv_special_credits = (lib1_gv_player_collection[lp_player].lv_special_credits + 6000);
        lib1_gv_player_collection[lp_player].lv_special_credits = (lib1_gv_player_collection[lp_player].lv_special_credits + 8000);
        lib1_gv_player_cosmetics[lp_player].lv_trophy_owned[lib1_gf_GetTrophyIDByName("Slave Broods")] = true;
        lib1_gv_player_collection[lp_player].lv_special_credits = (lib1_gv_player_collection[lp_player].lv_special_credits + 8000);
        lib1_gv_player_cosmetics[lp_player].lv_trophy_owned[lib1_gf_GetTrophyIDByName("Survivors of Aiur")] = true;
        lib1_gv_player_collection[lp_player].lv_special_credits = (lib1_gv_player_collection[lp_player].lv_special_credits + 8000);
        lib1_gv_player_cosmetics[lp_player].lv_trophy_owned[lib1_gf_GetTrophyIDByName("Queen of Deception")] = true;
        lib1_gv_player_cosmetics[lp_player].lv_pet_owned[lib1_gf_GetPetIDByName("Ursadon")] = true;
        lib1_gv_player_cosmetics[lp_player].lv_trophy_owned[lib1_gf_GetTrophyIDByName("Lost Temple")] = true;
    }

    if (((PlayerHandle(lp_player) == "1-S2-1-865892") || (PlayerHandle(lp_player) == "1-S2-1-492987"))) {
        lib1_gv_player_cosmetics[lp_player].lv_trophy_owned[lib1_gf_GetTrophyIDByName("Forsaken Temple")] = true;
    }

    if (((PlayerHandle(lp_player) == "1-S2-1-865892") || (PlayerHandle(lp_player) == "1-S2-1-324131"))) {
        lib1_gv_player_cosmetics[lp_player].lv_trophy_owned[lib1_gf_GetTrophyIDByName("Shrine of Forgotten Heroes")] = true;
    }

    if (((PlayerHandle(lp_player) == "1-S2-1-865892") || (PlayerHandle(lp_player) == "1-S2-1-1645208"))) {
        lib1_gv_player_cosmetics[lp_player].lv_trophy_owned[lib1_gf_GetTrophyIDByName("Billium Refinery")] = true;
    }

    if (((PlayerHandle(lp_player) == "1-S2-1-865892") || (PlayerHandle(lp_player) == "1-S2-1-4294192") || (PlayerHandle(lp_player) == "2-S2-1-2197582"))) {
        lib1_gv_player_cosmetics[lp_player].lv_trophy_owned[lib1_gf_GetTrophyIDByName("Industry of War")] = true;
    }

}

int lib1_gf_MaxNewPlayerBonusGames (int lp_player) {
    // Variable Declarations
    int lv_nEW_PLAYER_BONUS_DEFAULT_GAME_LIMIT;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_nEW_PLAYER_BONUS_DEFAULT_GAME_LIMIT = 15;

    // Implementation
    if (((PlayerHandle(lp_player) == "1-S2-1-9811156") || (PlayerHandle(lp_player) == "1-S2-1-635270") || (PlayerHandle(lp_player) == "1-S2-1-5640982"))) {
        return (30 + lv_nEW_PLAYER_BONUS_DEFAULT_GAME_LIMIT);
    }
    else if (((PlayerHandle(lp_player) == "1-S2-1-1348661") || (PlayerHandle(lp_player) == "1-S2-1-8372711") || (PlayerHandle(lp_player) == "2-S2-1-877797"))) {
        return (60 + lv_nEW_PLAYER_BONUS_DEFAULT_GAME_LIMIT);
    }
    else if (((PlayerHandle(lp_player) == "1-S2-1-279974") || (PlayerHandle(lp_player) == "1-S2-1-6141443"))) {
        return (90 + lv_nEW_PLAYER_BONUS_DEFAULT_GAME_LIMIT);
    }
    else if (((PlayerHandle(lp_player) == "1-S2-1-1101955"))) {
        return (120 + lv_nEW_PLAYER_BONUS_DEFAULT_GAME_LIMIT);
    }
    else if (((PlayerHandle(lp_player) == "2-S2-1-1136376"))) {
        return (300 + lv_nEW_PLAYER_BONUS_DEFAULT_GAME_LIMIT);
    }
    return lv_nEW_PLAYER_BONUS_DEFAULT_GAME_LIMIT;
}

void lib1_gf_InitializeTestCosmeticForPlayer1 () {
    // Variable Declarations
    int lv_trophy_to_test;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
}

void lib1_gf_GivePlayerFullCollection (int lp_player) {
    // Variable Declarations
    int lv_card_id;

    // Automatic Variable Declarations
    const int auto23460C0C_ae = lib1_gv_mAX_CARD_ID;
    const int auto23460C0C_ai = 1;

    // Variable Initialization

    // Implementation
    lv_card_id = 0;
    for ( ; ( (auto23460C0C_ai >= 0 && lv_card_id <= auto23460C0C_ae) || (auto23460C0C_ai < 0 && lv_card_id >= auto23460C0C_ae) ) ; lv_card_id += auto23460C0C_ai ) {
        lib1_gv_player_collection[lp_player].lv_unpacked[lv_card_id] = 2;
    }
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Common Effect - Draw 1
//--------------------------------------------------------------------------------------------------
bool lib1_gt_CommonEffectDraw1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_DrawCardFromDecktoHand(lv_player);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_CommonEffectDraw1_Init () {
    lib1_gt_CommonEffectDraw1 = TriggerCreate("lib1_gt_CommonEffectDraw1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Common Effect - Draw 2
//--------------------------------------------------------------------------------------------------
bool lib1_gt_CommonEffectDraw2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_DrawCardFromDecktoHand(lv_player);
    lib1_gf_DrawCardFromDecktoHand(lv_player);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_CommonEffectDraw2_Init () {
    lib1_gt_CommonEffectDraw2 = TriggerCreate("lib1_gt_CommonEffectDraw2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Common Effect - Draw 3
//--------------------------------------------------------------------------------------------------
bool lib1_gt_CommonEffectDraw3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_DrawCardFromDecktoHand(lv_player);
    lib1_gf_DrawCardFromDecktoHand(lv_player);
    lib1_gf_DrawCardFromDecktoHand(lv_player);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_CommonEffectDraw3_Init () {
    lib1_gt_CommonEffectDraw3 = TriggerCreate("lib1_gt_CommonEffectDraw3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Common Effect - Add Hand Size Buff to All Created Units
//--------------------------------------------------------------------------------------------------
bool lib1_gt_CommonEffectAddHandSizeBufftoAllCreatedUnits_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto7E2DBA32_g;
    int auto7E2DBA32_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto7E2DBA32_g = lv_units_created;
    auto7E2DBA32_u = UnitGroupCount(auto7E2DBA32_g, c_unitCountAll);
    for (;; auto7E2DBA32_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto7E2DBA32_g, auto7E2DBA32_u);
        if (lv_unit == null) { break; }
        UnitBehaviorAdd(lv_unit, "HandSize1", lv_unit, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_CommonEffectAddHandSizeBufftoAllCreatedUnits_Init () {
    lib1_gt_CommonEffectAddHandSizeBufftoAllCreatedUnits = TriggerCreate("lib1_gt_CommonEffectAddHandSizeBufftoAllCreatedUnits_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Common Effect - Generate 2 Warp In Cards
//--------------------------------------------------------------------------------------------------
bool lib1_gt_CommonEffectGenerate2WarpInCards_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_GenerateWarpInCardforHand(lv_player);
    lib1_gf_GenerateWarpInCardforHand(lv_player);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_CommonEffectGenerate2WarpInCards_Init () {
    lib1_gt_CommonEffectGenerate2WarpInCards = TriggerCreate("lib1_gt_CommonEffectGenerate2WarpInCards_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Common Effect - Remove 1 Gas Income
//--------------------------------------------------------------------------------------------------
bool lib1_gt_CommonEffectRemove1GasIncome_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_ReduceGasIncome(lv_player, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_CommonEffectRemove1GasIncome_Init () {
    lib1_gt_CommonEffectRemove1GasIncome = TriggerCreate("lib1_gt_CommonEffectRemove1GasIncome_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Common Effect - Unstable Zerg Unit
//--------------------------------------------------------------------------------------------------
bool lib1_gt_CommonEffectUnstableZergUnit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup autoA3D1C90D_g;
    int autoA3D1C90D_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    autoA3D1C90D_g = lv_units_created;
    autoA3D1C90D_u = UnitGroupCount(autoA3D1C90D_g, c_unitCountAll);
    for (;; autoA3D1C90D_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoA3D1C90D_g, autoA3D1C90D_u);
        if (lv_unit == null) { break; }
        UnitBehaviorAdd(lv_unit, "2BattlePhaseTimedlife", lv_unit, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_CommonEffectUnstableZergUnit_Init () {
    lib1_gt_CommonEffectUnstableZergUnit = TriggerCreate("lib1_gt_CommonEffectUnstableZergUnit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Common Effect - Populate With Interceptors
//--------------------------------------------------------------------------------------------------
bool lib1_gt_CommonEffectPopulateWithInterceptors_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_carrier;

    // Automatic Variable Declarations
    unitgroup auto23762F5E_g;
    int auto23762F5E_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto23762F5E_g = lv_units_created;
    auto23762F5E_u = UnitGroupCount(auto23762F5E_g, c_unitCountAll);
    for (;; auto23762F5E_u -= 1) {
        lv_carrier = UnitGroupUnitFromEnd(auto23762F5E_g, auto23762F5E_u);
        if (lv_carrier == null) { break; }
        if ((UnitGetType(lv_carrier) == "Carrier")) {
            UnitBehaviorRemove(lv_carrier, "WaitingToMoveOut", c_unitBehaviorCountAll);
            UnitMagazineArm(lv_carrier, AbilityCommand("CarrierHangar", 0), 8);
            UnitBehaviorAdd(lv_carrier, "WaitingToMoveOut", lv_carrier, 1);
        }
        else if ((UnitGetType(lv_carrier) == "CarrierGantrithor")) {
            UnitBehaviorRemove(lv_carrier, "WaitingToMoveOut", c_unitBehaviorCountAll);
            UnitMagazineArm(lv_carrier, AbilityCommand("CarrierHangarGantrithor", 0), 8);
            UnitBehaviorAdd(lv_carrier, "WaitingToMoveOut", lv_carrier, 1);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_CommonEffectPopulateWithInterceptors_Init () {
    lib1_gt_CommonEffectPopulateWithInterceptors = TriggerCreate("lib1_gt_CommonEffectPopulateWithInterceptors_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Common Effect - Add 1 Mineral Income
//--------------------------------------------------------------------------------------------------
bool lib1_gt_CommonEffectAdd1MineralIncome_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gv_player[lv_player].lv_resources.lv_mineral_income = MinI(lib1_gv_mINERAL_LIMIT, (lib1_gv_player[lv_player].lv_resources.lv_mineral_income + 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_CommonEffectAdd1MineralIncome_Init () {
    lib1_gt_CommonEffectAdd1MineralIncome = TriggerCreate("lib1_gt_CommonEffectAdd1MineralIncome_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Common Effect - Add 1 Gas Income
//--------------------------------------------------------------------------------------------------
bool lib1_gt_CommonEffectAdd1GasIncome_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gv_player[lv_player].lv_resources.lv_gas_income = MinI(lib1_gv_gAS_LIMIT, (lib1_gv_player[lv_player].lv_resources.lv_gas_income + 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_CommonEffectAdd1GasIncome_Init () {
    lib1_gt_CommonEffectAdd1GasIncome = TriggerCreate("lib1_gt_CommonEffectAdd1GasIncome_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Common Effect - Damaged Spawn
//--------------------------------------------------------------------------------------------------
bool lib1_gt_CommonEffectDamagedSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto8C434DA0_g;
    int auto8C434DA0_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto8C434DA0_g = lv_units_created;
    auto8C434DA0_u = UnitGroupCount(auto8C434DA0_g, c_unitCountAll);
    for (;; auto8C434DA0_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto8C434DA0_g, auto8C434DA0_u);
        if (lv_unit == null) { break; }
        UnitSetPropertyFixed(lv_unit, c_unitPropShieldsPercent, 0.0);
        UnitSetPropertyFixed(lv_unit, c_unitPropLifePercent, 50.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_CommonEffectDamagedSpawn_Init () {
    lib1_gt_CommonEffectDamagedSpawn = TriggerCreate("lib1_gt_CommonEffectDamagedSpawn_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Common Effect - Cliff Ambush Spawn
//--------------------------------------------------------------------------------------------------
bool lib1_gt_CommonEffectCliffAmbushSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto31D42B50_g;
    int auto31D42B50_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto31D42B50_g = lv_units_created;
    auto31D42B50_u = UnitGroupCount(auto31D42B50_g, c_unitCountAll);
    for (;; auto31D42B50_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto31D42B50_g, auto31D42B50_u);
        if (lv_unit == null) { break; }
        lib1_gf_IssueCliffAmbushOrders(lv_unit);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_CommonEffectCliffAmbushSpawn_Init () {
    lib1_gt_CommonEffectCliffAmbushSpawn = TriggerCreate("lib1_gt_CommonEffectCliffAmbushSpawn_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Core Set
//--------------------------------------------------------------------------------------------------
bool lib1_gt_CoreSet_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gv_set[lib1_gv_cORE].lv_name = "\xe6\xa0\xb8\xe5\xbf\x83\xe5\x8d\xa1\xe7\xbb\x84";
    lib1_gv_set[lib1_gv_cORE].lv_description = "\xe4\xb8\xba\xe6\x96\xb0\xe7\x8e\xa9\xe5\xae\xb6\xe5\x87\x86\xe5\xa4\x87\xe7\x9a\x84\xe6\x9c\x80\xe4\xbd\xb3\xe7\xbb\x84\xe5\x90\x88\xef\xbc\x8c\xe6\xa0\xb9\xe6\x8d\xae\xe4\xbb\x96\xe4\xbb\xac\xe8\xae\xa4\xe8\xaf\x86\xe5\x92\x8c\xe5\x96\x9c\xe7\x88\xb1\xe7\x9a\x84\xe5\x8d\x95\xe4\xbd\x8d\xe3\x80\x81\xe8\x83\xbd\xe5\x8a\x9b\xe5\x92\x8c\xe8\xa7\x92\xe8\x89\xb2\xef\xbc\x8c\xe5\x90\x91\xe4\xbb\x96\xe4\xbb\xac\xe4\xbb\x8b\xe7\xbb\x8d\xe9\x92\xa5\xe5\x8c\x99\xe5\x8d\xa1\xe7\x89\x8c\xe6\xb8\xb8\xe6\x88\x8f\xe3\x80\x82";
    lib1_gv_set[lib1_gv_cORE].lv_icon = "Assets\\Textures\\btn-ability-terran-liftoff.dds";
    lib1_gv_set[lib1_gv_cORE].lv_store_image = "Assets\\Textures\\ui_battlenet_glues_pageassets_homepanel_upgrade.dds";
    lib1_gv_set[lib1_gv_cORE].lv_start_id = 0;
    lib1_gv_set[lib1_gv_cORE].lv_end_id = 149;
    lib1_gv_set[lib1_gv_cORE].lv_state = lib1_gv_aVAILABLE;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_CoreSet_Init () {
    lib1_gt_CoreSet = TriggerCreate("lib1_gt_CoreSet_Func");
    TriggerAddEventMapInit(lib1_gt_CoreSet);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Core Terran
//--------------------------------------------------------------------------------------------------
bool lib1_gt_CoreTerran_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_id;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_id = -1;
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_tERRAN, "Marine Squad", "\xE9\x99\x86\xE6\x88\x98\xE9\x98\x9F\xE5\xB0\x8F\xE9\x98\x9F", lib1_gv_aGGRESSIVE, "", lib1_gv_cOMMON, 2, 0, null, "", "Assets\\Textures\\btn-unit-terran-marine.dds", SoundLink("Marine_What", 4));
    lib1_gf_DefineCardUnit(lv_id, "Marine", 6);
    lib1_gf_AddCardtoStartingCollection(lv_id, 2);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_tERRAN, "Reaper Gang", "\xE6\xAD\xBB\xE7\xA5\x9E\xE5\xB0\x8F\xE7\xBB\x84", lib1_gv_tACTICAL, "", lib1_gv_cOMMON, 2, 1, null, "", "Assets\\Textures\\btn-unit-terran-reaper.dds", SoundLink("Reaper_What", 1));
    lib1_gf_DefineCardUnit(lv_id, "Reaper", 6);
    lib1_gf_AddRushtoCardDefinition(lv_id);
    lib1_gf_AddCardtoStartingCollection(lv_id, 2);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_tERRAN, "Marauder Squad", "\xE5\x8A\xAB\xE6\x8E\xA0\xE8\x80\x85\xE5\xB0\x8F\xE9\x98\x9F", lib1_gv_aGGRESSIVE, "", lib1_gv_cOMMON, 3, 1, null, "", "Assets\\Textures\\btn-unit-terran-marauder.dds", SoundLink("Marauder_Yes", 3));
    lib1_gf_DefineCardUnit(lv_id, "Marauder", 5);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_tERRAN, "Thor", "\xE9\x9B\xB7\xE7\xA5\x9E", lib1_gv_aGGRESSIVE, "", lib1_gv_cOMMON, 3, 1, null, "\xE8\xBF\x99\xE4\xB8\xAA\xE6\xA8\xA1\xE5\xBC\x8F\xE6\x93\x85\xE4\xBA\x8E\xE5\xAF\xB9\xE4\xBB\x98\xE6\x88\x90\xE7\xBE\xA4\xE7\x9A\x84\xE8\xBD\xBB\xE7\x94\xB2\xE7\xA9\xBA\xE5\x86\x9B\xE3\x80\x82", "Assets\\Textures\\btn-unit-terran-thor.dds", SoundLink("Thor_Ready", 0));
    lib1_gf_DefineCardUnit(lv_id, "Thor", 1);
    lib1_gf_AddCardtoStartingCollection(lv_id, 2);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_tERRAN, "Cyclone Detachment", "\xE9\xA3\x93\xE9\xA3\x8E\xE5\x88\x86\xE9\x81\xA3\xE9\x98\x9F", lib1_gv_tACTICAL, "", lib1_gv_cOMMON, 5, 1, null, "", "Assets\\Textures\\btn-unit-terran-cyclone.dds", SoundLink("Cyclone_Attack", 0));
    lib1_gf_DefineCardUnit(lv_id, "Cyclone", 4);
    lib1_gf_AddRushtoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_tERRAN, "Viking Blockade", "\xE7\xBB\xB4\xE4\xBA\xAC\xE5\xB0\x81\xE9\x94\x81", lib1_gv_dEFENSIVE, "", lib1_gv_cOMMON, 4, 1, null, "", "Assets\\Textures\\btn-unit-terran-vikingfighter.dds", SoundLink("Viking_Attack", 1));
    lib1_gf_DefineCardUnit(lv_id, "VikingFighter", 3);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_tERRAN, "Strike Team", "\xE7\xAA\x81\xE5\x87\xBB\xE9\x98\x9F", lib1_gv_aGGRESSIVE, "", lib1_gv_cOMMON, 5, 1, null, "", "Assets\\Textures\\talent-raynor-level14-infantryattackspeed.dds", SoundLink("Marine_Attack", 7));
    lib1_gf_DefineCardUnit(lv_id, "Marine", 8);
    lib1_gf_DefineCardUnit(lv_id, "Marauder", 4);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_tERRAN, "Hellion Outriders", "\xE6\x81\xB6\xE7\x81\xAB\xE5\x85\x88\xE9\x81\xA3\xE9\x98\x9F", lib1_gv_tACTICAL, "", lib1_gv_cOMMON, 4, 0, null, "", "Assets\\Textures\\btn-unit-terran-hellion.dds", SoundLink("Hellion_Yes", 6));
    lib1_gf_DefineCardUnit(lv_id, "Hellion", 5);
    lib1_gf_AddRushtoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_tERRAN, "Marine Blitz", "\xE9\x99\x86\xE6\x88\x98\xE9\x98\x9F\xE9\x97\xAA\xE5\x87\xBB", lib1_gv_aGGRESSIVE, "", lib1_gv_cOMMON, 8, 0, null, "", "Assets\\Textures\\talent-raynor-level01-infantryspecialist.dds", SoundLink("Marine_Yes", 4));
    lib1_gf_DefineCardUnit(lv_id, "Marine", 20);
    lib1_gf_AddCardtoStartingCollection(lv_id, 2);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_tERRAN, "Banshee Skywatch", "\xE5\xA5\xB3\xE5\xA6\x96\xE5\x88\xB6\xE7\xA9\xBA", lib1_gv_dEFENSIVE, "", lib1_gv_cOMMON, 4, 2, null, "", "Assets\\Textures\\btn-unit-terran-banshee.dds", SoundLink("Banshee_Attack", 4));
    lib1_gf_DefineCardUnit(lv_id, "Banshee", 3);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_tERRAN, "Bunker", "\xE5\x9C\xB0\xE5\xA0\xA1", lib1_gv_sTRUCTURE, "", lib1_gv_cOMMON, 2, 0, lib1_gt_EffectBunker, "\xE5\xBB\xBA\xE9\x80\xA0\xE4\xB8\x80\xE4\xB8\xAA\xE8\xA3\x85\xE6\x9C\x89 4 \xE4\xB8\xAA\xE9\x99\x86\xE6\x88\x98\xE9\x98\x9F\xE5\x91\x98\xE7\x9A\x84\xE5\x9C\xB0\xE5\xA0\xA1\xE3\x80\x82", "Assets\\Textures\\btn-building-terran-bunker.dds", SoundLink("Marine_EnterBunkerVO", 0));
    lib1_gf_AddCardtoStartingCollection(lv_id, 2);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_tERRAN, "Twin Turrets", "\xE5\x8F\x8C\xE5\xA1\x94", lib1_gv_sTRUCTURE, "", lib1_gv_cOMMON, 2, 0, lib1_gt_EffectTwinTurrets, "\xE5\xBB\xBA\xE9\x80\xA0 2 \xE5\xBA\xA7\xE5\xAF\xBC\xE5\xBC\xB9\xE5\xA1\x94\xE3\x80\x82", "Assets\\Textures\\btn-building-terran-missileturret.dds", SoundLink("MissileTurret_What", 0));
    lib1_gf_AddDetectiontoCardDefinition(lv_id);
    lib1_gf_AddCardtoStartingCollection(lv_id, 2);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_tERRAN, "Barracks", "\xE5\x85\xB5\xE8\x90\xA5", lib1_gv_sTRUCTURE, "", lib1_gv_cOMMON, 3, 0, lib1_gt_EffectBarracks, "\xE5\xBB\xBA\xE9\x80\xA0\xE4\xB8\x80\xE4\xB8\xAA\xE5\x85\xB5\xE8\x90\xA5\xEF\xBC\x8C\xE6\xAF\x8F\xE5\x9B\x9E\xE5\x90\x88\xE7\x94\x9F\xE4\xBA\xA7 2 \xE4\xB8\xAA\xE9\x99\x86\xE6\x88\x98\xE9\x98\x9F\xE5\x91\x98\xE3\x80\x82", "Assets\\Textures\\btn-building-terran-barracks.dds", SoundLink("Barracks_What", 0));
    lib1_gf_AddCardtoStartingCollection(lv_id, 2);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_tERRAN, "Factory", "\xE9\x87\x8D\xE5\xB7\xA5\xE5\x8E\x82", lib1_gv_sTRUCTURE, "", lib1_gv_cOMMON, 2, 1, lib1_gt_EffectFactory, "\xE5\xBB\xBA\xE9\x80\xA0\xE4\xB8\x80\xE4\xB8\xAA\xE9\x87\x8D\xE5\xB7\xA5\xE5\x8E\x82\xEF\xBC\x8C\xE6\xAF\x8F\xE5\x9B\x9E\xE5\x90\x88\xE7\x94\x9F\xE4\xBA\xA7 1 \xE4\xB8\xAA\xE7\x81\xAB\xE8\xBD\xA6\xE4\xBE\xA0\xE3\x80\x82", "Assets\\Textures\\btn-building-terran-factory.dds", SoundLink("Factory_What", 0));
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_tERRAN, "Engineering Bay", "\xE5\xB7\xA5\xE7\xA8\x8B\xE7\xAB\x99", lib1_gv_sTRUCTURE, "", lib1_gv_cOMMON, 2, 2, lib1_gt_EffectEngineeringBay, "\xE5\xBB\xBA\xE9\x80\xA0\xE4\xB8\x80\xE4\xB8\xAA\xE5\xB7\xA5\xE7\xA8\x8B\xE7\xAB\x99\xE3\x80\x82\xE7\x9B\xB4\xE5\x88\xB0\xE8\xA2\xAB\xE6\x91\xA7\xE6\xAF\x81\xE5\x89\x8D\xEF\xBC\x8C\xE4\xBD\xA0\xE7\x9A\x84\xE7\x94\x9F\xE7\x89\xA9\xE5\x8D\x95\xE4\xBD\x8D +15% \xE4\xBC\xA4\xE5\xAE\xB3\xE5\x92\x8C +1 \xE6\x8A\xA4\xE7\x94\xB2\xE3\x80\x82", "Assets\\Textures\\btn-building-terran-engineeringbay.dds", SoundLink("EngineeringBay_What", 0));
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_tERRAN, "Supply Drop", "\xE7\xA9\xBA\xE6\x8A\x95\xE8\xA1\xA5\xE7\xBB\x99", lib1_gv_aCTION, "", lib1_gv_cOMMON, 3, 0, null, "\xE6\x8A\xBD\xE4\xB8\xA4\xE5\xBC\xA0\xE7\x89\x8C\xE3\x80\x82", "Assets\\Textures\\btn-ability-terran-calldownextrasupplies-color.dds", SoundLink("OrbitalCommand_CalldownExtraSuppliesImpact", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DRAW, lib1_gt_CommonEffectDraw2);
    lib1_gf_AddCardtoStartingCollection(lv_id, 2);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_tERRAN, "Yamato Cannon", "\xE5\xA4\xA7\xE5\x92\x8C\xE7\x82\xAE", lib1_gv_aCTION, "", lib1_gv_cOMMON, 1, 2, null, "\xE5\xAF\xB9\xE6\x9C\x80\xE8\x82\x89\xE7\x9A\x84\xE6\x95\x8C\xE6\x96\xB9\xE5\x8D\x95\xE4\xBD\x8D\xE9\x80\xA0\xE6\x88\x90 1500 \xE7\x82\xB9\xE4\xBC\xA4\xE5\xAE\xB3", "Assets\\Textures\\btn-ability-terran-yamatogun-color.dds", SoundLink("Battlecruiser_YamatoAttackChargeUp", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_REMOVE_UNIT_1500_DAMAGE, lib1_gt_EffectYamatoCannon);
    lib1_gf_AddCardtoStartingCollection(lv_id, 2);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_tERRAN, "Scanner Sweep", "\xE6\x98\xA0\xE8\xB1\xA1\xE6\x89\xAB\xE6\x8F\x8F", lib1_gv_aCTION, "", lib1_gv_cOMMON, 2, 0, null, "\xE5\x9C\xA8\xE4\xB8\x8B\xE4\xB8\xAA\xE6\x88\x98\xE6\x96\x97\xE9\x98\xB6\xE6\xAE\xB5\xE6\x8F\xAD\xE7\xA4\xBA\xE6\x89\x80\xE6\x9C\x89\xE6\x95\x8C\xE5\xAF\xB9\xE9\x9A\x90\xE8\xBA\xAB\xE5\x8D\x95\xE4\xBD\x8D\xEF\xBC\x8C\xE5\xB9\xB6\xE6\x8A\xBD\xE4\xB8\x80\xE5\xBC\xA0\xE7\x89\x8C\xE3\x80\x82", "Assets\\Textures\\btn-ability-terran-scannersweep-color.dds", SoundLink("OrbitalCommand_ScannerSweep", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DRAW, lib1_gt_CommonEffectDraw1);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_REVEAL_UNIT, lib1_gt_EffectScannerSweep);
    lib1_gf_AddDetectiontoCardDefinition(lv_id);
    lib1_gf_AddCardtoStartingCollection(lv_id, 2);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_tERRAN, "Seeker Missiles", "\xE7\x8C\x8E\xE6\x9D\x80\xE9\xA3\x9E\xE5\xBC\xB9", lib1_gv_aCTION, "", lib1_gv_cOMMON, 3, 2, null, "\xE5\x90\x91\xE6\x95\x8C\xE5\xAF\xB9\xE5\x8D\x95\xE4\xBD\x8D\xE9\x9B\x86\xE7\xBE\xA4\xE5\x8F\x91\xE5\xB0\x84 6 \xE6\x9E\x9A\xE7\x8C\x8E\xE6\x9D\x80\xE9\xA3\x9E\xE5\xBC\xB9\xE3\x80\x82", "Assets\\Textures\\btn-ability-terran-huntermissile-color.dds", SoundLink("Raven_HunterSeekerTargetLock", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_REMOVE_UNIT_AOE_DAMAGE, lib1_gt_EffectSeekerMissiles);
    lib1_gf_AddCardtoStartingCollection(lv_id, 2);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_tERRAN, "Stimpack", "\xE5\x85\xB4\xE5\xA5\x8B\xE5\x89\x82", lib1_gv_aCTION, "", lib1_gv_cOMMON, 0, 2, null, "\xE4\xBD\xA0\xE7\x9A\x84\xE7\x94\x9F\xE7\x89\xA9\xE5\x8D\x95\xE4\xBD\x8D\xE4\xB8\xA7\xE5\xA4\xB1 10% \xE7\x94\x9F\xE5\x91\xBD\xE5\x80\xBC\xEF\xBC\x8C\xE8\x8E\xB7\xE5\xBE\x97\xE7\x96\xBE\xE8\xA1\x8C\xEF\xBC\x8C\xE5\xB9\xB6\xE5\x9C\xA8 2 \xE5\x9B\x9E\xE5\x90\x88\xE5\x86\x85\xE6\x94\xBB\xE5\x87\xBB\xE9\x80\x9F\xE5\xBA\xA6\xE5\x92\x8C\xE7\xA7\xBB\xE5\x8A\xA8\xE9\x80\x9F\xE5\xBA\xA6 +50%\xE3\x80\x82", "Assets\\Textures\\btn-ability-terran-stimpack-color.dds", SoundLink("Marine_Stimpack", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_BUFF_UNITS, lib1_gt_EffectStimpack);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_tERRAN, "Siege Tanks", "\xE6\x94\xBB\xE5\x9F\x8E\xE5\x9D\xA6\xE5\x85\x8B", lib1_gv_aGGRESSIVE, "", lib1_gv_uNCOMMON, 3, 1, lib1_gt_EffectSiegeTanks, "\xE4\xBB\x96\xE4\xBB\xAC\xE5\x9C\xA8\xE6\x8E\xA5\xE6\x95\x8C\xE5\x90\x8E\xE8\xBF\x9B\xE5\x85\xA5\xE6\x94\xBB\xE5\x9F\x8E\xE6\xA8\xA1\xE5\xBC\x8F\xE3\x80\x82", "Assets\\Textures\\btn-unit-terran-siegetanksiegemode.dds", SoundLink("SiegeTank_Yes", 3));
    lib1_gf_DefineCardUnit(lv_id, "SiegeTank", 2);
    lib1_gf_AddCardtoStartingCollection(lv_id, 2);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_tERRAN, "Ghost Operatives", "\xE5\xB9\xBD\xE7\x81\xB5\xE7\x89\xB9\xE5\xB7\xA5", lib1_gv_tACTICAL, "", lib1_gv_uNCOMMON, 1, 2, lib1_gt_EffectGhostOperatives, "", "Assets\\Textures\\btn-unit-terran-ghost.dds", SoundLink("Ghost_Attack", 0));
    lib1_gf_DefineCardUnit(lv_id, "Ghost", 2);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_tERRAN, "Widow Mines", "\xE5\xAF\xA1\xE5\xA6\x87\xE9\x9B\xB7", lib1_gv_dEFENSIVE, "", lib1_gv_uNCOMMON, 2, 1, null, "\xE4\xBB\x96\xE4\xBB\xAC\xE4\xBC\x9A\xE5\x9C\xA8\xE4\xBD\xA0\xE7\x9A\x84\xE9\x98\xB2\xE5\xBE\xA1\xE5\x8C\xBA\xE6\xBD\x9C\xE5\x9C\xB0\xE3\x80\x82", "Assets\\Textures\\btn-unit-terran-widowmine.dds", SoundLink("WidowMine_What", 0));
    lib1_gf_DefineCardUnit(lv_id, "WidowMine", 5);
    lib1_gf_AddCardtoStartingCollection(lv_id, 2);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_tERRAN, "Operation Clearsky", "\xE5\xA4\xA9\xE7\xA9\xBA\xE6\xB8\x85\xE7\x90\x86\xE8\xAE\xA1\xE5\x88\x92", lib1_gv_aGGRESSIVE, "", lib1_gv_uNCOMMON, 5, 3, null, "", "Assets\\Textures\\btn-ability-terran-haywiremissile.dds", SoundLink("TerranFlyer_Attack", 3));
    lib1_gf_DefineCardUnit(lv_id, "VikingFighter", 3);
    lib1_gf_DefineCardUnit(lv_id, "Liberator", 2);
    lib1_gf_AddCardtoStartingCollection(lv_id, 2);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_tERRAN, "Reaper Ambush", "\xE6\xAD\xBB\xE7\xA5\x9E\xE4\xBC\x8F\xE5\x87\xBB", lib1_gv_aGGRESSIVE, "", lib1_gv_uNCOMMON, 4, 1, lib1_gt_CommonEffectCliffAmbushSpawn, "\xE4\xBB\x96\xE4\xBB\xAC\xE4\xBB\x8E\xE9\xAB\x98\xE5\x9C\xB0\xE5\x87\xBA\xE5\x87\xBB\xE3\x80\x82", "Assets\\Textures\\btn-ability-terran-jetpack-color.dds", SoundLink("Reaper_What", 1));
    lib1_gf_DefineCardUnit(lv_id, "Reaper", 8);
    lib1_gf_AddRushtoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_tERRAN, "Repair Crew", "\xE7\xBB\xB4\xE4\xBF\xAE\xE4\xBA\xBA\xE5\x91\x98", lib1_gv_dEFENSIVE, "", lib1_gv_uNCOMMON, 1, 1, lib1_gt_EffectRepairCrew, "\xE4\xBB\x96\xE4\xBB\xAC\xE4\xBC\x98\xE5\x85\x88\xE4\xBF\xAE\xE7\x90\x86\xE5\x8F\x97\xE6\x8D\x9F\xE7\x9A\x84\xE6\x9C\xBA\xE6\xA2\xB0\xE5\x8D\x95\xE4\xBD\x8D\xE5\x92\x8C\xE5\xBB\xBA\xE7\xAD\x91\xE3\x80\x82", "Assets\\Textures\\ui_tipicon_campaign_space01-repair.dds", SoundLink("SCV_What", 6));
    lib1_gf_DefineCardUnit(lv_id, "SCV", 5);
    lib1_gf_AddRushtoCardDefinition(lv_id);
    lib1_gf_AddCardtoStartingCollection(lv_id, 1);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_tERRAN, "Medivac Runners", "\xE5\x8C\xBB\xE7\x96\x97\xE6\x95\x91\xE6\x8F\xB4\xE9\x98\x9F", lib1_gv_dEFENSIVE, "", lib1_gv_uNCOMMON, 6, 2, null, "\xE6\xAF\x8F\xE8\x89\x98\xE8\x88\xB9\xE5\x8D\xB8\xE8\xBD\xBD 8 \xE4\xB8\xAA\xE9\x98\xB2\xE5\xAE\x88\xE7\x9A\x84\xE9\x99\x86\xE6\x88\x98\xE9\x98\x9F\xE5\x91\x98\xEF\xBC\x8C\xE7\x84\xB6\xE5\x90\x8E\xE6\x8F\xB4\xE6\x95\x91\xE5\x90\x8E\xE6\x92\xA4\xE7\x9A\x84\xE6\x88\x98\xE6\x9C\xAF\xE9\x83\xA8\xE9\x98\x9F\xE3\x80\x82", "Assets\\Textures\\btn-unit-terran-medivac.dds", SoundLink("Medivac_Yes", 10));
    lib1_gf_DefineCardUnit(lv_id, "Medivac", 2);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DEFAULT, lib1_gt_EffectMedivacRunners);
    lib1_gf_AddCardtoStartingCollection(lv_id, 2);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_tERRAN, "Raven Support", "\xE6\xB8\xA1\xE9\xB8\xA6\xE5\xA2\x9E\xE6\x8F\xB4", lib1_gv_tACTICAL, "", lib1_gv_uNCOMMON, 3, 2, lib1_gt_EffectRavenSupport, "", "Assets\\Textures\\btn-unit-terran-raven.dds", SoundLink("Raven_What", 2));
    lib1_gf_DefineCardUnit(lv_id, "Raven", 2);
    lib1_gf_AddRushtoCardDefinition(lv_id);
    lib1_gf_AddDetectiontoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_tERRAN, "Supply Depots", "\xE8\xA1\xA5\xE7\xBB\x99\xE7\xAB\x99", lib1_gv_sTRUCTURE, "", lib1_gv_uNCOMMON, 2, 0, lib1_gt_EffectSupplyDepots, "\xE9\x80\xA0\xE4\xB8\xA4\xE4\xB8\xAA\xE8\xA1\xA5\xE7\xBB\x99\xE7\xAB\x99\xE3\x80\x82\xE5\xBD\x93\xE8\xA1\xA5\xE7\xBB\x99\xE7\xAB\x99\xE8\xA2\xAB\xE6\x91\xA7\xE6\xAF\x81\xE6\x97\xB6\xEF\xBC\x8C\xE4\xBB\x8E\xE4\xBD\xA0\xE7\x9A\x84\xE6\x89\x8B\xE7\x89\x8C\xE4\xB8\xAD\xE9\x9A\x8F\xE6\x9C\xBA\xE4\xB8\xA2\xE5\xBC\x83\xE4\xB8\x80\xE5\xBC\xA0\xE7\x89\x8C\xE3\x80\x82\xE6\x88\x98\xE5\x90\xBC\xEF\xBC\x9A\xE6\x8A\xBD\xE4\xB8\xA4\xE5\xBC\xA0\xE7\x89\x8C\xE3\x80\x82", "Assets\\Textures\\btn-building-terran-supplydepot.dds", SoundLink("SupplyDepot_What", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DRAW, lib1_gt_CommonEffectDraw2);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_tERRAN, "Sensor Tower", "\xE6\x84\x9F\xE5\xBA\x94\xE5\xA1\x94", lib1_gv_sTRUCTURE, "", lib1_gv_uNCOMMON, 1, 1, lib1_gt_EffectSensorTower, "\xE5\xBB\xBA\xE9\x80\xA0\xE4\xB8\x80\xE4\xB8\xAA\xE6\x84\x9F\xE5\xBA\x94\xE5\xA1\x94\xEF\xBC\x8C\xE9\x82\xA3\xE6\x98\xAF\xE4\xB8\xAA\xE8\xB6\x85---\xE7\xBA\xA7---\xE8\xBF\x9C\xE7\xA8\x8B\xE4\xBE\xA6\xE6\xB5\x8B\xE5\xA1\x94\xE3\x80\x82", "Assets\\Textures\\btn-building-terran-sensordome.dds", SoundLink("SensorTower_What", 0));
    lib1_gf_AddDetectiontoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_tERRAN, "Refinery", "\xE7\xB2\xBE\xE7\x82\xBC\xE5\x8E\x82", lib1_gv_sTRUCTURE, "", lib1_gv_uNCOMMON, 3, -2, lib1_gt_EffectRefinery, "\xE8\xA2\xAB\xE9\x80\x89\xE4\xB8\xAD\xE6\x97\xB6\xEF\xBC\x8C\xE8\x8E\xB7\xE5\xBE\x97 2 \xE7\x93\xA6\xE6\x96\xAF\xE3\x80\x82\xE5\xBB\xBA\xE9\x80\xA0\xE4\xB8\x80\xE4\xB8\xAA\xE7\xB2\xBE\xE7\x82\xBC\xE5\x8E\x82\xE3\x80\x82\xE7\x9B\xB4\xE5\x88\xB0\xE8\xA2\xAB\xE6\x91\xA7\xE6\xAF\x81\xEF\xBC\x8C\xE6\x8F\x90\xE9\xAB\x98 1 \xE7\x82\xB9\xE4\xBD\xA0\xE7\x9A\x84\xE7\x93\xA6\xE6\x96\xAF\xE4\xB8\x8A\xE9\x99\x90\xE3\x80\x82", "Assets\\Textures\\btn-building-terran-refinery.dds", SoundLink("Refinery_What", 0));
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_tERRAN, "Starport", "\xE6\x98\x9F\xE6\xB8\xAF", lib1_gv_sTRUCTURE, "", lib1_gv_uNCOMMON, 4, 2, lib1_gt_EffectStarport, "\xE5\xBB\xBA\xE9\x80\xA0\xE4\xB8\x80\xE4\xB8\xAA\xE6\x98\x9F\xE6\xB8\xAF\xEF\xBC\x8C\xE6\xAF\x8F\xE5\x9B\x9E\xE5\x90\x88\xE7\x94\x9F\xE4\xBA\xA7 1 \xE4\xB8\xAA\xE6\x88\x98\xE6\x9C\xBA\xE6\xA8\xA1\xE5\xBC\x8F\xE7\x9A\x84\xE7\xBB\xB4\xE4\xBA\xAC\xE3\x80\x82", "Assets\\Textures\\btn-building-terran-starport.dds", SoundLink("Starport_What", 0));
    lib1_gf_AddCardtoStartingCollection(lv_id, 2);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_tERRAN, "MULE", "\xE7\x9F\xBF\xE9\xAA\xA1", lib1_gv_aCTION, "", lib1_gv_uNCOMMON, -2, 0, null, "\xE8\xA2\xAB\xE9\x80\x89\xE4\xB8\xAD\xE6\x97\xB6\xEF\xBC\x8C\xE8\x8E\xB7\xE5\xBE\x97 2 \xE7\x9F\xBF\xE7\x89\xA9\xE3\x80\x82", "Assets\\Textures\\btn-unit-terran-mule.dds", SoundLink("Mule_What", 0));
    lib1_gf_AddCardtoStartingCollection(lv_id, 1);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_tERRAN, "Strike Cannons", "\xE7\xAA\x81\xE5\x87\xBB\xE7\x82\xAE\xE7\x81\xAB", lib1_gv_aCTION, "", lib1_gv_uNCOMMON, 3, 1, null, "\xE5\xAF\xB9\xE6\x9C\x80\xE8\xB4\xB5\xE7\x9A\x84\xE6\x95\x8C\xE5\xAF\xB9\xE5\xBB\xBA\xE7\xAD\x91\xE9\x80\xA0\xE6\x88\x90 1500 \xE7\x82\xB9\xE4\xBC\xA4\xE5\xAE\xB3\xE3\x80\x82", "Assets\\Textures\\btn-ability-terran-bombardmentstrike-color.dds", SoundLink("250mmStrikeCannonsSound", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_REMOVE_UNIT_1500_DAMAGE, lib1_gt_EffectStrikeCannons);
    lib1_gf_AddCardtoStartingCollection(lv_id, 2);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_tERRAN, "Reactor", "\xE5\x8F\x8D\xE5\xBA\x94\xE5\xA0\x86", lib1_gv_aCTION, "", lib1_gv_uNCOMMON, 5, 3, null, "\xE4\xB8\xBA\xE4\xBD\xA0\xE7\x9A\x84\xE4\xB8\xA4\xE4\xB8\xAA\xE5\xB0\x9A\xE6\x9C\xAA\xE6\xB7\xBB\xE5\x8A\xA0\xE6\x8C\x82\xE4\xBB\xB6\xE7\x9A\x84\xE5\x85\xB5\xE8\x90\xA5\xEF\xBC\x8C\xE9\x87\x8D\xE5\xB7\xA5\xE5\x8E\x82\xE6\x88\x96\xE6\x98\x9F\xE6\xB8\xAF\xE6\xB7\xBB\xE5\x8A\xA0\xE5\x8F\x8D\xE5\xBA\x94\xE5\xA0\x86\xEF\xBC\x8C\xE8\xAE\xA9\xE4\xBB\x96\xE4\xBB\xAC\xE7\x9A\x84\xE4\xBA\xA7\xE8\x83\xBD\xE7\xBF\xBB\xE5\x80\x8D\xE3\x80\x82", "Assets\\Textures\\btn-building-terran-reactor.dds", SoundLink("Reactor_What", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_CREATE_UNIT, lib1_gt_EffectReactor);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_tERRAN, "Steady Targeting", "\xE7\xA8\xB3\xE5\x9B\xBA\xE5\xB0\x84\xE5\x87\xBB", lib1_gv_aCTION, "", lib1_gv_uNCOMMON, 2, 1, null, "\xE5\xAF\xB9\xE6\x9C\x80\xE8\x82\x89\xE7\x9A\x84\xE4\xB8\xA4\xE4\xB8\xAA\xE6\x95\x8C\xE5\xAF\xB9\xE7\x94\x9F\xE7\x89\xA9\xE5\x8D\x95\xE4\xBD\x8D\xE9\x80\xA0\xE6\x88\x90 800 \xE7\x82\xB9\xE4\xBC\xA4\xE5\xAE\xB3\xE3\x80\x82", "Assets\\Textures\\btn-ability-terran-snipe-color.dds", SoundLink("Ghost_SnipeLaunch", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_REMOVE_UNIT_800_DAMAGE, lib1_gt_EffectSteadyTargeting);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_tERRAN, "Battlecruiser", "\xE6\x88\x98\xE5\x88\x97\xE5\xB7\xA1\xE6\xB4\x8B\xE8\x88\xB0", lib1_gv_tACTICAL, "", lib1_gv_rARE, 4, 2, null, "", "Assets\\Textures\\btn-unit-terran-battlecruiser.dds", SoundLink("Battlecruiser_Yes", 11));
    lib1_gf_DefineCardUnit(lv_id, "Battlecruiser", 1);
    lib1_gf_AddCardtoStartingCollection(lv_id, 1);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_tERRAN, "Liberation Zone", "\xE8\xA7\xA3\xE6\x94\xBE\xE5\x8C\xBA", lib1_gv_dEFENSIVE, "", lib1_gv_rARE, 5, 2, null, "\xE4\xBB\x96\xE4\xBB\xAC\xE5\xB0\x86\xE5\xAF\xB9\xE7\x9D\x80\xE5\x9C\xB0\xE5\x9B\xBE\xE4\xB8\xAD\xE9\x97\xB4\xE6\x9E\xB6\xE8\xAE\xBE\xE5\xAF\xB9\xE5\x9C\xB0\xE6\xA8\xA1\xE5\xBC\x8F\xE3\x80\x82", "Assets\\Textures\\btn-ability-terran-liberator-agmode.dds", SoundLink("TerranFlyer_Yes", 8));
    lib1_gf_DefineCardUnit(lv_id, "Liberator", 2);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_tERRAN, "Doom Drop", "\xE8\x87\xB4\xE5\x91\xBD\xE7\xA9\xBA\xE6\x8A\x95", lib1_gv_aGGRESSIVE, "", lib1_gv_rARE, 8, 2, null, "\xE5\x9C\xA8\xE6\x95\x8C\xE4\xBA\xBA\xE9\x98\xB2\xE5\xBE\xA1\xE5\x8C\xBA\xE5\x9F\x9F\xE9\x99\x84\xE8\xBF\x91,\xE6\xAF\x8F\xE8\x89\x98\xE8\x88\xB9\xE5\x8D\xB8\xE8\xBD\xBD 4 \xE4\xB8\xAA\xE9\x99\x86\xE6\x88\x98\xE9\x98\x9F\xE5\x91\x98\xE5\x92\x8C 2 \xE4\xB8\xAA\xE5\x8A\xAB\xE6\x8E\xA0\xE8\x80\x85\xE3\x80\x82", "Assets\\Textures\\btn-upgrade-terran-highcapacityfueltanks.dds", SoundLink("Medivac_Yes", 5));
    lib1_gf_DefineCardUnit(lv_id, "Medivac", 2);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DEFAULT, lib1_gt_EffectDoomDrop);
    lib1_gf_AddRushtoCardDefinition(lv_id);
    lib1_gf_AddCardtoStartingCollection(lv_id, 1);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_tERRAN, "Perched Artillery", "\xE9\xAB\x98\xE5\x9C\xB0\xE7\x81\xAB\xE7\x82\xAE", lib1_gv_dEFENSIVE, "", lib1_gv_rARE, 4, 2, null, "\xE6\xAF\x8F\xE8\x89\x98\xE8\x88\xB9\xE5\x9C\xA8\xE9\xAB\x98\xE5\x9C\xB0\xE4\xB8\x8A\xE5\x8D\xB8\xE8\xBD\xBD 1 \xE8\xBE\x86\xE6\x94\xBB\xE5\x9F\x8E\xE5\x9D\xA6\xE5\x85\x8B\xEF\xBC\x8C\xE9\x9A\x8F\xE5\x90\x8E\xE5\x9D\xA6\xE5\x85\x8B\xE8\xBF\x9B\xE5\x85\xA5\xE6\x94\xBB\xE5\x9F\x8E\xE6\xA8\xA1\xE5\xBC\x8F\xE3\x80\x82", "Assets\\Textures\\btn-upgrade-terran-nova-siegetankrange.dds", SoundLink("SiegeTank_What", 3));
    lib1_gf_DefineCardUnit(lv_id, "Medivac", 2);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_CREATE_UNIT, lib1_gt_EffectPerchedArtilleryCargo);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DEFAULT, lib1_gt_EffectPerchedArtilleryOrder);
    lib1_gf_AddRushtoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_tERRAN, "Entrench", "\xE5\x9F\x8E\xE5\xB8\x82\xE5\x8C\x96", lib1_gv_dEFENSIVE, "", lib1_gv_rARE, 6, 1, null, "\xE5\xBB\xBA\xE9\x80\xA0\xE4\xB8\x80\xE4\xB8\xAA\xE5\xAF\xBC\xE5\xBC\xB9\xE5\xA1\x94\xE5\x92\x8C\xE4\xB8\x80\xE4\xB8\xAA\xE8\xA3\x85\xE6\x9C\x89 4 \xE4\xB8\xAA\xE9\x99\x86\xE6\x88\x98\xE9\x98\x9F\xE5\x91\x98\xE7\x9A\x84\xE5\x9C\xB0\xE5\xA0\xA1\xE3\x80\x82\xE5\x9D\xA6\xE5\x85\x8B\xE5\xB0\x86\xE4\xBC\x9A\xE5\x9C\xA8\xE4\xBD\xA0\xE7\x9A\x84\xE9\x98\xB2\xE5\xBE\xA1\xE5\x8C\xBA\xE8\xBF\x9B\xE5\x85\xA5\xE6\x94\xBB\xE5\x9F\x8E\xE6\xA8\xA1\xE5\xBC\x8F\xE3\x80\x82", "Assets\\Textures\\btn-upgrade-raynor-improvedsiegemode.dds", SoundLink("SiegeTank_What", 3));
    lib1_gf_DefineCardUnit(lv_id, "SiegeTank", 1);
    lib1_gf_DefineCardUnit(lv_id, "WidowMine", 2);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_CREATE_UNIT, lib1_gt_EffectEntrench);
    lib1_gf_AddRushtoCardDefinition(lv_id);
    lib1_gf_AddDetectiontoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_tERRAN, "Fusion Core", "\xE8\x81\x9A\xE5\x8F\x98\xE8\x8A\xAF\xE4\xBD\x93", lib1_gv_sTRUCTURE, "", lib1_gv_rARE, 3, 1, lib1_gt_EffectFusionCore, "\xE5\xBB\xBA\xE9\x80\xA0\xE4\xB8\x80\xE4\xB8\xAA\xE8\x81\x9A\xE5\x8F\x98\xE8\x8A\xAF\xE4\xBD\x93\xE3\x80\x82\xE7\x9B\xB4\xE5\x88\xB0\xE8\xA2\xAB\xE6\x91\xA7\xE6\xAF\x81\xEF\xBC\x8C\xE5\xAE\x83\xE5\xA2\x9E\xE5\x8A\xA0\xE4\xBD\xA0\xE5\x8D\x95\xE4\xBD\x8D\xE7\x9A\x84\xE8\x83\xBD\xE9\x87\x8F\xE5\x9B\x9E\xE5\xA4\x8D\xE9\x80\x9F\xE7\x8E\x87\xEF\xBC\x8C\xE5\xB9\xB6\xE8\xAE\xA9\xE5\x8D\x95\xE4\xBD\x8D\xE7\x9A\x84\xE6\x8A\x80\xE8\x83\xBD\xE5\x86\xB7\xE5\x8D\xB4\xE5\x87\x8F\xE5\x8D\x8A\xE3\x80\x82", "Assets\\Textures\\btn-building-terran-fusioncore.dds", SoundLink("FusionCore_What", 0));
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_tERRAN, "Armory", "\xE5\x86\x9B\xE6\xA2\xB0\xE5\xBA\x93", lib1_gv_sTRUCTURE, "", lib1_gv_rARE, 2, 2, lib1_gt_EffectArmory, "\xE5\xBB\xBA\xE9\x80\xA0\xE4\xB8\x80\xE4\xB8\xAA\xE5\x86\x9B\xE6\xA2\xB0\xE5\xBA\x93\xE3\x80\x82\xE7\x9B\xB4\xE5\x88\xB0\xE8\xA2\xAB\xE6\x91\xA7\xE6\xAF\x81\xEF\xBC\x8C\xE4\xBB\x96\xE4\xB8\xBA\xE4\xBD\xA0\xE7\x9A\x84\xE6\x9C\xBA\xE6\xA2\xB0\xE5\x8D\x95\xE4\xBD\x8D +15% \xE4\xBC\xA4\xE5\xAE\xB3\xE5\x92\x8C +1 \xE6\x8A\xA4\xE7\x94\xB2", "Assets\\Textures\\btn-building-terran-armory.dds", SoundLink("Armory_What", 0));
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_tERRAN, "Reconstruction", "\xE9\x87\x8D\xE5\xBB\xBA", lib1_gv_aCTION, "", lib1_gv_rARE, 2, 2, null, "\xE4\xBB\x8E\xE5\xBC\x83\xE7\x89\x8C\xE5\xA0\x86\xE8\xBF\x94\xE5\x9B\x9E\xE4\xB8\xA4\xE5\xBC\xA0\xE5\xBB\xBA\xE7\xAD\x91\xE7\x89\x8C\xE5\x88\xB0\xE4\xBD\xA0\xE7\x9A\x84\xE6\x89\x8B\xE7\x89\x8C\xE3\x80\x82", "Assets\\Textures\\btn-upgrade-swann-regenerativebiosteel.dds", SoundLink("SCV_Yes", 3));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DRAW, lib1_gt_EffectReconstruction);
    lib1_gf_AddCardtoStartingCollection(lv_id, 1);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_tERRAN, "Tactical Nuke", "\xE6\x88\x98\xE6\x9C\xAF\xE8\x81\x9A\xE5\x8F\x98\xE6\x89\x93\xE5\x87\xBB", lib1_gv_aCTION, "", lib1_gv_rARE, 5, 3, lib1_gt_EffectTacticalNuke, "\xE5\x90\x91\xE6\x95\x8C\xE6\x96\xB9\xE9\x98\xB2\xE5\xBE\xA1\xE5\x8C\xBA\xE5\x8F\x91\xE5\xB0\x84\xE4\xB8\x80\xE6\x9E\x9A\xE6\xA0\xB8\xE5\xBC\xB9\xEF\xBC\x8C\xE5\x9C\xA8\xE4\xB8\x8B\xE4\xB8\x80\xE4\xB8\xAA\xE6\x88\x98\xE6\x96\x97\xE9\x98\xB6\xE6\xAE\xB5\xE7\x9D\x80\xE5\xBC\xB9\xE3\x80\x82", "Assets\\Textures\\btn-ability-terran-nuclearstrike-color.dds", SoundLink("Alert_TerranNukeReady", 0));
    lib1_gf_AddCardtoStartingCollection(lv_id, 1);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_tERRAN, "Tech Lab", "\xE7\xA7\x91\xE6\x8A\x80\xE5\xAE\x9E\xE9\xAA\x8C\xE5\xAE\xA4", lib1_gv_aCTION, "", lib1_gv_rARE, 4, 2, null, "\xE4\xB8\xBA\xE4\xBD\xA0\xE4\xB8\x80\xE4\xB8\xAA\xE5\xB0\x9A\xE6\x9C\xAA\xE6\xB7\xBB\xE5\x8A\xA0\xE6\x8C\x82\xE4\xBB\xB6\xE7\x9A\x84\xE5\x85\xB5\xE8\x90\xA5\xEF\xBC\x8C\xE9\x87\x8D\xE5\xB7\xA5\xE5\x8E\x82\xE6\x88\x96\xE6\x98\x9F\xE6\xB8\xAF\xE6\xB7\xBB\xE5\x8A\xA0\xE7\xA7\x91\xE6\x8A\x80\xE6\x8C\x82\xE4\xBB\xB6\xEF\xBC\x8C\xE8\xAE\xA9\xE4\xBB\x96\xE4\xBB\xAC\xE7\x9A\x84\xE7\x94\x9F\xE4\xBA\xA7\xE5\x8A\xAB\xE6\x8E\xA0\xE8\x80\x85\xEF\xBC\x8C\xE6\x94\xBB\xE5\x9F\x8E\xE5\x9D\xA6\xE5\x85\x8B\xE6\x88\x96\xE5\xA5\xB3\xE5\xA6\x96\xE3\x80\x82", "Assets\\Textures\\btn-building-terran-techlab.dds", SoundLink("TechLab_What", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_CREATE_UNIT, lib1_gt_EffectTechLab);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_tERRAN, "Hyperion", "\xE4\xBC\x91\xE4\xBC\xAF\xE5\x88\xA9\xE5\xAE\x89", lib1_gv_tACTICAL, "", lib1_gv_uNIQUE, 8, 3, null, "\xE6\x88\x98\xE5\x90\xBC\xEF\xBC\x9A\xE5\xAE\x83\xE4\xBC\x9A\xE5\xAF\xB9\xE6\x9C\x80\xE8\x82\x89\xE7\x9A\x84\xE6\x95\x8C\xE6\x96\xB9\xE5\x8D\x95\xE4\xBD\x8D\xE9\x80\xA0\xE6\x88\x90 1500 \xE7\x82\xB9\xE4\xBC\xA4\xE5\xAE\xB3\xE3\x80\x82", "Assets\\Textures\\talent-raynor-level06-unlockbattlecruiser.dds", SoundLink("HyperionHorner", -1));
    lib1_gf_DefineCardUnit(lv_id, "Hyperion", 1);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_REMOVE_UNIT_1500_DAMAGE, lib1_gt_EffectHyperion);
    lib1_gf_AddHeroictoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_tERRAN, "Odin", "\xE5\xA5\xA5\xE4\xB8\x81", lib1_gv_aGGRESSIVE, "", lib1_gv_uNIQUE, 6, 3, null, "\xE4\xBA\xA1\xE8\xAF\xAD\xEF\xBC\x9A\xE5\xB0\x86 2 \xE4\xB8\xAA\xE9\x9B\xB7\xE7\xA5\x9E\xE7\x89\x8C\xE6\xB7\xBB\xE5\x8A\xA0\xE5\x88\xB0\xE4\xBD\xA0\xE7\x9A\x84\xE6\x89\x8B\xE7\x89\x8C\xE4\xB8\xAD\xE3\x80\x82", "Assets\\Textures\\btn-unit-terran-odin.dds", SoundLink("OdinTychus", -1));
    lib1_gf_DefineCardUnit(lv_id, "ThorOdin", 1);
    lib1_gf_AddHeroictoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_tERRAN, "Jim Raynor", "\xE5\x90\x89\xE5\xA7\x86\xE9\x9B\xB7\xE8\xAF\xBA", lib1_gv_tACTICAL, "", lib1_gv_uNIQUE, 6, 0, lib1_gt_EffectJimRaynor, "\xE6\xAF\x8F\xE5\x9B\x9E\xE5\x90\x88\xE8\xBF\x99\xE4\xB8\xAA\xE6\x8C\x87\xE6\x8C\xA5\xE5\xAE\x98\xE4\xBC\x9A\xE4\xBD\xBF\xE4\xBD\xA0\xE6\x89\x8B\xE7\x89\x8C\xE4\xB8\xAD\xE7\x9A\x84\xE4\xB8\x80\xE5\xBC\xA0\xE9\x9A\x8F\xE6\x9C\xBA\xE5\x8D\x95\xE4\xBD\x8D\xE5\x8D\xA1\xE7\x9A\x84\xE7\x9F\xBF\xE7\x89\xA9\xE8\xB4\xB9\xE7\x94\xA8\xE5\x87\x8F\xE5\xB0\x91\xE5\x88\xB0 0 \xE3\x80\x82", "Assets\\Textures\\ui_heroicons_portrait_raynor.dds", SoundLink("Raynor", -1));
    lib1_gf_DefineCardUnit(lv_id, "EliteMarine", 4);
    lib1_gf_DefineCardUnit(lv_id, "Raynor", 1);
    lib1_gf_AddHeroictoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_tERRAN, "Nova", "\xE8\xAF\xBA\xE5\xA8\x83", lib1_gv_tACTICAL, "", lib1_gv_uNIQUE, 2, 2, null, "\xE6\x88\x98\xE5\x90\xBC\xEF\xBC\x9A\xE6\x8A\x8A\xE4\xB8\x89\xE5\xBC\xA0\xE8\xAF\xBA\xE5\xA8\x83\xE8\xA1\x8C\xE5\x8A\xA8\xE7\x89\x8C\xE7\xBD\xAE\xE5\x85\xA5\xE4\xBD\xA0\xE7\x9A\x84\xE6\x89\x8B\xE7\x89\x8C\xE3\x80\x82", "Assets\\Textures\\ui_heroicons_portrait_nova.dds", SoundLink("HeroNovaMP1_Pissed", 9));
    lib1_gf_DefineCardUnit(lv_id, "NovaCoop", 1);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DRAW, lib1_gt_EffectNova);
    lib1_gf_AddHeroictoCardDefinition(lv_id);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_CoreTerran_Init () {
    lib1_gt_CoreTerran = TriggerCreate("lib1_gt_CoreTerran_Func");
    TriggerAddEventMapInit(lib1_gt_CoreTerran);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Core Zerg
//--------------------------------------------------------------------------------------------------
bool lib1_gt_CoreZerg_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_id;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_id = 49;
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_zERG, "Zergling Pack", "\xE8\xB7\xB3\xE8\x99\xAB\xE7\xBE\xA4", lib1_gv_aGGRESSIVE, "", lib1_gv_cOMMON, 2, 0, null, "", "Assets\\Textures\\btn-unit-zerg-zergling.dds", SoundLink("Zergling_Attack", 0));
    lib1_gf_DefineCardUnit(lv_id, "Zergling", 12);
    lib1_gf_AddCardtoStartingCollection(lv_id, 2);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_zERG, "Baneling Pack", "\xE6\xAF\x92\xE7\x88\x86\xE7\xBE\xA4", lib1_gv_aGGRESSIVE, "", lib1_gv_cOMMON, 2, 1, null, "", "Assets\\Textures\\btn-unit-zerg-baneling.dds", SoundLink("Baneling_What", 0));
    lib1_gf_DefineCardUnit(lv_id, "Baneling", 16);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_zERG, "Roach Cluster", "\xE8\x9F\x91\xE8\x9E\x82\xE5\x9B\xA2", lib1_gv_tACTICAL, "", lib1_gv_cOMMON, 2, 1, null, "\xE5\xAE\x83\xE4\xBB\xAC\xE5\x90\x8E\xE6\x92\xA4\xE6\x97\xB6\xE6\xBD\x9C\xE5\x9C\xB0", "Assets\\Textures\\btn-unit-zerg-roach.dds", SoundLink("Roach_What", 0));
    lib1_gf_DefineCardUnit(lv_id, "Roach", 4);
    lib1_gf_AddCardtoStartingCollection(lv_id, 2);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_zERG, "Hydralisk Cluster", "\xE5\x88\xBA\xE8\x9B\x87\xE5\x9B\xA2", lib1_gv_aGGRESSIVE, "", lib1_gv_cOMMON, 3, 1, null, "", "Assets\\Textures\\btn-unit-zerg-hydralisk.dds", SoundLink("Hydralisk_Ready", 0));
    lib1_gf_DefineCardUnit(lv_id, "Hydralisk", 4);
    lib1_gf_AddCardtoStartingCollection(lv_id, 2);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_zERG, "Mutalisk Flock", "\xE9\xA3\x9E\xE9\xBE\x99\xE7\xBE\xA4", lib1_gv_tACTICAL, "", lib1_gv_cOMMON, 4, 2, null, "", "Assets\\Textures\\btn-unit-zerg-mutalisk.dds", SoundLink("Mutalisk_Ready", 0));
    lib1_gf_DefineCardUnit(lv_id, "Mutalisk", 8);
    lib1_gf_AddRushtoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_zERG, "Savage Ultralisks", "\xE5\x87\xB6\xE7\x8C\x9B\xE9\x9B\xB7\xE5\x85\xBD", lib1_gv_aGGRESSIVE, "", lib1_gv_cOMMON, 6, 2, null, "", "Assets\\Textures\\btn-unit-zerg-ultralisk.dds", SoundLink("Ultralisk_Attack", 0));
    lib1_gf_DefineCardUnit(lv_id, "Ultralisk", 2);
    lib1_gf_AddCardtoStartingCollection(lv_id, 2);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_zERG, "Overseer", "\xE7\x9C\xBC\xE8\x99\xAB", lib1_gv_tACTICAL, "", lib1_gv_cOMMON, 1, 1, null, "\xE7\x9B\xB4\xE5\x88\xB0\xE8\xA2\xAB\xE5\x87\xBB\xE6\x9D\x80\xEF\xBC\x8C\xE6\x8F\x90\xE9\xAB\x98 1 \xE7\x82\xB9\xE4\xBD\xA0\xE7\x9A\x84\xE6\x89\x8B\xE7\x89\x8C\xE5\xAE\xB9\xE9\x87\x8F\xEF\xBC\x8C\xE4\xB8\x8A\xE9\x99\x90\xE4\xB8\xBA 12 \xE3\x80\x82\xE6\x88\x98\xE5\x90\xBC\xEF\xBC\x9A\xE6\x8A\xBD\xE4\xB8\x80\xE5\xBC\xA0\xE7\x89\x8C\xE3\x80\x82", "Assets\\Textures\\btn-unit-zerg-overseer.dds", SoundLink("Overseer_Yes", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_INCREASE_HAND_SIZE, lib1_gt_CommonEffectAddHandSizeBufftoAllCreatedUnits);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DRAW, lib1_gt_CommonEffectDraw1);
    lib1_gf_DefineCardUnit(lv_id, "Overseer", 1);
    lib1_gf_AddDetectiontoCardDefinition(lv_id);
    lib1_gf_AddCardtoStartingCollection(lv_id, 2);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_zERG, "Zergling Swarm", "\xE8\xB7\xB3\xE8\x99\xAB\xE6\xB5\xB7", lib1_gv_aGGRESSIVE, "", lib1_gv_cOMMON, 6, 0, null, "", "Assets\\Textures\\ui_tipicon_evolution_hydralisk-waves.dds", SoundLink("Zergling_Attack", 1));
    lib1_gf_DefineCardUnit(lv_id, "Zergling", 36);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_zERG, "Burrowed Ambush", "\xE5\x9F\x8B\xE5\x9C\xB0\xE4\xBC\x8F\xE5\x87\xBB", lib1_gv_dEFENSIVE, "", lib1_gv_cOMMON, 3, 1, null, "\xE5\xAE\x83\xE4\xBB\xAC\xE4\xBC\x9A\xE4\xBB\xA5\xE6\xBD\x9C\xE5\x9C\xB0\xE6\xA8\xA1\xE5\xBC\x8F\xE5\x87\xBA\xE7\x94\x9F\xE5\x9C\xA8\xE4\xBD\xA0\xE7\x9A\x84\xE9\x98\xB2\xE5\xAE\x88\xE5\x8C\xBA\xEF\xBC\x8C\xE9\x9A\x8F\xE5\x90\x8E\xE7\xAB\x8B\xE5\x88\xBB\xE5\x87\xBA\xE5\x9C\xB0\xE3\x80\x82", "Assets\\Textures\\btn-ability-zerg-upburrow-color.dds", SoundLink("Zerg_UnburrowSmall", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DEFAULT, lib1_gt_EffectBurrowedAmbush);
    lib1_gf_DefineCardUnit(lv_id, "Zergling", 4);
    lib1_gf_DefineCardUnit(lv_id, "Roach", 2);
    lib1_gf_DefineCardUnit(lv_id, "Hydralisk", 1);
    lib1_gf_AddCardtoStartingCollection(lv_id, 2);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_zERG, "Invading Host", "\xE5\x85\xA5\xE4\xBE\xB5\xE5\xAE\xBF\xE4\xB8\xBB", lib1_gv_aGGRESSIVE, "", lib1_gv_cOMMON, 7, 1, null, "", "Assets\\Textures\\btn-upgrade-zerg-swarmfrenzy.dds", SoundLink("Hydralisk_Attack", 0));
    lib1_gf_DefineCardUnit(lv_id, "Zergling", 10);
    lib1_gf_DefineCardUnit(lv_id, "Roach", 4);
    lib1_gf_DefineCardUnit(lv_id, "Hydralisk", 4);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_zERG, "Rolling Banelings", "\xE6\xAF\x92\xE7\x88\x86\xE6\xBB\x9A\xE6\xBB\x9A", lib1_gv_aGGRESSIVE, "", lib1_gv_cOMMON, 4, 2, null, "\xE5\xAE\x83\xE4\xBB\xAC\xE5\x8D\x87\xE7\xBA\xA7\xE4\xBA\x86\xE7\xA7\xBB\xE9\x80\x9F\xE3\x80\x82", "Assets\\Textures\\btn-upgrade-zerg-centrifugalhooks.dds", SoundLink("Baneling_Attack", 0));
    lib1_gf_DefineCardUnit(lv_id, "BanelingFast", 24);
    lib1_gf_AddRushtoCardDefinition(lv_id);
    lib1_gf_AddCardtoStartingCollection(lv_id, 2);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_zERG, "Infested Marines", "\xE8\xA2\xAB\xE6\x84\x9F\xE6\x9F\x93\xE7\x9A\x84\xE9\x99\x86\xE6\x88\x98\xE9\x98\x9F", lib1_gv_aGGRESSIVE, "", lib1_gv_cOMMON, 1, 1, null, "", "Assets\\Textures\\btn-unit-zerg-infestedmarine.dds", SoundLink("InfestedTerran_What", 0));
    lib1_gf_DefineCardUnit(lv_id, "InfestorTerran", 6);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_zERG, "Spawning Pool", "\xE5\xAD\xB5\xE5\x8C\x96\xE6\xB1\xA0", lib1_gv_sTRUCTURE, "", lib1_gv_cOMMON, 2, 0, lib1_gt_EffectSpawningPool, "\xE5\xBB\xBA\xE9\x80\xA0\xE4\xB8\x80\xE4\xB8\xAA\xE5\x88\x86\xE8\xA3\x82\xE6\xB1\xA0\xE3\x80\x82\xE6\xAF\x8F\xE5\x9B\x9E\xE5\x90\x88\xE6\xB7\xBB\xE5\x8A\xA0\xE4\xB8\x80\xE5\xBC\xA0\xE8\xB7\xB3\xE8\x99\xAB\xE8\x99\xAB\xE5\x8D\xB5\xE7\x89\x8C\xE5\x88\xB0\xE4\xBD\xA0\xE7\x9A\x84\xE6\x89\x8B\xE7\x89\x8C\xE4\xB8\xAD\xE3\x80\x82", "Assets\\Textures\\btn-building-zerg-spawningpool.dds", SoundLink("SpawningPool_What", 0));
    lib1_gf_AddCardtoStartingCollection(lv_id, 2);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_zERG, "Roach Warren", "\xE8\x9F\x91\xE8\x9E\x82\xE6\xB8\xA9\xE5\xAE\xA4", lib1_gv_sTRUCTURE, "", lib1_gv_cOMMON, 3, 0, lib1_gt_EffectRoachWarren, "\xE5\xBB\xBA\xE9\x80\xA0\xE4\xB8\x80\xE4\xB8\xAA\xE8\x9F\x91\xE8\x9E\x82\xE6\xB8\xA9\xE5\xAE\xA4\xE3\x80\x82\xE6\xAF\x8F\xE5\x9B\x9E\xE5\x90\x88\xE6\xB7\xBB\xE5\x8A\xA0\xE4\xB8\x80\xE5\xBC\xA0\xE8\x9F\x91\xE8\x9E\x82\xE8\x99\xAB\xE5\x8D\xB5\xE7\x89\x8C\xE5\x88\xB0\xE4\xBD\xA0\xE7\x9A\x84\xE6\x89\x8B\xE7\x89\x8C\xE4\xB8\xAD\xE3\x80\x82", "Assets\\Textures\\btn-building-zerg-roachwarren.dds", SoundLink("RoachWarren_What", 0));
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_zERG, "Hydralisk Den", "\xE5\x88\xBA\xE8\x9B\x87\xE5\xB7\xA2\xE7\xA9\xB4", lib1_gv_sTRUCTURE, "", lib1_gv_cOMMON, 2, 1, lib1_gt_EffectHydraliskDen, "\xE5\xBB\xBA\xE9\x80\xA0\xE4\xB8\x80\xE4\xB8\xAA\xE5\x88\xBA\xE8\x9B\x87\xE5\xB7\xA2\xE3\x80\x82\xE6\xAF\x8F\xE5\x9B\x9E\xE5\x90\x88\xE6\xB7\xBB\xE5\x8A\xA0\xE4\xB8\x80\xE5\xBC\xA0\xE5\x88\xBA\xE8\x9B\x87\xE8\x99\xAB\xE5\x8D\xB5\xE7\x89\x8C\xE5\x88\xB0\xE4\xBD\xA0\xE7\x9A\x84\xE6\x89\x8B\xE7\x89\x8C\xE4\xB8\xAD\xE3\x80\x82", "Assets\\Textures\\btn-building-zerg-hydraliskden.dds", SoundLink("HydraliskDen_What", 0));
    lib1_gf_AddCardtoStartingCollection(lv_id, 2);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_zERG, "Spine Crawlers", "\xE8\x84\x8A\xE9\x92\x88\xE7\x88\xAC\xE8\x99\xAB", lib1_gv_sTRUCTURE, "", lib1_gv_cOMMON, 2, 0, lib1_gt_EffectSpineCrawlers, "\xE5\xBB\xBA\xE9\x80\xA0\xE4\xB8\xA4\xE4\xB8\xAA\xE8\x84\x8A\xE9\x92\x88\xE7\x88\xAC\xE8\x99\xAB\xE3\x80\x82", "Assets\\Textures\\btn-building-zerg-spinecrawler.dds", SoundLink("SpineCrawler_What", 0));
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_zERG, "Spore Crawlers", "\xE5\xAD\xA2\xE5\xAD\x90\xE7\x88\xAC\xE8\x99\xAB", lib1_gv_sTRUCTURE, "", lib1_gv_cOMMON, 2, 0, lib1_gt_EffectSporeCrawlers, "\xE5\xBB\xBA\xE9\x80\xA0\xE4\xB8\xA4\xE4\xB8\xAA\xE5\xAD\xA2\xE5\xAD\x90\xE7\x88\xAC\xE8\x99\xAB\xE3\x80\x82", "Assets\\Textures\\btn-building-zerg-sporecrawler.dds", SoundLink("SporeCrawler_What", 0));
    lib1_gf_AddDetectiontoCardDefinition(lv_id);
    lib1_gf_AddCardtoStartingCollection(lv_id, 2);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_zERG, "Metabolic Boost", "\xE5\x97\x9C\xE8\xA1\x80", lib1_gv_aCTION, lib1_gv_eVOLUTION, lib1_gv_cOMMON, 1, 1, null, "\xE4\xBD\xA0\xE5\x9C\xB0\xE9\x9D\xA2\xE7\x9A\x84\xE7\x94\x9F\xE7\x89\xA9\xE5\x8D\x95\xE4\xBD\x8D\xE8\x8E\xB7\xE5\xBE\x97 +50% \xE7\x9A\x84\xE6\x94\xBB\xE9\x80\x9F\xE5\x92\x8C\xE7\xA7\xBB\xE9\x80\x9F (\xE4\xB8\x8D\xE5\x8F\xA0\xE5\x8A\xA0)\xE3\x80\x82", "Assets\\Textures\\btn-upgrade-zerg-metabolicboost.dds", SoundLink("Zergling_AttackLaunch", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_BUFF_UNITS, lib1_gt_EffectMetabolicBoost);
    lib1_gf_AddCardtoStartingCollection(lv_id, 2);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_zERG, "Grooved Spines", "\xE6\xB2\x9F\xE6\xA7\xBD\xE6\xA3\x98", lib1_gv_aCTION, lib1_gv_eVOLUTION, lib1_gv_cOMMON, 1, 1, null, "\xE4\xBD\xA0\xE5\x9C\xB0\xE9\x9D\xA2\xE8\xBF\x9C\xE7\xA8\x8B\xE5\x8D\x95\xE4\xBD\x8D\xE8\x8E\xB7\xE5\xBE\x97 +3 \xE6\x94\xBB\xE5\x87\xBB\xE5\x92\x8C +3 \xE5\xB0\x84\xE7\xA8\x8B (\xE4\xB8\x8D\xE5\x8F\xA0\xE5\x8A\xA0)\xE3\x80\x82", "Assets\\Textures\\btn-upgrade-zerg-groovedspines.dds", SoundLink("Hydralisk_GroundAttackLaunch", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_BUFF_UNITS, lib1_gt_EffectGroovedSpines);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_zERG, "Binding Creep", "\xE6\xAD\xA2\xE8\xA1\x80\xE8\x8F\x8C\xE6\xBB\xA9", lib1_gv_aCTION, lib1_gv_eVOLUTION, lib1_gv_cOMMON, 1, 1, null, "\xE4\xBD\xA0\xE7\x94\x9F\xE7\x89\xA9\xE5\xBB\xBA\xE7\xAD\x91\xE5\xAE\x8C\xE5\x85\xA8\xE5\xAE\x8C\xE5\x85\xA8\xE6\x81\xA2\xE5\xA4\x8D\xE8\xA1\x80\xE9\x87\x8F,\xE5\xB9\xB6\xE8\x8E\xB7\xE5\xBE\x97\xE7\x94\x9F\xE4\xBA\xA7\xE8\x8F\x8C\xE6\xBB\xA9\xE7\x9A\x84\xE8\x83\xBD\xE5\x8A\x9B\xE3\x80\x82", "Assets\\Textures\\btn-upgrade-zerg-stukov-creepspread.dds", SoundLink("CreepTumor_MissleSlither", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_BUFF_UNITS, lib1_gt_EffectBindingCreep);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_zERG, "Unstable Broodlings", "\xE4\xB8\x8D\xE7\xA8\xB3\xE5\xAE\x9A\xE7\x9A\x84\xE5\xB7\xA2\xE8\x99\xAB", lib1_gv_aGGRESSIVE, "", lib1_gv_uNCOMMON, 2, 0, null, "\xE5\xAE\x83\xE4\xBB\xAC\xE5\xB0\x86\xE5\x9C\xA8\xE4\xB8\xA4\xE5\x9B\x9E\xE5\x90\x88\xE5\x90\x8E\xE6\xAD\xBB\xE4\xBA\xA1\xE3\x80\x82", "Assets\\Textures\\talent-zagara-level08-incubatebroodlings.dds", SoundLink("Broodling_Yes", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_BUFF_UNITS, lib1_gt_CommonEffectUnstableZergUnit);
    lib1_gf_DefineCardUnit(lv_id, "Broodling", 12);
    lib1_gf_AddRushtoCardDefinition(lv_id);
    lib1_gf_AddCardtoStartingCollection(lv_id, 1);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_zERG, "Brood Lords", "\xE6\xAF\x8D\xE5\xB7\xA2\xE9\xA2\x86\xE4\xB8\xBB", lib1_gv_aGGRESSIVE, "", lib1_gv_uNCOMMON, 7, 2, null, "", "Assets\\Textures\\btn-unit-zerg-broodlord.dds", SoundLink("BroodLord_Yes", 0));
    lib1_gf_DefineCardUnit(lv_id, "BroodLord", 2);
    lib1_gf_AddCardtoStartingCollection(lv_id, 2);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_zERG, "Caustic Corruptors", "\xE8\x85\x90\xE5\x8C\x96\xE8\x80\x85", lib1_gv_aGGRESSIVE, "", lib1_gv_uNCOMMON, 4, 2, lib1_gt_CommonEffectRemove1GasIncome, "\xE6\x88\x98\xE5\x90\xBC\xEF\xBC\x9A\xE5\x87\x8F\xE5\xB0\x91\xE4\xBD\xA0\xE7\x9A\x84\xE7\x93\xA6\xE6\x96\xAF\xE4\xBA\xA7\xE8\x83\xBD 1 \xE7\x82\xB9\xE3\x80\x82", "Assets\\Textures\\btn-unit-zerg-corruptor.dds", SoundLink("Corruptor_What", 0));
    lib1_gf_DefineCardUnit(lv_id, "Corruptor", 6);
    lib1_gf_AddCardtoStartingCollection(lv_id, 2);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_zERG, "Swarm Hosts", "\xE8\x99\xAB\xE7\xBE\xA4\xE5\xAE\xBF\xE4\xB8\xBB", lib1_gv_dEFENSIVE, "", lib1_gv_uNCOMMON, 2, 1, null, "\xE5\xAE\x83\xE4\xBB\xAC\xE5\x9C\xA8\xE4\xBD\xA0\xE7\x9A\x84\xE9\x98\xB2\xE5\xBE\xA1\xE5\x8C\xBA\xE6\xBD\x9C\xE5\x9C\xB0\xEF\xBC\x8C\xE5\xB9\xB6\xE6\xAF\x8F\xE5\x9B\x9E\xE5\x90\x88\xE7\x94\x9F\xE4\xBA\xA7\xE4\xB8\xA4\xE4\xB8\xAA\xE8\x9D\x97\xE8\x99\xAB\xE3\x80\x82", "Assets\\Textures\\btn-unit-zerg-swarmhost.dds", SoundLink("SwarmHost_What", 0));
    lib1_gf_DefineCardUnit(lv_id, "SwarmHostMP", 2);
    lib1_gf_AddRushtoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_zERG, "Sieging Ravagers", "\xE6\x94\xBB\xE5\x9F\x8E\xE7\x81\xAB\xE8\x9F\x91\xE8\x9E\x82", lib1_gv_tACTICAL, "", lib1_gv_uNCOMMON, 5, 3, null, "\xE6\xAF\x8F\xE5\x9B\x9E\xE5\x90\x88\xE4\xBB\x96\xE4\xBB\xAC\xE4\xBC\x9A\xE6\x97\xA0\xE8\xA7\x86\xE8\xB7\x9D\xE7\xA6\xBB\xE9\x99\x90\xE5\x88\xB6\xE5\xAF\xB9\xE6\x9C\x80\xE8\xBF\x91\xE7\x9A\x84\xE6\x95\x8C\xE6\x96\xB9\xE5\xBB\xBA\xE7\xAD\x91\xE4\xBD\xBF\xE7\x94\xA8\xE7\x94\xA8\xE8\x85\x90\xE8\x9A\x80\xE8\x83\x86\xE6\xB1\x81\xE3\x80\x82", "Assets\\Textures\\btn-unit-zerg-ravager.dds", SoundLink("Ravager_Attack", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_CREATE_UNIT, lib1_gt_EffectSiegingRavagers);
    lib1_gf_DefineCardUnit(lv_id, "Ravager", 5);
    lib1_gf_AddCardtoStartingCollection(lv_id, 2);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_zERG, "Frenzied Zerglings", "\xE7\x8B\x82\xE6\x9A\xB4\xE8\xB7\xB3\xE8\x99\xAB", lib1_gv_aGGRESSIVE, "", lib1_gv_uNCOMMON, 4, 0, null, "\xE5\xAE\x83\xE4\xBB\xAC\xE5\x8D\x87\xE7\xBA\xA7\xE4\xBA\x86\xE7\xA7\xBB\xE9\x80\x9F\xE3\x80\x82\xE6\x88\x98\xE5\x90\xBC\xEF\xBC\x9A\xE6\x8A\xBD\xE4\xB8\x80\xE5\xBC\xA0\xE7\x89\x8C\xE3\x80\x82", "Assets\\Textures\\btn-unit-collection-primal-zerglingupgrade.dds", SoundLink("Zergling_Attack", 4));
    lib1_gf_DefineCardUnit(lv_id, "ZerglingFast", 12);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DRAW, lib1_gt_CommonEffectDraw1);
    lib1_gf_AddRushtoCardDefinition(lv_id);
    lib1_gf_AddCardtoStartingCollection(lv_id, 2);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_zERG, "Overlord", "\xE5\xAE\xBF\xE4\xB8\xBB", lib1_gv_dEFENSIVE, "", lib1_gv_uNCOMMON, 2, 0, null, "\xE7\x9B\xB4\xE5\x88\xB0\xE8\xA2\xAB\xE5\x87\xBB\xE6\x9D\x80\xEF\xBC\x8C\xE5\xAE\x83\xE4\xBC\x9A\xE6\x8E\x92\xE6\x94\xBE\xE8\x8F\x8C\xE6\xAF\xAF\xE5\xB9\xB6\xE6\x8F\x90\xE9\xAB\x98 1 \xE7\x82\xB9\xE4\xBD\xA0\xE7\x9A\x84\xE6\x89\x8B\xE7\x89\x8C\xE5\xAE\xB9\xE9\x87\x8F\xEF\xBC\x8C\xE4\xB8\x8A\xE9\x99\x90\xE4\xB8\xBA 12 \xE3\x80\x82\xE6\x88\x98\xE5\x90\xBC\xEF\xBC\x9A\xE6\x8A\xBD\xE4\xB8\x80\xE5\xBC\xA0\xE7\x89\x8C\xE3\x80\x82", "Assets\\Textures\\btn-unit-zerg-overlord.dds", SoundLink("Overlord_Ready", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_INCREASE_HAND_SIZE, lib1_gt_CommonEffectAddHandSizeBufftoAllCreatedUnits);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DRAW, lib1_gt_CommonEffectDraw1);
    lib1_gf_DefineCardUnit(lv_id, "Overlord", 1);
    lib1_gf_AddCardtoStartingCollection(lv_id, 2);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_zERG, "Larval Queens", "\xE8\x99\xAB\xE5\x90\x8E", lib1_gv_dEFENSIVE, "", lib1_gv_uNCOMMON, 2, 0, null, "\xE6\x88\x98\xE5\x90\xBC\xEF\xBC\x9A\xE5\xB0\x86\xE4\xBD\xA0\xE6\x89\x8B\xE7\x89\x8C\xE4\xB8\xAD\xE5\x85\xA8\xE9\x83\xA8\xE5\x85\x8D\xE8\xB4\xB9\xE7\x9A\x84\xE8\x99\xAB\xE5\x8D\xB5\xE7\x89\x8C\xE5\x90\x88\xE6\x88\x90\xE4\xB8\xBA\xE4\xB8\x80\xE5\xBC\xA0\xE8\x99\xAB\xE5\x8D\xB5\xE7\x89\x8C\xEF\xBC\x8C\xE5\xB9\xB6\xE4\xBD\xBF\xE5\x85\xB6\xE5\x8F\xAC\xE5\x94\xA4\xE6\x95\xB0\xE9\x87\x8F\xE7\xBF\xBB\xE5\x80\x8D\xE3\x80\x82", "Assets\\Textures\\btn-unit-zerg-queen.dds", SoundLink("QueenYes", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DISCARD_FROM_HAND, lib1_gt_EffectLarvalQueen);
    lib1_gf_DefineCardUnit(lv_id, "Queen", 2);
    lib1_gf_AddCardtoStartingCollection(lv_id, 2);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_zERG, "Infestors", "\xE6\x84\x9F\xE6\x9F\x93\xE8\x80\x85", lib1_gv_tACTICAL, "", lib1_gv_uNCOMMON, 2, 2, null, "\xE5\xAE\x83\xE4\xBB\xAC\xE5\x9C\xA8\xE5\x90\x8E\xE6\x92\xA4\xE6\x97\xB6\xE6\xBD\x9C\xE5\x9C\xB0\xEF\xBC\x8C\xE9\x9A\x8F\xE5\x90\x8E\xE4\xBF\x9D\xE6\x8C\x81\xE6\xBD\x9C\xE5\x9C\xB0\xE3\x80\x82", "Assets\\Textures\\btn-unit-zerg-infestor.dds", SoundLink("Infestor_What", 0));
    lib1_gf_DefineCardUnit(lv_id, "Infestor", 3);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_zERG, "Changeling", "\xE6\x8B\x9F\xE6\x80\x81\xE8\x99\xAB", lib1_gv_aGGRESSIVE, "", lib1_gv_uNCOMMON, 1, 1, null, "\xE5\xAE\x83\xE8\x83\xBD\xE5\xA4\x9F\xE4\xBE\xA6\xE6\xB5\x8B\xE5\xB9\xB6\xE8\xB7\x9F\xE9\x9A\x8F\xE6\x95\x8C\xE6\x96\xB9\xE9\x9A\x90\xE5\xBD\xA2\xE5\x8D\x95\xE4\xBD\x8D\xE3\x80\x82\xE5\xAE\x83\xE4\xB8\x8D\xE4\xBC\x9A\xE8\xA2\xAB\xE6\x95\x8C\xE6\x96\xB9\xE5\x8D\x95\xE4\xBD\x8D\xE8\xAF\x86\xE5\x88\xAB,\xE6\x89\x80\xE4\xBB\xA5\xE4\xB8\x8D\xE4\xBC\x9A\xE8\xA2\xAB\xE4\xB8\xBB\xE6\x94\xBB\xE6\x94\xBB\xE5\x87\xBB\xE3\x80\x82\xE6\x88\x98\xE5\x90\xBC\xEF\xBC\x9A\xE6\x8A\xBD\xE4\xB8\x80\xE5\xBC\xA0\xE7\x89\x8C\xE3\x80\x82", "Assets\\Textures\\btn-unit-zerg-changeling.dds", SoundLink("Changeling_What", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DRAW, lib1_gt_CommonEffectDraw1);
    lib1_gf_DefineCardUnit(lv_id, "Changeling", 1);
    lib1_gf_AddRushtoCardDefinition(lv_id);
    lib1_gf_AddDetectiontoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_zERG, "Excreting Overseer", "\xE6\xB1\xA1\xE6\x9F\x93\xE7\x9C\xBC\xE8\x99\xAB", lib1_gv_tACTICAL, "", lib1_gv_uNCOMMON, 4, 2, null, "\xE7\x9B\xB4\xE5\x88\xB0\xE8\xA2\xAB\xE6\x91\xA7\xE6\xAF\x81\xE5\x87\xBB\xE6\x9D\x80, \xE5\xAE\x83\xE6\x8F\x90\xE9\xAB\x98 1 \xE7\x82\xB9\xE4\xBD\xA0\xE7\x9A\x84\xE6\x89\x8B\xE7\x89\x8C\xE5\xAE\xB9\xE9\x87\x8F\xEF\xBC\x8C\xE4\xB8\x8A\xE9\x99\x90\xE4\xB8\xBA 12 \xE3\x80\x82\xE6\x88\x98\xE5\x90\xBC\xEF\xBC\x9A\xE5\xAE\x83\xE5\xAF\xB9 3 \xE4\xB8\xAA\xE6\x9C\x80\xE8\xB4\xB5\xE7\x9A\x84\xE6\x95\x8C\xE6\x96\xB9\xE5\xBB\xBA\xE7\xAD\x91\xE4\xBD\xBF\xE7\x94\xA8\xE6\xB1\xA1\xE6\x9F\x93\xEF\xBC\x8C\xE8\xAE\xA9\xE8\xBF\x99\xE4\xBA\x9B\xE5\xBB\xBA\xE7\xAD\x91 2 \xE5\x9B\x9E\xE5\x90\x88\xE5\x86\x85\xE6\x97\xA0\xE6\xB3\x95\xE7\x94\x9F\xE4\xBA\xA7\xE3\x80\x82", "Assets\\Textures\\btn-ability-zerg-contaminate-color.dds", SoundLink("Overseer_Ready", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_INCREASE_HAND_SIZE, lib1_gt_CommonEffectAddHandSizeBufftoAllCreatedUnits);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_FREEZE_SPECIFIC_UNIT, lib1_gt_EffectExcretingOverseer);
    lib1_gf_DefineCardUnit(lv_id, "Overseer", 1);
    lib1_gf_AddDetectiontoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_zERG, "Baneling Nest", "\xE6\xAF\x92\xE7\x88\x86\xE5\xB7\xA2", lib1_gv_sTRUCTURE, "", lib1_gv_uNCOMMON, 1, 1, lib1_gt_EffectBanelingNest, "\xE5\xBB\xBA\xE9\x80\xA0\xE4\xB8\x80\xE4\xB8\xAA\xE6\xAF\x92\xE7\x88\x86\xE8\x99\xAB\xE5\xB7\xA2\xE3\x80\x82\xE6\xAF\x8F\xE5\x9B\x9E\xE5\x90\x88\xE6\xB7\xBB\xE5\x8A\xA0\xE4\xB8\x80\xE5\xBC\xA0\xE6\xAF\x92\xE7\x88\x86\xE8\x99\xAB\xE5\x8D\xB5\xE7\x89\x8C\xE5\x88\xB0\xE4\xBD\xA0\xE7\x9A\x84\xE6\x89\x8B\xE7\x89\x8C\xE4\xB8\xAD\xE3\x80\x82", "Assets\\Textures\\btn-building-zerg-banelingnest.dds", SoundLink("BanelingNest_What", 0));
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_zERG, "Spire", "\xE5\xB0\x96\xE5\xA1\x94", lib1_gv_sTRUCTURE, "", lib1_gv_uNCOMMON, 2, 2, lib1_gt_EffectSpire, "\xE5\xBB\xBA\xE9\x80\xA0\xE4\xB8\x80\xE4\xB8\xAA\xE5\xB0\x96\xE5\xA1\x94\xE3\x80\x82\xE6\xAF\x8F\xE5\x9B\x9E\xE5\x90\x88\xE9\x9A\x8F\xE6\x9C\xBA\xE6\xB7\xBB\xE5\x8A\xA0\xE4\xB8\x80\xE5\xBC\xA0\xE9\xA3\x9E\xE9\xBE\x99\xE6\x88\x96\xE4\xB8\x80\xE5\xBC\xA0\xE8\x85\x90\xE5\x8C\x96\xE8\x99\xAB\xE5\x8D\xB5\xE7\x89\x8C\xE5\x88\xB0\xE4\xBD\xA0\xE7\x9A\x84\xE6\x89\x8B\xE7\x89\x8C\xE4\xB8\xAD\xE3\x80\x82", "Assets\\Textures\\btn-building-zerg-spire.dds", SoundLink("Spire_What", 0));
    lib1_gf_AddCardtoStartingCollection(lv_id, 1);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_zERG, "Extractor", "\xE8\x90\x83\xE5\x8F\x96\xE4\xBB\x93", lib1_gv_sTRUCTURE, "", lib1_gv_uNCOMMON, 3, 0, lib1_gt_EffectExtractor, "\xE5\xBB\xBA\xE9\x80\xA0\xE4\xB8\x80\xE4\xB8\xAA\xE8\x90\x83\xE5\x8F\x96\xE6\x88\xBF\xE3\x80\x82\xE7\x9B\xB4\xE5\x88\xB0\xE8\xA2\xAB\xE6\x91\xA7\xE6\xAF\x81\xEF\xBC\x8C\xE6\x8F\x90\xE9\xAB\x98 1 \xE7\x82\xB9\xE4\xBD\xA0\xE7\x9A\x84\xE7\x93\xA6\xE6\x96\xAF\xE4\xBA\xA7\xE8\x83\xBD\xE4\xB8\x8A\xE9\x99\x90\xE3\x80\x82\xE6\x88\x98\xE5\x90\xBC\xEF\xBC\x9A\xE6\x8A\xBD\xE4\xB8\x80\xE5\xBC\xA0\xE7\x89\x8C\xE3\x80\x82", "Assets\\Textures\\btn-building-zerg-extractor.dds", SoundLink("Extractor_What", 0));
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_zERG, "Evolution Chamber", "\xE8\xBF\x9B\xE5\x8C\x96\xE5\xAE\xA4", lib1_gv_sTRUCTURE, "", lib1_gv_uNCOMMON, 3, 0, lib1_gt_EffectEvolutionChamber, "\xE5\xBB\xBA\xE9\x80\xA0\xE4\xB8\x80\xE4\xB8\xAA\xE8\xBF\x9B\xE5\x8C\x96\xE8\x85\x94\xEF\xBC\x8C\xE7\x9B\xB4\xE5\x88\xB0\xE8\xA2\xAB\xE6\x91\xA7\xE6\xAF\x81\xEF\xBC\x8C\xE6\xAF\x8F\xE5\xBD\x93\xE4\xBD\xA0\xE6\x89\x93\xE5\x87\xBA\xE4\xB8\x80\xE5\xBC\xA0\xE8\xBF\x9B\xE5\x8C\x96\xE7\x89\x8C\xE6\x97\xB6\xEF\xBC\x8C\xE4\xB8\xBA\xE4\xBD\xA0\xE7\x9A\x84\xE6\x89\x80\xE6\x9C\x89\xE5\x8D\x95\xE4\xBD\x8D +10 \xE7\x94\x9F\xE5\x91\xBD\xE5\xB9\xB6\xE6\x8A\xBD\xE4\xB8\x80\xE5\xBC\xA0\xE7\x89\x8C\xE3\x80\x82", "Assets\\Textures\\btn-building-zerg-evolutionchamber.dds", SoundLink("EvolutionChamber_What", 0));
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_zERG, "Inject Larva", "\xE6\xB3\xA8\xE5\xB0\x84\xE5\xB9\xBC\xE8\x99\xAB", lib1_gv_aCTION, "", lib1_gv_uNCOMMON, 4, 0, null, "\xE5\xB0\x86\xE4\xBD\xA0\xE6\x89\x8B\xE7\x89\x8C\xE4\xB8\xAD\xE5\x85\xA8\xE9\x83\xA8\xE7\x9A\x84\xE5\x85\x8D\xE8\xB4\xB9\xE8\x99\xAB\xE5\x8D\xB5\xE7\x89\x8C\xE5\x90\x88\xE6\x88\x90\xE4\xB8\xBA\xE4\xB8\x80\xE5\xBC\xA0\xE8\x99\xAB\xE5\x8D\xB5\xE7\x89\x8C\xEF\xBC\x8C\xE5\xB9\xB6\xE8\xAE\xA9\xE5\x85\xB6\xE5\x8F\xAC\xE5\x94\xA4\xE6\x95\xB0\xE9\x87\x8F\xE7\xBF\xBB 3 \xE5\x80\x8D\xE3\x80\x82", "Assets\\Textures\\btn-unit-zerg-larva.dds", SoundLink("Queen_SpawnLarvaLaunch", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DISCARD_FROM_HAND, lib1_gt_EffectInjectLarva);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_zERG, "Creeping Queens", "\xE6\x85\xA2\xE5\x90\x9E\xE5\x90\x9E\xE7\x9A\x84\xE5\xA5\xB3\xE7\x8E\x8B", lib1_gv_aGGRESSIVE, "", lib1_gv_rARE, 3, 0, null, "\xE6\xAF\x8F\xE5\x9B\x9E\xE5\x90\x88\xE5\xAE\x83\xE4\xBB\xAC\xE9\x83\xBD\xE4\xBC\x9A\xE7\x94\x9F\xE4\xBA\xA7\xE4\xB8\x80\xE4\xB8\xAA\xE8\x8F\x8C\xE6\xAF\xAF\xE8\x82\xBF\xE7\x98\xA4\xE3\x80\x82", "Assets\\Textures\\btn-ability-zerg-growth.dds", SoundLink("QueenWhat", 0));
    lib1_gf_DefineCardUnit(lv_id, "Queen", 3);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_zERG, "Burrowing Lurkers", "\xE5\x9F\x8B\xE5\x9C\xB0\xE5\x9C\xB0\xE5\x88\xBA", lib1_gv_aGGRESSIVE, "", lib1_gv_rARE, 3, 2, null, "\xE5\xAE\x83\xE4\xBB\xAC\xE6\x8E\xA5\xE6\x95\x8C\xE6\x97\xB6\xE6\xBD\x9C\xE5\x9C\xB0\xEF\xBC\x8C\xE7\x84\xB6\xE5\x90\x8E\xE5\x9C\xA8\xE6\xBD\x9C\xE5\x9C\xB0\xE7\x8A\xB6\xE6\x80\x81\xE4\xB8\x8B\xE6\x94\xBB\xE5\x87\xBB\xE3\x80\x82", "Assets\\Textures\\btn-unit-zerg-lurker.dds", SoundLink("Lurker_Attack", 0));
    lib1_gf_DefineCardUnit(lv_id, "LurkerMP", 2);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_zERG, "Tunneling Roaches", "\xE6\x8E\x98\xE5\x9C\xB0\xE8\x9F\x91\xE8\x9E\x82", lib1_gv_aGGRESSIVE, "", lib1_gv_rARE, 6, 2, null, "\xE5\xAE\x83\xE4\xBB\xAC\xE4\xBB\xA5\xE6\xBD\x9C\xE5\x9C\xB0\xE5\xBD\xA2\xE6\x80\x81\xE5\x9C\xA8\xE6\x95\x8C\xE6\x96\xB9\xE9\x98\xB2\xE5\xAE\x88\xE5\x8C\xBA\xE5\x87\xBA\xE7\x94\x9F\xEF\xBC\x8C\xE7\x84\xB6\xE5\x90\x8E\xE7\xAB\x8B\xE5\x88\xBB\xE5\x87\xBA\xE5\x9C\xB0\xE6\x94\xBB\xE5\x87\xBB\xE3\x80\x82", "Assets\\Textures\\btn-upgrade-zerg-tunnelingclaws.dds", SoundLink("Zerg_BurrowMedium", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DEFAULT, lib1_gt_EffectTunnelingRoaches);
    lib1_gf_DefineCardUnit(lv_id, "Roach", 9);
    lib1_gf_AddCardtoStartingCollection(lv_id, 1);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_zERG, "Parasitic Vipers", "\xE5\xAF\x84\xE7\x94\x9F\xE9\xA3\x9E\xE8\x9B\x87", lib1_gv_dEFENSIVE, "", lib1_gv_rARE, 2, 2, null, "\xE6\x88\x98\xE5\x90\xBC\xEF\xBC\x9A\xE5\xAE\x83\xE4\xBB\xAC\xE5\x88\x86\xE5\x88\xAB\xE5\xAF\xB9\xE6\x95\x8C\xE5\xAF\xB9\xE7\xA9\xBA\xE4\xB8\xAD\xE5\x8D\x95\xE4\xBD\x8D\xE9\x9B\x86\xE7\xBE\xA4\xE4\xBD\xBF\xE7\x94\xA8\xE5\xAF\x84\xE7\x94\x9F\xE7\x82\xB8\xE5\xBC\xB9\xE3\x80\x82", "Assets\\Textures\\btn-unit-zerg-viper.dds", SoundLink("LairViper_Yes", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_REMOVE_UNIT_AOE_DAMAGE, lib1_gt_EffectParasiticVipers);
    lib1_gf_DefineCardUnit(lv_id, "Viper", 3);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_zERG, "Baneling Bombs", "\xE6\xAF\x92\xE7\x88\x86\xE7\x82\xB8\xE5\xBC\xB9", lib1_gv_aGGRESSIVE, "", lib1_gv_rARE, 4, 3, null, "\xE6\xAF\x8F\xE4\xB8\xAA\xE7\x8E\x8B\xE8\x99\xAB\xE5\x9C\xA8\xE6\x95\x8C\xE4\xBA\xBA\xE7\x9A\x84\xE9\x98\xB2\xE5\xBE\xA1\xE5\x8C\xBA\xE6\x8A\x95\xE4\xB8\x8B 4 \xE4\xB8\xAA\xE6\xAF\x92\xE7\x88\x86\xE3\x80\x82", "Assets\\Textures\\abilityicon_spawnbanelings_square.dds", SoundLink("Overlord_Unload", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DEFAULT, lib1_gt_EffectBanelingBombs);
    lib1_gf_DefineCardUnit(lv_id, "OverlordTransport", 8);
    lib1_gf_AddCardtoStartingCollection(lv_id, 1);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_zERG, "Ultralisk Cavern", "\xE9\x9B\xB7\xE5\x85\xBD\xE7\xAA\x9F", lib1_gv_sTRUCTURE, "", lib1_gv_rARE, 8, 3, lib1_gt_EffectUltraliskCavern, "\xE5\xBB\xBA\xE9\x80\xA0\xE4\xB8\x80\xE4\xB8\xAA\xE9\x9B\xB7\xE5\x85\xBD\xE7\xAA\x9F\xE3\x80\x82\xE6\xAF\x8F\xE5\x9B\x9E\xE5\x90\x88\xE6\xB7\xBB\xE5\x8A\xA0\xE4\xB8\x80\xE5\xBC\xA0\xE9\x9B\xB7\xE5\x85\xBD\xE8\x99\xAB\xE5\x8D\xB5\xE7\x89\x8C\xE5\x88\xB0\xE4\xBD\xA0\xE7\x9A\x84\xE6\x89\x8B\xE7\x89\x8C\xE4\xB8\xAD\xE3\x80\x82", "Assets\\Textures\\btn-building-zerg-ultraliskcavern.dds", SoundLink("UltraliskCavern_What", 0));
    lib1_gf_AddCardtoStartingCollection(lv_id, 1);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_zERG, "Nydus Network", "\xE8\x99\xAB\xE9\x81\x93\xE7\xBD\x91\xE7\xBB\x9C", lib1_gv_sTRUCTURE, "", lib1_gv_rARE, 2, 2, lib1_gt_EffectNydusNetwork, "\xE5\xBB\xBA\xE9\x80\xA0\xE4\xB8\x80\xE4\xB8\xAA\xE8\x99\xAB\xE9\x81\x93\xE7\xBD\x91\xE7\xBB\x9C\xE3\x80\x82\xE7\x9B\xB4\xE5\x88\xB0\xE8\xA2\xAB\xE6\x91\xA7\xE6\xAF\x81\xEF\xBC\x8C\xE4\xBD\xA0\xE7\x9A\x84\xE5\x9C\xB0\xE9\x9D\xA2\xE5\x8D\x95\xE4\xBD\x8D\xE6\x8B\xA5\xE6\x9C\x89 rush \xE7\x89\xB9\xE6\x80\xA7\xEF\xBC\x8C\xE5\xB9\xB6\xE4\xBB\x8E\xE5\x85\xB6\xE4\xB8\xAD\xE6\xB6\x8C\xE5\x87\xBA\xE3\x80\x82", "Assets\\Textures\\btn-building-zerg-nydusnetwork.dds", SoundLink("NydusNetwork_What", 0));
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_zERG, "Greater Spire", "\xE5\xB7\xA8\xE5\x9E\x8B\xE5\xB0\x96\xE5\xA1\x94", lib1_gv_aCTION, "Evolution", lib1_gv_rARE, 3, 2, lib1_gt_EffectGreaterSpire, "\xE5\xB0\x86\xE4\xBD\xA0\xE4\xB8\x80\xE5\xBA\xA7\xE7\x9A\x84\xE5\xB0\x96\xE5\xA1\x94\xE7\xAA\x81\xE5\x8F\x98\xE4\xB8\xBA\xE5\xB7\xA8\xE5\x9E\x8B\xE5\xB0\x96\xE5\xA1\x94\xE3\x80\x82\xE6\xAF\x8F\xE5\x9B\x9E\xE5\x90\x88\xE6\xB7\xBB\xE5\x8A\xA0\xE4\xB8\x80\xE5\xBC\xA0\xE5\xB7\xA2\xE8\x99\xAB\xE9\xA2\x86\xE4\xB8\xBB\xE8\x99\xAB\xE5\x8D\xB5\xE7\x89\x8C\xE5\x88\xB0\xE4\xBD\xA0\xE7\x9A\x84\xE6\x89\x8B\xE7\x89\x8C\xE4\xB8\xAD\xE3\x80\x82", "Assets\\Textures\\btn-building-zerg-greaterspire.dds", SoundLink("GreaterSpire_What", 0));
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_zERG, "Mass Mutation", "\xE5\xA4\xA7\xE5\x9E\x8B\xE5\xBC\x82\xE5\x8F\x98", lib1_gv_aCTION, "Evolution", lib1_gv_rARE, 5, 3, null, "\xE5\xB0\x86 24 \xE4\xB8\xAA\xE8\xB7\xB3\xE8\x99\xAB\xEF\xBC\x8C 12 \xE4\xB8\xAA\xE8\x9F\x91\xE8\x9E\x82\xEF\xBC\x8C 6 \xE4\xB8\xAA\xE8\x85\x90\xE5\x8C\x96\xE8\x80\x85\xE5\x92\x8C 3 \xE4\xB8\xAA\xE5\x88\xBA\xE8\x9B\x87\xE5\x8F\x98\xE5\xBC\x82\xE4\xB8\xBA\xE6\xAF\x92\xE7\x88\x86\xE8\x99\xAB\xEF\xBC\x8C\xE7\x81\xAB\xE8\x9F\x91\xE8\x9E\x82\xEF\xBC\x8C\xE5\xB7\xA2\xE8\x99\xAB\xE9\xA2\x86\xE4\xB8\xBB\xE5\x92\x8C\xE5\x9C\xB0\xE5\x88\xBA\xE3\x80\x82", "Assets\\Textures\\btn-upgrade-zerg-tissueassimilation.dds", SoundLink("LurkerEgg_Birth", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_BUFF_UNITS, lib1_gt_EffectMassMutation);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_zERG, "Neural Parasite", "\xE7\xA5\x9E\xE7\xBB\x8F\xE5\xAF\x84\xE7\x94\x9F", lib1_gv_aCTION, "", lib1_gv_rARE, 4, 2, null, "\xE6\x8E\xA7\xE5\x88\xB6\xE6\x95\x8C\xE6\x96\xB9\xE6\x9C\x80\xE8\x82\x89\xE7\x9A\x84\xE4\xB8\x80\xE4\xB8\xAA\xE5\x8D\x95\xE4\xBD\x8D 1 \xE5\x9B\x9E\xE5\x90\x88\xE3\x80\x82\xE5\x85\xB6\xE4\xBB\x96\xE6\x95\x8C\xE6\x96\xB9\xE5\x8D\x95\xE4\xBD\x8D\xE4\xB8\x8D\xE4\xBC\x9A\xE8\xBF\x98\xE5\x87\xBB\xE3\x80\x82", "Assets\\Textures\\btn-ability-zerg-neuralparasite-color.dds", SoundLink("Infestor_AttackImpact_NP", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_FREEZE_SPECIFIC_UNIT, lib1_gt_EffectNeuralParasite);
    lib1_gf_AddCardtoStartingCollection(lv_id, 1);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_zERG, "Leviathan", "\xE5\x88\xA9\xE7\xBB\xB4\xE5\x9D\xA6", lib1_gv_aGGRESSIVE, "", lib1_gv_uNIQUE, 8, 3, null, "", "Assets\\Textures\\btn-unit-zerg-leviathan.dds", SoundLink("Leviathan_Roar", 0));
    lib1_gf_DefineCardUnit(lv_id, "HotSLeviathan", 1);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_zERG, "Zagara", "\xE6\x89\x8E\xE5\x8A\xA0\xE6\x8B\x89\xE7\x9A\x84\xE5\x8D\xB5", lib1_gv_aGGRESSIVE, "", lib1_gv_uNIQUE, 3, 0, null, "\xE6\x88\x98\xE5\x90\xBC\xEF\xBC\x9A\xE5\xB0\x86\xE4\xBD\xA0\xE6\x89\x8B\xE7\x89\x8C\xE4\xB8\xAD\xE6\x89\x80\xE6\x9C\x89\xE7\x9A\x84\xE5\x85\x8D\xE8\xB4\xB9\xE7\x9A\x84\xE8\x99\xAB\xE5\x8D\xB5\xE7\x89\x8C\xE5\x90\x88\xE6\x88\x90\xE4\xB8\xBA\xE4\xB8\x80\xE5\xBC\xA0\xE8\x99\xAB\xE5\x8D\xB5\xE7\x89\x8C\xEF\xBC\x8C\xE5\xB9\xB6\xE4\xBD\xBF\xE5\x85\xB6\xE5\x8F\xAC\xE5\x94\xA4\xE7\x9A\x84\xE5\x8D\x95\xE4\xBD\x8D\xE8\x8B\xB1\xE9\x9B\x84\xE5\x8C\x96\xE3\x80\x82", "Assets\\Textures\\btn-unit-zerg-broodqueen.dds", SoundLink("Zagara", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DISCARD_FROM_HAND, lib1_gt_EffectZagara);
    lib1_gf_DefineCardUnit(lv_id, "QueenZagra", 1);
    lib1_gf_AddHeroictoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_zERG, "Kerrigan", "\xE5\x87\xAF\xE7\x91\x9E\xE7\x94\x98\xE7\x9A\x84\xE8\x99\xAB\xE8\x8C\xA7", lib1_gv_dEFENSIVE, "", lib1_gv_uNIQUE, 4, 2, lib1_gt_EffectKerrigan, "\xE5\xA6\x82\xE6\x9E\x9C\xE5\x8F\xAF\xE8\x83\xBD\xE7\x9A\x84\xE8\xAF\x9D\xEF\xBC\x8C\xE6\xAF\x8F\xE5\x9B\x9E\xE5\x90\x88\xE5\xA5\xB9\xE9\x9A\x8F\xE6\x9C\xBA\xE6\xB7\xBB\xE5\x8A\xA0\xE4\xB8\x80\xE5\xBC\xA0\xE4\xB8\x8D\xE5\x90\x8C\xE7\x9A\x84\xE4\xB8\xBB\xE5\xB7\xA2\xE5\xBF\x83\xE6\x99\xBA\xE7\x89\x8C\xE5\x8A\xA0\xE5\x85\xA5\xE4\xBD\xA0\xE7\x9A\x84\xE6\x89\x8B\xE7\x89\x8C\xE4\xB8\xAD\xE3\x80\x82", "Assets\\Textures\\btn-ability-kerrigan-psychicshift.dds", SoundLink("Kerrigan", 0));
    lib1_gf_DefineCardUnit(lv_id, "KerriganVoid", 1);
    lib1_gf_AddHeroictoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_zERG, "Dehaka", "\xE5\xBE\xB7\xE5\x93\x88\xE5\x8D\xA1", lib1_gv_aGGRESSIVE, "", lib1_gv_uNIQUE, 3, 1, null, "\xE6\x88\x98\xE5\x90\xBC\xEF\xBC\x9A\xE5\xA6\x82\xE6\x9E\x9C\xE8\xBF\x99\xE6\x98\xAF\xE4\xBD\xA0\xE6\x9C\xAC\xE5\x9B\x9E\xE5\x90\x88\xE5\x94\xAF\xE4\xB8\x80\xE6\x89\x93\xE5\x87\xBA\xE7\x9A\x84\xE7\x89\x8C\xEF\xBC\x8C\xE6\x8A\xBD\xE4\xB8\x80\xE5\xBC\xA0\xE7\x89\x8C\xE3\x80\x82", "Assets\\Textures\\btn-unit-zerg-dehaka.dds", SoundLink("Dehaka", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DRAW, lib1_gt_EffectDehaka);
    lib1_gf_DefineCardUnit(lv_id, "DehakaMirrorImage", 1);
    lib1_gf_AddHeroictoCardDefinition(lv_id);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_CoreZerg_Init () {
    lib1_gt_CoreZerg = TriggerCreate("lib1_gt_CoreZerg_Func");
    TriggerAddEventMapInit(lib1_gt_CoreZerg);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Core Protoss
//--------------------------------------------------------------------------------------------------
bool lib1_gt_CoreProtoss_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_id;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_id = 99;
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_pROTOSS, "Ardent Zealots", "\xE7\x8B\x82\xE7\x83\xAD\xE8\x80\x85", lib1_gv_aGGRESSIVE, "", lib1_gv_cOMMON, 2, 0, null, "", "Assets\\Textures\\btn-unit-protoss-zealot.dds", SoundLink("Zealot_Attack", 1));
    lib1_gf_DefineCardUnit(lv_id, "Zealot", 3);
    lib1_gf_AddCardtoStartingCollection(lv_id, 2);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_pROTOSS, "Blinking Stalkers", "\xE9\x97\xAA\xE7\x83\x81\xE8\xBF\xBD\xE7\x8C\x8E", lib1_gv_tACTICAL, "", lib1_gv_cOMMON, 2, 1, null, "\xE4\xBB\x96\xE4\xBB\xAC\xE5\x9C\xA8\xE5\x90\x8E\xE6\x92\xA4\xE6\x97\xB6\xE4\xBD\xBF\xE7\x94\xA8\xE9\x97\xAA\xE7\x8E\xB0\xE3\x80\x82", "Assets\\Textures\\btn-unit-protoss-stalker.dds", SoundLink("Stalker_What", 2));
    lib1_gf_DefineCardUnit(lv_id, "Stalker", 2);
    lib1_gf_AddRushtoCardDefinition(lv_id);
    lib1_gf_AddCardtoStartingCollection(lv_id, 2);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_pROTOSS, "Shifting Adepts", "\xE6\xBC\x82\xE7\xA7\xBB\xE4\xBD\xBF\xE5\xBE\x92", lib1_gv_tACTICAL, "", lib1_gv_cOMMON, 1, 1, null, "\xE5\xA5\xB9\xE4\xBB\xAC\xE5\x9C\xA8\xE5\x90\x8E\xE6\x92\xA4\xE6\x97\xB6\xE4\xBD\xBF\xE7\x94\xA8\xE7\x81\xB5\xE8\x83\xBD\xE8\xBD\xAC\xE7\xA7\xBB\xE3\x80\x82", "Assets\\Textures\\btn-unit-protoss-adept.dds", SoundLink("Adept_What", 5));
    lib1_gf_DefineCardUnit(lv_id, "Adept", 3);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_pROTOSS, "Phoenix Formation", "\xE5\x87\xA4\xE5\x87\xB0\xE7\xBC\x96\xE9\x98\x9F", lib1_gv_tACTICAL, "", lib1_gv_cOMMON, 4, 1, null, "", "Assets\\Textures\\btn-unit-protoss-phoenix.dds", SoundLink("Phoenix_What", 0));
    lib1_gf_DefineCardUnit(lv_id, "Phoenix", 4);
    lib1_gf_AddRushtoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_pROTOSS, "Void Rays", "\xE8\x99\x9A\xE7\xA9\xBA\xE8\x88\xB0", lib1_gv_aGGRESSIVE, "", lib1_gv_cOMMON, 4, 2, null, "", "Assets\\Textures\\btn-unit-protoss-warpray.dds", SoundLink("VoidRay_Yes", 0));
    lib1_gf_DefineCardUnit(lv_id, "VoidRay", 2);
    lib1_gf_AddCardtoStartingCollection(lv_id, 2);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_pROTOSS, "Immortal Phalanx", "\xE4\xB8\x8D\xE6\x9C\xBD\xE6\x96\xB9\xE9\x98\xB5", lib1_gv_tACTICAL, "", lib1_gv_cOMMON, 5, 2, null, "", "Assets\\Textures\\btn-unit-protoss-immortal.dds", SoundLink("Immortal_What", 3));
    lib1_gf_DefineCardUnit(lv_id, "Immortal", 3);
    lib1_gf_AddCardtoStartingCollection(lv_id, 2);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_pROTOSS, "Towering Colossi", "\xE9\xAB\x98\xE8\x80\xB8\xE5\xB7\xA8\xE5\x83\x8F", lib1_gv_aGGRESSIVE, "", lib1_gv_cOMMON, 8, 3, null, "", "Assets\\Textures\\btn-unit-protoss-colossus.dds", SoundLink("Colossus_Ready", 0));
    lib1_gf_DefineCardUnit(lv_id, "Colossus", 3);
    lib1_gf_AddDelaytoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_pROTOSS, "Observer", "\xE4\xBE\xA6\xE6\xB5\x8B\xE5\x99\xA8", lib1_gv_tACTICAL, "", lib1_gv_cOMMON, 0, 2, null, "\xE6\x88\x98\xE5\x90\xBC\xEF\xBC\x9A\xE6\x8A\xBD\xE4\xB8\x80\xE5\xBC\xA0\xE7\x89\x8C\xE3\x80\x82", "Assets\\Textures\\btn-unit-protoss-observer.dds", SoundLink("Observer_Ready", 0));
    lib1_gf_DefineCardUnit(lv_id, "Observer", 1);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DRAW, lib1_gt_CommonEffectDraw1);
    lib1_gf_AddDetectiontoCardDefinition(lv_id);
    lib1_gf_AddCardtoStartingCollection(lv_id, 2);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_pROTOSS, "Warp Prism", "\xE6\x8A\x98\xE8\xB7\x83\xE6\xA3\xB1\xE9\x95\x9C", lib1_gv_dEFENSIVE, "", lib1_gv_cOMMON, 2, 0, null, "\xE6\x88\x98\xE5\x90\xBC\xEF\xBC\x9A\xE6\xB7\xBB\xE5\x8A\xA0\xE4\xB8\xA4\xE5\xBC\xA0\xE6\x8A\x98\xE8\xB7\x83\xE5\x8D\xA1\xE5\x88\xB0\xE4\xBD\xA0\xE7\x9A\x84\xE6\x89\x8B\xE7\x89\x8C\xE4\xB8\xAD\xE3\x80\x82", "Assets\\Textures\\btn-unit-protoss-warpprismstationary.dds", SoundLink("WarpPrism_Ready", 0));
    lib1_gf_DefineCardUnit(lv_id, "WarpPrism", 2);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DRAW, lib1_gt_CommonEffectGenerate2WarpInCards);
    lib1_gf_AddRushtoCardDefinition(lv_id);
    lib1_gf_AddCardtoStartingCollection(lv_id, 2);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_pROTOSS, "Devoted Defenders", "\xE5\x9D\x9A\xE5\xAE\x9A\xE5\xAE\x88\xE5\x8D\xAB\xE8\x80\x85", lib1_gv_dEFENSIVE, "", lib1_gv_cOMMON, 3, 1, null, "", "Assets\\Textures\\btn-upgrade-protoss-adeptshieldupgrade.dds", SoundLink("Zealot_What", 5));
    lib1_gf_DefineCardUnit(lv_id, "Zealot", 3);
    lib1_gf_DefineCardUnit(lv_id, "Adept", 2);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_pROTOSS, "Gateway", "\xE4\xBC\xA0\xE9\x80\x81\xE9\x97\xA8", lib1_gv_sTRUCTURE, "", lib1_gv_cOMMON, 3, 0, lib1_gt_EffectGateway, "\xE5\xBB\xBA\xE9\x80\xA0\xE4\xB8\x80\xE4\xB8\xAA\xE4\xBC\xA0\xE9\x80\x81\xE9\x97\xA8\xEF\xBC\x8C\xE6\xAF\x8F\xE5\x9B\x9E\xE5\x90\x88\xE7\x94\x9F\xE4\xBA\xA7 1 \xE4\xB8\xAA\xE7\x8B\x82\xE7\x83\xAD\xE8\x80\x85\xE3\x80\x82", "Assets\\Textures\\btn-building-protoss-gateway.dds", SoundLink("Gateway_What", 0));
    lib1_gf_AddCardtoStartingCollection(lv_id, 2);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_pROTOSS, "Photon Cannons", "\xE5\x85\x89\xE5\xAD\x90\xE7\x82\xAE\xE5\x8F\xB0", lib1_gv_sTRUCTURE, "", lib1_gv_cOMMON, 2, 0, lib1_gt_EffectPhotonCannons, "\xE5\xBB\xBA\xE9\x80\xA0\xE4\xB8\xA4\xE4\xB8\xAA\xE5\x85\x89\xE5\xAD\x90\xE7\x82\xAE\xE5\x8F\xB0\xE3\x80\x82", "Assets\\Textures\\btn-building-protoss-photoncannon.dds", SoundLink("PhotonCannon_What", 0));
    lib1_gf_AddDetectiontoCardDefinition(lv_id);
    lib1_gf_AddCardtoStartingCollection(lv_id, 2);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_pROTOSS, "Shield Batteries", "\xE6\x8A\xA4\xE7\x9B\xBE\xE7\x94\xB5\xE6\xB1\xA0", lib1_gv_sTRUCTURE, "", lib1_gv_cOMMON, 3, 0, lib1_gt_EffectShieldBatteries, "\xE5\xBB\xBA\xE9\x80\xA0\xE4\xB8\xA4\xE4\xB8\xAA\xE6\x8A\xA4\xE7\x9B\xBE\xE7\x94\xB5\xE6\xB1\xA0", "Assets\\Textures\\btn-building-protoss-shieldbattery.dds", SoundLink("ShieldBattery_What", 0));
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_pROTOSS, "Pylon", "\xE6\xB0\xB4\xE6\x99\xB6", lib1_gv_sTRUCTURE, "", lib1_gv_cOMMON, 2, 0, lib1_gt_EffectPylonStructure, "\xE5\xBB\xBA\xE9\x80\xA0\xE4\xB8\x80\xE4\xB8\xAA\xE6\xB0\xB4\xE6\x99\xB6\xE5\xA1\x94\xE3\x80\x82\xE6\x88\x98\xE5\x90\xBC\xEF\xBC\x9A\xE6\x8A\xBD\xE4\xB8\x80\xE5\xBC\xA0\xE7\x89\x8C\xEF\xBC\x8C\xE6\xB7\xBB\xE5\x8A\xA0\xE4\xB8\x80\xE5\xBC\xA0\xE6\x8A\x98\xE8\xB7\x83\xE7\x89\x8C\xE5\x88\xB0\xE4\xBD\xA0\xE7\x9A\x84\xE6\x89\x8B\xE7\x89\x8C\xE4\xB8\xAD\xE3\x80\x82", "Assets\\Textures\\btn-building-protoss-pylon.dds", SoundLink("Pylon_What", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DRAW, lib1_gt_EffectPylonDrawWarpIn);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_pROTOSS, "Psionic Storm", "\xE7\x81\xB5\xE8\x83\xBD\xE9\xA3\x8E\xE6\x9A\xB4", lib1_gv_aCTION, "", lib1_gv_cOMMON, 1, 2, null, "\xE5\x90\x91\xE6\x95\x8C\xE5\xAF\xB9\xE5\x8D\x95\xE4\xBD\x8D\xE9\x9B\x86\xE7\xBE\xA4\xE4\xBD\xBF\xE7\x94\xA8 10 \xE4\xB8\xAA\xE7\x81\xB5\xE8\x83\xBD\xE9\xA3\x8E\xE6\x9A\xB4\xE3\x80\x82", "Assets\\Textures\\btn-ability-protoss-psistorm-color.dds", SoundLink("HighTemplar_PsionicStormImpact", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_REMOVE_UNIT_AOE_DAMAGE, lib1_gt_EffectPsionicStorm);
    lib1_gf_AddCardtoStartingCollection(lv_id, 2);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_pROTOSS, "Graviton Beam", "\xE5\xBC\x95\xE5\x8A\x9B\xE5\x85\x89\xE6\x9D\x9F", lib1_gv_aCTION, "", lib1_gv_cOMMON, 3, 1, null, "\xE5\x8F\xAC\xE5\x94\xA4\xE5\x87\xA4\xE5\x87\xB0\xE7\x94\xA8\xE5\xBC\x95\xE5\x8A\x9B\xE5\xB0\x84\xE7\xBA\xBF\xE6\x8A\xAC\xE8\xB5\xB7 12 \xE4\xB8\xAA\xE6\x95\x8C\xE6\x96\xB9\xE5\x8D\x95\xE4\xBD\x8D\xE3\x80\x82\xE5\x87\xA4\xE5\x87\xB0\xE5\x9C\xA8\xE4\xBB\x96\xE4\xBB\xAC\xE7\x9A\x84\xE7\x9B\xAE\xE6\xA0\x87\xE8\xA2\xAB\xE6\x91\xA7\xE6\xAF\x81\xE5\x90\x8E\xE7\xA6\xBB\xE5\xBC\x80\xE3\x80\x82", "Assets\\Textures\\btn-ability-protoss-gravitonbeam-color.dds", SoundLink("Phoenix_GravitonBeamStart", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_FREEZE_SPECIFIC_UNIT, lib1_gt_EffectGravitonBeam);
    lib1_gf_AddCardtoStartingCollection(lv_id, 2);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_pROTOSS, "Chrono Boost", "\xE6\x98\x9F\xE7\xA9\xBA\xE5\x8A\xA0\xE9\x80\x9F", lib1_gv_aCTION, "", lib1_gv_cOMMON, 2, 0, null, "\xE6\x8F\x90\xE9\xAB\x98 1 \xE7\x82\xB9\xE4\xBD\xA0\xE7\x9A\x84\xE7\x9F\xBF\xE7\x89\xA9\xE4\xBA\xA7\xE8\x83\xBD\xE3\x80\x82", "Assets\\Textures\\btn-ability-protoss-protoncharge-color.dds", SoundLink("Obelisk_TimeWarpLaunch", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_INCREASE_INCOME, lib1_gt_CommonEffectAdd1MineralIncome);
    lib1_gf_AddCardtoStartingCollection(lv_id, 2);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_pROTOSS, "Stasis Wards", "\xE9\x9D\x99\xE6\xBB\x9E\xE9\x99\xB7\xE9\x98\xB1", lib1_gv_aCTION, "", lib1_gv_cOMMON, 1, 1, null, "\xE5\x8F\xAC\xE5\x94\xA4 10 \xE4\xB8\xAA\xE5\x85\x88\xE7\x9F\xA5\xE5\x9C\xA8\xE4\xBD\xA0\xE7\x9A\x84\xE9\x98\xB2\xE5\xBE\xA1\xE5\x8C\xBA\xE5\xBB\xBA\xE9\x80\xA0\xE9\x9D\x99\xE6\xBB\x9E\xE9\x99\xB7\xE9\x98\xB1\xE9\x9A\x8F\xE5\x90\x8E\xE7\xA6\xBB\xE5\xBC\x80\xE3\x80\x82", "Assets\\Textures\\btn-ability-protoss-oracle-stasisward.dds", SoundLink("Oracle_StasisTrap_Finished", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_CREATE_UNIT, lib1_gt_EffectStasisWards);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_pROTOSS, "Delusive Sentries", "\xE8\xAE\xA9\xE4\xBA\xBA\xE8\xBF\xB7\xE6\x83\x91\xE7\x9A\x84\xE5\x93\xA8\xE5\x85\xB5", lib1_gv_aGGRESSIVE, "", lib1_gv_cOMMON, 1, 1, null, "\xE6\x88\x98\xE5\x90\xBC\xEF\xBC\x9A\xE5\xAE\x83\xE4\xBB\xAC\xE4\xBD\xBF\xE7\x94\xA8\xE5\xB9\xBB\xE8\xB1\xA1\xE6\x8A\x80\xE8\x83\xBD\xE3\x80\x82", "Assets\\Textures\\btn-ability-protoss-hallucination-color.dds", SoundLink("Sentry_HallucinationLaunchSmall", 0));
    lib1_gf_DefineCardUnit(lv_id, "Sentry", 4);
    lib1_gf_AddRushtoCardDefinition(lv_id);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_CREATE_UNIT, lib1_gt_EffectHallucinationSentries);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_pROTOSS, "Warp Probe", "\xE6\x8A\x98\xE8\xB7\x83\xE6\x8E\xA2\xE6\x9C\xBA", lib1_gv_aCTION, "", lib1_gv_cOMMON, 2, 0, null, "\xE6\x8A\xBD\xE5\x8F\x96\xE4\xB8\x80\xE5\xBC\xA0\xE5\xBB\xBA\xE7\xAD\x91\xE7\x89\x8C", "Assets\\Textures\\btn-unit-protoss-probe.dds", SoundLink("Probe_What", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_FETCH, lib1_gt_EffectWarpProbe);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_pROTOSS, "Carrier", "\xE8\x88\xAA\xE6\xAF\x8D", lib1_gv_tACTICAL, "", lib1_gv_uNCOMMON, 3, 2, lib1_gt_EffectCarrier, "\xE7\xBB\xB4\xE6\x8A\xA4\xEF\xBC\x9A 1 \xE7\x9F\xBF\xE7\x89\xA9\xE6\xAF\x8F\xE5\x9B\x9E\xE5\x90\x88\xE3\x80\x82", "Assets\\Textures\\btn-unit-protoss-carrier.dds", SoundLink("Carrier_Yes", 2));
    lib1_gf_DefineCardUnit(lv_id, "Carrier", 1);
    lib1_gf_AddCardtoStartingCollection(lv_id, 2);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DEFAULT, lib1_gt_CommonEffectPopulateWithInterceptors);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_pROTOSS, "Shielding Sentries", "\xE5\xBC\x80\xE7\x9B\xBE\xE7\x9A\x84\xE5\x93\xA8\xE5\x85\xB5", lib1_gv_dEFENSIVE, "", lib1_gv_uNCOMMON, 0, 1, null, "\xE6\x88\x98\xE5\x90\xBC\xEF\xBC\x9A\xE8\xAE\xA9\xE4\xBD\xA0\xE5\x9C\xBA\xE4\xB8\x8A\xE7\x9A\x84\xE6\x89\x80\xE6\x9C\x89\xE5\x8D\x95\xE4\xBD\x8D\xE5\x8F\x98\xE4\xB8\xBA\xE9\x98\xB2\xE5\xBE\xA1\xE5\x8D\x95\xE4\xBD\x8D\xE3\x80\x82", "Assets\\Textures\\btn-unit-protoss-sentry.dds", SoundLink("Sentry_Yes", 0));
    lib1_gf_DefineCardUnit(lv_id, "Sentry", 4);
    lib1_gf_AddRushtoCardDefinition(lv_id);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_BUFF_UNITS, lib1_gt_EffectShieldingSentries);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_pROTOSS, "Impending Tempests", "\xE8\xBF\xAB\xE8\xBF\x91\xE7\x9A\x84\xE9\xA3\x8E\xE6\x9A\xB4", lib1_gv_aGGRESSIVE, "", lib1_gv_uNCOMMON, 3, 3, null, "", "Assets\\Textures\\btn-unit-protoss-tempest.dds", SoundLink("Tempest_Yes", 3));
    lib1_gf_DefineCardUnit(lv_id, "Tempest", 2);
    lib1_gf_AddDelaytoCardDefinition(lv_id);
    lib1_gf_AddCardtoStartingCollection(lv_id, 2);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_pROTOSS, "Dark Templar", "\xE9\xBB\x91\xE6\x9A\x97\xE5\x9C\xA3\xE5\xA0\x82\xE6\xAD\xA6\xE5\xA3\xAB", lib1_gv_aGGRESSIVE, "", lib1_gv_uNCOMMON, 1, 2, null, "", "Assets\\Textures\\btn-unit-protoss-darktemplar.dds", SoundLink("DarkTemplar_What", 6));
    lib1_gf_DefineCardUnit(lv_id, "DarkTemplar", 2);
    lib1_gf_AddCardtoStartingCollection(lv_id, 2);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_pROTOSS, "High Templar", "\xE9\xAB\x98\xE9\x98\xB6\xE5\x9C\xA3\xE5\xA0\x82\xE6\xAD\xA6\xE5\xA3\xAB", lib1_gv_dEFENSIVE, "", lib1_gv_uNCOMMON, 2, 1, null, "", "Assets\\Textures\\btn-unit-protoss-hightemplar.dds", SoundLink("HighTemplar_Attack", 2));
    lib1_gf_DefineCardUnit(lv_id, "HighTemplar", 2);
    lib1_gf_AddCardtoStartingCollection(lv_id, 1);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_pROTOSS, "Discerning Oracles", "\xE5\xBC\x80\xE8\xA7\x86\xE9\x87\x8E\xE7\x9A\x84\xE5\x85\x88\xE7\x9F\xA5", lib1_gv_aGGRESSIVE, "", lib1_gv_uNCOMMON, 3, 1, null, "\xE6\x88\x98\xE5\x90\xBC\xEF\xBC\x9A\xE5\x90\x91\xE6\x95\x8C\xE6\x96\xB9\xE9\x9A\x90\xE8\xBA\xAB\xE5\x8D\x95\xE4\xBD\x8D\xE7\xBE\xA4\xE6\x96\xBD\xE6\x94\xBE\xE9\xA2\x84\xE7\xA4\xBA\xE3\x80\x82", "Assets\\Textures\\btn-unit-protoss-oracle.dds", SoundLink("Oracle_Attack", 0));
    lib1_gf_DefineCardUnit(lv_id, "Oracle", 3);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_REVEAL_UNIT, lib1_gt_EffectDiscerningOracles);
    lib1_gf_AddDetectiontoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_pROTOSS, "Infiltrating Adepts", "\xE4\xBD\xBF\xE5\xBE\x92\xE6\xB8\x97\xE9\x80\x8F", lib1_gv_aGGRESSIVE, "", lib1_gv_uNCOMMON, 6, 1, lib1_gt_EffectInfiltratingAdepts, "\xE5\xA5\xB9\xE4\xBB\xAC\xE5\x88\xA9\xE7\x94\xA8\xE7\x81\xB5\xE8\x83\xBD\xE8\xBD\xAC\xE7\xA7\xBB\xE7\xA9\xBF\xE8\xBF\x87\xE6\x88\x98\xE5\x9C\xBA\xE7\x9A\x84\xE4\xB8\xAD\xE5\xBF\x83\xE3\x80\x82", "Assets\\Textures\\btn-ability-protoss-psionictransfer.dds", SoundLink("Adept_Yes", 4));
    lib1_gf_DefineCardUnit(lv_id, "Adept", 6);
    lib1_gf_AddRushtoCardDefinition(lv_id);
    lib1_gf_AddCardtoStartingCollection(lv_id, 2);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_pROTOSS, "Nerazim Assassins", "\xE5\xA5\x88\xE6\x8B\x89\xE9\xBD\x90\xE5\xA7\x86\xE6\x9A\x97\xE6\x9D\x80", lib1_gv_aGGRESSIVE, "", lib1_gv_uNCOMMON, 3, 2, lib1_gt_EffectNerazimAssassins, "\xE4\xBB\x96\xE4\xBB\xAC\xE5\x90\x84\xE8\x87\xAA\xE6\x9D\x80\xE6\xAD\xBB 1 \xE4\xB8\xAA\xE5\x8D\x95\xE4\xBD\x8D\xE6\x88\x96\xE8\x80\x85\xE5\xBB\xBA\xE7\xAD\x91\xE5\x90\x8E\xE7\xA6\xBB\xE5\xBC\x80\xE3\x80\x82", "Assets\\Textures\\btn-ability-protoss-permanentlycloaked-darktemplar-color.dds", SoundLink("DarkTemplar_Attack", 0));
    lib1_gf_DefineCardUnit(lv_id, "DarkTemplar", 6);
    lib1_gf_AddRushtoCardDefinition(lv_id);
    lib1_gf_AddCardtoStartingCollection(lv_id, 1);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_pROTOSS, "Stargate", "\xE6\x98\x9F\xE9\x97\xA8", lib1_gv_sTRUCTURE, "", lib1_gv_uNCOMMON, 3, 2, lib1_gt_EffectStargate, "\xE5\xBB\xBA\xE9\x80\xA0\xE4\xB8\x80\xE4\xB8\xAA\xE6\x98\x9F\xE9\x97\xA8\xE3\x80\x82\xE6\xAF\x8F\xE5\x9B\x9E\xE5\x90\x88\xE7\x94\x9F\xE4\xBA\xA7 1 \xE4\xB8\xAA\xE5\x87\xA4\xE5\x87\xB0\xE3\x80\x82", "Assets\\Textures\\btn-building-protoss-stargate.dds", SoundLink("Stargate_What", 0));
    lib1_gf_AddCardtoStartingCollection(lv_id, 2);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_pROTOSS, "Forge", "\xE9\x94\xBB\xE7\x82\x89", lib1_gv_sTRUCTURE, "", lib1_gv_uNCOMMON, 2, 0, lib1_gt_EffectForge, "\xE5\xBB\xBA\xE9\x80\xA0\xE4\xB8\x80\xE4\xB8\xAA\xE9\x94\xBB\xE7\x82\x89\xEF\xBC\x8C\xE6\xAF\x8F\xE5\xBD\x93\xE4\xBD\xA0\xE6\x89\x93\xE5\x87\xBA\xE4\xB8\x80\xE5\xBC\xA0\xE5\xBB\xBA\xE7\xAD\x91\xE7\x89\x8C\xE6\x97\xB6\xEF\xBC\x8C\xE6\xB4\xBE\xE4\xB8\x80\xE4\xB8\xAA\xE6\x8E\xA2\xE6\x9C\xBA\xE5\xBB\xBA\xE9\x80\xA0\xE4\xB8\x80\xE4\xB8\xAA\xE5\x85\x89\xE5\xAD\x90\xE7\x82\xAE\xE5\x8F\xB0\xE3\x80\x82", "Assets\\Textures\\btn-building-protoss-forge.dds", SoundLink("ForgeWhat", 0));
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_pROTOSS, "Cybernetics Core", "\xE6\x8E\xA7\xE5\x88\xB6\xE8\x8A\xAF\xE6\xA0\xB8", lib1_gv_sTRUCTURE, "", lib1_gv_uNCOMMON, 5, 0, lib1_gt_EffectCyberneticsCore, "\xE5\xBB\xBA\xE9\x80\xA0\xE4\xB8\x80\xE4\xB8\xAA\xE6\x8E\xA7\xE5\x88\xB6\xE8\x8A\xAF\xE6\xA0\xB8\xE3\x80\x82\xE6\xAF\x8F\xE5\xBD\x93\xE4\xBD\xA0\xE7\x9A\x84\xE4\xB8\x80\xE4\xB8\xAA\xE7\x94\x9F\xE7\x89\xA9\xE5\x8D\x95\xE4\xBD\x8D\xE6\xAD\xBB\xE4\xBA\xA1\xEF\xBC\x8C\xE6\x9C\x89 50% \xE6\xA6\x82\xE7\x8E\x87\xE6\x8A\x8A\xE5\xAE\x83\xE5\xA4\x8D\xE6\xB4\xBB\xE4\xB8\xBA\xE4\xB8\x80\xE4\xB8\xAA\xE8\xBF\x9B\xE6\x94\xBB\xE7\x9A\x84\xE8\xBF\xBD\xE7\x8C\x8E\xE8\x80\x85\xE3\x80\x82", "Assets\\Textures\\btn-building-protoss-cyberneticscore.dds", SoundLink("CyberneticsCore_What", 0));
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_pROTOSS, "Assimilator", "\xE5\x90\xB8\xE7\xBA\xB3\xE4\xBB\x93", lib1_gv_sTRUCTURE, "", lib1_gv_uNCOMMON, 3, 0, lib1_gt_EffectAssimilator, "\xE5\xBB\xBA\xE9\x80\xA0\xE4\xB8\x80\xE4\xB8\xAA\xE6\xB0\x94\xE7\x9F\xBF\xE3\x80\x82\xE7\x9B\xB4\xE5\x88\xB0\xE8\xA2\xAB\xE6\x91\xA7\xE6\xAF\x81\xEF\xBC\x8C\xE6\x8F\x90\xE9\xAB\x98 1 \xE7\x82\xB9\xE4\xBD\xA0\xE7\x9A\x84\xE7\x93\xA6\xE6\x96\xAF\xE4\xBA\xA7\xE8\x83\xBD\xE4\xB8\x8A\xE9\x99\x90\xE3\x80\x82\xE6\x88\x98\xE5\x90\xBC\xEF\xBC\x9A\xE6\x8F\x90\xE9\xAB\x98 1 \xE7\x82\xB9\xE4\xBD\xA0\xE7\x9A\x84\xE7\x93\xA6\xE6\x96\xAF\xE4\xBA\xA7\xE8\x83\xBD\xE3\x80\x82", "Assets\\Textures\\btn-building-protoss-assimilator.dds", SoundLink("Assimilator_What", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_INCREASE_INCOME, lib1_gt_CommonEffectAdd1GasIncome);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_pROTOSS, "Twilight Council", "\xE5\x85\x89\xE5\xBD\xB1\xE8\xAE\xAE\xE4\xBC\x9A", lib1_gv_sTRUCTURE, "", lib1_gv_uNCOMMON, 1, 1, lib1_gt_EffectTwilightCouncil, "\xE5\xBB\xBA\xE9\x80\xA0\xE4\xB8\x80\xE4\xB8\xAA\xE5\x85\x89\xE5\xBD\xB1\xE8\xAE\xAE\xE4\xBC\x9A\xE3\x80\x82\xE6\xAF\x8F\xE5\x9B\x9E\xE5\x90\x88\xE5\xB0\x86\xE4\xBD\xA0\xE6\x97\xA0\xE6\xB3\x95\xE6\x94\xAF\xE4\xBB\x98\xE7\x9A\x84\xE6\x9C\x80\xE8\xB4\xB5\xE7\x9A\x84\xE7\x89\x8C\xE6\xB4\x97\xE5\x9B\x9E\xE4\xBD\xA0\xE7\x9A\x84\xE7\x89\x8C\xE5\xBA\x93\xEF\xBC\x8C\xE6\xB4\x97\xE7\x89\x8C\xE6\x88\x90\xE5\x8A\x9F\xE5\x90\x8E\xE6\x8A\xBD\xE4\xB8\x80\xE5\xBC\xA0\xE7\x89\x8C\xE3\x80\x82", "Assets\\Textures\\btn-building-protoss-twilightcouncil.dds", SoundLink("TwilightCouncil_What", 0));
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_pROTOSS, "Feedback", "\xE5\x8F\x8D\xE9\xA6\x88", lib1_gv_aCTION, "", lib1_gv_uNCOMMON, 2, 1, null, "\xE6\xB8\x85\xE7\xA9\xBA\xE6\x89\x80\xE6\x9C\x89\xE6\x95\x8C\xE6\x96\xB9\xE8\x83\xBD\xE9\x87\x8F\xE5\x8D\x95\xE4\xBD\x8D\xE7\x9A\x84\xE8\x83\xBD\xE9\x87\x8F\xEF\xBC\x8C\xE5\xB9\xB6\xE5\xAF\xB9\xE4\xBB\x96\xE4\xBB\xAC\xE9\x80\xA0\xE6\x88\x90 200 \xE7\x82\xB9\xE4\xBC\xA4\xE5\xAE\xB3\xE3\x80\x82", "Assets\\Textures\\btn-ability-protoss-feedback-color.dds", SoundLink("Obelisk_ArgusLinkImpact", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_REMOVE_UNIT_AOE_DAMAGE, lib1_gt_EffectFeedback);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_pROTOSS, "Photon Overcharge", "\xE5\x85\x89\xE5\xAD\x90\xE8\xB6\x85\xE8\xBD\xBD", lib1_gv_aCTION, "", lib1_gv_uNCOMMON, 2, 1, lib1_gt_EffectPhotonOvercharge, "\xE4\xBD\xA0\xE4\xBB\xAC\xE9\x98\x9F\xE4\xBC\x8D\xE7\x9A\x84\xE8\x90\xA8\xE5\xB0\x94\xE9\x92\xA0\xE5\x8A\xA0\xE9\x92\xA5\xE7\x9F\xB3\xE5\x9C\xA8\xE6\xB0\xB8\xE4\xB9\x85\xE8\x8E\xB7\xE5\xBE\x97\xE8\xBF\x87\xE8\xBD\xBD\xE6\x94\xBB\xE5\x87\xBB\xE8\x83\xBD\xE5\x8A\x9B\xEF\xBC\x8C\xE5\xA6\x82\xE6\x9E\x9C\xE5\xB7\xB2\xE7\xBB\x8F\xE8\xBF\x87\xE8\xBD\xBD\xEF\xBC\x8C\xE9\x82\xA3\xE4\xB9\x88\xE6\x9C\xAC\xE5\x9B\x9E\xE5\x90\x88\xE5\x86\x85\xE8\x8E\xB7\xE5\xBE\x97 +15 \xE4\xBC\xA4\xE5\xAE\xB3\xE5\x92\x8C+15 \xE5\xB0\x84\xE7\xA8\x8B\xE3\x80\x82", "Assets\\Textures\\btn-ability-protoss-purify.dds", SoundLink("Mothership_PhotonOverchargeActivate", 0));
    lib1_gf_AddCardtoStartingCollection(lv_id, 2);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_pROTOSS, "Warp Gate", "\xE6\x8A\x98\xE8\xB7\x83\xE9\x97\xA8", lib1_gv_aCTION, "", lib1_gv_uNCOMMON, 1, 1, null, "\xE5\xB0\x86\xE4\xBD\xA0\xE7\x9A\x84\xE4\xBC\xA0\xE9\x80\x81\xE9\x97\xA8\xE5\x8D\x87\xE7\xBA\xA7\xE4\xB8\xBA\xE6\x8A\x98\xE8\xB7\x83\xE9\x97\xA8\xEF\xBC\x8C\xE6\xAF\x8F\xE5\x9B\x9E\xE5\x90\x88\xE6\xB7\xBB\xE5\x8A\xA0\xE6\x8A\x98\xE8\xB7\x83\xE5\x8D\xA1\xE5\x88\xB0\xE4\xBD\xA0\xE7\x9A\x84\xE6\x89\x8B\xE7\x89\x8C\xE4\xB8\xAD\xE3\x80\x82\xE5\xA6\x82\xE6\x9E\x9C\xE4\xBD\xA0\xE6\xB2\xA1\xE6\x9C\x89\xE4\xBC\xA0\xE9\x80\x81\xE9\x97\xA8\xEF\xBC\x8C\xE9\x82\xA3\xE4\xB9\x88\xE5\xB0\x86 2 \xE5\xBC\xA0\xE6\x8A\x98\xE8\xB7\x83\xE5\x8D\xA1\xE6\xB7\xBB\xE5\x8A\xA0\xE5\x88\xB0\xE4\xBD\xA0\xE7\x9A\x84\xE6\x89\x8B\xE7\x89\x8C\xE4\xB8\xAD\xE3\x80\x82", "Assets\\Textures\\btn-building-protoss-warpgate.dds", SoundLink("WarpGate_What", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DRAW, lib1_gt_EffectWarpGate);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_pROTOSS, "Golden Armada", "\xE9\xBB\x84\xE9\x87\x91\xE8\x88\xB0\xE9\x98\x9F", lib1_gv_aGGRESSIVE, "", lib1_gv_rARE, 7, 3, lib1_gt_EffectGoldenArmada, "\xE7\xBB\xB4\xE6\x8A\xA4\xEF\xBC\x9A 1 \xE7\x9F\xBF\xE7\x89\xA9\xE6\xAF\x8F\xE5\x9B\x9E\xE5\x90\x88\xE3\x80\x82", "Assets\\Textures\\btn-upgrade-protoss-phoenixrange.dds", SoundLink("Carrier_Pissed", 6));
    lib1_gf_DefineCardUnit(lv_id, "Carrier", 1);
    lib1_gf_DefineCardUnit(lv_id, "Phoenix", 4);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DEFAULT, lib1_gt_CommonEffectPopulateWithInterceptors);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_pROTOSS, "Merging Archons", "\xE5\x90\x88\xE7\x90\x83", lib1_gv_aGGRESSIVE, "", lib1_gv_rARE, 3, 2, null, "\xE6\x88\x98\xE5\x90\xBC\xEF\xBC\x9A\xE4\xBD\xA0\xE6\x89\x80\xE6\x9C\x89\xE7\x9A\x84\xE9\xAB\x98\xE9\x98\xB6\xE5\x9C\xA3\xE5\xA0\x82\xE6\xAD\xA6\xE5\xA3\xAB\xE5\x92\x8C\xE9\xBB\x91\xE6\x9A\x97\xE5\x9C\xA3\xE5\xA0\x82\xE6\xAD\xA6\xE5\xA3\xAB\xE5\x90\x88\xE4\xBD\x93\xE4\xB8\xBA\xE8\xB6\x85\xE7\xBA\xA7\xE8\xB5\x9B\xE4\xBA\x9A\xE4\xBA\xBA\xEF\xBC\x8C\xE5\xB9\xB6\xE4\xBD\xBF\xE5\x85\xB6 rush \xE3\x80\x82", "Assets\\Textures\\btn-unit-protoss-archon.dds", SoundLink("Archon_What", 2));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_BUFF_UNITS, lib1_gt_EffectMergingArchons);
    lib1_gf_DefineCardUnit(lv_id, "Archon", 2);
    lib1_gf_AddRushtoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_pROTOSS, "Warp Offensive", "\xE6\x8A\x98\xE8\xB7\x83\xE6\x94\xBB\xE5\x8A\xBF", lib1_gv_aGGRESSIVE, "", lib1_gv_rARE, 6, 3, lib1_gt_EffectWarpOffensive, "\xE6\xAF\x8F\xE4\xB8\xAA\xE6\xA3\xB1\xE9\x95\x9C\xE5\x9C\xA8\xE6\x95\x8C\xE6\x96\xB9\xE9\x98\xB2\xE5\xBE\xA1\xE5\x8C\xBA\xE4\xB8\x8A\xE6\x96\xB9\xE5\x8D\xB8\xE8\xBD\xBD 2 \xE4\xB8\xAA\xE7\x8B\x82\xE7\x83\xAD\xE8\x80\x85\xEF\xBC\x8C 1 \xE4\xB8\xAA\xE4\xBD\xBF\xE5\xBE\x92\xE5\x92\x8C 1 \xE4\xB8\xAA\xE8\xBF\xBD\xE7\x8C\x8E\xE8\x80\x85\xE3\x80\x82\xE6\x88\x98\xE5\x90\xBC\xEF\xBC\x9A\xE6\xB7\xBB\xE5\x8A\xA0 2 \xE5\xBC\xA0\xE6\x8A\x98\xE8\xB7\x83\xE7\x89\x8C\xE5\x88\xB0\xE4\xBD\xA0\xE7\x9A\x84\xE6\x89\x8B\xE7\x89\x8C\xE4\xB8\xAD\xE3\x80\x82", "Assets\\Textures\\btn-unit-protoss-warpprism.dds", SoundLink("Shuttle_Unload", 2));
    lib1_gf_DefineCardUnit(lv_id, "WarpPrism", 2);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DRAW, lib1_gt_CommonEffectGenerate2WarpInCards);
    lib1_gf_AddRushtoCardDefinition(lv_id);
    lib1_gf_AddCardtoStartingCollection(lv_id, 1);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_pROTOSS, "Barraging Disruptors", "\xE8\x87\xAA\xE7\x88\x86\xE7\x90\x83\xE8\xBD\xB0\xE7\x82\xB8", lib1_gv_dEFENSIVE, "", lib1_gv_rARE, 2, 2, null, "\xE5\xAE\x83\xE4\xBB\x8E\xE6\x88\x91\xE6\x96\xB9\xE9\x98\xB2\xE5\xBE\xA1\xE5\x8C\xBA\xE5\xAF\xB9\xE6\x95\x8C\xE6\x96\xB9\xE9\x98\xB2\xE5\xBE\xA1\xE5\x8C\xBA\xE4\xBD\xBF\xE7\x94\xA8\xE5\x87\x80\xE5\x8C\x96\xE6\x96\xB0\xE6\x98\x9F\xEF\xBC\x8C\xE5\xAF\xB9\xE6\x95\x8C\xE4\xBA\xBA\xE7\x9A\x84\xE5\x9C\xB0\xE9\x9D\xA2\xE5\x8D\x95\xE4\xBD\x8D\xE5\x92\x8C\xE5\xBB\xBA\xE7\xAD\x91\xE9\x80\xA0\xE6\x88\x90\xE5\x8F\xAF\xE8\xA7\x82\xE7\x9A\x84\xE4\xBC\xA4\xE5\xAE\xB3\xE3\x80\x82", "Assets\\Textures\\btn-unit-protoss-disruptor.dds", SoundLink("Pusher_Attack", 4));
    lib1_gf_DefineCardUnit(lv_id, "Disruptor", 2);
    lib1_gf_AddRushtoCardDefinition(lv_id);
    lib1_gf_AddCardtoStartingCollection(lv_id, 1);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_pROTOSS, "Robotics Facility", "\xE6\x9C\xBA\xE6\xA2\xB0\xE5\xB7\xA5\xE5\x8E\x82", lib1_gv_sTRUCTURE, "", lib1_gv_rARE, 6, 3, lib1_gt_EffectRoboticsFacility, "\xE5\xBB\xBA\xE9\x80\xA0\xE4\xB8\x80\xE4\xB8\xAA\xE6\x9C\xBA\xE6\xA2\xB0\xE5\x8F\xB0\xE3\x80\x82 \xE6\xAF\x8F\xE5\x9B\x9E\xE5\x90\x88\xE7\x94\x9F\xE4\xBA\xA7\xE4\xB8\x80\xE4\xB8\xAA\xE4\xB8\x8D\xE6\x9C\xBD\xE8\x80\x85\xE3\x80\x82 \xE7\xBB\xB4\xE6\x8A\xA4\xEF\xBC\x9A 1 \xE7\x9F\xBF\xE7\x89\xA9\xE6\xAF\x8F\xE5\x9B\x9E\xE5\x90\x88\xE3\x80\x82", "Assets\\Textures\\btn-building-protoss-roboticsfacility.dds", SoundLink("RoboticsFacility_What", 0));
    lib1_gf_AddCardtoStartingCollection(lv_id, 1);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_pROTOSS, "Fleet Beacon", "\xE8\x88\xB0\xE9\x98\x9F\xE8\x88\xAA\xE6\xA0\x87", lib1_gv_sTRUCTURE, "", lib1_gv_rARE, 2, 2, lib1_gt_EffectFleetBeacon, "\xE5\xBB\xBA\xE9\x80\xA0\xE8\x88\xB0\xE9\x98\x9F\xE8\x88\xAA\xE6\xA0\x87\xE3\x80\x82 \xE6\xAF\x8F\xE5\x9B\x9E\xE5\x90\x88\xE6\x8A\xBD\xE5\x8F\x96\xE4\xB8\x80\xE5\xBC\xA0\xE5\x90\xAB\xE6\x9C\x89\xE5\x8F\xAC\xE5\x94\xA4\xE9\xA3\x8E\xE6\x9A\xB4\xE6\x88\x96\xE8\x88\xAA\xE6\xAF\x8D\xE7\x9A\x84\xE5\x8D\x95\xE4\xBD\x8D\xE7\x89\x8C\xEF\xBC\x8C\xE5\xA6\x82\xE6\x9E\x9C\xE6\x8A\xBD\xE5\x8F\x96\xE6\x88\x90\xE5\x8A\x9F\xEF\xBC\x8C\xE8\xB7\xB3\xE8\xBF\x87\xE4\xBD\xA0\xE7\x9A\x84\xE4\xB8\x8B\xE4\xB8\xAA\xE6\x8A\xBD\xE7\x89\x8C\xE9\x98\xB6\xE6\xAE\xB5\xE3\x80\x82", "Assets\\Textures\\btn-building-protoss-fleetbeacon.dds", SoundLink("FleetBeacon_What", 0));
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_pROTOSS, "Templar Archives", "\xE6\x96\x87\xE7\x8C\xAE\xE9\xA6\x86", lib1_gv_sTRUCTURE, "", lib1_gv_rARE, 1, 1, lib1_gt_EffectTemplarArchives, "\xE5\xBB\xBA\xE9\x80\xA0\xE4\xB8\x80\xE4\xB8\xAA\xE5\x9C\xA3\xE5\xA0\x82\xE6\xAD\xA6\xE5\xA3\xAB\xE6\x96\x87\xE7\x8C\xAE\xE9\xA6\x86\xE3\x80\x82\xE6\xAF\x8F\xE5\xBD\x93\xE4\xBD\xA0\xE4\xBD\xBF\xE7\x94\xA8\xE4\xB8\x80\xE5\xBC\xA0\xE5\x8A\xA8\xE4\xBD\x9C\xE7\x89\x8C\xE5\x90\x8E\xEF\xBC\x8C\xE5\xAE\x83\xE4\xBC\x9A\xE5\xB0\x86\xE8\xBF\x99\xE5\xBC\xA0\xE7\x89\x8C\xE6\xB4\x97\xE5\x9B\x9E\xE5\x88\xB0\xE4\xBD\xA0\xE7\x9A\x84\xE7\x89\x8C\xE5\xBA\x93\xE4\xB8\xAD\xE8\x80\x8C\xE4\xBC\x9A\xE8\xBF\x9B\xE5\x85\xA5\xE5\xBC\x83\xE7\x89\x8C\xE5\xA0\x86\xE3\x80\x82", "Assets\\Textures\\btn-building-protoss-templararchives.dds", SoundLink("TemplarArchive_What", 0));
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_pROTOSS, "Dark Shrine", "\xE9\xBB\x91\xE6\x9A\x97\xE5\x9C\xA3\xE5\x9D\x9B", lib1_gv_sTRUCTURE, "", lib1_gv_rARE, 1, 2, lib1_gt_EffectDarkShrine, "\xE5\xBB\xBA\xE9\x80\xA0\xE4\xB8\x80\xE4\xB8\xAA\xE9\x9A\x90\xE5\x88\x80\xE5\xA1\x94\xE3\x80\x82\xE6\xAF\x8F\xE5\x9B\x9E\xE5\x90\x88\xE5\xB0\x86\xE4\xBD\xA0\xE6\x89\x8B\xE4\xB8\xAD\xE4\xB8\x80\xE5\xBC\xA0\xE7\xA5\x9E\xE6\x97\x8F\xE7\x89\x8C\xE7\x9A\x84\xE4\xB8\x80\xE4\xB8\xAA\xE7\x94\x9F\xE7\x89\xA9\xE5\x8D\x95\xE4\xBD\x8D\xE8\xBD\xAC\xE6\x8D\xA2\xE4\xB8\xBA\xE4\xB8\x80\xE4\xB8\xAA\xE9\x9A\x90\xE5\x88\x80\xE3\x80\x82", "Assets\\Textures\\btn-building-protoss-darkshrine.dds", SoundLink("DarkShrine_What", 0));
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_pROTOSS, "Vortex", "\xE6\xBC\xA9\xE6\xB6\xA1", lib1_gv_aCTION, "", lib1_gv_rARE, 8, 3, lib1_gt_EffectVortex, "\xE5\x9C\xA8\xE6\x88\x98\xE5\x9C\xBA\xE4\xB8\xAD\xE5\xBF\x83\xE5\x88\xB6\xE9\x80\xA0\xE4\xB8\x80\xE4\xB8\xAA\xE9\xBB\x91\xE6\xB4\x9E\xEF\xBC\x8C\xE6\x8C\x81\xE7\xBB\xAD 10 \xE7\xA7\x92\xE3\x80\x82\xE5\xAE\x83\xE4\xBC\x9A\xE5\x90\xB8\xE5\x85\xA5\xE5\xB9\xB6\xE6\x91\xA7\xE6\xAF\x81\xE9\x99\x84\xE8\xBF\x91\xE7\x9A\x84\xE5\x8D\x95\xE4\xBD\x8D\xE3\x80\x82", "Assets\\Textures\\btn-ability-protoss-blackhole-color.dds", SoundLink("Mothership_VortexEnd", 0));
    lib1_gf_AddCardtoStartingCollection(lv_id, 1);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_pROTOSS, "Replicate", "\xE5\xA4\x8D\xE5\x88\xB6", lib1_gv_aCTION, "", lib1_gv_rARE, 2, 0, null, "\xE5\xA4\x8D\xE5\x88\xB6\xE4\xBD\xA0\xE6\x89\x8B\xE7\x89\x8C\xE4\xB8\xAD\xE4\xB8\x80\xE5\xBC\xA0\xE8\xB4\xB9\xE7\x94\xA8\xE6\x9C\x80\xE4\xBD\x8E\xE7\x9A\x84\xE5\x8D\x95\xE4\xBD\x8D\xE7\x89\x8C\xE3\x80\x82", "Assets\\Textures\\btn-ability-protoss-replicate.dds", SoundLink("Spell_Replicate_Impact", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_COPY_HAND_CARD, lib1_gt_EffectReplicate);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_pROTOSS, "Phase-Smith Karax", "\xE7\x9B\xB8\xE4\xBD\x8D\xE6\x8A\x80\xE5\xB8\x88\xE5\x87\xAF\xE6\x8B\x89\xE5\x85\x8B\xE6\x96\xAF", lib1_gv_dEFENSIVE, "", lib1_gv_uNIQUE, 3, 2, lib1_gt_EffectKarax, "\xE6\xAF\x8F\xE5\x9B\x9E\xE5\x90\x88\xE9\x9A\x8F\xE6\x9C\xBA\xE9\x80\x89\xE6\x8B\xA9\xE4\xB8\x80\xE4\xB8\xAA\xE6\x9C\xBA\xE6\xA2\xB0\xE5\x8D\x95\xE4\xBD\x8D\xE5\xB9\xB6\xE5\xB0\x86\xE5\x8F\xAC\xE5\x94\xA4\xE5\x8D\x95\xE4\xBD\x8D\xE7\x9A\x84\xE7\x89\x8C\xE5\xA4\x8D\xE5\x88\xBB\xE5\x88\xB0\xE4\xBD\xA0\xE7\x9A\x84\xE6\x89\x8B\xE7\x89\x8C\xE4\xB8\xAD\xE3\x80\x82 \xE5\xBD\x93\xE5\xA4\x8D\xE5\x88\xBB\xE6\x88\x90\xE5\x8A\x9F\xE6\x97\xB6\xEF\xBC\x8C\xE8\xB7\xB3\xE8\xBF\x87\xE4\xBD\xA0\xE7\x9A\x84\xE4\xB8\x8B\xE4\xB8\xAA\xE6\x8A\xBD\xE7\x89\x8C\xE9\x98\xB6\xE6\xAE\xB5\xE3\x80\x82", "Assets\\Textures\\btn-unit-protoss-karax.dds", SoundLink("Karax", 0));
    lib1_gf_DefineCardUnit(lv_id, "KaraxChampion", 1);
    lib1_gf_AddHeroictoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_pROTOSS, "Zeratul", "\xE6\xB3\xBD\xE6\x8B\x89\xE5\x9B\xBE", lib1_gv_tACTICAL, "", lib1_gv_uNIQUE, 2, 2, null, "\xE4\xBB\x85\xE4\xB8\x80\xE6\xAC\xA1,\xE8\xBF\x99\xE5\xBC\xA0\xE7\x89\x8C\xE8\x83\xBD\xE5\x9C\xA8\xE4\xBD\xA0 8 \xE4\xB8\xAA\xE5\x8D\x95\xE4\xBD\x8D\xE6\xAD\xBB\xE4\xBA\xA1\xE5\x90\x8E\xE5\x8D\x87\xE7\xBA\xA7", "Assets\\Textures\\btn-unit-protoss-zeratul.dds", SoundLink("Zeratul", 0));
    lib1_gf_DefineCardUnit(lv_id, "Zeratul", 1);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_BUFF_UNITS, lib1_gt_EffectZeratul);
    lib1_gf_AddHeroictoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_pROTOSS, "Artanis", "\xE9\x98\xBF\xE5\xA1\x94\xE5\xB0\xBC\xE6\x96\xAF", lib1_gv_tACTICAL, "", lib1_gv_uNIQUE, 3, 2, lib1_gt_EffectArtanis, "\xE6\xAF\x8F\xE5\x9B\x9E\xE5\x90\x88\xE6\x8A\xBD\xE5\x8F\x96\xE4\xB8\x80\xE5\xBC\xA0\xE8\x8B\xB1\xE9\x9B\x84\xE7\x89\x8C\xE3\x80\x82\xE5\xA6\x82\xE6\x9E\x9C\xE6\x8A\xBD\xE5\x8F\x96\xE6\x88\x90\xE5\x8A\x9F\xEF\xBC\x8C\xE8\xB7\xB3\xE8\xBF\x87\xE4\xB8\x8B\xE4\xB8\x80\xE4\xB8\xAA\xE6\x8A\xBD\xE5\x8D\xA1\xE9\x98\xB6\xE6\xAE\xB5\xE3\x80\x82", "Assets\\Textures\\btn-unit-protoss-artanishero.dds", SoundLink("Artanis", 0));
    lib1_gf_DefineCardUnit(lv_id, "ArtanisVoid", 1);
    lib1_gf_AddHeroictoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_cORE, lib1_gv_pROTOSS, "Mothership Core", "\xE6\xAF\x8D\xE8\x88\xB0\xE6\xA0\xB8\xE5\xBF\x83", lib1_gv_dEFENSIVE, "", lib1_gv_uNIQUE, 1, 1, null, "\xE6\x88\x98\xE5\x90\xBC\xEF\xBC\x9A\xE5\xA6\x82\xE6\x9E\x9C\xE4\xBD\xA0\xE6\x89\x8B\xE4\xB8\xAD\xE6\xB2\xA1\xE6\x9C\x89\xE5\xA6\x88\xE5\xA6\x88\xE8\x88\xB9\xE7\x89\x8C,\xE5\x88\x99\xE6\xB7\xBB\xE5\x8A\xA0\xE4\xB8\x80\xE5\xBC\xA0\xE5\xA6\x88\xE5\xA6\x88\xE8\x88\xB9\xE7\x89\x8C\xE5\x88\xB0\xE4\xBD\xA0\xE7\x9A\x84\xE6\x89\x8B\xE7\x89\x8C\xE4\xB8\xAD\xE3\x80\x82", "Assets\\Textures\\btn-unit-protoss-mothershipcore.dds", SoundLink("Mothership_What", 1));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DRAW, lib1_gt_EffectMothershipCore);
    lib1_gf_DefineCardUnit(lv_id, "MothershipCore", 1);
    lib1_gf_AddRushtoCardDefinition(lv_id);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_CoreProtoss_Init () {
    lib1_gt_CoreProtoss = TriggerCreate("lib1_gt_CoreProtoss_Func");
    TriggerAddEventMapInit(lib1_gt_CoreProtoss);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Core Uncollectable
//--------------------------------------------------------------------------------------------------
bool lib1_gt_CoreUncollectable_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_id;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_id = 149;
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNCOLLECTIBLE, lib1_gv_tERRAN, "Transformed Thor", "\xE5\x8F\x98\xE5\xBD\xA2\xE7\x9A\x84\xE9\x9B\xB7\xE7\xA5\x9E", lib1_gv_aGGRESSIVE, "", lib1_gv_cOMMON, 3, 1, null, "\xE8\xBF\x99\xE4\xB8\xAA\xE6\xA8\xA1\xE5\xBC\x8F\xE7\x9A\x84\xE9\x9B\xB7\xE7\xA5\x9E\xE8\x83\xBD\xE5\xAF\xB9\xE5\x8D\x95\xE4\xB8\xAA\xE9\x87\x8D\xE7\x94\xB2\xE7\xA9\xBA\xE5\x86\x9B\xE9\x80\xA0\xE6\x88\x90\xE6\x9B\xB4\xE5\xA4\x9A\xE7\x9A\x84\xE4\xBC\xA4\xE5\xAE\xB3\xE3\x80\x82", "Assets\\Textures\\btn-unit-terran-thorsiegemode.dds", SoundLink("Thor_Ready", 0));
    lib1_gf_DefineCardUnit(lv_id, "ThorAP", 1);
    lib1_gf_AddTransformRelationship("Thor", "Transformed Thor");
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNCOLLECTIBLE, lib1_gv_tERRAN, "Viking Pillagers", "\xE7\xBB\xB4\xE4\xBA\xAC\xE5\x8A\xAB\xE6\x8E\xA0\xE8\x80\x85", lib1_gv_aGGRESSIVE, "", lib1_gv_cOMMON, 4, 1, null, "", "Assets\\Textures\\btn-unit-terran-vikingassault.dds", SoundLink("Viking_Attack", 6));
    lib1_gf_DefineCardUnit(lv_id, "VikingAssault", 3);
    lib1_gf_AddTransformRelationship("Viking Blockade", "Viking Pillagers");
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNCOLLECTIBLE, lib1_gv_tERRAN, "Hellbat Assault", "\xE7\x81\xAB\xE8\xBD\xA6\xE4\xBE\xA0\xE7\xAA\x81\xE5\x87\xBB", lib1_gv_aGGRESSIVE, "", lib1_gv_uNCOMMON, 4, 0, null, "", "Assets\\Textures\\btn-unit-terran-hellionbattlemode.dds", SoundLink("HellionTank_What", 4));
    lib1_gf_DefineCardUnit(lv_id, "HellionTank", 5);
    lib1_gf_AddTransformRelationship("Hellion Outriders", "Hellbat Assault");
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNCOLLECTIBLE, lib1_gv_tERRAN, "Mobile Tanks", "\xE6\x9C\xBA\xE5\x8A\xA8\xE6\xA8\xA1\xE5\xBC\x8F\xE7\x9A\x84\xE5\x9D\xA6\xE5\x85\x8B", lib1_gv_aGGRESSIVE, "", lib1_gv_uNCOMMON, 3, 1, null, "", "Assets\\Textures\\btn-unit-terran-siegetank.dds", SoundLink("SiegeTank_Attack", 0));
    lib1_gf_DefineCardUnit(lv_id, "SiegeTank", 2);
    lib1_gf_AddTransformRelationship("Siege Tanks", "Mobile Tanks");
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNCOLLECTIBLE, lib1_gv_tERRAN, "Liberator Fleet", "\xE8\xA7\xA3\xE6\x94\xBE\xE8\x80\x85\xE8\x88\xB0\xE9\x98\x9F", lib1_gv_aGGRESSIVE, "", lib1_gv_rARE, 5, 2, null, "", "Assets\\Textures\\btn-ability-terran-liberator-aamode.dds", SoundLink("TerranFlyer_Attack", 3));
    lib1_gf_DefineCardUnit(lv_id, "Liberator", 2);
    lib1_gf_AddRushtoCardDefinition(lv_id);
    lib1_gf_AddTransformRelationship("Liberator Fleet", "Liberation Zone");
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNCOLLECTIBLE, lib1_gv_tERRAN, "Canister Rifle", "\xE5\xAF\x86\xE9\x97\xAD\xE5\xBC\x8F\xE6\x9D\xA5\xE7\xA6\x8F\xE7\x8B\x99\xE5\x87\xBB\xE6\x9E\xAA", lib1_gv_aCTION, lib1_gv_nOVA_OPS, lib1_gv_uNCOLLECTIBLE, 1, 1, null, "\xE8\xAF\xBA\xE5\xA8\x83\xE8\xA3\x85\xE5\xA4\x87\xE6\x9D\xA5\xE7\xA6\x8F\xE7\x8B\x99\xE5\x87\xBB\xE6\x9E\xAA, \xE5\xB9\xB6\xE5\xAF\xB9\xE6\x95\x8C\xE5\xAF\xB9\xE6\x9C\x80\xE8\x82\x89\xE7\x9A\x84\xE7\x94\x9F\xE7\x89\xA9\xE5\x8D\x95\xE4\xBD\x8D\xE9\x80\xA0\xE6\x88\x90 1000 \xE7\x82\xB9\xE4\xBC\xA4\xE5\xAE\xB3\xE3\x80\x82 \xE5\xA6\x82\xE6\x9E\x9C\xE8\xAF\xBA\xE5\xA8\x83\xE6\xAD\xBB\xE4\xBA\xA1\xE4\xB8\xA2\xE5\xBC\x83\xE8\xBF\x99\xE5\xBC\xA0\xE7\x89\x8C\xE3\x80\x82", "Assets\\Textures\\btn-upgrade-terran-nova-snipetripletap.dds", SoundLink("HeroNovaMP1_Attack", 1));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_REMOVE_UNIT_1000_DAMAGE, lib1_gt_EffectCanisterRifleNovaOps);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNCOLLECTIBLE, lib1_gv_tERRAN, "Hellfire Shotgun", "\xE5\x9C\xB0\xE7\x8B\xB1\xE7\x81\xAB\xE9\x9C\xB0\xE5\xBC\xB9\xE6\x9E\xAA", lib1_gv_aCTION, lib1_gv_nOVA_OPS, lib1_gv_uNCOLLECTIBLE, 1, 0, null, "\xE8\xAF\xBA\xE5\xA8\x83\xE8\xA3\x85\xE5\xA4\x87\xE5\x9C\xB0\xE7\x8B\xB1\xE9\x9C\xB0\xE5\xBC\xB9\xE6\x9E\xAA, \xE8\xBF\x99\xE6\x8A\x8A\xE6\x9E\xAA\xE6\x9C\x89\xE8\x8C\x83\xE5\x9B\xB4\xE6\x94\xBB\xE5\x87\xBB\xE7\x89\xB9\xE6\x80\xA7,\xE4\xBD\x86\xE4\xB8\x8D\xE8\x83\xBD\xE5\xAF\xB9\xE7\xA9\xBA\xE3\x80\x82 \xE5\xA6\x82\xE6\x9E\x9C\xE8\xAF\xBA\xE5\xA8\x83\xE6\xAD\xBB\xE4\xBA\xA1\xE4\xB8\xA2\xE5\xBC\x83\xE8\xBF\x99\xE5\xBC\xA0\xE7\x89\x8C\xE3\x80\x82", "Assets\\Textures\\btn-upgrade-nova-equipment-shotgun.dds", SoundLink("HeroNovaMP1_Pissed", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_BUFF_UNITS, lib1_gt_EffectHellfireShotgunNovaOps);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNCOLLECTIBLE, lib1_gv_tERRAN, "Stealth Suit", "\xE9\x9A\x90\xE8\xBA\xAB\xE6\x9C\x8D", lib1_gv_aCTION, lib1_gv_nOVA_OPS, lib1_gv_uNCOLLECTIBLE, 0, 1, null, "\xE4\xBD\xBF\xE8\xAF\xBA\xE5\xA8\x83\xE9\x9A\x90\xE8\xBA\xAB\xE5\xB9\xB6\xE5\xB0\x86\xE4\xBB\x96\xE6\x9C\x80\xE5\xA4\xA7\xE7\x94\x9F\xE5\x91\xBD\xE5\x80\xBC\xE8\xB0\x83\xE4\xB8\xBA 200\xE3\x80\x82 \xE5\xA6\x82\xE6\x9E\x9C\xE8\xAF\xBA\xE5\xA8\x83\xE6\xAD\xBB\xE4\xBA\xA1\xE4\xB8\xA2\xE5\xBC\x83\xE8\xBF\x99\xE5\xBC\xA0\xE7\x89\x8C\xE3\x80\x82", "Assets\\Textures\\btn-upgrade-nova-tacticalstealthsuit.dds", SoundLink("HeroNovaMP1_Cloak", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_BUFF_UNITS, lib1_gt_EffectStealthSuitNovaOps);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNCOLLECTIBLE, lib1_gv_tERRAN, "Assault Suit", "\xE7\xAA\x81\xE5\x87\xBB\xE6\x9C\x8D", lib1_gv_aCTION, lib1_gv_nOVA_OPS, lib1_gv_uNCOLLECTIBLE, 2, 0, null, "\xE5\xB0\x86\xE8\xAF\xBA\xE5\xA8\x83\xE7\x9A\x84\xE5\xBD\x93\xE5\x89\x8D\xE5\x92\x8C\xE6\x9C\x80\xE5\xA4\xA7\xE7\x9A\x84\xE7\x94\x9F\xE5\x91\xBD\xE5\x80\xBC\xE5\x8F\x98\xE4\xB8\xBA 400 ,\xE5\xA6\x82\xE6\x9E\x9C\xE8\xAF\xBA\xE5\xA8\x83\xE7\xA9\xBF\xE4\xBA\x86\xE9\x9A\x90\xE8\xBA\xAB\xE5\xA5\x97\xE8\xA3\x85,\xE5\xB0\x86\xE4\xBC\x9A\xE8\xA2\xAB\xE8\xA7\xA3\xE9\x99\xA4\xE3\x80\x82 \xE5\xA6\x82\xE6\x9E\x9C\xE8\xAF\xBA\xE5\xA8\x83\xE6\xAD\xBB\xE4\xBA\xA1\xE4\xB8\xA2\xE5\xBC\x83\xE8\xBF\x99\xE5\xBC\xA0\xE7\x89\x8C\xE3\x80\x82", "Assets\\Textures\\btn-upgrade-nova-equipment-apolloinfantrysuit.dds", SoundLink("HeroNovaMP1_Attack", 5));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_BUFF_UNITS, lib1_gt_EffectAssaultSuitNovaOps);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNCOLLECTIBLE, lib1_gv_tERRAN, "Flashbang Grenade", "\xE9\x97\xAA\xE5\x85\x89\xE5\xBC\xB9", lib1_gv_aCTION, lib1_gv_nOVA_OPS, lib1_gv_uNCOLLECTIBLE, 1, 0, null, "\xE8\xAF\xBA\xE5\xA8\x83\xE4\xBC\x9A\xE5\xAF\xB9\xE9\x99\x84\xE8\xBF\x91\xE7\x9A\x84\xE4\xB8\x80\xE7\xBB\x84\xE6\x95\x8C\xE4\xBA\xBA\xE4\xB8\xA2\xE5\x87\xBA\xE9\x97\xAA\xE5\x85\x89\xE5\xBC\xB9\xE8\xBF\x99\xE4\xBC\x9A\xE5\x87\xBB\xE6\x99\x95\xE5\xB9\xB6\xE6\x8F\xAD\xE7\xA4\xBA\xE6\x95\x8C\xE4\xBA\xBA 10 \xE7\xA7\x92\xE3\x80\x82\xE5\xA6\x82\xE6\x9E\x9C\xE8\xAF\xBA\xE5\xA8\x83\xE6\xAD\xBB\xE4\xBA\xA1\xE4\xB8\xA2\xE5\xBC\x83\xE8\xBF\x99\xE5\xBC\xA0\xE7\x89\x8C\xE3\x80\x82", "Assets\\Textures\\btn-upgrade-nova-btn-upgrade-nova-flashgrenade.dds", SoundLink("HeroNovaMP1_Nuclear_Strike", 2));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_FREEZE_SPECIFIC_UNIT, lib1_gt_EffectFlashbangGrenadeNovaOps);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNCOLLECTIBLE, lib1_gv_tERRAN, "Vanish", "\xE6\x88\x98\xE6\x9C\xAF\xE6\xB6\x88\xE5\xA4\xB1", lib1_gv_aCTION, lib1_gv_nOVA_OPS, lib1_gv_uNCOLLECTIBLE, 1, 1, null, "\xE4\xB8\xA2\xE5\xBC\x83\xE6\x89\x80\xE6\x9C\x89\xE8\xAF\xBA\xE5\xA8\x83\xE8\xA3\x85\xE5\xA4\x87\xE7\x89\x8C,\xE5\xB9\xB6\xE5\xB0\x86\xE8\xAF\xBA\xE5\xA8\x83\xE5\x8F\xAC\xE5\x9B\x9E\xE5\x88\xB0\xE4\xBD\xA0\xE6\x89\x8B\xE7\x89\x8C\xE4\xB8\xAD,\xE5\xA6\x82\xE6\x9E\x9C\xE8\xAF\xBA\xE5\xA8\x83\xE6\xAD\xBB\xE4\xBA\xA1\xE4\xB8\xA2\xE5\xBC\x83\xE8\xBF\x99\xE5\xBC\xA0\xE7\x89\x8C\xE3\x80\x82", "Assets\\Textures\\btn-upgrade-nova-blink.dds", SoundLink("HeroNovaMP1_Yes", 1));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DRAW, lib1_gt_EffectVanishNovaOps);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNCOLLECTIBLE, lib1_gv_zERG, "Zergling Spawn", "\xE5\xB0\x8F\xE7\x8B\x97\xE5\x8D\xB5", lib1_gv_aGGRESSIVE, lib1_gv_sPAWN, lib1_gv_uNCOLLECTIBLE, 0, 0, null, "", "Assets\\Textures\\wireframe-zerg-zergling.dds", SoundLink("Zergling_Attack", 0));
    lib1_gf_DefineCardUnit(lv_id, "Zergling", 4);
    lib1_gf_AddRushtoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNCOLLECTIBLE, lib1_gv_zERG, "Baneling Spawn", "\xE6\xAF\x92\xE7\x88\x86\xE5\x8D\xB5", lib1_gv_aGGRESSIVE, lib1_gv_sPAWN, lib1_gv_uNCOLLECTIBLE, 0, 0, null, "", "Assets\\Textures\\wireframe-zerg-baneling.dds", SoundLink("Baneling_What", 0));
    lib1_gf_DefineCardUnit(lv_id, "Baneling", 2);
    lib1_gf_AddRushtoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNCOLLECTIBLE, lib1_gv_zERG, "Roach Spawn", "\xE8\x9F\x91\xE8\x9E\x82\xE5\x8D\xB5", lib1_gv_aGGRESSIVE, lib1_gv_sPAWN, lib1_gv_uNCOLLECTIBLE, 0, 0, null, "", "Assets\\Textures\\wireframe-zerg-roach.dds", SoundLink("Roach_What", 0));
    lib1_gf_DefineCardUnit(lv_id, "Roach", 1);
    lib1_gf_AddRushtoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNCOLLECTIBLE, lib1_gv_zERG, "Hydralisk Spawn", "\xE5\x88\xBA\xE8\x9B\x87\xE5\x8D\xB5", lib1_gv_aGGRESSIVE, lib1_gv_sPAWN, lib1_gv_uNCOLLECTIBLE, 0, 0, null, "", "Assets\\Textures\\wireframe-zerg-hydralisk.dds", SoundLink("Hydralisk_Ready", 0));
    lib1_gf_DefineCardUnit(lv_id, "Hydralisk", 1);
    lib1_gf_AddRushtoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNCOLLECTIBLE, lib1_gv_zERG, "Mutalisk Spawn", "\xE9\xA3\x9E\xE9\xBE\x99\xE5\x8D\xB5", lib1_gv_aGGRESSIVE, lib1_gv_sPAWN, lib1_gv_uNCOLLECTIBLE, 0, 0, null, "", "Assets\\Textures\\wireframe-zerg-mutalisk.dds", SoundLink("Mutalisk_Ready", 0));
    lib1_gf_DefineCardUnit(lv_id, "Mutalisk", 1);
    lib1_gf_AddRushtoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNCOLLECTIBLE, lib1_gv_zERG, "Corruptor Spawn", "\xE8\x85\x90\xE5\x8C\x96\xE5\x8D\xB5", lib1_gv_aGGRESSIVE, lib1_gv_sPAWN, lib1_gv_uNCOLLECTIBLE, 1, 0, null, "", "Assets\\Textures\\wireframe-zerg-corruptor.dds", SoundLink("Corruptor_What", 0));
    lib1_gf_DefineCardUnit(lv_id, "Corruptor", 1);
    lib1_gf_AddRushtoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNCOLLECTIBLE, lib1_gv_zERG, "Ultralisk Spawn", "\xE9\x9B\xB7\xE5\x85\xBD\xE5\x8D\xB5", lib1_gv_aGGRESSIVE, lib1_gv_sPAWN, lib1_gv_uNCOLLECTIBLE, 1, 1, null, "", "Assets\\Textures\\wireframe-zerg-ultralisk.dds", SoundLink("Ultralisk_Attack", 0));
    lib1_gf_DefineCardUnit(lv_id, "Ultralisk", 1);
    lib1_gf_AddRushtoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNCOLLECTIBLE, lib1_gv_zERG, "Brood Lord Spawn", "\xE5\xB7\xA2\xE8\x99\xAB\xE9\xA2\x86\xE4\xB8\xBB\xE5\x8D\xB5", lib1_gv_aGGRESSIVE, lib1_gv_sPAWN, lib1_gv_uNCOLLECTIBLE, 1, 1, null, "", "Assets\\Textures\\wireframe-zerg-broodlord.dds", SoundLink("BroodLord_Ready", 0));
    lib1_gf_DefineCardUnit(lv_id, "BroodLord", 1);
    lib1_gf_AddRushtoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNCOLLECTIBLE, lib1_gv_zERG, "Larval Spawn", "\xE5\xB9\xBC\xE8\x99\xAB\xE7\x9A\x84\xE5\x8D\xB5", lib1_gv_aGGRESSIVE, lib1_gv_sPAWN, lib1_gv_uNCOLLECTIBLE, 1, 0, null, "", "Assets\\Textures\\wireframe-zerg-larva.dds", SoundLink("Larva_What", 0));
    lib1_gf_AddRushtoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNCOLLECTIBLE, lib1_gv_zERG, "Zagara's Spawn", "\xE6\x89\x8E\xE5\x8A\xA0\xE6\x8B\x89\xE7\x9A\x84\xE5\x8D\xB5", lib1_gv_aGGRESSIVE, lib1_gv_sPAWN, lib1_gv_uNCOLLECTIBLE, 1, 0, null, "", "Assets\\Textures\\wireframe-zerg-larvalqueen.dds", SoundLink("Larva_What", 0));
    lib1_gf_AddRushtoCardDefinition(lv_id);
    lib1_gf_AddHeroictoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNCOLLECTIBLE, lib1_gv_zERG, "Swarm Them", "\xE8\x9C\x82\xE7\xBE\xA4", lib1_gv_aCTION, lib1_gv_hIVE_MIND, lib1_gv_uNCOLLECTIBLE, 0, 0, null, "\xE9\x99\xA4\xE4\xBA\x86\xE5\x87\xAF\xE4\xB8\xBD\xE7\x94\x98\xE5\x92\x8C\xE8\x99\xAB\xE7\x8E\x8B\xE5\xA4\x96\xE4\xBD\xA0\xE7\x9A\x84\xE6\x89\x80\xE6\x9C\x89\xE5\x8D\x95\xE4\xBD\x8D\xE5\x8F\x98\xE6\x88\x90\xE8\xBF\x9B\xE6\x94\xBB\xE5\x8D\x95\xE4\xBD\x8D\xE3\x80\x82", "Assets\\Textures\\btn-upgrade-zerg-missileattacks-level2.dds", SoundLink("AIComm_Zerg_AttackCautious", 3));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_BUFF_UNITS, lib1_gt_EffectSwarmThemHiveMind);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNCOLLECTIBLE, lib1_gv_zERG, "Defend the Hive", "\xE9\x98\xB2\xE5\x8D\xAB\xE5\xB7\xA2\xE7\xBE\xA4", lib1_gv_aCTION, lib1_gv_hIVE_MIND, lib1_gv_uNCOLLECTIBLE, 0, 0, null, "\xE9\x99\xA4\xE4\xBA\x86\xE5\x87\xAF\xE4\xB8\xBD\xE7\x94\x98\xE5\x92\x8C\xE8\x99\xAB\xE7\x8E\x8B\xE5\xA4\x96\xE4\xBD\xA0\xE7\x9A\x84\xE6\x89\x80\xE6\x9C\x89\xE5\x8D\x95\xE4\xBD\x8D\xE5\x8F\x98\xE6\x88\x90\xE9\x98\xB2\xE5\xBE\xA1\xE5\x8D\x95\xE4\xBD\x8D\xE3\x80\x82", "Assets\\Textures\\btn-upgrade-zerg-groundcarapace-level2.dds", SoundLink("AIComm_Zerg_DefendArea", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_BUFF_UNITS, lib1_gt_EffectDefendtheHiveHiveMind);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNCOLLECTIBLE, lib1_gv_zERG, "Set an Ambush", "\xE5\xB8\x83\xE7\xBD\xAE\xE5\x9F\x8B\xE4\xBC\x8F", lib1_gv_aCTION, lib1_gv_hIVE_MIND, lib1_gv_uNCOLLECTIBLE, 0, 0, null, "\xE6\x9C\xAC\xE5\x9B\x9E\xE5\x90\x88\xE5\x86\x85\xE4\xBD\xA0\xE5\x8F\xAC\xE5\x94\xA4\xE7\x9A\x84\xE7\x8B\x97,\xE6\xAF\x92\xE7\x88\x86,\xE8\x9F\x91\xE8\x9E\x82,\xE5\x88\xBA\xE8\x9B\x87,\xE7\x89\x9B\xE5\xB0\x86\xE4\xBC\x9A\xE4\xBB\x8E\xE5\x9C\xB0\xE5\x9B\xBE\xE4\xB8\xAD\xE9\x97\xB4\xE5\x87\xBA\xE5\x9C\xB0\xE3\x80\x82", "Assets\\Textures\\btn-ability-zerg-deeptunnel.dds", SoundLink("AIComm_Zerg_DefendArea", 1));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DEFAULT, lib1_gt_EffectSetanAmbushHiveMind);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNCOLLECTIBLE, lib1_gv_pROTOSS, "Warp In", "\xE6\x8A\x98\xE8\xB7\x83", lib1_gv_aGGRESSIVE, "Warp", lib1_gv_uNCOLLECTIBLE, 1, 0, null, "", "Assets\\Textures\\btn-ability-spearofadun-massrecall.dds", SoundLink("WarpGate_TrainStart", 0));
    lib1_gf_AddRushtoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNCOLLECTIBLE, lib1_gv_pROTOSS, "Mothership", "\xE6\xAF\x8D\xE8\x88\xB0", lib1_gv_aCTION, "", lib1_gv_uNIQUE, 7, 3, null, "\xE8\xAE\xA9\xE4\xBD\xA0\xE7\x9A\x84\xE8\x90\x9D\xE8\x8E\x89\xE5\x8F\x98\xE6\x88\x90\xE5\xA6\x88\xE5\xA6\x88\xE3\x80\x82\xE8\xBF\x99\xE5\xBC\xA0\xE7\x89\x8C\xE6\xAF\x8F\xE5\x9B\x9E\xE5\x90\x88\xE5\x87\x8F\xE5\xB0\x91 1 \xE7\x82\xB9\xE7\x9F\xBF\xE7\x89\xA9\xE8\xB4\xB9\xE7\x94\xA8\xE3\x80\x82\xE8\xA6\x81\xE6\x98\xAF\xE4\xBD\xA0\xE6\x9C\x80\xE5\x90\x8E\xE4\xB8\x80\xE4\xB8\xAA\xE8\x90\x9D\xE8\x8E\x89\xE8\x88\xB9\xE8\xA2\xAB\xE6\xAF\x81\xEF\xBC\x8C\xE9\x82\xA3\xE4\xB9\x88\xE4\xB8\xA2\xE5\xBC\x83\xE8\xBF\x99\xE5\xBC\xA0\xE7\x89\x8C\xE3\x80\x82", "Assets\\Textures\\btn-unit-protoss-mothership.dds", SoundLink("Mothership_What", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DEFAULT, lib1_gt_EffectMothership);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_CoreUncollectable_Init () {
    lib1_gt_CoreUncollectable = TriggerCreate("lib1_gt_CoreUncollectable_Func");
    TriggerAddEventMapInit(lib1_gt_CoreUncollectable);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Bunker
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectBunker_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_BuildStructure(lv_player, lv_card_id, "SCV", AbilityCommand("TerranBuild", 6), "Bunker", true, -1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectBunker_Init () {
    lib1_gt_EffectBunker = TriggerCreate("lib1_gt_EffectBunker_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Twin Turrets
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectTwinTurrets_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_BuildStructure(lv_player, lv_card_id, "SCV", AbilityCommand("TerranBuild", 5), "MissileTurret", true, 1.0);
    lib1_gf_BuildStructure(lv_player, lv_card_id, "SCV", AbilityCommand("TerranBuild", 5), "MissileTurret", true, 1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectTwinTurrets_Init () {
    lib1_gt_EffectTwinTurrets = TriggerCreate("lib1_gt_EffectTwinTurrets_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Barracks
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectBarracks_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_BuildStructure(lv_player, lv_card_id, "SCV", AbilityCommand("TerranBuild", 3), "Barracks", false, -1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectBarracks_Init () {
    lib1_gt_EffectBarracks = TriggerCreate("lib1_gt_EffectBarracks_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Factory
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectFactory_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_BuildStructure(lv_player, lv_card_id, "SCV", AbilityCommand("TerranBuild", 10), "Factory", false, -1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectFactory_Init () {
    lib1_gt_EffectFactory = TriggerCreate("lib1_gt_EffectFactory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Engineering Bay
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectEngineeringBay_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_BuildStructure(lv_player, lv_card_id, "SCV", AbilityCommand("TerranBuild", 4), "EngineeringBay", false, -1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectEngineeringBay_Init () {
    lib1_gt_EffectEngineeringBay = TriggerCreate("lib1_gt_EffectEngineeringBay_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Yamato Cannon
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectYamatoCannon_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    UnitCreate(1, "Hyperion", 0, lv_player, RegionRandomPoint(lib1_gv_player[lv_player].lv_spawn_region), libNtve_gf_RandomAngle());
    UnitBehaviorAdd(UnitLastCreated(), "Caster", UnitLastCreated(), 1);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("YamatoGunHyperion", 0), lib1_gf_ToughestEnemyTargetForHardRemoval(lv_player, UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))))), c_orderQueueReplace);
    lib1_gf_IssueLeaveOrders(UnitLastCreated(), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectYamatoCannon_Init () {
    lib1_gt_EffectYamatoCannon = TriggerCreate("lib1_gt_EffectYamatoCannon_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Scanner Sweep
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectScannerSweep_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    if ((PlayerGroupHasPlayer(lib1_gv_team[0], lv_player) == true)) {
        UnitIssueOrder(lib1_gv_keystone[0], OrderTargetingPoint(AbilityCommand("ScannerSweep", 0), UnitGetPosition(lib1_gv_keystone[0])), c_orderQueueAddToEnd);
    }
    else {
        UnitIssueOrder(lib1_gv_keystone[1], OrderTargetingPoint(AbilityCommand("ScannerSweep", 0), UnitGetPosition(lib1_gv_keystone[1])), c_orderQueueAddToEnd);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectScannerSweep_Init () {
    lib1_gt_EffectScannerSweep = TriggerCreate("lib1_gt_EffectScannerSweep_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Seeker Missiles
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectSeekerMissiles_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    int lv_count;

    // Automatic Variable Declarations
    const int autoD89165B0_ae = 6;
    const int autoD89165B0_ai = 1;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lv_count = 1;
    for ( ; ( (autoD89165B0_ai >= 0 && lv_count <= autoD89165B0_ae) || (autoD89165B0_ai < 0 && lv_count >= autoD89165B0_ae) ) ; lv_count += autoD89165B0_ai ) {
        UnitCreate(1, "Raven", 0, lv_player, RegionRandomPoint(lib1_gv_player[lv_player].lv_spawn_region), libNtve_gf_RandomAngle());
        UnitBehaviorAdd(UnitLastCreated(), "Caster", UnitLastCreated(), 1);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("SeekerMissile", 0), lib1_gf_BestTargetforSplash(lv_player, UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 1.5, false)), c_orderQueueReplace);
        lib1_gf_IssueLeaveOrders(UnitLastCreated(), c_orderQueueAddToEnd);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectSeekerMissiles_Init () {
    lib1_gt_EffectSeekerMissiles = TriggerCreate("lib1_gt_EffectSeekerMissiles_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Stimpack
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectStimpack_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto104576C5_g;
    int auto104576C5_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto104576C5_g = UnitGroup(null, lv_player, RegionEntireMap(), UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto104576C5_u = UnitGroupCount(auto104576C5_g, c_unitCountAll);
    for (;; auto104576C5_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto104576C5_g, auto104576C5_u);
        if (lv_unit == null) { break; }
        UnitDamage(lv_unit, "DummyDamage", lv_unit, (UnitGetPropertyFixed(lv_unit, c_unitPropLife, c_unitPropCurrent) * 0.1));
        UnitBehaviorAdd(lv_unit, "Stimpack", lv_unit, 1);
        UnitBehaviorRemove(lv_unit, "WaitingToMoveOut", 1);
        UnitBehaviorRemove(lv_unit, "Waiting1Turn", 1);
        UnitBehaviorRemove(lv_unit, "Waiting2Turns", 1);
        if (((UnitGroupHasUnit(lib1_gv_ready_units, lv_unit) == true) || (UnitGroupHasUnit(lib1_gv_one_turn_wait_units, lv_unit) == true) || (UnitGroupHasUnit(lib1_gv_two_turn_wait_units, lv_unit) == true))) {
            UnitGroupRemove(lib1_gv_ready_units, lv_unit);
            UnitGroupRemove(lib1_gv_one_turn_wait_units, lv_unit);
            UnitGroupRemove(lib1_gv_two_turn_wait_units, lv_unit);
            lib1_gf_IssueDefaultOrders(lv_unit);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectStimpack_Init () {
    lib1_gt_EffectStimpack = TriggerCreate("lib1_gt_EffectStimpack_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Siege Tanks
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectSiegeTanks_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto5C726A4A_g;
    int auto5C726A4A_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto5C726A4A_g = lv_units_created;
    auto5C726A4A_u = UnitGroupCount(auto5C726A4A_g, c_unitCountAll);
    for (;; auto5C726A4A_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto5C726A4A_g, auto5C726A4A_u);
        if (lv_unit == null) { break; }
        UnitIssueOrder(lv_unit, OrderSetAutoCast(AbilityCommand("SiegeMode", 0), true), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectSiegeTanks_Init () {
    lib1_gt_EffectSiegeTanks = TriggerCreate("lib1_gt_EffectSiegeTanks_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Ghost Operatives
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectGhostOperatives_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup autoA1A0433F_g;
    int autoA1A0433F_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    autoA1A0433F_g = lv_units_created;
    autoA1A0433F_u = UnitGroupCount(autoA1A0433F_g, c_unitCountAll);
    for (;; autoA1A0433F_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoA1A0433F_g, autoA1A0433F_u);
        if (lv_unit == null) { break; }
        UnitIssueOrder(lv_unit, OrderSetAutoCast(AbilityCommand("ChannelSnipe", 0), true), c_orderQueueReplace);
        UnitIssueOrder(lv_unit, OrderSetAutoCast(AbilityCommand("EMP", 0), true), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectGhostOperatives_Init () {
    lib1_gt_EffectGhostOperatives = TriggerCreate("lib1_gt_EffectGhostOperatives_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Repair Crew
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectRepairCrew_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto8D1E476D_g;
    int auto8D1E476D_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto8D1E476D_g = lv_units_created;
    auto8D1E476D_u = UnitGroupCount(auto8D1E476D_g, c_unitCountAll);
    for (;; auto8D1E476D_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto8D1E476D_g, auto8D1E476D_u);
        if (lv_unit == null) { break; }
        UnitIssueOrder(lv_unit, OrderSetAutoCast(AbilityCommand("Repair", 0), true), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectRepairCrew_Init () {
    lib1_gt_EffectRepairCrew = TriggerCreate("lib1_gt_EffectRepairCrew_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Medivac Runners
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectMedivacRunners_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;
    int lv_unit_count;

    // Automatic Variable Declarations
    unitgroup autoC9552655_g;
    int autoC9552655_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    autoC9552655_g = lv_units_created;
    autoC9552655_u = UnitGroupCount(autoC9552655_g, c_unitCountAll);
    for (;; autoC9552655_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoC9552655_g, autoC9552655_u);
        if (lv_unit == null) { break; }
        UnitBehaviorRemove(lv_unit, "WaitingToMoveOut", 1);
        lib1_gf_CreateCargoUnitsWithStatTracking(8, "Marine", lv_unit);
        UnitGroupAddUnitGroup(lib1_gv_units_from_card[lv_card_id], UnitCargoLastCreatedGroup());
        UnitGroupAddUnitGroup(lib1_gv_defensive_units, UnitCargoLastCreatedGroup());
        UnitBehaviorAdd(lv_unit, "WaitingToMoveOut", lv_unit, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectMedivacRunners_Init () {
    lib1_gt_EffectMedivacRunners = TriggerCreate("lib1_gt_EffectMedivacRunners_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Raven Support
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectRavenSupport_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup autoE45C8F9E_g;
    int autoE45C8F9E_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    autoE45C8F9E_g = lv_units_created;
    autoE45C8F9E_u = UnitGroupCount(autoE45C8F9E_g, c_unitCountAll);
    for (;; autoE45C8F9E_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoE45C8F9E_g, autoE45C8F9E_u);
        if (lv_unit == null) { break; }
        UnitIssueOrder(lv_unit, OrderSetAutoCast(AbilityCommand("RavenShredderMissile", 0), true), c_orderQueueReplace);
        UnitIssueOrder(lv_unit, OrderSetAutoCast(AbilityCommand("RavenRepairDrone", 0), true), c_orderQueueReplace);
        UnitIssueOrder(lv_unit, OrderSetAutoCast(AbilityCommand("RavenScramblerMissile", 0), true), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectRavenSupport_Init () {
    lib1_gt_EffectRavenSupport = TriggerCreate("lib1_gt_EffectRavenSupport_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Supply Depots
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectSupplyDepots_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_BuildStructure(lv_player, lv_card_id, "SCV", AbilityCommand("TerranBuild", 1), "SupplyDepot", false, 1.0);
    lib1_gf_BuildStructure(lv_player, lv_card_id, "SCV", AbilityCommand("TerranBuild", 1), "SupplyDepot", false, 1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectSupplyDepots_Init () {
    lib1_gt_EffectSupplyDepots = TriggerCreate("lib1_gt_EffectSupplyDepots_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Sensor Tower
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectSensorTower_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_BuildStructure(lv_player, lv_card_id, "SCV", AbilityCommand("TerranBuild", 8), "SensorTower", false, -1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectSensorTower_Init () {
    lib1_gt_EffectSensorTower = TriggerCreate("lib1_gt_EffectSensorTower_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Refinery
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectRefinery_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_BuildStructure(lv_player, lv_card_id, "SCV", AbilityCommand("TerranBuild", 2), "Refinery", false, -1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectRefinery_Init () {
    lib1_gt_EffectRefinery = TriggerCreate("lib1_gt_EffectRefinery_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Starport
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectStarport_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_BuildStructure(lv_player, lv_card_id, "SCV", AbilityCommand("TerranBuild", 11), "Starport", false, -1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectStarport_Init () {
    lib1_gt_EffectStarport = TriggerCreate("lib1_gt_EffectStarport_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Strike Cannons
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectStrikeCannons_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    UnitCreate(1, "Thor", 0, lv_player, RegionRandomPoint(lib1_gv_player[lv_player].lv_spawn_region), libNtve_gf_RandomAngle());
    UnitBehaviorAdd(UnitLastCreated(), "Caster", UnitLastCreated(), 1);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("250mmStrikeCannons", 0), lib1_gf_MostExpensiveStructureforRemoval(lv_player)), c_orderQueueReplace);
    lib1_gf_IssueLeaveOrders(UnitLastCreated(), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectStrikeCannons_Init () {
    lib1_gt_EffectStrikeCannons = TriggerCreate("lib1_gt_EffectStrikeCannons_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Reactor
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectReactor_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unitgroup lv_possible_targets;
    unitgroup lv_chosen_targets;
    unit lv_structure;
    int lv_i;
    int lv_count;

    // Automatic Variable Declarations
    unitgroup autoFB4CA16F_g;
    int autoFB4CA16F_u;
    unitgroup autoE8BB049C_g;
    int autoE8BB049C_u;
    unitgroup autoA8F0F207_g;
    int autoA8F0F207_u;
    unitgroup auto90FD01CF_g;
    int auto90FD01CF_u;
    unitgroup auto1DA749BD_g;
    int auto1DA749BD_u;
    int autoCE7B8C3B_ae;
    const int autoCE7B8C3B_ai = 1;
    unitgroup autoC6E8FDC6_g;
    int autoC6E8FDC6_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();
    lv_possible_targets = UnitGroupEmpty();
    lv_chosen_targets = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    autoFB4CA16F_g = UnitGroup("Barracks", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoFB4CA16F_u = UnitGroupCount(autoFB4CA16F_g, c_unitCountAll);
    for (;; autoFB4CA16F_u -= 1) {
        lv_structure = UnitGroupUnitFromEnd(autoFB4CA16F_g, autoFB4CA16F_u);
        if (lv_structure == null) { break; }
        if ((UnitAddOnChild(lv_structure, 0) == null)) {
            UnitGroupAdd(lv_possible_targets, lv_structure);
        }

    }
    autoE8BB049C_g = UnitGroup("Factory", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE8BB049C_u = UnitGroupCount(autoE8BB049C_g, c_unitCountAll);
    for (;; autoE8BB049C_u -= 1) {
        lv_structure = UnitGroupUnitFromEnd(autoE8BB049C_g, autoE8BB049C_u);
        if (lv_structure == null) { break; }
        if ((UnitAddOnChild(lv_structure, 0) == null)) {
            UnitGroupAdd(lv_possible_targets, lv_structure);
        }

    }
    autoA8F0F207_g = UnitGroup("FactoryVulture", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA8F0F207_u = UnitGroupCount(autoA8F0F207_g, c_unitCountAll);
    for (;; autoA8F0F207_u -= 1) {
        lv_structure = UnitGroupUnitFromEnd(autoA8F0F207_g, autoA8F0F207_u);
        if (lv_structure == null) { break; }
        if ((UnitAddOnChild(lv_structure, 0) == null)) {
            UnitGroupAdd(lv_possible_targets, lv_structure);
        }

    }
    auto90FD01CF_g = UnitGroup("Starport", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto90FD01CF_u = UnitGroupCount(auto90FD01CF_g, c_unitCountAll);
    for (;; auto90FD01CF_u -= 1) {
        lv_structure = UnitGroupUnitFromEnd(auto90FD01CF_g, auto90FD01CF_u);
        if (lv_structure == null) { break; }
        if ((UnitAddOnChild(lv_structure, 1) == null)) {
            UnitGroupAdd(lv_possible_targets, lv_structure);
        }

    }
    auto1DA749BD_g = UnitGroup("StarportSecretHangar", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1DA749BD_u = UnitGroupCount(auto1DA749BD_g, c_unitCountAll);
    for (;; auto1DA749BD_u -= 1) {
        lv_structure = UnitGroupUnitFromEnd(auto1DA749BD_g, auto1DA749BD_u);
        if (lv_structure == null) { break; }
        if ((UnitAddOnChild(lv_structure, 1) == null)) {
            UnitGroupAdd(lv_possible_targets, lv_structure);
        }

    }
    lv_count = MinI(UnitGroupCount(lv_possible_targets, c_unitCountAlive), 2);
    autoCE7B8C3B_ae = lv_count;
    lv_i = 1;
    for ( ; ( (autoCE7B8C3B_ai >= 0 && lv_i <= autoCE7B8C3B_ae) || (autoCE7B8C3B_ai < 0 && lv_i >= autoCE7B8C3B_ae) ) ; lv_i += autoCE7B8C3B_ai ) {
        lv_structure = UnitGroupRandomUnit(lv_possible_targets, c_unitCountAlive);
        UnitGroupAdd(lv_chosen_targets, lv_structure);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Reactor", c_unitCreateIgnorePlacement, lv_player, PointWithOffset(UnitGetPosition(lv_structure), 2.5, -0.5));
        UnitSetCustomValue(lv_structure, 0, (UnitGetCustomValue(lv_structure, 0) + 4.0));
        UnitGroupRemove(lv_possible_targets, lv_structure);
    }
    autoC6E8FDC6_g = lv_chosen_targets;
    autoC6E8FDC6_u = UnitGroupCount(autoC6E8FDC6_g, c_unitCountAll);
    for (;; autoC6E8FDC6_u -= 1) {
        lv_structure = UnitGroupUnitFromEnd(autoC6E8FDC6_g, autoC6E8FDC6_u);
        if (lv_structure == null) { break; }
        Wait(1.0, c_timeGame);
        UnitIssueOrder(lv_structure, Order(AbilityCommand("que5", 0)), c_orderQueueReplace);
        UnitIssueOrder(lv_structure, Order(AbilityCommand("que5", 0)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectReactor_Init () {
    lib1_gt_EffectReactor = TriggerCreate("lib1_gt_EffectReactor_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Steady Targeting
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectSteadyTargeting_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;
    int lv_count;

    // Automatic Variable Declarations
    const int auto6A368F36_ae = 2;
    const int auto6A368F36_ai = 1;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lv_count = 1;
    for ( ; ( (auto6A368F36_ai >= 0 && lv_count <= auto6A368F36_ae) || (auto6A368F36_ai < 0 && lv_count >= auto6A368F36_ae) ) ; lv_count += auto6A368F36_ai ) {
        UnitCreate(1, "Ghost", 0, lv_player, RegionRandomPoint(lib1_gv_player[lv_player].lv_spawn_region), libNtve_gf_RandomAngle());
        UnitBehaviorAdd(UnitLastCreated(), "Caster", UnitLastCreated(), 1);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("Snipe", 0), lib1_gf_ToughestEnemyTargetForHardRemoval(lv_player, UnitFilter((1 << c_targetFilterBiological) | (1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))))), c_orderQueueReplace);
        lib1_gf_IssueLeaveOrders(UnitLastCreated(), c_orderQueueAddToEnd);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectSteadyTargeting_Init () {
    lib1_gt_EffectSteadyTargeting = TriggerCreate("lib1_gt_EffectSteadyTargeting_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Doom Drop
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectDoomDrop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup autoBB853858_g;
    int autoBB853858_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    autoBB853858_g = lv_units_created;
    autoBB853858_u = UnitGroupCount(autoBB853858_g, c_unitCountAll);
    for (;; autoBB853858_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoBB853858_g, autoBB853858_u);
        if (lv_unit == null) { break; }
        lib1_gf_CreateCargoUnitsWithStatTracking(2, "Marauder", lv_unit);
        UnitGroupAddUnitGroup(lib1_gv_units_from_card[lv_card_id], UnitCargoLastCreatedGroup());
        UnitGroupAddUnitGroup(lib1_gv_aggressive_units, UnitCargoLastCreatedGroup());
        lib1_gf_CreateCargoUnitsWithStatTracking(4, "Marine", lv_unit);
        UnitGroupAddUnitGroup(lib1_gv_units_from_card[lv_card_id], UnitCargoLastCreatedGroup());
        UnitGroupAddUnitGroup(lib1_gv_aggressive_units, UnitCargoLastCreatedGroup());
        UnitIssueOrder(lv_unit, OrderTargetingPoint(AbilityCommand("MedivacTransport", 2), RegionRandomPoint(lib1_gv_player[lv_player].lv_far_drop_region)), c_orderQueueAddToFront);
        UnitIssueOrder(lv_unit, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(lib1_gv_player[lv_player].lv_close_drop_region)), c_orderQueueAddToFront);
        UnitIssueOrder(lv_unit, Order(AbilityCommand("MedivacSpeedBoost", 0)), c_orderQueueAddToFront);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectDoomDrop_Init () {
    lib1_gt_EffectDoomDrop = TriggerCreate("lib1_gt_EffectDoomDrop_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Perched Artillery Cargo
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectPerchedArtilleryCargo_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto6EEA7175_g;
    int auto6EEA7175_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto6EEA7175_g = lv_units_created;
    auto6EEA7175_u = UnitGroupCount(auto6EEA7175_g, c_unitCountAll);
    for (;; auto6EEA7175_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto6EEA7175_g, auto6EEA7175_u);
        if (lv_unit == null) { break; }
        lib1_gf_CreateCargoUnitsWithStatTracking(1, "SiegeTank", lv_unit);
        UnitGroupAddUnitGroup(lib1_gv_units_from_card[lv_card_id], UnitCargoLastCreatedGroup());
        UnitGroupAddUnitGroup(lib1_gv_defensive_units, UnitCargoLastCreatedGroup());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectPerchedArtilleryCargo_Init () {
    lib1_gt_EffectPerchedArtilleryCargo = TriggerCreate("lib1_gt_EffectPerchedArtilleryCargo_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Perched Artillery Order
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectPerchedArtilleryOrder_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto6603DDFF_g;
    int auto6603DDFF_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto6603DDFF_g = lv_units_created;
    auto6603DDFF_u = UnitGroupCount(auto6603DDFF_g, c_unitCountAll);
    for (;; auto6603DDFF_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto6603DDFF_g, auto6603DDFF_u);
        if (lv_unit == null) { break; }
        UnitIssueOrder(lv_unit, OrderTargetingPoint(AbilityCommand("MedivacTransport", 2), RegionRandomPoint(RegionFromId(18))), c_orderQueueReplace);
        UnitIssueOrder(lv_unit, Order(AbilityCommand("MedivacSpeedBoost", 0)), c_orderQueueAddToFront);
        lib1_gf_IssueLeaveOrders(lv_unit, c_orderQueueAddToEnd);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectPerchedArtilleryOrder_Init () {
    lib1_gt_EffectPerchedArtilleryOrder = TriggerCreate("lib1_gt_EffectPerchedArtilleryOrder_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Entrench
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectEntrench_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_BuildStructure(lv_player, lv_card_id, "SCV", AbilityCommand("TerranBuild", 6), "Bunker", true, 2.0);
    lib1_gf_BuildStructure(lv_player, lv_card_id, "SCV", AbilityCommand("TerranBuild", 5), "MissileTurret", true, 1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectEntrench_Init () {
    lib1_gt_EffectEntrench = TriggerCreate("lib1_gt_EffectEntrench_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Fusion Core
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectFusionCore_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_BuildStructure(lv_player, lv_card_id, "SCV", AbilityCommand("TerranBuild", 15), "FusionCore", false, -1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectFusionCore_Init () {
    lib1_gt_EffectFusionCore = TriggerCreate("lib1_gt_EffectFusionCore_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Armory
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectArmory_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_BuildStructure(lv_player, lv_card_id, "SCV", AbilityCommand("TerranBuild", 13), "Armory", false, -1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectArmory_Init () {
    lib1_gt_EffectArmory = TriggerCreate("lib1_gt_EffectArmory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Reconstruction
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectReconstruction_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    int lv_count;
    int lv_return_index;

    // Automatic Variable Declarations
    const int auto8C998238_ae = 2;
    const int auto8C998238_ai = 1;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lv_count = 1;
    for ( ; ( (auto8C998238_ai >= 0 && lv_count <= auto8C998238_ae) || (auto8C998238_ai < 0 && lv_count >= auto8C998238_ae) ) ; lv_count += auto8C998238_ai ) {
        lv_return_index = lib1_gf_RandomDiscardCardWithType(lv_player, lib1_gv_sTRUCTURE);
        if ((lv_return_index >= 0)) {
            lib1_gf_ReturnCardFromDiscardtoHand(lv_player, lv_return_index);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectReconstruction_Init () {
    lib1_gt_EffectReconstruction = TriggerCreate("lib1_gt_EffectReconstruction_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Tactical Nuke
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectTacticalNuke_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    Wait(1.8, c_timeGame);
    UnitCreate(1, "Ghost", 0, lv_player, RegionRandomPoint(lib1_gv_player[lv_player].lv_spawn_region), libNtve_gf_RandomAngle());
    UnitBehaviorAdd(UnitLastCreated(), "Caster", UnitLastCreated(), 1);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("TacNukeStrike", 0), RegionRandomPoint(lib1_gv_player[lv_player].lv_aoe_target_region)), c_orderQueueReplace);
    lib1_gf_IssueLeaveOrders(UnitLastCreated(), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectTacticalNuke_Init () {
    lib1_gt_EffectTacticalNuke = TriggerCreate("lib1_gt_EffectTacticalNuke_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Tech Lab
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectTechLab_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unitgroup lv_possible_targets;
    unitgroup lv_chosen_targets;
    unit lv_structure;
    int lv_i;
    int lv_count;

    // Automatic Variable Declarations
    unitgroup auto0A6874EB_g;
    int auto0A6874EB_u;
    unitgroup autoC05DA00B_g;
    int autoC05DA00B_u;
    unitgroup auto77D79817_g;
    int auto77D79817_u;
    unitgroup auto41045F99_g;
    int auto41045F99_u;
    unitgroup autoAB9CEB7E_g;
    int autoAB9CEB7E_u;
    int auto76E33FC9_ae;
    const int auto76E33FC9_ai = 1;
    unitgroup autoDC0E6F30_g;
    int autoDC0E6F30_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();
    lv_possible_targets = UnitGroupEmpty();
    lv_chosen_targets = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto0A6874EB_g = UnitGroup("Barracks", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0A6874EB_u = UnitGroupCount(auto0A6874EB_g, c_unitCountAll);
    for (;; auto0A6874EB_u -= 1) {
        lv_structure = UnitGroupUnitFromEnd(auto0A6874EB_g, auto0A6874EB_u);
        if (lv_structure == null) { break; }
        if ((UnitAddOnChild(lv_structure, 0) == null)) {
            UnitGroupAdd(lv_possible_targets, lv_structure);
        }

    }
    autoC05DA00B_g = UnitGroup("Factory", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC05DA00B_u = UnitGroupCount(autoC05DA00B_g, c_unitCountAll);
    for (;; autoC05DA00B_u -= 1) {
        lv_structure = UnitGroupUnitFromEnd(autoC05DA00B_g, autoC05DA00B_u);
        if (lv_structure == null) { break; }
        if ((UnitAddOnChild(lv_structure, 0) == null)) {
            UnitGroupAdd(lv_possible_targets, lv_structure);
        }

    }
    auto77D79817_g = UnitGroup("FactoryVulture", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto77D79817_u = UnitGroupCount(auto77D79817_g, c_unitCountAll);
    for (;; auto77D79817_u -= 1) {
        lv_structure = UnitGroupUnitFromEnd(auto77D79817_g, auto77D79817_u);
        if (lv_structure == null) { break; }
        if ((UnitAddOnChild(lv_structure, 0) == null)) {
            UnitGroupAdd(lv_possible_targets, lv_structure);
        }

    }
    auto41045F99_g = UnitGroup("Starport", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto41045F99_u = UnitGroupCount(auto41045F99_g, c_unitCountAll);
    for (;; auto41045F99_u -= 1) {
        lv_structure = UnitGroupUnitFromEnd(auto41045F99_g, auto41045F99_u);
        if (lv_structure == null) { break; }
        if ((UnitAddOnChild(lv_structure, 1) == null)) {
            UnitGroupAdd(lv_possible_targets, lv_structure);
        }

    }
    autoAB9CEB7E_g = UnitGroup("StarportSecretHangar", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoAB9CEB7E_u = UnitGroupCount(autoAB9CEB7E_g, c_unitCountAll);
    for (;; autoAB9CEB7E_u -= 1) {
        lv_structure = UnitGroupUnitFromEnd(autoAB9CEB7E_g, autoAB9CEB7E_u);
        if (lv_structure == null) { break; }
        if ((UnitAddOnChild(lv_structure, 1) == null)) {
            UnitGroupAdd(lv_possible_targets, lv_structure);
        }

    }
    lv_count = MinI(UnitGroupCount(lv_possible_targets, c_unitCountAlive), 2);
    auto76E33FC9_ae = lv_count;
    lv_i = 1;
    for ( ; ( (auto76E33FC9_ai >= 0 && lv_i <= auto76E33FC9_ae) || (auto76E33FC9_ai < 0 && lv_i >= auto76E33FC9_ae) ) ; lv_i += auto76E33FC9_ai ) {
        lv_structure = UnitGroupRandomUnit(lv_possible_targets, c_unitCountAlive);
        UnitGroupAdd(lv_chosen_targets, lv_structure);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "TechLab", c_unitCreateIgnorePlacement, lv_player, PointWithOffset(UnitGetPosition(lv_structure), 2.5, -0.5));
        UnitSetCustomValue(lv_structure, 0, (UnitGetCustomValue(lv_structure, 0) + 3.0));
        UnitGroupRemove(lv_possible_targets, lv_structure);
    }
    autoDC0E6F30_g = lv_chosen_targets;
    autoDC0E6F30_u = UnitGroupCount(autoDC0E6F30_g, c_unitCountAll);
    for (;; autoDC0E6F30_u -= 1) {
        lv_structure = UnitGroupUnitFromEnd(autoDC0E6F30_g, autoDC0E6F30_u);
        if (lv_structure == null) { break; }
        Wait(1.0, c_timeGame);
        UnitIssueOrder(lv_structure, Order(AbilityCommand("que5", 0)), c_orderQueueReplace);
        UnitIssueOrder(lv_structure, Order(AbilityCommand("que5", 0)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectTechLab_Init () {
    lib1_gt_EffectTechLab = TriggerCreate("lib1_gt_EffectTechLab_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Hyperion
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectHyperion_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;
    unit lv_target;

    // Automatic Variable Declarations
    unitgroup auto34CCDE9F_g;
    int auto34CCDE9F_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto34CCDE9F_g = lv_units_created;
    auto34CCDE9F_u = UnitGroupCount(auto34CCDE9F_g, c_unitCountAll);
    for (;; auto34CCDE9F_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto34CCDE9F_g, auto34CCDE9F_u);
        if (lv_unit == null) { break; }
        lv_target = lib1_gf_ToughestEnemyTargetForHardRemoval(lv_player, UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))));
        if ((lv_target != null)) {
            if ((UnitHasBehavior2(lv_unit, "WaitingToMoveOut") == true)) {
                UnitBehaviorRemove(lv_unit, "WaitingToMoveOut", c_unitBehaviorCountAll);
                UnitBehaviorAdd(lv_unit, "CasterWaitingToMoveOut", lv_unit, 1);
            }

            UnitIssueOrder(lv_unit, OrderTargetingUnit(AbilityCommand("YamatoGunHyperion", 0), lv_target), c_orderQueueAddToFront);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectHyperion_Init () {
    lib1_gt_EffectHyperion = TriggerCreate("lib1_gt_EffectHyperion_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Jim Raynor
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectJimRaynor_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto0F3F571F_g;
    int auto0F3F571F_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto0F3F571F_g = lv_units_created;
    auto0F3F571F_u = UnitGroupCount(auto0F3F571F_g, c_unitCountAll);
    for (;; auto0F3F571F_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto0F3F571F_g, auto0F3F571F_u);
        if (lv_unit == null) { break; }
        if ((UnitGetType(lv_unit) == "Raynor")) {
            UnitBehaviorAdd(lv_unit, "RaynorsRevolution", lv_unit, 1);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectJimRaynor_Init () {
    lib1_gt_EffectJimRaynor = TriggerCreate("lib1_gt_EffectJimRaynor_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Nova
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectNova_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    int lv_nova_card_1;
    int lv_nova_card_2;
    int lv_nova_card_3;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    if ((lib1_gf_TopofHand(lv_player) < lib1_gf_HandLimit(lv_player))) {
        lv_nova_card_1 = RandomInt(lib1_gf_GetCardIDByName("Canister Rifle"), lib1_gf_GetCardIDByName("Vanish"));
        lv_nova_card_2 = RandomInt(lib1_gf_GetCardIDByName("Canister Rifle"), lib1_gf_GetCardIDByName("Vanish"));
        lv_nova_card_3 = RandomInt(lib1_gf_GetCardIDByName("Canister Rifle"), lib1_gf_GetCardIDByName("Vanish"));
        while ((lv_nova_card_2 == lv_nova_card_1)) {
            lv_nova_card_2 = RandomInt(lib1_gf_GetCardIDByName("Canister Rifle"), lib1_gf_GetCardIDByName("Vanish"));
        }
        while (((lv_nova_card_3 == lv_nova_card_1) || (lv_nova_card_3 == lv_nova_card_2))) {
            lv_nova_card_3 = RandomInt(lib1_gf_GetCardIDByName("Canister Rifle"), lib1_gf_GetCardIDByName("Vanish"));
        }
        lib1_gf_GenerateCardforHand(lv_player, lv_nova_card_1);
        lib1_gf_GenerateCardforHand(lv_player, lv_nova_card_2);
        lib1_gf_GenerateCardforHand(lv_player, lv_nova_card_3);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectNova_Init () {
    lib1_gt_EffectNova = TriggerCreate("lib1_gt_EffectNova_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Burrowed Ambush
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectBurrowedAmbush_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unitgroup lv_burrowed_units_created;
    unit lv_unit;
    unitgroup lv_behavior_group;
    bool lv_override;
    int lv_effect_index;

    // Automatic Variable Declarations
    const int auto35E9ABBC_ae = lib1_gv_eFFECT_QUEUE_LIMIT;
    const int auto35E9ABBC_ai = 1;
    unitgroup autoC5538DAD_g;
    int autoC5538DAD_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();
    lv_burrowed_units_created = UnitGroupEmpty();
    lv_behavior_group = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lv_effect_index = 0;
    for ( ; ( (auto35E9ABBC_ai >= 0 && lv_effect_index <= auto35E9ABBC_ae) || (auto35E9ABBC_ai < 0 && lv_effect_index >= auto35E9ABBC_ae) ) ; lv_effect_index += auto35E9ABBC_ai ) {
        if ((lib1_gv_effect_queue[lib1_gv_eF_BUFF_UNITS][lv_effect_index].lv_player == lv_player) && (lib1_gv_effect_queue[lib1_gv_eF_BUFF_UNITS][lv_effect_index].lv_effect == lib1_gt_EffectSetanAmbushHiveMind)) {
            lv_override = true;
        }

    }
    if ((lv_override == false)) {
        autoC5538DAD_g = lv_units_created;
        autoC5538DAD_u = UnitGroupCount(autoC5538DAD_g, c_unitCountAll);
        for (;; autoC5538DAD_u -= 1) {
            lv_unit = UnitGroupUnitFromEnd(autoC5538DAD_g, autoC5538DAD_u);
            if (lv_unit == null) { break; }
            lib1_gf_UnburrowSpawn(lv_player, lv_unit, lib1_gv_player[lv_player].lv_defense_region, true);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectBurrowedAmbush_Init () {
    lib1_gt_EffectBurrowedAmbush = TriggerCreate("lib1_gt_EffectBurrowedAmbush_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Spawning Pool
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectSpawningPool_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_BuildStructure(lv_player, lv_card_id, "Drone", AbilityCommand("ZergBuild", 3), "SpawningPool", false, -1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectSpawningPool_Init () {
    lib1_gt_EffectSpawningPool = TriggerCreate("lib1_gt_EffectSpawningPool_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Roach Warren
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectRoachWarren_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_BuildStructure(lv_player, lv_card_id, "Drone", AbilityCommand("ZergBuild", 13), "RoachWarren", false, -1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectRoachWarren_Init () {
    lib1_gt_EffectRoachWarren = TriggerCreate("lib1_gt_EffectRoachWarren_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Hydralisk Den
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectHydraliskDen_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_BuildStructure(lv_player, lv_card_id, "Drone", AbilityCommand("ZergBuild", 5), "HydraliskDen", false, -1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectHydraliskDen_Init () {
    lib1_gt_EffectHydraliskDen = TriggerCreate("lib1_gt_EffectHydraliskDen_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Spine Crawlers
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectSpineCrawlers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_BuildStructure(lv_player, lv_card_id, "Drone", AbilityCommand("ZergBuild", 14), "SpineCrawler", true, 1.0);
    lib1_gf_BuildStructure(lv_player, lv_card_id, "Drone", AbilityCommand("ZergBuild", 14), "SpineCrawler", true, 1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectSpineCrawlers_Init () {
    lib1_gt_EffectSpineCrawlers = TriggerCreate("lib1_gt_EffectSpineCrawlers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Spore Crawlers
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectSporeCrawlers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_BuildStructure(lv_player, lv_card_id, "Drone", AbilityCommand("ZergBuild", 15), "SporeCrawler", true, 1.0);
    lib1_gf_BuildStructure(lv_player, lv_card_id, "Drone", AbilityCommand("ZergBuild", 15), "SporeCrawler", true, 1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectSporeCrawlers_Init () {
    lib1_gt_EffectSporeCrawlers = TriggerCreate("lib1_gt_EffectSporeCrawlers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Metabolic Boost
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectMetabolicBoost_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto2AB24515_g;
    int auto2AB24515_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto2AB24515_g = UnitGroup(null, lv_player, RegionEntireMap(), UnitFilter((1 << c_targetFilterGround) | (1 << c_targetFilterBiological), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2AB24515_u = UnitGroupCount(auto2AB24515_g, c_unitCountAll);
    for (;; auto2AB24515_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto2AB24515_g, auto2AB24515_u);
        if (lv_unit == null) { break; }
        UnitBehaviorAdd(lv_unit, "MetabolicBoost", lv_unit, 1);
        UnitBehaviorAdd(lv_unit, "AggressiveMutation", lv_unit, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectMetabolicBoost_Init () {
    lib1_gt_EffectMetabolicBoost = TriggerCreate("lib1_gt_EffectMetabolicBoost_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Grooved Spines
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectGroovedSpines_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;
    int lv_weapon_index;
    bool lv_has_ranged_weapon;

    // Automatic Variable Declarations
    unitgroup auto21470CB4_g;
    int auto21470CB4_u;
    int autoD25149A3_ae;
    const int autoD25149A3_ai = 1;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto21470CB4_g = UnitGroup(null, lv_player, RegionEntireMap(), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto21470CB4_u = UnitGroupCount(auto21470CB4_g, c_unitCountAll);
    for (;; auto21470CB4_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto21470CB4_g, auto21470CB4_u);
        if (lv_unit == null) { break; }
        lv_has_ranged_weapon = false;
        if ((UnitWeaponCount(lv_unit) > 0)) {
            autoD25149A3_ae = UnitWeaponCount(lv_unit);
            lv_weapon_index = 1;
            for ( ; ( (autoD25149A3_ai >= 0 && lv_weapon_index <= autoD25149A3_ae) || (autoD25149A3_ai < 0 && lv_weapon_index >= autoD25149A3_ae) ) ; lv_weapon_index += autoD25149A3_ai ) {
                if ((CatalogFieldValueGet(c_gameCatalogWeapon, UnitWeaponGet(lv_unit, lv_weapon_index), "Options[" + IntToString(2) + "]", c_playerAny) == "0") && (UnitWeaponDamage(lv_unit, lv_weapon_index, c_unitAttributeNone, false) > 0.0)) {
                    lv_has_ranged_weapon = true;
                }

            }
        }

        if (((lv_has_ranged_weapon == true) || (UnitGetType(lv_unit) == "RoachBurrowed") || (UnitGetType(lv_unit) == "RoachVileBurrowed") || (UnitGetType(lv_unit) == "RavagerBurrowed") || (UnitGetType(lv_unit) == "RavagerBoneBurrowed") || (UnitGetType(lv_unit) == "QueenBurrowed") || (UnitGetType(lv_unit) == "HydraliskBurrowed") || (UnitGetType(lv_unit) == "HydraliskHunterKillerBurrowed") || (UnitGetType(lv_unit) == "InfestorTerranBurrowed"))) {
            UnitBehaviorAdd(lv_unit, "GroovedSpines", lv_unit, 1);
            UnitBehaviorAdd(lv_unit, "AggressiveMutation", lv_unit, 1);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectGroovedSpines_Init () {
    lib1_gt_EffectGroovedSpines = TriggerCreate("lib1_gt_EffectGroovedSpines_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Binding Creep
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectBindingCreep_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup autoDE0608A6_g;
    int autoDE0608A6_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    autoDE0608A6_g = UnitGroup(null, lv_player, RegionEntireMap(), UnitFilter((1 << c_targetFilterBiological) | (1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0);
    autoDE0608A6_u = UnitGroupCount(autoDE0608A6_g, c_unitCountAll);
    for (;; autoDE0608A6_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoDE0608A6_g, autoDE0608A6_u);
        if (lv_unit == null) { break; }
        UnitSetPropertyFixed(lv_unit, c_unitPropLifePercent, 100.0);
        UnitBehaviorAdd(lv_unit, "makeCreep2x2", lv_unit, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectBindingCreep_Init () {
    lib1_gt_EffectBindingCreep = TriggerCreate("lib1_gt_EffectBindingCreep_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Larval Queen
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectLarvalQueen_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;
    int lv_hand_index;
    int lv_top_of_hand;
    int lv_unit_type_index_from_spawn_card;
    int lv_unit_type_index_from_larva_card;
    const int lv_lARVA_CARD_MAX_UNIT_TYPE = 19;
    string[lv_lARVA_CARD_MAX_UNIT_TYPE + 1] lv_larva_card_unit_type;
    int[lv_lARVA_CARD_MAX_UNIT_TYPE + 1] lv_larva_card_unit_type_count;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_CombineSpawnCards(lv_player, "Larval Spawn", 1, 2, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectLarvalQueen_Init () {
    lib1_gt_EffectLarvalQueen = TriggerCreate("lib1_gt_EffectLarvalQueen_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Excreting Overseer
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectExcretingOverseer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;
    int lv_count;
    unit lv_target;

    // Automatic Variable Declarations
    unitgroup auto9BAC4D3E_g;
    int auto9BAC4D3E_u;
    const int auto2F99CEB2_ae = 3;
    const int auto2F99CEB2_ai = 1;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto9BAC4D3E_g = lv_units_created;
    auto9BAC4D3E_u = UnitGroupCount(auto9BAC4D3E_g, c_unitCountAll);
    for (;; auto9BAC4D3E_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto9BAC4D3E_g, auto9BAC4D3E_u);
        if (lv_unit == null) { break; }
        if ((UnitGetType(lv_unit) == "Overseer")) {
            if ((UnitHasBehavior2(lv_unit, "WaitingToMoveOut") == true)) {
                UnitBehaviorRemove(lv_unit, "WaitingToMoveOut", c_unitBehaviorCountAll);
                UnitBehaviorAdd(lv_unit, "CasterWaitingToMoveOut", lv_unit, 1);
            }

            lv_count = 1;
            for ( ; ( (auto2F99CEB2_ai >= 0 && lv_count <= auto2F99CEB2_ae) || (auto2F99CEB2_ai < 0 && lv_count >= auto2F99CEB2_ae) ) ; lv_count += auto2F99CEB2_ai ) {
                lv_target = lib1_gf_MostExpensiveStructureforStun(lv_player);
                if ((lv_target != null)) {
                    UnitIssueOrder(lv_target, Order(AbilityCommand("que5", 0)), c_orderQueueReplace);
                    UnitIssueOrder(lv_target, Order(AbilityCommand("que5", 0)), c_orderQueueReplace);
                    UnitIssueOrder(lv_target, Order(AbilityCommand("que5Addon", 0)), c_orderQueueReplace);
                    UnitIssueOrder(lv_target, Order(AbilityCommand("que5Addon", 0)), c_orderQueueReplace);
                    UnitBehaviorAdd(lv_target, "Contaminate1stTurn", lv_target, 1);
                    UnitIssueOrder(lv_unit, OrderTargetingUnit(AbilityCommand("Contaminate", 0), lv_target), c_orderQueueReplace);
                }

                Wait(0.2, c_timeGame);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectExcretingOverseer_Init () {
    lib1_gt_EffectExcretingOverseer = TriggerCreate("lib1_gt_EffectExcretingOverseer_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Baneling Nest
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectBanelingNest_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_BuildStructure(lv_player, lv_card_id, "Drone", AbilityCommand("ZergBuild", 10), "BanelingNest", false, -1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectBanelingNest_Init () {
    lib1_gt_EffectBanelingNest = TriggerCreate("lib1_gt_EffectBanelingNest_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Spire
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectSpire_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_BuildStructure(lv_player, lv_card_id, "Drone", AbilityCommand("ZergBuild", 6), "Spire", false, -1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectSpire_Init () {
    lib1_gt_EffectSpire = TriggerCreate("lib1_gt_EffectSpire_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Extractor
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectExtractor_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_BuildStructure(lv_player, lv_card_id, "Drone", AbilityCommand("ZergBuild", 2), "Extractor", false, -1);
    lib1_gf_DrawCardFromDecktoHand(lv_player);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectExtractor_Init () {
    lib1_gt_EffectExtractor = TriggerCreate("lib1_gt_EffectExtractor_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Evolution Chamber
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectEvolutionChamber_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_BuildStructure(lv_player, lv_card_id, "Drone", AbilityCommand("ZergBuild", 4), "EvolutionChamber", false, -1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectEvolutionChamber_Init () {
    lib1_gt_EffectEvolutionChamber = TriggerCreate("lib1_gt_EffectEvolutionChamber_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Evolution Chamber Effect
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectEvolutionChamberEffect_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;
    bool lv_heroic;
    fixed lv_life;

    // Automatic Variable Declarations
    unitgroup auto1F12C231_g;
    int auto1F12C231_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_DrawCardFromDecktoHand(lv_player);
    auto1F12C231_g = UnitGroup(null, lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1F12C231_u = UnitGroupCount(auto1F12C231_g, c_unitCountAll);
    for (;; auto1F12C231_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto1F12C231_g, auto1F12C231_u);
        if (lv_unit == null) { break; }
        UnitSetPropertyFixed(lv_unit, c_unitPropLifeMax, (UnitGetPropertyFixed(lv_unit, c_unitPropLifeMax, c_unitPropCurrent) + 10.0));
        UnitBehaviorAdd(lv_unit, "Evolved", lv_unit, 1);
        UnitBehaviorAdd(lv_unit, "AggressiveMutation", lv_unit, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectEvolutionChamberEffect_Init () {
    lib1_gt_EffectEvolutionChamberEffect = TriggerCreate("lib1_gt_EffectEvolutionChamberEffect_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Inject Larva
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectInjectLarva_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;
    int lv_hand_index;
    int lv_top_of_hand;
    int lv_unit_type_index_from_spawn_card;
    int lv_unit_type_index_from_larva_card;
    const int lv_lARVA_CARD_MAX_UNIT_TYPE = 19;
    string[lv_lARVA_CARD_MAX_UNIT_TYPE + 1] lv_larva_card_unit_type;
    int[lv_lARVA_CARD_MAX_UNIT_TYPE + 1] lv_larva_card_unit_type_count;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_CombineSpawnCards(lv_player, "Larval Spawn", 1, 3, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectInjectLarva_Init () {
    lib1_gt_EffectInjectLarva = TriggerCreate("lib1_gt_EffectInjectLarva_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Tunneling Roaches
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectTunnelingRoaches_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unitgroup lv_burrowed_units_created;
    unit lv_unit;
    unitgroup lv_behavior_group;
    bool lv_override;
    int lv_effect_index;

    // Automatic Variable Declarations
    const int autoBCD482F7_ae = lib1_gv_eFFECT_QUEUE_LIMIT;
    const int autoBCD482F7_ai = 1;
    unitgroup auto50AC4440_g;
    int auto50AC4440_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();
    lv_burrowed_units_created = UnitGroupEmpty();
    lv_behavior_group = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lv_effect_index = 0;
    for ( ; ( (autoBCD482F7_ai >= 0 && lv_effect_index <= autoBCD482F7_ae) || (autoBCD482F7_ai < 0 && lv_effect_index >= autoBCD482F7_ae) ) ; lv_effect_index += autoBCD482F7_ai ) {
        if ((lib1_gv_effect_queue[lib1_gv_eF_BUFF_UNITS][lv_effect_index].lv_player == lv_player) && (lib1_gv_effect_queue[lib1_gv_eF_BUFF_UNITS][lv_effect_index].lv_effect == lib1_gt_EffectSetanAmbushHiveMind)) {
            lv_override = true;
        }

    }
    if ((lv_override == false)) {
        auto50AC4440_g = lv_units_created;
        auto50AC4440_u = UnitGroupCount(auto50AC4440_g, c_unitCountAll);
        for (;; auto50AC4440_u -= 1) {
            lv_unit = UnitGroupUnitFromEnd(auto50AC4440_g, auto50AC4440_u);
            if (lv_unit == null) { break; }
            lib1_gf_UnburrowSpawn(lv_player, lv_unit, lib1_gv_player[lv_player].lv_enemy_build_region, true);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectTunnelingRoaches_Init () {
    lib1_gt_EffectTunnelingRoaches = TriggerCreate("lib1_gt_EffectTunnelingRoaches_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Parasitic Vipers
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectParasiticVipers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;
    unit lv_target;

    // Automatic Variable Declarations
    unitgroup autoE697D04C_g;
    int autoE697D04C_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    autoE697D04C_g = lv_units_created;
    autoE697D04C_u = UnitGroupCount(autoE697D04C_g, c_unitCountAll);
    for (;; autoE697D04C_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoE697D04C_g, autoE697D04C_u);
        if (lv_unit == null) { break; }
        UnitWeaponRemove(lv_unit, "DummyWeapon");
        lv_target = lib1_gf_BestTargetforSplash(lv_player, UnitFilter((1 << c_targetFilterAir) | (1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterInvulnerable - 32))), 3.0, false);
        if ((lv_target != null)) {
            if ((UnitHasBehavior2(lv_unit, "WaitingToMoveOut") == true)) {
                UnitBehaviorRemove(lv_unit, "WaitingToMoveOut", c_unitBehaviorCountAll);
                UnitBehaviorAdd(lv_unit, "CasterWaitingToMoveOut", lv_unit, 1);
            }

            UnitIssueOrder(lv_unit, OrderTargetingUnit(AbilityCommand("ParasiticBomb", 0), lv_target), c_orderQueueReplace);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectParasiticVipers_Init () {
    lib1_gt_EffectParasiticVipers = TriggerCreate("lib1_gt_EffectParasiticVipers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Baneling Bombs
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectBanelingBombs_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;
    int lv_unit_count;

    // Automatic Variable Declarations
    unitgroup auto9E067696_g;
    int auto9E067696_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto9E067696_g = lv_units_created;
    auto9E067696_u = UnitGroupCount(auto9E067696_g, c_unitCountAll);
    for (;; auto9E067696_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto9E067696_g, auto9E067696_u);
        if (lv_unit == null) { break; }
        UnitBehaviorRemove(lv_unit, "WaitingToMoveOut", 1);
        lib1_gf_CreateCargoUnitsWithStatTracking(4, "Baneling", lv_unit);
        UnitGroupAddUnitGroup(lib1_gv_units_from_card[lv_card_id], UnitCargoLastCreatedGroup());
        UnitGroupAddUnitGroup(lib1_gv_aggressive_units, UnitCargoLastCreatedGroup());
        UnitBehaviorAdd(lv_unit, "WaitingToMoveOut", lv_unit, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectBanelingBombs_Init () {
    lib1_gt_EffectBanelingBombs = TriggerCreate("lib1_gt_EffectBanelingBombs_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Ultralisk Cavern
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectUltraliskCavern_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_BuildStructure(lv_player, lv_card_id, "Drone", AbilityCommand("ZergBuild", 7), "UltraliskCavern", false, -1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectUltraliskCavern_Init () {
    lib1_gt_EffectUltraliskCavern = TriggerCreate("lib1_gt_EffectUltraliskCavern_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Nydus Network
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectNydusNetwork_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_BuildStructure(lv_player, lv_card_id, "Drone", AbilityCommand("ZergBuild", 9), "NydusNetwork", false, -1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectNydusNetwork_Init () {
    lib1_gt_EffectNydusNetwork = TriggerCreate("lib1_gt_EffectNydusNetwork_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Greater Spire
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectGreaterSpire_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unitgroup lv_possible_spires;
    unit lv_unit;
    fixed lv_custom_value;

    // Automatic Variable Declarations
    unitgroup autoB9A07F48_g;
    int autoB9A07F48_u;
    unitgroup auto8A3EEEA2_g;
    int auto8A3EEEA2_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();
    lv_possible_spires = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    autoB9A07F48_g = UnitGroup("Spire", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB9A07F48_u = UnitGroupCount(autoB9A07F48_g, c_unitCountAll);
    for (;; autoB9A07F48_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoB9A07F48_g, autoB9A07F48_u);
        if (lv_unit == null) { break; }
        UnitGroupAdd(lv_possible_spires, lv_unit);
    }
    auto8A3EEEA2_g = UnitGroup("ScourgeSpire", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8A3EEEA2_u = UnitGroupCount(auto8A3EEEA2_g, c_unitCountAll);
    for (;; auto8A3EEEA2_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto8A3EEEA2_g, auto8A3EEEA2_u);
        if (lv_unit == null) { break; }
        UnitGroupAdd(lv_possible_spires, lv_unit);
    }
    if ((UnitGroupCount(lv_possible_spires, c_unitCountAlive) >= 1)) {
        lv_unit = UnitGroupRandomUnit(lv_possible_spires, c_unitCountAlive);
        lib1_gf_RemoveAllStunsFromUnit(lv_unit);
        if ((UnitGetType(lv_unit) == "Spire")) {
            lv_custom_value = 9.0;
            UnitIssueOrder(lv_unit, Order(AbilityCommand("UpgradeToGreaterSpire", 0)), c_orderQueueReplace);
        }
        else {
            lv_custom_value = 8.0;
            UnitBehaviorRemove(lv_unit, "ScourgeSpire", 1);
            UnitIssueOrder(lv_unit, Order(AbilityCommand("UpgradeToGreaterSpire", 0)), c_orderQueueReplace);
        }
        UnitSetCustomValue(lv_unit, 0, lv_custom_value);
        Wait(8.5, c_timeGame);
        UnitSetCustomValue(lv_unit, 0, lv_custom_value);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectGreaterSpire_Init () {
    lib1_gt_EffectGreaterSpire = TriggerCreate("lib1_gt_EffectGreaterSpire_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Mass Mutation
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectMassMutation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;
    unitgroup lv_morphed_units;
    unitgroup lv_morphed_units_2;
    int lv_count;
    unitgroup lv_zergling_targets;
    unitgroup lv_roach_targets;
    unitgroup lv_corruptor_targets;
    unitgroup lv_hydralisk_targets;

    // Automatic Variable Declarations
    unitgroup auto2CBC7C59_g;
    int auto2CBC7C59_u;
    unitgroup autoB1E2B119_g;
    int autoB1E2B119_u;
    unitgroup autoA5524ACF_g;
    int autoA5524ACF_u;
    unitgroup auto42A09A49_g;
    int auto42A09A49_u;
    unitgroup autoFA11214B_g;
    int autoFA11214B_u;
    unitgroup autoE1D7FD6B_g;
    int autoE1D7FD6B_u;
    unitgroup autoFBA762C0_g;
    int autoFBA762C0_u;
    unitgroup autoD9E11C02_g;
    int autoD9E11C02_u;
    unitgroup auto58CB3BFC_g;
    int auto58CB3BFC_u;
    unitgroup autoA4C9ABB9_g;
    int autoA4C9ABB9_u;
    unitgroup auto25AB3C1F_g;
    int auto25AB3C1F_u;
    unitgroup autoFAA02544_g;
    int autoFAA02544_u;
    unitgroup auto9E52FAA1_g;
    int auto9E52FAA1_u;
    unitgroup auto51E871B0_g;
    int auto51E871B0_u;
    unitgroup auto6A6E07CA_g;
    int auto6A6E07CA_u;
    unitgroup auto8E96FA1C_g;
    int auto8E96FA1C_u;
    unitgroup autoFDBD969C_g;
    int autoFDBD969C_u;
    unitgroup autoD0773C7C_g;
    int autoD0773C7C_u;
    unitgroup auto588C4700_g;
    int auto588C4700_u;
    unitgroup auto5A8836E4_g;
    int auto5A8836E4_u;
    unitgroup auto951998D8_g;
    int auto951998D8_u;
    unitgroup auto2C7F3ACA_g;
    int auto2C7F3ACA_u;
    unitgroup auto2876D4B5_g;
    int auto2876D4B5_u;
    int autoAC6C3C08_ae;
    const int autoAC6C3C08_ai = 1;
    int autoE30DBCA6_ae;
    const int autoE30DBCA6_ai = 1;
    int auto28CF814C_ae;
    const int auto28CF814C_ai = 1;
    int auto867B1976_ae;
    const int auto867B1976_ai = 1;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();
    lv_morphed_units = UnitGroupEmpty();
    lv_morphed_units_2 = UnitGroupEmpty();
    lv_zergling_targets = UnitGroupEmpty();
    lv_roach_targets = UnitGroupEmpty();
    lv_corruptor_targets = UnitGroupEmpty();
    lv_hydralisk_targets = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto2CBC7C59_g = UnitGroup("ZerglingBurrowed", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2CBC7C59_u = UnitGroupCount(auto2CBC7C59_g, c_unitCountAll);
    for (;; auto2CBC7C59_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto2CBC7C59_g, auto2CBC7C59_u);
        if (lv_unit == null) { break; }
        UnitGroupAdd(lv_zergling_targets, lv_unit);
    }
    autoB1E2B119_g = UnitGroup("ZerglingFastBurrowed", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB1E2B119_u = UnitGroupCount(autoB1E2B119_g, c_unitCountAll);
    for (;; autoB1E2B119_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoB1E2B119_g, autoB1E2B119_u);
        if (lv_unit == null) { break; }
        UnitGroupAdd(lv_zergling_targets, lv_unit);
    }
    autoA5524ACF_g = UnitGroup("ZerglingLeapingBurrowed", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA5524ACF_u = UnitGroupCount(autoA5524ACF_g, c_unitCountAll);
    for (;; autoA5524ACF_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoA5524ACF_g, autoA5524ACF_u);
        if (lv_unit == null) { break; }
        UnitGroupAdd(lv_zergling_targets, lv_unit);
    }
    auto42A09A49_g = UnitGroup("Zergling", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto42A09A49_u = UnitGroupCount(auto42A09A49_g, c_unitCountAll);
    for (;; auto42A09A49_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto42A09A49_g, auto42A09A49_u);
        if (lv_unit == null) { break; }
        UnitGroupAdd(lv_zergling_targets, lv_unit);
    }
    autoFA11214B_g = UnitGroup("ZerglingFast", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoFA11214B_u = UnitGroupCount(autoFA11214B_g, c_unitCountAll);
    for (;; autoFA11214B_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoFA11214B_g, autoFA11214B_u);
        if (lv_unit == null) { break; }
        UnitGroupAdd(lv_zergling_targets, lv_unit);
    }
    autoE1D7FD6B_g = UnitGroup("ZerglingLeaping", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE1D7FD6B_u = UnitGroupCount(autoE1D7FD6B_g, c_unitCountAll);
    for (;; autoE1D7FD6B_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoE1D7FD6B_g, autoE1D7FD6B_u);
        if (lv_unit == null) { break; }
        UnitGroupAdd(lv_zergling_targets, lv_unit);
    }
    autoFBA762C0_g = UnitGroup("ZerglingHero", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoFBA762C0_u = UnitGroupCount(autoFBA762C0_g, c_unitCountAll);
    for (;; autoFBA762C0_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoFBA762C0_g, autoFBA762C0_u);
        if (lv_unit == null) { break; }
        UnitGroupAdd(lv_zergling_targets, lv_unit);
    }
    autoD9E11C02_g = UnitGroup("ZerglingHeroBurrowed", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD9E11C02_u = UnitGroupCount(autoD9E11C02_g, c_unitCountAll);
    for (;; autoD9E11C02_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoD9E11C02_g, autoD9E11C02_u);
        if (lv_unit == null) { break; }
        UnitGroupAdd(lv_zergling_targets, lv_unit);
    }
    auto58CB3BFC_g = UnitGroup("ZerglingSwarmer", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto58CB3BFC_u = UnitGroupCount(auto58CB3BFC_g, c_unitCountAll);
    for (;; auto58CB3BFC_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto58CB3BFC_g, auto58CB3BFC_u);
        if (lv_unit == null) { break; }
        UnitGroupAdd(lv_zergling_targets, lv_unit);
    }
    autoA4C9ABB9_g = UnitGroup("ZerglingSwarmerBurrowed", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA4C9ABB9_u = UnitGroupCount(autoA4C9ABB9_g, c_unitCountAll);
    for (;; autoA4C9ABB9_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoA4C9ABB9_g, autoA4C9ABB9_u);
        if (lv_unit == null) { break; }
        UnitGroupAdd(lv_zergling_targets, lv_unit);
    }
    auto25AB3C1F_g = UnitGroup("RoachBurrowed", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto25AB3C1F_u = UnitGroupCount(auto25AB3C1F_g, c_unitCountAll);
    for (;; auto25AB3C1F_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto25AB3C1F_g, auto25AB3C1F_u);
        if (lv_unit == null) { break; }
        UnitGroupAdd(lv_roach_targets, lv_unit);
    }
    autoFAA02544_g = UnitGroup("RoachVileBurrowed", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoFAA02544_u = UnitGroupCount(autoFAA02544_g, c_unitCountAll);
    for (;; autoFAA02544_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoFAA02544_g, autoFAA02544_u);
        if (lv_unit == null) { break; }
        UnitGroupAdd(lv_roach_targets, lv_unit);
    }
    auto9E52FAA1_g = UnitGroup("Roach", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9E52FAA1_u = UnitGroupCount(auto9E52FAA1_g, c_unitCountAll);
    for (;; auto9E52FAA1_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto9E52FAA1_g, auto9E52FAA1_u);
        if (lv_unit == null) { break; }
        UnitGroupAdd(lv_roach_targets, lv_unit);
    }
    auto51E871B0_g = UnitGroup("RoachVile", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto51E871B0_u = UnitGroupCount(auto51E871B0_g, c_unitCountAll);
    for (;; auto51E871B0_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto51E871B0_g, auto51E871B0_u);
        if (lv_unit == null) { break; }
        UnitGroupAdd(lv_roach_targets, lv_unit);
    }
    auto6A6E07CA_g = UnitGroup("Corruptor", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6A6E07CA_u = UnitGroupCount(auto6A6E07CA_g, c_unitCountAll);
    for (;; auto6A6E07CA_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto6A6E07CA_g, auto6A6E07CA_u);
        if (lv_unit == null) { break; }
        UnitGroupAdd(lv_corruptor_targets, lv_unit);
    }
    auto8E96FA1C_g = UnitGroup("HydraliskBurrowed", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8E96FA1C_u = UnitGroupCount(auto8E96FA1C_g, c_unitCountAll);
    for (;; auto8E96FA1C_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto8E96FA1C_g, auto8E96FA1C_u);
        if (lv_unit == null) { break; }
        UnitGroupAdd(lv_hydralisk_targets, lv_unit);
    }
    autoFDBD969C_g = UnitGroup("Hydralisk", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoFDBD969C_u = UnitGroupCount(autoFDBD969C_g, c_unitCountAll);
    for (;; autoFDBD969C_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoFDBD969C_g, autoFDBD969C_u);
        if (lv_unit == null) { break; }
        UnitGroupAdd(lv_hydralisk_targets, lv_unit);
    }
    autoD0773C7C_g = UnitGroup("HydraliskHunterKillerBurrowed", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD0773C7C_u = UnitGroupCount(autoD0773C7C_g, c_unitCountAll);
    for (;; autoD0773C7C_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoD0773C7C_g, autoD0773C7C_u);
        if (lv_unit == null) { break; }
        UnitGroupAdd(lv_hydralisk_targets, lv_unit);
    }
    auto588C4700_g = UnitGroup("HydraliskHunterKiller", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto588C4700_u = UnitGroupCount(auto588C4700_g, c_unitCountAll);
    for (;; auto588C4700_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto588C4700_g, auto588C4700_u);
        if (lv_unit == null) { break; }
        UnitGroupAdd(lv_hydralisk_targets, lv_unit);
    }
    auto5A8836E4_g = lv_zergling_targets;
    auto5A8836E4_u = UnitGroupCount(auto5A8836E4_g, c_unitCountAll);
    for (;; auto5A8836E4_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto5A8836E4_g, auto5A8836E4_u);
        if (lv_unit == null) { break; }
        if ((UnitHasBehavior2(lv_unit, "Mutable") == true)) {
            UnitGroupRemove(lv_zergling_targets, lv_unit);
        }

    }
    auto951998D8_g = lv_roach_targets;
    auto951998D8_u = UnitGroupCount(auto951998D8_g, c_unitCountAll);
    for (;; auto951998D8_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto951998D8_g, auto951998D8_u);
        if (lv_unit == null) { break; }
        if ((UnitHasBehavior2(lv_unit, "Mutable") == true)) {
            UnitGroupRemove(lv_roach_targets, lv_unit);
        }

    }
    auto2C7F3ACA_g = lv_hydralisk_targets;
    auto2C7F3ACA_u = UnitGroupCount(auto2C7F3ACA_g, c_unitCountAll);
    for (;; auto2C7F3ACA_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto2C7F3ACA_g, auto2C7F3ACA_u);
        if (lv_unit == null) { break; }
        if ((UnitHasBehavior2(lv_unit, "Mutable") == true)) {
            UnitGroupRemove(lv_hydralisk_targets, lv_unit);
        }

    }
    auto2876D4B5_g = lv_corruptor_targets;
    auto2876D4B5_u = UnitGroupCount(auto2876D4B5_g, c_unitCountAll);
    for (;; auto2876D4B5_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto2876D4B5_g, auto2876D4B5_u);
        if (lv_unit == null) { break; }
        if ((UnitHasBehavior2(lv_unit, "Mutable") == true)) {
            UnitGroupRemove(lv_corruptor_targets, lv_unit);
        }

    }
    autoAC6C3C08_ae = MinI(24, UnitGroupCount(lv_zergling_targets, c_unitCountAlive));
    lv_count = 1;
    for ( ; ( (autoAC6C3C08_ai >= 0 && lv_count <= autoAC6C3C08_ae) || (autoAC6C3C08_ai < 0 && lv_count >= autoAC6C3C08_ae) ) ; lv_count += autoAC6C3C08_ai ) {
        lv_unit = UnitGroupRandomUnit(lv_zergling_targets, c_unitCountAlive);
        lib1_gf_IssueMutateOrders(lv_unit);
        UnitGroupRemove(lv_zergling_targets, lv_unit);
    }
    autoE30DBCA6_ae = MinI(12, UnitGroupCount(lv_roach_targets, c_unitCountAlive));
    lv_count = 1;
    for ( ; ( (autoE30DBCA6_ai >= 0 && lv_count <= autoE30DBCA6_ae) || (autoE30DBCA6_ai < 0 && lv_count >= autoE30DBCA6_ae) ) ; lv_count += autoE30DBCA6_ai ) {
        lv_unit = UnitGroupRandomUnit(lv_roach_targets, c_unitCountAlive);
        lib1_gf_IssueMutateOrders(lv_unit);
        UnitGroupRemove(lv_roach_targets, lv_unit);
    }
    auto28CF814C_ae = MinI(6, UnitGroupCount(lv_corruptor_targets, c_unitCountAlive));
    lv_count = 1;
    for ( ; ( (auto28CF814C_ai >= 0 && lv_count <= auto28CF814C_ae) || (auto28CF814C_ai < 0 && lv_count >= auto28CF814C_ae) ) ; lv_count += auto28CF814C_ai ) {
        lv_unit = UnitGroupRandomUnit(lv_corruptor_targets, c_unitCountAlive);
        lib1_gf_IssueMutateOrders(lv_unit);
        UnitGroupRemove(lv_corruptor_targets, lv_unit);
    }
    auto867B1976_ae = MinI(3, UnitGroupCount(lv_hydralisk_targets, c_unitCountAlive));
    lv_count = 1;
    for ( ; ( (auto867B1976_ai >= 0 && lv_count <= auto867B1976_ae) || (auto867B1976_ai < 0 && lv_count >= auto867B1976_ae) ) ; lv_count += auto867B1976_ai ) {
        lv_unit = UnitGroupRandomUnit(lv_hydralisk_targets, c_unitCountAlive);
        lib1_gf_IssueMutateOrders(lv_unit);
        UnitGroupRemove(lv_hydralisk_targets, lv_unit);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectMassMutation_Init () {
    lib1_gt_EffectMassMutation = TriggerCreate("lib1_gt_EffectMassMutation_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Neural Parasite
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectNeuralParasite_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    int lv_count;
    unit lv_target;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lv_target = lib1_gf_ToughestEnemyTargetForHardRemoval(lv_player, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure), (1 << (c_targetFilterInvulnerable - 32))));
    UnitCreate(1, "InfestorBurrowed", 0, lv_player, libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_target), 6.0, RegionGetCenter(lib1_gv_player[lv_player].lv_spawn_region)), libNtve_gf_RandomAngle());
    UnitBehaviorAdd(UnitLastCreated(), "KillableCaster", UnitLastCreated(), 1);
    UnitBehaviorAdd(UnitLastCreated(), "PermanentlyInvulnerable", UnitLastCreated(), 1);
    UnitIssueOrder(UnitLastCreated(), OrderSetAutoCast(AbilityCommand("FungalGrowth", 0), false), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderSetAutoCast(AbilityCommand("NeuralParasite", 0), false), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderSetAutoCast(AbilityCommand("InfestedTerrans", 0), false), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(lib1_gv_player[lv_player].lv_attack_region)), c_orderQueueReplace);
    if ((lv_target != null)) {
        UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("NeuralParasite", 0), lv_target), c_orderQueueReplace);
    }

    lib1_gf_IssueLeaveOrders(UnitLastCreated(), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectNeuralParasite_Init () {
    lib1_gt_EffectNeuralParasite = TriggerCreate("lib1_gt_EffectNeuralParasite_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Zagara
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectZagara_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;
    int lv_hand_index;
    int lv_top_of_hand;
    int lv_unit_type_index_from_spawn_card;
    int lv_unit_type_index_from_larva_card;
    const int lv_lARVA_CARD_MAX_UNIT_TYPE = 19;
    string[lv_lARVA_CARD_MAX_UNIT_TYPE + 1] lv_larva_card_unit_type;
    int[lv_lARVA_CARD_MAX_UNIT_TYPE + 1] lv_larva_card_unit_type_count;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_CombineSpawnCards(lv_player, "Zagara's Spawn", 1, 1, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectZagara_Init () {
    lib1_gt_EffectZagara = TriggerCreate("lib1_gt_EffectZagara_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Kerrigan
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectKerrigan_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto9C36F46C_g;
    int auto9C36F46C_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto9C36F46C_g = lv_units_created;
    auto9C36F46C_u = UnitGroupCount(auto9C36F46C_g, c_unitCountAll);
    for (;; auto9C36F46C_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto9C36F46C_g, auto9C36F46C_u);
        if (lv_unit == null) { break; }
        if ((UnitGetType(lv_unit) == "KerriganVoid")) {
            UnitBehaviorAdd(lv_unit, "ArtanissUnification2", lv_unit, 1);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectKerrigan_Init () {
    lib1_gt_EffectKerrigan = TriggerCreate("lib1_gt_EffectKerrigan_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Dehaka
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectDehaka_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    if ((lib1_gv_player[lv_player].lv_cards_played_this_turn == 1)) {
        lib1_gf_DrawCardFromDecktoHand(lv_player);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectDehaka_Init () {
    lib1_gt_EffectDehaka = TriggerCreate("lib1_gt_EffectDehaka_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Sieging Ravagers
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectSiegingRavagers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto323EAB6A_g;
    int auto323EAB6A_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto323EAB6A_g = lv_units_created;
    auto323EAB6A_u = UnitGroupCount(auto323EAB6A_g, c_unitCountAll);
    for (;; auto323EAB6A_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto323EAB6A_g, auto323EAB6A_u);
        if (lv_unit == null) { break; }
        UnitIssueOrder(lv_unit, OrderSetAutoCast(AbilityCommand("RavagerCorrosiveBile", 0), false), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectSiegingRavagers_Init () {
    lib1_gt_EffectSiegingRavagers = TriggerCreate("lib1_gt_EffectSiegingRavagers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Gateway
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectGateway_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_BuildStructure(lv_player, lv_card_id, "Probe", AbilityCommand("ProtossBuild", 3), "Gateway", false, -1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectGateway_Init () {
    lib1_gt_EffectGateway = TriggerCreate("lib1_gt_EffectGateway_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Photon Cannons
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectPhotonCannons_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_BuildStructure(lv_player, lv_card_id, "Probe", AbilityCommand("ProtossBuild", 7), "PhotonCannon", true, 1.0);
    lib1_gf_BuildStructure(lv_player, lv_card_id, "Probe", AbilityCommand("ProtossBuild", 7), "PhotonCannon", true, 1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectPhotonCannons_Init () {
    lib1_gt_EffectPhotonCannons = TriggerCreate("lib1_gt_EffectPhotonCannons_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Shield Batteries
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectShieldBatteries_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_BuildStructure(lv_player, lv_card_id, "Probe", AbilityCommand("ProtossBuild", 15), "ShieldBattery", true, 1.5);
    lib1_gf_BuildStructure(lv_player, lv_card_id, "Probe", AbilityCommand("ProtossBuild", 15), "ShieldBattery", true, 1.5);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectShieldBatteries_Init () {
    lib1_gt_EffectShieldBatteries = TriggerCreate("lib1_gt_EffectShieldBatteries_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Pylon (Structure)
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectPylonStructure_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_BuildStructure(lv_player, lv_card_id, "Probe", AbilityCommand("ProtossBuild", 1), "Pylon", false, -1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectPylonStructure_Init () {
    lib1_gt_EffectPylonStructure = TriggerCreate("lib1_gt_EffectPylonStructure_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Pylon (Draw + Warp In)
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectPylonDrawWarpIn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_DrawCardFromDecktoHand(lv_player);
    lib1_gf_GenerateWarpInCardforHand(lv_player);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectPylonDrawWarpIn_Init () {
    lib1_gt_EffectPylonDrawWarpIn = TriggerCreate("lib1_gt_EffectPylonDrawWarpIn_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Psionic Storm
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectPsionicStorm_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    int lv_count;

    // Automatic Variable Declarations
    const int autoF09A9B43_ae = 3;
    const int autoF09A9B43_ai = 1;
    const int auto4F4BC79E_ae = 3;
    const int auto4F4BC79E_ai = 1;
    const int auto320F96BA_ae = 4;
    const int auto320F96BA_ai = 1;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lv_count = 1;
    for ( ; ( (autoF09A9B43_ai >= 0 && lv_count <= autoF09A9B43_ae) || (autoF09A9B43_ai < 0 && lv_count >= autoF09A9B43_ae) ) ; lv_count += autoF09A9B43_ai ) {
        UnitCreate(1, "HighTemplar", 0, lv_player, RegionRandomPoint(lib1_gv_player[lv_player].lv_spawn_region), libNtve_gf_RandomAngle());
        UnitBehaviorAdd(UnitLastCreated(), "Caster", UnitLastCreated(), 1);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("PsiStorm", 0), UnitGetPosition(lib1_gf_BestTargetforSplash(lv_player, UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 1.5, false))), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderSetAutoCast(AbilityCommand("PsiStorm", 0), false), c_orderQueueAddToFront);
        UnitIssueOrder(UnitLastCreated(), OrderSetAutoCast(AbilityCommand("Feedback", 0), false), c_orderQueueAddToFront);
        lib1_gf_IssueLeaveOrders(UnitLastCreated(), c_orderQueueAddToEnd);
    }
    Wait(2.0, c_timeGame);
    lv_count = 1;
    for ( ; ( (auto4F4BC79E_ai >= 0 && lv_count <= auto4F4BC79E_ae) || (auto4F4BC79E_ai < 0 && lv_count >= auto4F4BC79E_ae) ) ; lv_count += auto4F4BC79E_ai ) {
        UnitCreate(1, "HighTemplar", 0, lv_player, RegionRandomPoint(lib1_gv_player[lv_player].lv_spawn_region), libNtve_gf_RandomAngle());
        UnitBehaviorAdd(UnitLastCreated(), "Caster", UnitLastCreated(), 1);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("PsiStorm", 0), UnitGetPosition(lib1_gf_BestTargetforSplash(lv_player, UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 1.5, false))), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderSetAutoCast(AbilityCommand("PsiStorm", 0), false), c_orderQueueAddToFront);
        UnitIssueOrder(UnitLastCreated(), OrderSetAutoCast(AbilityCommand("Feedback", 0), false), c_orderQueueAddToFront);
        lib1_gf_IssueLeaveOrders(UnitLastCreated(), c_orderQueueAddToEnd);
    }
    Wait(2.0, c_timeGame);
    lv_count = 1;
    for ( ; ( (auto320F96BA_ai >= 0 && lv_count <= auto320F96BA_ae) || (auto320F96BA_ai < 0 && lv_count >= auto320F96BA_ae) ) ; lv_count += auto320F96BA_ai ) {
        UnitCreate(1, "HighTemplar", 0, lv_player, RegionRandomPoint(lib1_gv_player[lv_player].lv_spawn_region), libNtve_gf_RandomAngle());
        UnitBehaviorAdd(UnitLastCreated(), "Caster", UnitLastCreated(), 1);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("PsiStorm", 0), UnitGetPosition(lib1_gf_BestTargetforSplash(lv_player, UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 1.5, false))), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderSetAutoCast(AbilityCommand("PsiStorm", 0), false), c_orderQueueAddToFront);
        UnitIssueOrder(UnitLastCreated(), OrderSetAutoCast(AbilityCommand("Feedback", 0), false), c_orderQueueAddToFront);
        lib1_gf_IssueLeaveOrders(UnitLastCreated(), c_orderQueueAddToEnd);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectPsionicStorm_Init () {
    lib1_gt_EffectPsionicStorm = TriggerCreate("lib1_gt_EffectPsionicStorm_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Graviton Beam
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectGravitonBeam_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    int lv_phoenix_count;

    // Automatic Variable Declarations
    const int auto03740A35_ae = 12;
    const int auto03740A35_ai = 1;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lv_phoenix_count = 1;
    for ( ; ( (auto03740A35_ai >= 0 && lv_phoenix_count <= auto03740A35_ae) || (auto03740A35_ai < 0 && lv_phoenix_count >= auto03740A35_ae) ) ; lv_phoenix_count += auto03740A35_ai ) {
        UnitCreate(1, "Phoenix", 0, lv_player, RegionRandomPoint(lib1_gv_player[lv_player].lv_spawn_region), libNtve_gf_RandomAngle());
        UnitBehaviorAdd(UnitLastCreated(), "KillableCaster", UnitLastCreated(), 1);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("GravitonBeam", 0), lib1_gf_RandomTargetForStun(lv_player, UnitFilter(0, 0, (1 << c_targetFilterSelf) | (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterAir) | (1 << c_targetFilterMassive) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))))), c_orderQueueReplace);
        lib1_gf_IssueLeaveOrders(UnitLastCreated(), c_orderQueueAddToEnd);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectGravitonBeam_Init () {
    lib1_gt_EffectGravitonBeam = TriggerCreate("lib1_gt_EffectGravitonBeam_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Stasis Wards
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectStasisWards_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    int lv_oracle_count;

    // Automatic Variable Declarations
    const int auto811A8BF4_ae = 10;
    const int auto811A8BF4_ai = 1;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lv_oracle_count = 1;
    for ( ; ( (auto811A8BF4_ai >= 0 && lv_oracle_count <= auto811A8BF4_ae) || (auto811A8BF4_ai < 0 && lv_oracle_count >= auto811A8BF4_ae) ) ; lv_oracle_count += auto811A8BF4_ai ) {
        UnitCreate(1, "Oracle", 0, lv_player, RegionRandomPoint(lib1_gv_player[lv_player].lv_spawn_region), libNtve_gf_RandomAngle());
        UnitBehaviorAdd(UnitLastCreated(), "KillableCaster", UnitLastCreated(), 1);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("OracleStasisTrapBuild", 0), UnitTypePlacementFromPoint("SensorTower", lv_player, RegionRandomPoint(lib1_gv_player[lv_player].lv_defense_region), 2.0)), c_orderQueueReplace);
        lib1_gf_IssueLeaveOrders(UnitLastCreated(), c_orderQueueAddToEnd);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectStasisWards_Init () {
    lib1_gt_EffectStasisWards = TriggerCreate("lib1_gt_EffectStasisWards_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Hallucination Sentries
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectHallucinationSentries_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;
    int lv_count;

    // Automatic Variable Declarations
    unitgroup autoC4C1B6E7_g;
    int autoC4C1B6E7_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    autoC4C1B6E7_g = lv_units_created;
    autoC4C1B6E7_u = UnitGroupCount(autoC4C1B6E7_g, c_unitCountAll);
    for (;; autoC4C1B6E7_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoC4C1B6E7_g, autoC4C1B6E7_u);
        if (lv_unit == null) { break; }
        if ((lv_count == 0)) {
            UnitIssueOrder(lv_unit, Order(AbilityCommand("HallucinationArchon", 0)), c_orderQueueAddToFront);
            UnitIssueOrder(lv_unit, Order(AbilityCommand("HallucinationPhoenix", 0)), c_orderQueueAddToFront);
        }
        else if ((lv_count == 1)) {
            UnitIssueOrder(lv_unit, Order(AbilityCommand("HallucinationAdept", 0)), c_orderQueueAddToFront);
            UnitIssueOrder(lv_unit, Order(AbilityCommand("HallucinationAdept", 0)), c_orderQueueAddToFront);
        }
        else if ((lv_count >= 2)) {
            UnitIssueOrder(lv_unit, Order(AbilityCommand("HallucinationZealot", 0)), c_orderQueueAddToFront);
            UnitIssueOrder(lv_unit, Order(AbilityCommand("HallucinationZealot", 0)), c_orderQueueAddToFront);
        }
        lv_count = (lv_count + 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectHallucinationSentries_Init () {
    lib1_gt_EffectHallucinationSentries = TriggerCreate("lib1_gt_EffectHallucinationSentries_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Warp Probe
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectWarpProbe_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    bool lv_fetch;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lv_fetch = lib1_gf_FetchCardWithType(lv_player, lib1_gv_sTRUCTURE);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectWarpProbe_Init () {
    lib1_gt_EffectWarpProbe = TriggerCreate("lib1_gt_EffectWarpProbe_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Carrier
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectCarrier_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto9E51D783_g;
    int auto9E51D783_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto9E51D783_g = lv_units_created;
    auto9E51D783_u = UnitGroupCount(auto9E51D783_g, c_unitCountAll);
    for (;; auto9E51D783_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto9E51D783_g, auto9E51D783_u);
        if (lv_unit == null) { break; }
        if ((UnitGetType(lv_unit) == "Carrier")) {
            UnitBehaviorAdd(lv_unit, "MineralUpkeep", lv_unit, 1);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectCarrier_Init () {
    lib1_gt_EffectCarrier = TriggerCreate("lib1_gt_EffectCarrier_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Shielding Sentries
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectShieldingSentries_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;
    unit lv_target;
    unitgroup lv_tactical_and_aggressive_units;

    // Automatic Variable Declarations
    unitgroup auto907C0DC2_g;
    int auto907C0DC2_u;
    unitgroup autoB3880089_g;
    int autoB3880089_u;
    unitgroup autoBF436FFA_g;
    int autoBF436FFA_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();
    lv_tactical_and_aggressive_units = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto907C0DC2_g = UnitGroupFilterPlayer(lib1_gv_aggressive_units, lv_player, 0);
    auto907C0DC2_u = UnitGroupCount(auto907C0DC2_g, c_unitCountAll);
    for (;; auto907C0DC2_u -= 1) {
        lv_target = UnitGroupUnitFromEnd(auto907C0DC2_g, auto907C0DC2_u);
        if (lv_target == null) { break; }
        UnitGroupRemove(lib1_gv_aggressive_units, lv_target);
        UnitGroupAdd(lib1_gv_defensive_units, lv_target);
        lib1_gf_IssueDefaultOrders(lv_target);
    }
    autoB3880089_g = UnitGroupFilterPlayer(lib1_gv_tactical_units, lv_player, 0);
    autoB3880089_u = UnitGroupCount(autoB3880089_g, c_unitCountAll);
    for (;; autoB3880089_u -= 1) {
        lv_target = UnitGroupUnitFromEnd(autoB3880089_g, autoB3880089_u);
        if (lv_target == null) { break; }
        UnitGroupRemove(lib1_gv_tactical_units, lv_target);
        UnitGroupAdd(lib1_gv_defensive_units, lv_target);
        lib1_gf_IssueDefaultOrders(lv_target);
    }
    autoBF436FFA_g = UnitGroupFilterPlayer(lib1_gv_defensive_units, lv_player, 0);
    autoBF436FFA_u = UnitGroupCount(autoBF436FFA_g, c_unitCountAll);
    for (;; autoBF436FFA_u -= 1) {
        lv_target = UnitGroupUnitFromEnd(autoBF436FFA_g, autoBF436FFA_u);
        if (lv_target == null) { break; }
        lib1_gf_IssueDefaultOrders(lv_target);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectShieldingSentries_Init () {
    lib1_gt_EffectShieldingSentries = TriggerCreate("lib1_gt_EffectShieldingSentries_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Discerning Oracles
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectDiscerningOracles_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto84FA4463_g;
    int auto84FA4463_u;
    unitgroup autoC780C599_g;
    int autoC780C599_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto84FA4463_g = UnitGroupAlliance(lv_player, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter((1 << c_targetFilterCloaked), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto84FA4463_u = UnitGroupCount(auto84FA4463_g, c_unitCountAll);
    for (;; auto84FA4463_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto84FA4463_g, auto84FA4463_u);
        if (lv_unit == null) { break; }
        UnitBehaviorAdd(lv_unit, "OracleRevelation", UnitGroupRandomUnit(lv_units_created, c_unitCountAlive), 1);
    }
    autoC780C599_g = UnitGroupAlliance(lv_player, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter((1 << c_targetFilterBuried), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoC780C599_u = UnitGroupCount(autoC780C599_g, c_unitCountAll);
    for (;; autoC780C599_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoC780C599_g, autoC780C599_u);
        if (lv_unit == null) { break; }
        UnitBehaviorAdd(lv_unit, "OracleRevelation", UnitGroupRandomUnit(lv_units_created, c_unitCountAlive), 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectDiscerningOracles_Init () {
    lib1_gt_EffectDiscerningOracles = TriggerCreate("lib1_gt_EffectDiscerningOracles_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Infiltrating Adepts
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectInfiltratingAdepts_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto6E519212_g;
    int auto6E519212_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto6E519212_g = lv_units_created;
    auto6E519212_u = UnitGroupCount(auto6E519212_g, c_unitCountAll);
    for (;; auto6E519212_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto6E519212_g, auto6E519212_u);
        if (lv_unit == null) { break; }
        if ((UnitGetType(lv_unit) == "Adept")) {
            UnitIssueOrder(lv_unit, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(lib1_gv_player[lv_player].lv_defense_region)), c_orderQueueReplace);
            UnitIssueOrder(lv_unit, OrderTargetingPoint(AbilityCommand("AdeptPhaseShift", 0), RegionRandomPoint(lib1_gv_player[lv_player].lv_enemy_defense_region)), c_orderQueueAddToEnd);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectInfiltratingAdepts_Init () {
    lib1_gt_EffectInfiltratingAdepts = TriggerCreate("lib1_gt_EffectInfiltratingAdepts_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Nerazim Assassins
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectNerazimAssassins_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto728A9122_g;
    int auto728A9122_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto728A9122_g = lv_units_created;
    auto728A9122_u = UnitGroupCount(auto728A9122_g, c_unitCountAll);
    for (;; auto728A9122_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto728A9122_g, auto728A9122_u);
        if (lv_unit == null) { break; }
        UnitBehaviorAdd(lv_unit, "Assassin", lv_unit, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectNerazimAssassins_Init () {
    lib1_gt_EffectNerazimAssassins = TriggerCreate("lib1_gt_EffectNerazimAssassins_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Stargate
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectStargate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_BuildStructure(lv_player, lv_card_id, "Probe", AbilityCommand("ProtossBuild", 9), "Stargate", false, -1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectStargate_Init () {
    lib1_gt_EffectStargate = TriggerCreate("lib1_gt_EffectStargate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Forge
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectForge_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_BuildStructure(lv_player, lv_card_id, "Probe", AbilityCommand("ProtossBuild", 4), "Forge", false, -1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectForge_Init () {
    lib1_gt_EffectForge = TriggerCreate("lib1_gt_EffectForge_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Forge Effect
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectForgeEffect_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_BuildStructure(lv_player, lv_card_id, "Probe", AbilityCommand("ProtossBuild", 7), "PhotonCannon", true, 1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectForgeEffect_Init () {
    lib1_gt_EffectForgeEffect = TriggerCreate("lib1_gt_EffectForgeEffect_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Cybernetics Core
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectCyberneticsCore_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_BuildStructure(lv_player, lv_card_id, "Probe", AbilityCommand("ProtossBuild", 14), "CyberneticsCore", false, -1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectCyberneticsCore_Init () {
    lib1_gt_EffectCyberneticsCore = TriggerCreate("lib1_gt_EffectCyberneticsCore_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Assimilator
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectAssimilator_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_BuildStructure(lv_player, lv_card_id, "Probe", AbilityCommand("ProtossBuild", 2), "Assimilator", false, -1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectAssimilator_Init () {
    lib1_gt_EffectAssimilator = TriggerCreate("lib1_gt_EffectAssimilator_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Twilight Council
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectTwilightCouncil_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_BuildStructure(lv_player, lv_card_id, "Probe", AbilityCommand("ProtossBuild", 6), "TwilightCouncil", false, -1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectTwilightCouncil_Init () {
    lib1_gt_EffectTwilightCouncil = TriggerCreate("lib1_gt_EffectTwilightCouncil_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Twilight Council Periodic Shuffle
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectTwilightCouncilPeriodicShuffle_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    int lv_hand_index_to_shuffle;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lv_hand_index_to_shuffle = lib1_gf_MostExpensiveHandCard(lv_player, "", true, true);
    if ((lv_hand_index_to_shuffle >= 0)) {
        lib1_gf_ShuffleHandCardIntoDeck(lv_player, lv_hand_index_to_shuffle);
        lib1_gf_AddEffecttoQueue(lv_player, lv_card_id, lib1_gv_eF_DRAW, lib1_gt_CommonEffectDraw1, UnitGroupEmpty(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectTwilightCouncilPeriodicShuffle_Init () {
    lib1_gt_EffectTwilightCouncilPeriodicShuffle = TriggerCreate("lib1_gt_EffectTwilightCouncilPeriodicShuffle_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Feedback
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectFeedback_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto58DE9261_g;
    int auto58DE9261_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto58DE9261_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterCanHaveEnergy) | (1 << c_targetFilterVisible), 0, (1 << c_targetFilterSelf) | (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    auto58DE9261_u = UnitGroupCount(auto58DE9261_g, c_unitCountAll);
    for (;; auto58DE9261_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto58DE9261_g, auto58DE9261_u);
        if (lv_unit == null) { break; }
        if ((libNtve_gf_UnitIsVisibleToPlayer(lv_unit, lv_player) == true)) {
            if ((UnitGetPropertyFixed(lv_unit, c_unitPropLife, c_unitPropCurrent) <= 225.0)) {
                UnitGroupAdd(lib1_gv_hard_removal_targeted_units, lv_unit);
            }

            UnitCreate(1, "HighTemplar", 0, lv_player, RegionRandomPoint(lib1_gv_player[lv_player].lv_spawn_region), libNtve_gf_RandomAngle());
            UnitBehaviorAdd(UnitLastCreated(), "Caster", UnitLastCreated(), 1);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("FeedbackFromCard", 0), lv_unit), c_orderQueueReplace);
            UnitIssueOrder(UnitLastCreated(), OrderSetAutoCast(AbilityCommand("PsiStorm", 0), false), c_orderQueueAddToFront);
            UnitIssueOrder(UnitLastCreated(), OrderSetAutoCast(AbilityCommand("Feedback", 0), false), c_orderQueueAddToFront);
            lib1_gf_IssueLeaveOrders(UnitLastCreated(), c_orderQueueAddToEnd);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectFeedback_Init () {
    lib1_gt_EffectFeedback = TriggerCreate("lib1_gt_EffectFeedback_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Photon Overcharge
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectPhotonOvercharge_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    if ((UnitWeaponCount(lib1_gf_PlayersXelnagaStructure(lv_player)) == 0)) {
        UnitIssueOrder(lib1_gf_PlayersXelnagaStructure(lv_player), OrderTargetingUnit(AbilityCommand("MothershipCorePurifyNexus", 0), lib1_gf_PlayersXelnagaStructure(lv_player)), c_orderQueueAddToEnd);
    }
    else {
        UnitBehaviorAdd(lib1_gf_PlayersXelnagaStructure(lv_player), "Overcharge2", lib1_gf_PlayersXelnagaStructure(lv_player), 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectPhotonOvercharge_Init () {
    lib1_gt_EffectPhotonOvercharge = TriggerCreate("lib1_gt_EffectPhotonOvercharge_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Warp Gate
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectWarpGate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;
    bool lv_success;

    // Automatic Variable Declarations
    unitgroup auto491BF8E6_g;
    int auto491BF8E6_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto491BF8E6_g = UnitGroup("Gateway", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto491BF8E6_u = UnitGroupCount(auto491BF8E6_g, c_unitCountAll);
    for (;; auto491BF8E6_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto491BF8E6_g, auto491BF8E6_u);
        if (lv_unit == null) { break; }
        lib1_gf_RemoveAllStunsFromUnit(lv_unit);
        UnitIssueOrder(lv_unit, Order(AbilityCommand("que5", 0)), c_orderQueueReplace);
        UnitIssueOrder(lv_unit, Order(AbilityCommand("UpgradeToWarpGate", 0)), c_orderQueueReplace);
        UnitSetCustomValue(lv_unit, 0, (UnitGetCustomValue(lv_unit, 0) + 1.0));
        lv_success = true;
    }
    if ((lv_success == false)) {
        lib1_gf_GenerateWarpInCardforHand(lv_player);
        lib1_gf_GenerateWarpInCardforHand(lv_player);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectWarpGate_Init () {
    lib1_gt_EffectWarpGate = TriggerCreate("lib1_gt_EffectWarpGate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Golden Armada
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectGoldenArmada_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup autoEEB6099B_g;
    int autoEEB6099B_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    autoEEB6099B_g = lv_units_created;
    autoEEB6099B_u = UnitGroupCount(autoEEB6099B_g, c_unitCountAll);
    for (;; autoEEB6099B_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoEEB6099B_g, autoEEB6099B_u);
        if (lv_unit == null) { break; }
        if ((UnitGetType(lv_unit) == "Carrier")) {
            UnitBehaviorAdd(lv_unit, "MineralUpkeep", lv_unit, 1);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectGoldenArmada_Init () {
    lib1_gt_EffectGoldenArmada = TriggerCreate("lib1_gt_EffectGoldenArmada_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Merging Archons
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectMergingArchons_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unitgroup lv_templar;
    unitgroup lv_heroic_templar;
    unitgroup lv_waiting_templar;
    unitgroup lv_waiting_heroic_templar;
    unit lv_unit;
    int lv_count;

    // Automatic Variable Declarations
    unitgroup auto783C8729_g;
    int auto783C8729_u;
    unitgroup auto63B69E06_g;
    int auto63B69E06_u;
    int auto9357C76B_ae;
    const int auto9357C76B_ai = 1;
    unitgroup autoBA9ACC67_g;
    int autoBA9ACC67_u;
    int auto8841FBED_ae;
    const int auto8841FBED_ai = 1;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();
    lv_templar = UnitGroupEmpty();
    lv_heroic_templar = UnitGroupEmpty();
    lv_waiting_templar = UnitGroupEmpty();
    lv_waiting_heroic_templar = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto783C8729_g = UnitGroup(null, lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto783C8729_u = UnitGroupCount(auto783C8729_g, c_unitCountAll);
    for (;; auto783C8729_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto783C8729_g, auto783C8729_u);
        if (lv_unit == null) { break; }
        if (((UnitGroupHasUnit(lib1_gv_aggressive_units, lv_unit) == true) || (UnitGroupHasUnit(lib1_gv_defensive_units, lv_unit) == true) || (UnitGroupHasUnit(lib1_gv_tactical_units, lv_unit) == true)) && ((UnitGetType(lv_unit) == "DarkTemplar") || (UnitGetType(lv_unit) == "HighTemplar") || (UnitGetType(lv_unit) == "HighTemplarTaldarim") || (UnitGetType(lv_unit) == "DarkTemplarHero") || (UnitGetType(lv_unit) == "Zeratul") || (UnitGetType(lv_unit) == "DarkTemplarRaszagal") || (UnitGetType(lv_unit) == "HighTemplarTassadar") || (UnitGetType(lv_unit) == "HighTemplarMalash"))) {
            if ((UnitHasBehavior2(lv_unit, "Heroic") == true)) {
                UnitGroupAdd(lv_heroic_templar, lv_unit);
            }
            else {
                UnitGroupAdd(lv_templar, lv_unit);
            }
            if (((UnitHasBehavior2(lv_unit, "WaitingToMoveOut") == true) || (UnitHasBehavior2(lv_unit, "CasterWaitingToMoveOut") == true))) {
                if ((UnitHasBehavior2(lv_unit, "Heroic") == true)) {
                    UnitGroupAdd(lv_waiting_heroic_templar, lv_unit);
                }
                else {
                    UnitGroupAdd(lv_waiting_templar, lv_unit);
                }
            }

        }

    }
    if ((ModI(UnitGroupCount(lv_templar, c_unitCountAlive), 2) == 1)) {
        lv_unit = null;
        lv_unit = UnitGroupRandomUnit(lv_waiting_templar, c_unitCountAlive);
        if ((lv_unit == null)) {
            lv_unit = UnitGroupRandomUnit(lv_templar, c_unitCountAlive);
        }

        UnitGroupRemove(lv_templar, lv_unit);
        UnitGroupRemove(lv_waiting_templar, lv_unit);
    }

    auto63B69E06_g = lv_waiting_templar;
    auto63B69E06_u = UnitGroupCount(auto63B69E06_g, c_unitCountAll);
    for (;; auto63B69E06_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto63B69E06_g, auto63B69E06_u);
        if (lv_unit == null) { break; }
        UnitBehaviorRemove(lv_unit, "WaitingToMoveOut", c_unitBehaviorCountAll);
        UnitBehaviorRemove(lv_unit, "Waiting1Turn", c_unitBehaviorCountAll);
        UnitBehaviorRemove(lv_unit, "Waiting2Turns", c_unitBehaviorCountAll);
        UnitBehaviorRemove(lv_unit, "CasterWaitingToMoveOut", c_unitBehaviorCountAll);
        UnitGroupRemove(lib1_gv_one_turn_wait_units, lv_unit);
        UnitGroupRemove(lib1_gv_two_turn_wait_units, lv_unit);
        UnitGroupRemove(lib1_gv_ready_units, lv_unit);
    }
    UnitGroupAddUnitGroup(lib1_gv_merging_units, lv_templar);
    auto9357C76B_ae = (UnitGroupCount(lv_templar, c_unitCountAlive) / 2);
    lv_count = 1;
    for ( ; ( (auto9357C76B_ai >= 0 && lv_count <= auto9357C76B_ae) || (auto9357C76B_ai < 0 && lv_count >= auto9357C76B_ae) ) ; lv_count += auto9357C76B_ai ) {
        UnitGroupIssueOrder(lv_templar, Order(AbilityCommand("ArchonWarp", 0)), c_orderQueueReplace);
    }
    if ((ModI(UnitGroupCount(lv_heroic_templar, c_unitCountAlive), 2) == 1)) {
        lv_unit = null;
        lv_unit = UnitGroupRandomUnit(lv_waiting_heroic_templar, c_unitCountAlive);
        if ((lv_unit == null)) {
            lv_unit = UnitGroupRandomUnit(lv_heroic_templar, c_unitCountAlive);
        }

        UnitGroupRemove(lv_heroic_templar, lv_unit);
        UnitGroupRemove(lv_waiting_heroic_templar, lv_unit);
    }

    autoBA9ACC67_g = lv_waiting_heroic_templar;
    autoBA9ACC67_u = UnitGroupCount(autoBA9ACC67_g, c_unitCountAll);
    for (;; autoBA9ACC67_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoBA9ACC67_g, autoBA9ACC67_u);
        if (lv_unit == null) { break; }
        UnitBehaviorRemove(lv_unit, "WaitingToMoveOut", c_unitBehaviorCountAll);
        UnitBehaviorRemove(lv_unit, "Waiting1Turn", c_unitBehaviorCountAll);
        UnitBehaviorRemove(lv_unit, "Waiting2Turns", c_unitBehaviorCountAll);
        UnitBehaviorRemove(lv_unit, "CasterWaitingToMoveOut", c_unitBehaviorCountAll);
        UnitGroupRemove(lib1_gv_one_turn_wait_units, lv_unit);
        UnitGroupRemove(lib1_gv_two_turn_wait_units, lv_unit);
        UnitGroupRemove(lib1_gv_ready_units, lv_unit);
    }
    UnitGroupAddUnitGroup(lib1_gv_merging_units, lv_heroic_templar);
    auto8841FBED_ae = (UnitGroupCount(lv_heroic_templar, c_unitCountAlive) / 2);
    lv_count = 1;
    for ( ; ( (auto8841FBED_ai >= 0 && lv_count <= auto8841FBED_ae) || (auto8841FBED_ai < 0 && lv_count >= auto8841FBED_ae) ) ; lv_count += auto8841FBED_ai ) {
        UnitGroupIssueOrder(lv_heroic_templar, Order(AbilityCommand("ArchonHeroMerge", 0)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectMergingArchons_Init () {
    lib1_gt_EffectMergingArchons = TriggerCreate("lib1_gt_EffectMergingArchons_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Warp Offensive
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectWarpOffensive_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto82A5E13D_g;
    int auto82A5E13D_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto82A5E13D_g = lv_units_created;
    auto82A5E13D_u = UnitGroupCount(auto82A5E13D_g, c_unitCountAll);
    for (;; auto82A5E13D_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto82A5E13D_g, auto82A5E13D_u);
        if (lv_unit == null) { break; }
        lib1_gf_CreateCargoUnitsWithStatTracking(2, "Zealot", lv_unit);
        UnitGroupAddUnitGroup(lib1_gv_units_from_card[lv_card_id], UnitCargoLastCreatedGroup());
        UnitGroupAddUnitGroup(lib1_gv_aggressive_units, UnitCargoLastCreatedGroup());
        lib1_gf_CreateCargoUnitsWithStatTracking(1, "Adept", lv_unit);
        UnitGroupAddUnitGroup(lib1_gv_units_from_card[lv_card_id], UnitCargoLastCreatedGroup());
        UnitGroupAddUnitGroup(lib1_gv_aggressive_units, UnitCargoLastCreatedGroup());
        lib1_gf_CreateCargoUnitsWithStatTracking(1, "Stalker", lv_unit);
        UnitGroupAddUnitGroup(lib1_gv_units_from_card[lv_card_id], UnitCargoLastCreatedGroup());
        UnitGroupAddUnitGroup(lib1_gv_aggressive_units, UnitCargoLastCreatedGroup());
        UnitIssueOrder(lv_unit, OrderTargetingPoint(AbilityCommand("WarpPrismTransport", 2), RegionRandomPoint(lib1_gv_player[lv_player].lv_far_drop_region)), c_orderQueueReplace);
        UnitIssueOrder(lv_unit, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(lib1_gv_player[lv_player].lv_close_drop_region)), c_orderQueueAddToFront);
        UnitIssueOrder(lv_unit, Order(AbilityCommand("PhasingMode", 0)), c_orderQueueAddToEnd);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectWarpOffensive_Init () {
    lib1_gt_EffectWarpOffensive = TriggerCreate("lib1_gt_EffectWarpOffensive_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Robotics Facility
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectRoboticsFacility_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_BuildStructure(lv_player, lv_card_id, "Probe", AbilityCommand("ProtossBuild", 13), "RoboticsFacility", false, -1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectRoboticsFacility_Init () {
    lib1_gt_EffectRoboticsFacility = TriggerCreate("lib1_gt_EffectRoboticsFacility_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Fleet Beacon
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectFleetBeacon_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_BuildStructure(lv_player, lv_card_id, "Probe", AbilityCommand("ProtossBuild", 5), "FleetBeacon", false, -1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectFleetBeacon_Init () {
    lib1_gt_EffectFleetBeacon = TriggerCreate("lib1_gt_EffectFleetBeacon_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Templar Archives
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectTemplarArchives_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_BuildStructure(lv_player, lv_card_id, "Probe", AbilityCommand("ProtossBuild", 10), "TemplarArchive", false, -1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectTemplarArchives_Init () {
    lib1_gt_EffectTemplarArchives = TriggerCreate("lib1_gt_EffectTemplarArchives_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Dark Shrine
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectDarkShrine_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_BuildStructure(lv_player, lv_card_id, "Probe", AbilityCommand("ProtossBuild", 11), "DarkShrine", false, -1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectDarkShrine_Init () {
    lib1_gt_EffectDarkShrine = TriggerCreate("lib1_gt_EffectDarkShrine_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Vortex
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectVortex_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    UnitCreate(1, "Mothership", 0, lv_player, RegionRandomPoint(lib1_gv_player[lv_player].lv_spawn_region), libNtve_gf_RandomAngle());
    UnitBehaviorAdd(UnitLastCreated(), "Caster", UnitLastCreated(), 1);
    UnitBehaviorRemove(UnitLastCreated(), "CloakField", 1);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("Vortex", 0), RegionGetCenter(RegionFromId(15))), c_orderQueueReplace);
    lib1_gf_IssueLeaveOrders(UnitLastCreated(), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectVortex_Init () {
    lib1_gt_EffectVortex = TriggerCreate("lib1_gt_EffectVortex_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Replicate
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectReplicate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_CopyHandCard(lv_player, lib1_gf_CheapestHandCard(lv_player, lib1_gv_uNIT, true, -1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectReplicate_Init () {
    lib1_gt_EffectReplicate = TriggerCreate("lib1_gt_EffectReplicate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Karax
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectKarax_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto7BE5B7C3_g;
    int auto7BE5B7C3_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto7BE5B7C3_g = lv_units_created;
    auto7BE5B7C3_u = UnitGroupCount(auto7BE5B7C3_g, c_unitCountAll);
    for (;; auto7BE5B7C3_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto7BE5B7C3_g, auto7BE5B7C3_u);
        if (lv_unit == null) { break; }
        UnitBehaviorAdd(lv_unit, "KaraxsExpertise", lv_unit, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectKarax_Init () {
    lib1_gt_EffectKarax = TriggerCreate("lib1_gt_EffectKarax_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Zeratul
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectZeratul_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup autoFD4A0710_g;
    int autoFD4A0710_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    if ((lib1_gv_player[lv_player].lv_units_lost >= 8)) {
        autoFD4A0710_g = lv_units_created;
        autoFD4A0710_u = UnitGroupCount(autoFD4A0710_g, c_unitCountAll);
        for (;; autoFD4A0710_u -= 1) {
            lv_unit = UnitGroupUnitFromEnd(autoFD4A0710_g, autoFD4A0710_u);
            if (lv_unit == null) { break; }
            if ((UnitGetType(lv_unit) == "Zeratul")) {
                UnitSetPropertyFixed(lv_unit, c_unitPropShieldsMax, (UnitGetPropertyFixed(lv_unit, c_unitPropShieldsMax, c_unitPropCurrent) + 160.0));
                UnitSetPropertyFixed(lv_unit, c_unitPropShieldsPercent, 100.0);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectZeratul_Init () {
    lib1_gt_EffectZeratul = TriggerCreate("lib1_gt_EffectZeratul_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Artanis
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectArtanis_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup autoB88FF452_g;
    int autoB88FF452_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    autoB88FF452_g = lv_units_created;
    autoB88FF452_u = UnitGroupCount(autoB88FF452_g, c_unitCountAll);
    for (;; autoB88FF452_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoB88FF452_g, autoB88FF452_u);
        if (lv_unit == null) { break; }
        UnitBehaviorAdd(lv_unit, "ArtanissUnification", lv_unit, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectArtanis_Init () {
    lib1_gt_EffectArtanis = TriggerCreate("lib1_gt_EffectArtanis_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Mothership Core
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectMothershipCore_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    bool lv_add_mothership;
    int lv_hand_index;

    // Automatic Variable Declarations
    int auto43A5BEB5_ae;
    const int auto43A5BEB5_ai = 1;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();
    lv_add_mothership = true;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    if ((lib1_gf_TopofHand(lv_player) >= 0)) {
        auto43A5BEB5_ae = lib1_gf_TopofHand(lv_player);
        lv_hand_index = 0;
        for ( ; ( (auto43A5BEB5_ai >= 0 && lv_hand_index <= auto43A5BEB5_ae) || (auto43A5BEB5_ai < 0 && lv_hand_index >= auto43A5BEB5_ae) ) ; lv_hand_index += auto43A5BEB5_ai ) {
            if ((lib1_gv_player[lv_player].lv_hand.lv_card[lv_hand_index].lv_id == lib1_gf_GetCardIDByName("Mothership"))) {
                lv_add_mothership = false;
            }

        }
    }

    if ((lv_add_mothership == true)) {
        lib1_gf_GenerateCardforHand(lv_player, lib1_gf_GetCardIDByName("Mothership"));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectMothershipCore_Init () {
    lib1_gt_EffectMothershipCore = TriggerCreate("lib1_gt_EffectMothershipCore_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Canister Rifle (Nova Ops)
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectCanisterRifleNovaOps_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;
    unit lv_target_unit;

    // Automatic Variable Declarations
    unitgroup auto63A1C462_g;
    int auto63A1C462_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto63A1C462_g = UnitGroup("NovaCoop", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto63A1C462_u = UnitGroupCount(auto63A1C462_g, c_unitCountAll);
    for (;; auto63A1C462_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto63A1C462_g, auto63A1C462_u);
        if (lv_unit == null) { break; }
        if ((UnitHasBehavior2(lv_unit, "NovaWeaponHellfireShotgun") == true)) {
            UnitBehaviorAdd(lv_unit, "NovaWeaponCanisterRifle", lv_unit, 1);
            UnitBehaviorRemove(lv_unit, "NovaWeaponHellfireShotgun", c_unitBehaviorCountAll);
            UnitWeaponRemove(lv_unit, "NovaWeaponHellfireShotgun");
            UnitWeaponAdd(lv_unit, "NovaWeaponCanisterRifle", null);
        }

        lv_target_unit = lib1_gf_ToughestEnemyTargetForHardRemoval(lv_player, UnitFilter((1 << c_targetFilterBiological) | (1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))));
        if ((lv_target_unit != null)) {
            UnitIssueOrder(lv_unit, OrderTargetingUnit(AbilityCommand("NovaWeaponCanisterRifleSnipe", 0), lv_target_unit), c_orderQueueAddToFront);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectCanisterRifleNovaOps_Init () {
    lib1_gt_EffectCanisterRifleNovaOps = TriggerCreate("lib1_gt_EffectCanisterRifleNovaOps_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Hellfire Shotgun (Nova Ops)
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectHellfireShotgunNovaOps_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;
    unit lv_target_unit;

    // Automatic Variable Declarations
    unitgroup auto3B5392EF_g;
    int auto3B5392EF_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto3B5392EF_g = UnitGroup("NovaCoop", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3B5392EF_u = UnitGroupCount(auto3B5392EF_g, c_unitCountAll);
    for (;; auto3B5392EF_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto3B5392EF_g, auto3B5392EF_u);
        if (lv_unit == null) { break; }
        UnitBehaviorAdd(lv_unit, "NovaWeaponHellfireShotgun", lv_unit, 1);
        UnitBehaviorRemove(lv_unit, "NovaWeaponCanisterRifle", c_unitBehaviorCountAll);
        UnitWeaponRemove(lv_unit, "NovaWeaponCanisterRifle");
        UnitWeaponAdd(lv_unit, "NovaWeaponHellfireShotgun", null);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectHellfireShotgunNovaOps_Init () {
    lib1_gt_EffectHellfireShotgunNovaOps = TriggerCreate("lib1_gt_EffectHellfireShotgunNovaOps_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Stealth Suit (Nova Ops)
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectStealthSuitNovaOps_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;
    fixed lv_life;

    // Automatic Variable Declarations
    unitgroup autoE19E5AB7_g;
    int autoE19E5AB7_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    autoE19E5AB7_g = UnitGroup("NovaCoop", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE19E5AB7_u = UnitGroupCount(autoE19E5AB7_g, c_unitCountAll);
    for (;; autoE19E5AB7_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoE19E5AB7_g, autoE19E5AB7_u);
        if (lv_unit == null) { break; }
        UnitBehaviorAdd(lv_unit, "PermanentlyCloaked", lv_unit, 1);
        lv_life = UnitGetPropertyFixed(lv_unit, c_unitPropLife, c_unitPropCurrent);
        UnitBehaviorRemove(lv_unit, "Heroic", c_unitBehaviorCountAll);
        UnitSetPropertyFixed(lv_unit, c_unitPropLifeMax, 100.0);
        UnitBehaviorAdd(lv_unit, "Heroic", lv_unit, 1);
        UnitSetPropertyFixed(lv_unit, c_unitPropLife, MinI(FixedToInt(lv_life), 200));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectStealthSuitNovaOps_Init () {
    lib1_gt_EffectStealthSuitNovaOps = TriggerCreate("lib1_gt_EffectStealthSuitNovaOps_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Assault Suit (Nova Ops)
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectAssaultSuitNovaOps_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto8A24C16A_g;
    int auto8A24C16A_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto8A24C16A_g = UnitGroup("NovaCoop", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8A24C16A_u = UnitGroupCount(auto8A24C16A_g, c_unitCountAll);
    for (;; auto8A24C16A_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto8A24C16A_g, auto8A24C16A_u);
        if (lv_unit == null) { break; }
        UnitBehaviorRemove(lv_unit, "PermanentlyCloaked", c_unitBehaviorCountAll);
        UnitBehaviorRemove(lv_unit, "Heroic", c_unitBehaviorCountAll);
        UnitSetPropertyFixed(lv_unit, c_unitPropLifeMax, 300.0);
        UnitBehaviorAdd(lv_unit, "Heroic", lv_unit, 1);
        UnitSetPropertyFixed(lv_unit, c_unitPropLifePercent, 100.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectAssaultSuitNovaOps_Init () {
    lib1_gt_EffectAssaultSuitNovaOps = TriggerCreate("lib1_gt_EffectAssaultSuitNovaOps_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Vanish (Nova Ops)
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectVanishNovaOps_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;
    unit lv_cargo;

    // Automatic Variable Declarations
    unitgroup auto3BF3310C_g;
    int auto3BF3310C_u;
    unitgroup auto269A565E_g;
    int auto269A565E_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto3BF3310C_g = UnitGroup("NovaCoop", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3BF3310C_u = UnitGroupCount(auto3BF3310C_g, c_unitCountAll);
    for (;; auto3BF3310C_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto3BF3310C_g, auto3BF3310C_u);
        if (lv_unit == null) { break; }
        UnitGroupAdd(lib1_gv_leaving_units, lv_unit);
        UnitBehaviorAdd(lv_unit, "PermanentlyInvulnerable", lv_unit, 1);
        UnitIssueOrder(lv_unit, OrderTargetingPoint(AbilityCommand("NovaBlink", 0), RegionGetCenter(lib1_gv_player[lv_player].lv_cleanup_region)), c_orderQueueReplace);
    }
    lib1_gf_DiscardAllNovaOpsCards(lv_player);
    lib1_gf_GenerateCardforHand(lv_player, lib1_gf_GetCardIDByName("Nova"));
    Wait(0.1, c_timeGame);
    auto269A565E_g = UnitGroup("NovaCoop", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto269A565E_u = UnitGroupCount(auto269A565E_g, c_unitCountAll);
    for (;; auto269A565E_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto269A565E_g, auto269A565E_u);
        if (lv_unit == null) { break; }
        UnitRemove(lv_unit);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectVanishNovaOps_Init () {
    lib1_gt_EffectVanishNovaOps = TriggerCreate("lib1_gt_EffectVanishNovaOps_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Flashbang Grenade (Nova Ops)
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectFlashbangGrenadeNovaOps_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;
    unit lv_target_unit;

    // Automatic Variable Declarations
    unitgroup auto4DFECD87_g;
    int auto4DFECD87_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto4DFECD87_g = UnitGroup("NovaCoop", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4DFECD87_u = UnitGroupCount(auto4DFECD87_g, c_unitCountAll);
    for (;; auto4DFECD87_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto4DFECD87_g, auto4DFECD87_u);
        if (lv_unit == null) { break; }
        lv_target_unit = lib1_gf_NearestTarget(lv_player, lv_unit, UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterSelf) | (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterInvulnerable - 32))), false);
        if ((lv_target_unit != null)) {
            UnitIssueOrder(lv_unit, OrderTargetingPoint(AbilityCommand("NovaGadgetFlashBangGrenades", 0), UnitGetPosition(lv_target_unit)), c_orderQueueAddToFront);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectFlashbangGrenadeNovaOps_Init () {
    lib1_gt_EffectFlashbangGrenadeNovaOps = TriggerCreate("lib1_gt_EffectFlashbangGrenadeNovaOps_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Swarm Them (Hive Mind)
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectSwarmThemHiveMind_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup autoBFC59200_g;
    int autoBFC59200_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    autoBFC59200_g = UnitGroup(null, lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBFC59200_u = UnitGroupCount(autoBFC59200_g, c_unitCountAll);
    for (;; autoBFC59200_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoBFC59200_g, autoBFC59200_u);
        if (lv_unit == null) { break; }
        if ((UnitGetType(lv_unit) != "KerriganVoid") && (UnitGetType(lv_unit) != "Overlord") && (UnitGetType(lv_unit) != "OverlordOvermind") && (UnitGetType(lv_unit) != "OverlordTransport") && ((UnitGroupHasUnit(lib1_gv_defensive_units, lv_unit) == true) || (UnitGroupHasUnit(lib1_gv_tactical_units, lv_unit) == true))) {
            UnitGroupRemove(lib1_gv_defensive_units, lv_unit);
            UnitGroupRemove(lib1_gv_tactical_units, lv_unit);
            UnitGroupAdd(lib1_gv_aggressive_units, lv_unit);
            lib1_gf_IssueDefaultOrders(lv_unit);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectSwarmThemHiveMind_Init () {
    lib1_gt_EffectSwarmThemHiveMind = TriggerCreate("lib1_gt_EffectSwarmThemHiveMind_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Defend the Hive (Hive Mind)
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectDefendtheHiveHiveMind_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;
    unitgroup lv_commanded_units;

    // Automatic Variable Declarations
    unitgroup auto61F4423E_g;
    int auto61F4423E_u;
    unitgroup autoF36EAADA_g;
    int autoF36EAADA_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();
    lv_commanded_units = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto61F4423E_g = UnitGroup(null, lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto61F4423E_u = UnitGroupCount(auto61F4423E_g, c_unitCountAll);
    for (;; auto61F4423E_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto61F4423E_g, auto61F4423E_u);
        if (lv_unit == null) { break; }
        if ((UnitGetType(lv_unit) != "Overlord") && (UnitGetType(lv_unit) != "OverlordOvermind") && (UnitGetType(lv_unit) != "OverlordTransport") && ((UnitGroupHasUnit(lib1_gv_aggressive_units, lv_unit) == true) || (UnitGroupHasUnit(lib1_gv_tactical_units, lv_unit) == true))) {
            UnitGroupAdd(lv_commanded_units, lv_unit);
            UnitGroupRemove(lib1_gv_aggressive_units, lv_unit);
            UnitGroupRemove(lib1_gv_tactical_units, lv_unit);
            UnitGroupAdd(lib1_gv_defensive_units, lv_unit);
        }

    }
    Wait(1.1, c_timeGame);
    autoF36EAADA_g = lv_commanded_units;
    autoF36EAADA_u = UnitGroupCount(autoF36EAADA_g, c_unitCountAll);
    for (;; autoF36EAADA_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoF36EAADA_g, autoF36EAADA_u);
        if (lv_unit == null) { break; }
        lib1_gf_IssueDefaultOrders(lv_unit);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectDefendtheHiveHiveMind_Init () {
    lib1_gt_EffectDefendtheHiveHiveMind = TriggerCreate("lib1_gt_EffectDefendtheHiveHiveMind_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Set an Ambush (Hive Mind)
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectSetanAmbushHiveMind_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unitgroup lv_ambushing_units;
    unit lv_unit;
    unitgroup lv_behavior_group;

    // Automatic Variable Declarations
    unitgroup auto15E3CE29_g;
    int auto15E3CE29_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();
    lv_ambushing_units = UnitGroupEmpty();
    lv_behavior_group = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto15E3CE29_g = UnitGroup(null, lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto15E3CE29_u = UnitGroupCount(auto15E3CE29_g, c_unitCountAll);
    for (;; auto15E3CE29_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto15E3CE29_g, auto15E3CE29_u);
        if (lv_unit == null) { break; }
        if ((UnitGroupHasUnit(lib1_gv_units_created_this_battle_phase, lv_unit) == true) && ((UnitGroupHasUnit(lib1_gv_aggressive_units, lv_unit) == true) || (UnitGroupHasUnit(lib1_gv_tactical_units, lv_unit) == true) || (UnitGroupHasUnit(lib1_gv_defensive_units, lv_unit) == true)) && ((UnitGetType(lv_unit) == "Zergling") || (UnitGetType(lv_unit) == "ZerglingBurrowed") || (UnitGetType(lv_unit) == "ZerglingFast") || (UnitGetType(lv_unit) == "ZerglingFastBurrowed") || (UnitGetType(lv_unit) == "ZerglingLeaping") || (UnitGetType(lv_unit) == "ZerglingLeapingBurrowed") || (UnitGetType(lv_unit) == "ZerglingHero") || (UnitGetType(lv_unit) == "ZerglingHeroBurrowed") || (UnitGetType(lv_unit) == "ZerglingSwarmer") || (UnitGetType(lv_unit) == "ZerglingSwarmerBurrowed") || (UnitGetType(lv_unit) == "Baneling") || (UnitGetType(lv_unit) == "BanelingBurrowed") || (UnitGetType(lv_unit) == "BanelingFast") || (UnitGetType(lv_unit) == "BanelingFastBurrowed") || (UnitGetType(lv_unit) == "BanelingHeroic") || (UnitGetType(lv_unit) == "BanelingHeroicBurrowed") || (UnitGetType(lv_unit) == "BanelingStructureKiller") || (UnitGetType(lv_unit) == "BanelingStructureKillerBurrowed") || (UnitGetType(lv_unit) == "Roach") || (UnitGetType(lv_unit) == "RoachBurrowed") || (UnitGetType(lv_unit) == "RoachVile") || (UnitGetType(lv_unit) == "RoachVileBurrowed") || (UnitGetType(lv_unit) == "Hydralisk") || (UnitGetType(lv_unit) == "HydraliskBurrowed") || (UnitGetType(lv_unit) == "HydraliskHunterKiller") || (UnitGetType(lv_unit) == "HydraliskHunterKillerBurrowed") || (UnitGetType(lv_unit) == "Ultralisk") || (UnitGetType(lv_unit) == "UltraliskBurrowed") || (UnitGetType(lv_unit) == "UltraliskTorrasque") || (UnitGetType(lv_unit) == "UltraliskTorrasqueBurrowed"))) {
            lib1_gf_UnburrowSpawn(lv_player, lv_unit, RegionFromId(15), true);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectSetanAmbushHiveMind_Init () {
    lib1_gt_EffectSetanAmbushHiveMind = TriggerCreate("lib1_gt_EffectSetanAmbushHiveMind_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Mothership
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectMothership_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto737CA7DC_g;
    int auto737CA7DC_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto737CA7DC_g = UnitGroup("MothershipCore", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto737CA7DC_u = UnitGroupCount(auto737CA7DC_g, c_unitCountAll);
    for (;; auto737CA7DC_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto737CA7DC_g, auto737CA7DC_u);
        if (lv_unit == null) { break; }
        lib1_gf_RemoveAllStunsFromUnit(lv_unit);
        UnitBehaviorRemove(lv_unit, "Defensive", c_unitBehaviorCountAll);
        UnitGroupRemove(lib1_gv_defensive_units, lv_unit);
        UnitGroupAdd(lib1_gv_ready_to_morph, lv_unit);
        UnitGroupAdd(lib1_gv_tactical_units, lv_unit);
        UnitIssueOrder(lv_unit, Order(AbilityCommand("MorphToMothership", 0)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectMothership_Init () {
    lib1_gt_EffectMothership = TriggerCreate("lib1_gt_EffectMothership_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Odin Dies
//--------------------------------------------------------------------------------------------------
bool lib1_gt_OdinDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(lib1_gv_units_from_card[lib1_gf_GetCardIDByName("Odin")], EventUnit()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "ThorOdin"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib1_gf_TopofHand(EventPlayer()) < lib1_gf_HandLimit(UnitGetOwner(EventUnit())))) {
        lib1_gf_GenerateCardforHand(UnitGetOwner(EventUnit()), lib1_gf_GetCardIDByName("Thor"));
    }

    if ((lib1_gf_TopofHand(EventPlayer()) < lib1_gf_HandLimit(UnitGetOwner(EventUnit())))) {
        lib1_gf_GenerateCardforHand(UnitGetOwner(EventUnit()), lib1_gf_GetCardIDByName("Thor"));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_OdinDies_Init () {
    lib1_gt_OdinDies = TriggerCreate("lib1_gt_OdinDies_Func");
    TriggerAddEventUnitDied(lib1_gt_OdinDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nova Dies
//--------------------------------------------------------------------------------------------------
bool lib1_gt_NovaDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_hand_index;
    int lv_top_of_hand;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "NovaCoop"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gf_DiscardAllNovaOpsCards(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_NovaDies_Init () {
    lib1_gt_NovaDies = TriggerCreate("lib1_gt_NovaDies_Func");
    TriggerAddEventUnitDied(lib1_gt_NovaDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hand Limit Unit Dies
//--------------------------------------------------------------------------------------------------
bool lib1_gt_HandLimitUnitDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gf_TopofHand(EventPlayer()) > lib1_gf_HandLimit(EventPlayer())))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "HandSize1") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gf_DiscardCardFromHandtoDiscard(EventPlayer(), RandomInt(0, lib1_gf_TopofHand(EventPlayer())));
    lib1_gf_UpdateDeckUI(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_HandLimitUnitDies_Init () {
    lib1_gt_HandLimitUnitDies = TriggerCreate("lib1_gt_HandLimitUnitDies_Func");
    TriggerAddEventUnitDied(lib1_gt_HandLimitUnitDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cybernetics Revive
//--------------------------------------------------------------------------------------------------
bool lib1_gt_CyberneticsRevive_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_revive;
    int lv_revive_chance;

    // Automatic Variable Declarations
    int auto276F64E9_ae;
    const int auto276F64E9_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UnitTypeIsProtoss(UnitGetType(EventUnit())) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("CyberneticsCore", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterDazed - 32))), 0), c_unitCountAlive) >= 1))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "PersonalRecall") == false))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "Pet") == false))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), EventPlayer(), UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto276F64E9_ae = UnitGroupCount(UnitGroup("CyberneticsCore", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterDazed - 32))), 0), c_unitCountAlive);
    lv_revive_chance = 1;
    for ( ; ( (auto276F64E9_ai >= 0 && lv_revive_chance <= auto276F64E9_ae) || (auto276F64E9_ai < 0 && lv_revive_chance >= auto276F64E9_ae) ) ; lv_revive_chance += auto276F64E9_ai ) {
        if ((RandomInt(1, 2) == 1)) {
            lv_revive = true;
        }

    }
    if ((lv_revive == true)) {
        UnitCreate(1, "Stalker", c_unitCreateIgnorePlacement, EventPlayer(), RegionRandomPoint(lib1_gv_player[EventPlayer()].lv_spawn_region), libNtve_gf_RandomAngle());
        UnitBehaviorAdd(UnitLastCreated(), "PermanentlyUncommandable", UnitLastCreated(), 1);
        UnitGroupAdd(lib1_gv_aggressive_units, UnitLastCreated());
        lib1_gf_IssueDefaultOrders(UnitLastCreated());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_CyberneticsRevive_Init () {
    lib1_gt_CyberneticsRevive = TriggerCreate("lib1_gt_CyberneticsRevive_Func");
    TriggerAddEventUnitDied(lib1_gt_CyberneticsRevive, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mothership Core Dies
//--------------------------------------------------------------------------------------------------
bool lib1_gt_MothershipCoreDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_hand_index;
    int lv_top_of_hand;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "MothershipCore"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = EventPlayer();
    Wait(0.5, c_timeGame);
    if ((UnitGroupCount(UnitGroup("MothershipCore", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        lib1_gf_DiscardAllCardsWithName(lv_player, "Mothership");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_MothershipCoreDies_Init () {
    lib1_gt_MothershipCoreDies = TriggerCreate("lib1_gt_MothershipCoreDies_Func");
    TriggerAddEventUnitDied(lib1_gt_MothershipCoreDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Assassin Kills
//--------------------------------------------------------------------------------------------------
bool lib1_gt_AssassinKills_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_hand_index;
    int lv_top_of_hand;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(libNtve_gf_KillingUnit(), "Assassin") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gf_IssueLeaveOrders(libNtve_gf_KillingUnit(), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_AssassinKills_Init () {
    lib1_gt_AssassinKills = TriggerCreate("lib1_gt_AssassinKills_Func");
    TriggerAddEventUnitDied(lib1_gt_AssassinKills, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Legacy Set
//--------------------------------------------------------------------------------------------------
bool lib1_gt_LegacySet_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gv_set[lib1_gv_lEGACY].lv_name = "Legacy";
    lib1_gv_set[lib1_gv_lEGACY].lv_description = "";
    lib1_gv_set[lib1_gv_lEGACY].lv_icon = "Assets\\Textures\\Legacy.tga";
    lib1_gv_set[lib1_gv_lEGACY].lv_store_image = null;
    lib1_gv_set[lib1_gv_lEGACY].lv_start_id = 180;
    lib1_gv_set[lib1_gv_lEGACY].lv_end_id = 194;
    lib1_gv_set[lib1_gv_lEGACY].lv_state = lib1_gv_aVAILABLE;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_LegacySet_Init () {
    lib1_gt_LegacySet = TriggerCreate("lib1_gt_LegacySet_Func");
    TriggerAddEventMapInit(lib1_gt_LegacySet);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Legacy All Races
//--------------------------------------------------------------------------------------------------
bool lib1_gt_LegacyAllRaces_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_id;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_id = 179;
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_lEGACY, lib1_gv_tERRAN, "Spectre Cell", "\xE5\xB9\xBD\xE9\xAD\x82\xE5\xB0\x8F\xE7\xBB\x84", lib1_gv_tACTICAL, "", lib1_gv_rARE, 2, 2, null, "", "Assets\\Textures\\btn-unit-terran-spectre.dds", SoundLink("Spectre", 0));
    lib1_gf_DefineCardUnit(lv_id, "Spectre", 2);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_lEGACY, lib1_gv_tERRAN, "Reaping Bombers", "\xE7\x82\xB8\xE5\xBC\xB9\xE6\xAD\xBB\xE7\xA5\x9E", lib1_gv_aGGRESSIVE, "", lib1_gv_rARE, 3, 1, null, "\xE4\xBB\x96\xE4\xBB\xAC\xE5\x8F\xAA\xE4\xBC\x9A\xE4\xBD\xBF\xE7\x94\xA8\xE7\x89\xB9\xE6\xAE\x8A\xE6\x89\x8B\xE6\xA6\xB4\xE5\xBC\xB9\xE6\x94\xBB\xE5\x87\xBB\xE9\x9D\x9E\xE7\xA5\x9E\xE5\x99\xA8\xE7\x9A\x84\xE5\xBB\xBA\xE7\xAD\x91\xE3\x80\x82", "Assets\\Textures\\btn-unit-terran-reapermercenary.dds", SoundLink("Reaper_Attack", 1));
    lib1_gf_DefineCardUnit(lv_id, "MercReaper", 5);
    lib1_gf_AddRushtoCardDefinition(lv_id);
    lib1_gf_AddHeroictoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_lEGACY, lib1_gv_tERRAN, "War Pigs", "\xE6\x88\x98\xE5\x9C\xB0\xE8\xB1\xAA\xE7\x8C\xAA", lib1_gv_aGGRESSIVE, "", lib1_gv_rARE, 5, 0, null, "", "Assets\\Textures\\btn-unit-collection-marine-mercenary.dds", SoundLink("Marine_Attack", 4));
    lib1_gf_DefineCardUnit(lv_id, "MercMarine", 6);
    lib1_gf_AddHeroictoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_lEGACY, lib1_gv_tERRAN, "Orbital Command", "\xE8\xBD\xA8\xE9\x81\x93\xE6\x8C\x87\xE6\x8C\xA5\xE4\xB8\xAD\xE5\xBF\x83", lib1_gv_aCTION, "", lib1_gv_rARE, 4, 0, null, "\xE6\xB7\xBB\xE5\x8A\xA0\xE6\x89\xAB\xE6\x8F\x8F\xEF\xBC\x8C\xE7\x9F\xBF\xE8\x9E\xBA\xEF\xBC\x8C\xE5\x92\x8C\xE8\xA1\xA5\xE7\xBB\x99\xE4\xBE\x9B\xE5\xBA\x94\xE7\x89\x8C\xE5\x88\xB0\xE6\x82\xA8\xE7\x9A\x84\xE6\x89\x8B\xE4\xB8\xAD\xE3\x80\x82", "Assets\\Textures\\btn-building-terran-surveillancestation.dds", SoundLink("OrbitalCommand", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DRAW, lib1_gt_EffectOrbitalCommand);
    lib1_gf_AddDetectiontoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_lEGACY, lib1_gv_tERRAN, "Desperate Offensive", "\xE4\xB9\x9D\xE6\xAD\xBB\xE4\xB8\x80\xE7\x94\x9F", lib1_gv_aGGRESSIVE, "", lib1_gv_rARE, 7, 0, null, "\xE5\xAE\x83\xE4\xBC\x9A\xE5\x9C\xA8\xE6\x95\x8C\xE4\xBA\xBA\xE7\x9A\x84\xE9\x98\xB2\xE5\xBE\xA1\xE5\x8C\xBA\xE5\x86\x85\xE5\x8D\xB8\xE4\xB8\x8B 15 \xE5\x90\x8D\xE9\x99\x86\xE6\x88\x98\xE9\x98\x9F\xE5\x91\x98\xE3\x80\x82\xE5\xA6\x82\xE6\x9E\x9C\xE4\xBD\xA0\xE7\x9A\x84\xE7\x89\x8C\xE5\xBA\x93\xE7\xA9\xBA\xE4\xBA\x86\xEF\xBC\x8C\xE9\x82\xA3\xE4\xB9\x88\xE4\xBC\x9A\xE5\x8D\xB8\xE8\xBD\xBD 30 \xE4\xB8\xAA\xE3\x80\x82", "Assets\\Textures\\btn-unit-terran-hercules.dds", SoundLink("Marine_What", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DEFAULT, lib1_gt_EffectDesperateOffensive);
    lib1_gf_DefineCardUnit(lv_id, "Hercules", 1);
    lib1_gf_AddRushtoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_lEGACY, lib1_gv_zERG, "Infested Horde", "\xE6\x84\x9F\xE6\x9F\x93\xE8\x80\x85\xE6\xB5\xB7", lib1_gv_aGGRESSIVE, "", lib1_gv_rARE, 4, 0, null, "", "Assets\\Textures\\btn-unit-zerg-infestedcolonist.dds", SoundLink("InfestedMoan", 0));
    lib1_gf_DefineCardUnit(lv_id, "InfestedCivilian", 30);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_lEGACY, lib1_gv_zERG, "Brutalisk", "\xE8\x8E\xBD\xE5\x85\xBD", lib1_gv_dEFENSIVE, "", lib1_gv_rARE, 5, 2, null, "\xE6\x88\x98\xE5\x90\xBC\xEF\xBC\x9A\xE5\xAF\xB9\xE6\x9C\x80\xE8\x82\x89\xE7\x9A\x84\xE6\x95\x8C\xE5\xAF\xB9\xE7\xA9\xBA\xE4\xB8\xAD\xE5\x8D\x95\xE4\xBD\x8D\xE9\x80\xA0\xE6\x88\x90 1500 \xE7\x82\xB9\xE4\xBC\xA4\xE5\xAE\xB3\xE3\x80\x82", "Assets\\Textures\\btn-unit-zerg-brutalisk.dds", SoundLink("Zergling_What", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_REMOVE_UNIT_1500_DAMAGE, lib1_gt_EffectBrutalisk);
    lib1_gf_DefineCardUnit(lv_id, "Brutalisk", 1);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_lEGACY, lib1_gv_zERG, "Leaping Raptors", "\xE8\xB7\xB3\xE8\xB7\x83\xE7\x8C\x9B\xE5\x85\xBD", lib1_gv_aGGRESSIVE, "", lib1_gv_rARE, 5, 0, lib1_gt_EffectLeapingRaptors, "\xE4\xBB\x96\xE4\xBB\xAC\xE4\xBB\x8E\xE4\xB8\xAD\xE9\x97\xB4\xE9\xAB\x98\xE5\x9C\xB0\xE5\x87\xBA\xE5\x87\xBB\xEF\xBC\x8C\xE5\xB9\xB6\xE5\x8D\x87\xE7\xBA\xA7\xE4\xBA\x86\xE7\xA7\xBB\xE9\x80\x9F\xE5\x92\x8C\xE6\x82\xAC\xE5\xB4\x96\xE8\xB7\xB3\xE8\xB7\x83\xE8\x83\xBD\xE5\x8A\x9B\xE3\x80\x82", "Assets\\Textures\\btn-ability-zerg-cliffjump-zergling.dds", SoundLink("Zergling_What", 0));
    lib1_gf_DefineCardUnit(lv_id, "ZerglingLeaping", 24);
    lib1_gf_AddRushtoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_lEGACY, lib1_gv_zERG, "Infestation Pit", "\xE6\x84\x9F\xE6\x9F\x93\xE6\xB7\xB1\xE6\xB8\x8A", lib1_gv_sTRUCTURE, "", lib1_gv_rARE, 3, 3, lib1_gt_EffectInfestationPit, "\xE5\xBB\xBA\xE9\x80\xA0\xE4\xB8\x80\xE4\xB8\xAA\xE6\x84\x9F\xE6\x9F\x93\xE6\xB7\xB1\xE6\xB8\x8A\xE3\x80\x82\xE7\x9B\xB4\xE5\x88\xB0\xE8\xA2\xAB\xE6\x91\xA7\xE6\xAF\x81\xEF\xBC\x8C\xE6\xAF\x8F\xE4\xB8\xAA\xE8\xA2\xAB\xE6\x84\x9F\xE6\x9F\x93\xE5\x8D\x95\xE4\xBD\x8D\xE6\xAD\xBB\xE4\xBA\xA1\xE5\x90\x8E\xE9\x83\xBD\xE5\xB0\x86\xE5\xA4\x8D\xE6\xB4\xBB\xE6\x88\x90\xE8\xA2\xAB\xE6\x84\x9F\xE6\x9F\x93\xE7\x9A\x84\xE5\xB9\xB3\xE6\xB0\x91\xE3\x80\x82", "Assets\\Textures\\btn-building-zerg-infestationpit.dds", SoundLink("InfestationPit_What", 0));
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_lEGACY, lib1_gv_zERG, "Vile Roaches", "\xE8\x82\xAE\xE8\x84\x8F\xE7\x9A\x84\xE8\x9F\x91\xE8\x9E\x82", lib1_gv_tACTICAL, "", lib1_gv_rARE, 5, 2, lib1_gt_CommonEffectRemove1GasIncome, "\xE5\x90\x8E\xE6\x92\xA4\xE6\x97\xB6\xE6\xBD\x9C\xE5\x9C\xB0\xE3\x80\x82\xE6\x88\x98\xE5\x90\xBC\xEF\xBC\x9A\xE4\xBD\xA0\xE7\x9A\x84\xE7\x93\xA6\xE6\x96\xAF\xE4\xBA\xA7\xE8\x83\xBD\xE5\x87\x8F\xE5\xB0\x91 1 \xE3\x80\x82", "Assets\\Textures\\btn-unit-zerg-roach-vile.dds", SoundLink("Roach_Attack", 0));
    lib1_gf_DefineCardUnit(lv_id, "RoachVile", 5);
    lib1_gf_AddHeroictoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_lEGACY, lib1_gv_pROTOSS, "Zealot Veterans", "\xE7\x8B\x82\xE7\x83\xAD\xE8\x80\x85\xE8\x80\x81\xE5\x85\xB5", lib1_gv_aGGRESSIVE, "", lib1_gv_rARE, 4, 0, null, "\xE4\xBB\x96\xE4\xBB\xAC\xE5\x88\x9D\xE5\xA7\x8B\xE6\x8A\xA4\xE7\x9B\xBE\xE5\x80\xBC\xE4\xB8\xBA 0 \xE5\xB9\xB6\xE4\xB8\x94\xE5\x88\x9D\xE5\xA7\x8B\xE7\x94\x9F\xE5\x91\xBD\xE5\x80\xBC\xE5\x8F\xAA\xE5\x89\xA9\xE4\xB8\x8B\xE4\xB8\x80\xE5\x8D\x8A", "Assets\\Textures\\btn-unit-protoss-prisonzealot.dds", SoundLink("Zealot_Yes", 1));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_BUFF_UNITS, lib1_gt_CommonEffectDamagedSpawn);
    lib1_gf_DefineCardUnit(lv_id, "ZealotVeteran", 8);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_lEGACY, lib1_gv_pROTOSS, "Sieging Tempests", "\xE6\x94\xBB\xE5\x9F\x8E\xE9\xA3\x8E\xE6\x9A\xB4", lib1_gv_aGGRESSIVE, "", lib1_gv_rARE, 5, 3, null, "\xE4\xBB\x96\xE4\xBB\xAC\xE6\x8B\xA5\xE6\x9C\x89\xE5\x8F\x8C\xE5\x80\x8D\xE5\xB0\x84\xE7\xA8\x8B\xEF\xBC\x8C\xE4\xBD\x86\xE5\x8F\xAA\xE8\x83\xBD\xE6\x94\xBB\xE5\x87\xBB\xE9\x9D\x9E\xE7\xA5\x9E\xE5\x99\xA8\xE7\x9A\x84\xE5\xBB\xBA\xE7\xAD\x91\xE3\x80\x82", "Assets\\Textures\\btn-unit-protoss-tempest-purifier.dds", SoundLink("Pusher_Attack", 4));
    lib1_gf_DefineCardUnit(lv_id, "TempestHeroPurifier", 3);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_lEGACY, lib1_gv_pROTOSS, "Chrono Probe", "\xE6\x97\xB6\xE7\xA9\xBA\xE6\x8E\xA2\xE6\x9C\xBA", lib1_gv_aCTION, "", lib1_gv_rARE, 2, 0, null, "\xE6\x8A\xBD\xE5\x8F\x96\xE4\xB8\x80\xE5\xBC\xA0\xE6\x98\x9F\xE7\xA9\xBA\xE5\x8A\xA0\xE9\x80\x9F\xE6\x88\x96\xE6\xB0\x94\xE7\x9F\xBF\xE5\x88\xB0\xE4\xBD\xA0\xE6\x89\x8B\xE4\xB8\xAD\xE3\x80\x82", "Assets\\Textures\\btn-unit-collection-purifier-probe.dds", SoundLink("Probe_Yes", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_FETCH, lib1_gt_EffectChronoProbe);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_lEGACY, lib1_gv_pROTOSS, "Photon Array", "\xE5\x85\x89\xE5\xAD\x90\xE9\x98\xB5\xE5\x88\x97", lib1_gv_sTRUCTURE, "", lib1_gv_rARE, 5, 0, lib1_gt_EffectPhotonArray, "\xE4\xBD\xA0\xE6\x8B\xA5\xE6\x9C\x89\xE5\xA4\x9A\xE5\xB0\x91\xE4\xB8\xAA\xE5\xBB\xBA\xE7\xAD\x91\xE4\xBE\xBF\xE5\xBB\xBA\xE9\x80\xA0\xE5\xA4\x9A\xE5\xB0\x91\xE4\xB8\xAA\xE5\x85\x89\xE5\xAD\x90\xE7\x82\xAE\xE5\xA1\x94\xE3\x80\x82", "Assets\\Textures\\btn-ability-protoss-phasecannon.dds", SoundLink("PhotonCannon_What", 0));
    lib1_gf_AddDetectiontoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_lEGACY, lib1_gv_pROTOSS, "Undying Stalker", "\xE4\xB8\x8D\xE6\xAD\xBB\xE7\x9A\x84\xE8\xBF\xBD\xE7\x8C\x8E", lib1_gv_tACTICAL, "", lib1_gv_rARE, 2, 1, lib1_gt_EffectUndyingStalker, "\xE4\xBA\xA1\xE8\xAF\xAD\xEF\xBC\x9A\xE5\x9B\x9E\xE5\x88\xB0\xE4\xBD\xA0\xE7\x9A\x84\xE6\x89\x8B\xE7\x89\x8C", "Assets\\Textures\\btn-unit-protoss-stalker-purifier.dds", SoundLink("Stalker_Attack", 6));
    lib1_gf_DefineCardUnit(lv_id, "StalkerPurifier", 1);
    lib1_gf_AddHeroictoCardDefinition(lv_id);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_LegacyAllRaces_Init () {
    lib1_gt_LegacyAllRaces = TriggerCreate("lib1_gt_LegacyAllRaces_Func");
    TriggerAddEventMapInit(lib1_gt_LegacyAllRaces);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Orbital Command
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectOrbitalCommand_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_GenerateCardforHand(lv_player, lib1_gf_GetCardIDByName("Scanner Sweep"));
    lib1_gf_GenerateCardforHand(lv_player, lib1_gf_GetCardIDByName("MULE"));
    lib1_gf_GenerateCardforHand(lv_player, lib1_gf_GetCardIDByName("Supply Drop"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectOrbitalCommand_Init () {
    lib1_gt_EffectOrbitalCommand = TriggerCreate("lib1_gt_EffectOrbitalCommand_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Desperate Offensive
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectDesperateOffensive_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto3757FED8_g;
    int auto3757FED8_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto3757FED8_g = lv_units_created;
    auto3757FED8_u = UnitGroupCount(auto3757FED8_g, c_unitCountAll);
    for (;; auto3757FED8_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto3757FED8_g, auto3757FED8_u);
        if (lv_unit == null) { break; }
        UnitGroupAdd(lib1_gv_leaving_units, lv_unit);
        lib1_gf_CreateCargoUnitsWithStatTracking(15, "Marine", lv_unit);
        UnitGroupAddUnitGroup(lib1_gv_units_from_card[lv_card_id], UnitCargoLastCreatedGroup());
        UnitGroupAddUnitGroup(lib1_gv_aggressive_units, UnitCargoLastCreatedGroup());
        if ((lib1_gf_FirstEmptyDeckSlot(lv_player) == 0)) {
            lib1_gf_CreateCargoUnitsWithStatTracking(15, "Marine", lv_unit);
            UnitGroupAddUnitGroup(lib1_gv_units_from_card[lv_card_id], UnitCargoLastCreatedGroup());
            UnitGroupAddUnitGroup(lib1_gv_aggressive_units, UnitCargoLastCreatedGroup());
        }

        UnitIssueOrder(lv_unit, OrderTargetingPoint(AbilityCommand("HerculesTransport", 2), RegionRandomPoint(lib1_gv_player[lv_player].lv_enemy_build_region)), c_orderQueueReplace);
        UnitIssueOrder(lv_unit, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(lib1_gv_player[lv_player].lv_cleanup_region)), c_orderQueueAddToEnd);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectDesperateOffensive_Init () {
    lib1_gt_EffectDesperateOffensive = TriggerCreate("lib1_gt_EffectDesperateOffensive_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Brutalisk
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectBrutalisk_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;
    unit lv_target;

    // Automatic Variable Declarations
    unitgroup autoB38D3D87_g;
    int autoB38D3D87_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    autoB38D3D87_g = lv_units_created;
    autoB38D3D87_u = UnitGroupCount(autoB38D3D87_g, c_unitCountAll);
    for (;; autoB38D3D87_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoB38D3D87_g, autoB38D3D87_u);
        if (lv_unit == null) { break; }
        lv_target = lib1_gf_ToughestEnemyTargetForHardRemoval(lv_player, UnitFilter((1 << c_targetFilterAir) | (1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))));
        if ((lv_target != null)) {
            if ((UnitHasBehavior2(lv_unit, "WaitingToMoveOut") == true)) {
                UnitBehaviorRemove(lv_unit, "WaitingToMoveOut", c_unitBehaviorCountAll);
                UnitBehaviorAdd(lv_unit, "CasterWaitingToMoveOut", lv_unit, 1);
            }
            else {
                Wait(0.1, c_timeGame);
            }
            UnitIssueOrder(lv_unit, OrderTargetingUnit(AbilityCommand("BrutaliskAA", 0), lv_target), c_orderQueueAddToFront);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectBrutalisk_Init () {
    lib1_gt_EffectBrutalisk = TriggerCreate("lib1_gt_EffectBrutalisk_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Leaping Raptors
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectLeapingRaptors_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup autoF2C336C7_g;
    int autoF2C336C7_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    autoF2C336C7_g = lv_units_created;
    autoF2C336C7_u = UnitGroupCount(autoF2C336C7_g, c_unitCountAll);
    for (;; autoF2C336C7_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoF2C336C7_g, autoF2C336C7_u);
        if (lv_unit == null) { break; }
        lib1_gf_IssueCliffAmbushOrders(lv_unit);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectLeapingRaptors_Init () {
    lib1_gt_EffectLeapingRaptors = TriggerCreate("lib1_gt_EffectLeapingRaptors_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Infestation Pit
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectInfestationPit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_BuildStructure(lv_player, lv_card_id, "Drone", AbilityCommand("ZergBuild", 8), "InfestationPit", false, -1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectInfestationPit_Init () {
    lib1_gt_EffectInfestationPit = TriggerCreate("lib1_gt_EffectInfestationPit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Chrono Probe
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectChronoProbe_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    bool lv_fetch;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lv_fetch = lib1_gf_FetchCardWithName(lv_player, "Chrono Boost", "Assimilator");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectChronoProbe_Init () {
    lib1_gt_EffectChronoProbe = TriggerCreate("lib1_gt_EffectChronoProbe_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Photon Array
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectPhotonArray_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_structure;

    // Automatic Variable Declarations
    unitgroup auto9202A562_g;
    int auto9202A562_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto9202A562_g = UnitGroup(null, lv_player, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0);
    auto9202A562_u = UnitGroupCount(auto9202A562_g, c_unitCountAll);
    for (;; auto9202A562_u -= 1) {
        lv_structure = UnitGroupUnitFromEnd(auto9202A562_g, auto9202A562_u);
        if (lv_structure == null) { break; }
        lib1_gf_BuildStructure(lv_player, lv_card_id, "Probe", AbilityCommand("ProtossBuild", 7), "PhotonCannon", true, 1.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectPhotonArray_Init () {
    lib1_gt_EffectPhotonArray = TriggerCreate("lib1_gt_EffectPhotonArray_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Undying Stalker
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectUndyingStalker_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup autoB72CFFE2_g;
    int autoB72CFFE2_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    autoB72CFFE2_g = lv_units_created;
    autoB72CFFE2_u = UnitGroupCount(autoB72CFFE2_g, c_unitCountAll);
    for (;; autoB72CFFE2_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoB72CFFE2_g, autoB72CFFE2_u);
        if (lv_unit == null) { break; }
        UnitBehaviorAdd(lv_unit, "Undying", lv_unit, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectUndyingStalker_Init () {
    lib1_gt_EffectUndyingStalker = TriggerCreate("lib1_gt_EffectUndyingStalker_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Infested Dies
//--------------------------------------------------------------------------------------------------
bool lib1_gt_InfestedDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "InfestedCivilian") || (UnitGetType(EventUnit()) == "InfestedCivilianBurrowed") || (UnitGetType(EventUnit()) == "InfestorTerran") || (UnitGetType(EventUnit()) == "InfestorTerranBurrowed") || (UnitGetType(EventUnit()) == "InfestedExploder") || (UnitGetType(EventUnit()) == "InfestedExploderBurrowed") || (UnitGetType(EventUnit()) == "Aberration")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gv_player[EventPlayer()].lv_infested_unit_lost = (lib1_gv_player[EventPlayer()].lv_infested_unit_lost + 1);
    if ((UnitGroupCount(UnitGroup("InfestationPit", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterDazed - 32))), 0), c_unitCountAlive) >= 1)) {
        UnitCreate(1, "InfestedCivilian", c_unitCreateIgnorePlacement, EventPlayer(), RegionRandomPoint(lib1_gv_player[EventPlayer()].lv_spawn_region), libNtve_gf_RandomAngle());
        UnitBehaviorAdd(UnitLastCreated(), "PermanentlyUncommandable", UnitLastCreated(), 1);
        UnitGroupAdd(lib1_gv_aggressive_units, UnitLastCreated());
        lib1_gf_IssueDefaultOrders(UnitLastCreated());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_InfestedDies_Init () {
    lib1_gt_InfestedDies = TriggerCreate("lib1_gt_InfestedDies_Func");
    TriggerAddEventUnitDied(lib1_gt_InfestedDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Undying Unit Dies
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UndyingUnitDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "Undying") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gf_GenerateCardforHand(EventPlayer(), lib1_gf_GetCardIDByName("Undying Stalker"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UndyingUnitDies_Init () {
    lib1_gt_UndyingUnitDies = TriggerCreate("lib1_gt_UndyingUnitDies_Func");
    TriggerAddEventUnitDied(lib1_gt_UndyingUnitDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: First Contact Set
//--------------------------------------------------------------------------------------------------
bool lib1_gt_FirstContactSet_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gv_set[lib1_gv_fIRST_CONTACT].lv_name = "\xe6\x89\xa9\xe5\xb1\x95\xe5\x8c\x85 A";
    lib1_gv_set[lib1_gv_fIRST_CONTACT].lv_description = "\xe5\xbd\x93 3 \xe5\x9c\xba\xe7\xab\x9e\xe4\xba\x89\xe6\x8e\xa5\xe8\xa7\xa6\xe6\x97\xb6\xef\xbc\x8c\xe4\xba\xa7\xe7\x94\x9f\xe4\xba\x86\xe6\xb7\xb7\xe4\xb9\xb1\xe3\x80\x82\xe7\xa5\x9e\xe6\x97\x8f\xe7\x84\x9a\xe6\xaf\x81\xe4\xba\x86\xe6\x95\xb4\xe4\xb8\xaa\xe4\xba\xba\xe7\xb1\xbb\xe4\xb8\x96\xe7\x95\x8c\xef\xbc\x8c\xe4\xbb\xa5\xe9\x81\x8f\xe5\x88\xb6\xe8\x99\xab\xe6\x97\x8f\xe7\x9a\x84\xe8\x94\x93\xe5\xbb\xb6\xe3\x80\x82\xe4\xba\xba\xe7\xb1\xbb\xe8\xaf\x95\xe5\x9b\xbe\xe5\xb9\xb6\xe7\xa0\x94\xe7\xa9\xb6\xe5\x9c\xa8\xe8\x87\xaa\xe5\xb7\xb1\xe7\x9a\x84\xe6\x88\x98\xe4\xba\x89\xe4\xb8\xad\xe4\xbd\xbf\xe7\x94\xa8\xe8\x99\xab\xe6\x97\x8f\xe4\xbd\x9c\xe4\xb8\xba\xe6\xad\xa6\xe5\x99\xa8\xe3\x80\x82\xe8\x99\xab\xe6\x97\x8f\xe7\x9a\x84\xe4\xbc\xa0\xe6\x92\xad\xe9\x80\x9f\xe5\xba\xa6\xe6\xaf\x94\xe4\xba\xba\xe7\xb1\xbb\xe6\x83\xb3\xe8\xb1\xa1\xe7\x9a\x84\xe8\xa6\x81\xe5\xbf\xab\xe3\x80\x82";
    lib1_gv_set[lib1_gv_fIRST_CONTACT].lv_icon = "Assets\\Textures\\FirstContact.tga";
    lib1_gv_set[lib1_gv_fIRST_CONTACT].lv_store_image = "Assets\\Textures\\FirstContact.dds";
    lib1_gv_set[lib1_gv_fIRST_CONTACT].lv_start_id = 200;
    lib1_gv_set[lib1_gv_fIRST_CONTACT].lv_end_id = 289;
    lib1_gv_set[lib1_gv_fIRST_CONTACT].lv_state = lib1_gv_aVAILABLE;
    lib1_gv_set[lib1_gv_fIRST_CONTACT].lv_price = 15;
    lib1_gv_set[lib1_gv_fIRST_CONTACT].lv_common_cost = 40;
    lib1_gv_set[lib1_gv_fIRST_CONTACT].lv_uncommon_cost = 75;
    lib1_gv_set[lib1_gv_fIRST_CONTACT].lv_rare_cost = 300;
    lib1_gv_set[lib1_gv_fIRST_CONTACT].lv_unique_cost = 900;
    lib1_gv_set[lib1_gv_fIRST_CONTACT].lv_common_sell = 15;
    lib1_gv_set[lib1_gv_fIRST_CONTACT].lv_uncommon_sell = 35;
    lib1_gv_set[lib1_gv_fIRST_CONTACT].lv_rare_sell = 150;
    lib1_gv_set[lib1_gv_fIRST_CONTACT].lv_unique_sell = 450;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_FirstContactSet_Init () {
    lib1_gt_FirstContactSet = TriggerCreate("lib1_gt_FirstContactSet_Func");
    TriggerAddEventMapInit(lib1_gt_FirstContactSet);
}

//--------------------------------------------------------------------------------------------------
// Trigger: First Contact Terran
//--------------------------------------------------------------------------------------------------
bool lib1_gt_FirstContactTerran_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_id;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_id = 199;
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_tERRAN, "Firebat Squad", "\xE7\x81\xAB\xE8\x9D\xA0\xE5\xB0\x8F\xE9\x98\x9F", lib1_gv_aGGRESSIVE, "", lib1_gv_cOMMON, 1, 1, null, "", "Assets\\Textures\\btn-unit-terran-firebat.dds", SoundLink("Firebat", 0));
    lib1_gf_DefineCardUnit(lv_id, "Firebat", 4);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_tERRAN, "Goliath Company", "\xE6\xAD\x8C\xE5\x88\xA9\xE4\xBA\x9A\xE8\xBF\x9E", lib1_gv_aGGRESSIVE, "", lib1_gv_cOMMON, 6, 2, null, "", "Assets\\Textures\\btn-unit-terran-goliath.dds", SoundLink("Goliath", 0));
    lib1_gf_DefineCardUnit(lv_id, "Goliath", 6);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_tERRAN, "Wraith Fleet", "\xE6\x80\xA8\xE7\x81\xB5\xE6\x88\x98\xE9\x98\x9F", lib1_gv_aGGRESSIVE, "", lib1_gv_cOMMON, 4, 2, null, "", "Assets\\Textures\\btn-unit-terran-wraith.dds", SoundLink("Wraith", 0));
    lib1_gf_DefineCardUnit(lv_id, "Wraith", 3);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_tERRAN, "Conscripted Marines", "\xE5\xBE\x81\xE5\x8F\xAC\xE9\x99\x86\xE6\x88\x98\xE9\x98\x9F", lib1_gv_aGGRESSIVE, lib1_gv_cONFEDERATE, lib1_gv_cOMMON, 3, 0, null, "\xE6\xB4\x97\xE4\xB8\x80\xE5\xBC\xA0\xE6\x9A\xB4\xE4\xB9\xB1\xE7\x89\x8C\xE5\x88\xB0\xE4\xBD\xA0\xE5\x8D\xA1\xE7\xBB\x84\xE4\xB8\xAD\xE3\x80\x82", "Assets\\Textures\\inspiration_coop.dds", SoundLink("Marine_Pissed", 2));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DEBUFF_DECK, lib1_gt_EffectRiot1);
    lib1_gf_DefineCardUnit(lv_id, "Marine", 10);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_tERRAN, "Recon Squad", "\xE4\xBE\xA6\xE5\xAF\x9F\xE5\xB0\x8F\xE9\x98\x9F", lib1_gv_aGGRESSIVE, lib1_gv_cONFEDERATE, lib1_gv_cOMMON, 4, 1, null, "\xE6\x88\x98\xE5\x90\xBC\xEF\xBC\x9A \xE5\xB0\x86\xE4\xB8\x80\xE5\xBC\xA0\xE5\xBC\x82\xE5\xBD\xA2\xE7\xA0\x94\xE7\xA9\xB6\xE7\x89\x8C\xE6\xB7\xBB\xE5\x8A\xA0\xE5\x88\xB0\xE4\xBD\xA0\xE6\x89\x8B\xE4\xB8\xAD\xE3\x80\x82", "Assets\\Textures\\btn-upgrade-nova-equipment-rangefinderoculus.dds", SoundLink("Marine_Yes", 21));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DRAW, lib1_gt_EffectReconSquad);
    lib1_gf_DefineCardUnit(lv_id, "Marine", 8);
    lib1_gf_DefineCardUnit(lv_id, "Firebat", 2);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_tERRAN, "Tarsonis Turrets", "\xE5\xA1\x94\xE6\xA1\x91\xE5\xB0\xBC\xE6\x96\xAF\xE9\x98\xB2\xE7\xA9\xBA\xE5\xA1\x94", lib1_gv_sTRUCTURE, lib1_gv_cONFEDERATE, lib1_gv_cOMMON, 5, 0, lib1_gt_EffectTarsonisTurrets, "\xE5\xBB\xBA\xE9\x80\xA0 4 \xE4\xB8\xAA\xE5\xAF\xBC\xE5\xBC\xB9\xE5\xA1\x94\xE3\x80\x82", "Assets\\Textures\\talent-swann-level03-improvedturrets.dds", SoundLink("MissileTurret_Servo01_MP", 0));
    lib1_gf_AddDetectiontoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_tERRAN, "Badlands Garage", "\xE8\x8D\x92\xE5\x8E\x9F\xE8\xBD\xA6\xE5\xBA\x93", lib1_gv_sTRUCTURE, "", lib1_gv_cOMMON, 2, 1, lib1_gt_EffectBadlandsGarage, "\xE5\xBB\xBA\xE9\x80\xA0\xE4\xB8\x80\xE4\xB8\xAA\xE9\x87\x8D\xE5\xB7\xA5\xEF\xBC\x8C\xE6\xAF\x8F\xE5\x9B\x9E\xE5\x90\x88\xE7\x94\x9F\xE4\xBA\xA7\xE4\xB8\x80\xE4\xB8\xAA\xE7\xA7\x83\xE9\xB9\xB0\xE3\x80\x82", "Assets\\Textures\\talent-raynor-level09-factoryresearchbundle.dds", SoundLink("Factory_What", 0));
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_tERRAN, "Spider Minefield", "\xE8\x9C\x98\xE8\x9B\x9B\xE9\x9B\xB7\xE5\x8C\xBA", lib1_gv_aCTION, "", lib1_gv_cOMMON, 4, 0, null, "\xE5\x8F\xAC\xE5\x94\xA4 6 \xE4\xB8\xAA\xE7\xA7\x83\xE9\xB9\xB0\xE5\xB9\xB6\xE5\x9C\xA8\xE6\x88\x98\xE5\x9C\xBA\xE4\xB8\xAD\xE5\xBF\x83\xE9\x99\x84\xE8\xBF\x91\xE6\x94\xBE\xE7\xBD\xAE\xE8\x9C\x98\xE8\x9B\x9B\xE9\x9B\xB7\xE3\x80\x82", "Assets\\Textures\\btn-upgrade-siegetank-spidermines.dds", SoundLink("VultureSpiderMineAttackImpact", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_CREATE_UNIT, lib1_gt_EffectSpiderMinefield);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_tERRAN, "Irradiate", "\xE8\xBE\x90\xE7\x85\xA7", lib1_gv_aCTION, "", lib1_gv_cOMMON, 1, 1, null, "\xE5\xAF\xB9 4 \xE4\xB8\xAA\xE6\x95\x8C\xE6\x96\xB9\xE7\x94\x9F\xE7\x89\xA9\xE5\x8D\x95\xE4\xBD\x8D\xE4\xBD\xBF\xE7\x94\xA8\xE8\xBE\x90\xE7\x85\xA7\xE3\x80\x82\xE9\x9A\x8F\xE7\x9D\x80\xE6\x97\xB6\xE9\x97\xB4\xE7\x9A\x84\xE6\x8E\xA8\xE7\xA7\xBB\xEF\xBC\x8C\xE8\xBF\x99\xE4\xBC\x9A\xE5\xAF\xB9\xE5\xAE\x83\xE4\xBB\xAC\xE5\x92\x8C\xE9\x99\x84\xE8\xBF\x91\xE7\x9A\x84\xE5\x85\xB6\xE4\xBB\x96\xE6\x95\x8C\xE6\x96\xB9\xE7\x94\x9F\xE7\x89\xA9\xE5\x8D\x95\xE4\xBD\x8D\xE9\x80\xA0\xE6\x88\x90\xE4\xBC\xA4\xE5\xAE\xB3\xE3\x80\x82", "Assets\\Textures\\btn-upgrade-swann-irradiate.dds", SoundLink("ScienceVessel_IrradiateImpact", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_REMOVE_UNIT_AOE_DAMAGE, lib1_gt_EffectIrradiate);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_tERRAN, "Tax the Colonies", "\xE6\xAE\x96\xE6\xB0\x91\xE5\x9C\xB0\xE5\xBE\x81\xE7\xA8\x8E", lib1_gv_aCTION, lib1_gv_cONFEDERATE, lib1_gv_cOMMON, 4, 0, null, "\xE6\x8A\xBD 3 \xE5\xBC\xA0\xE7\x89\x8C,\xE5\xB9\xB6\xE5\xB0\x86 3 \xE5\xBC\xA0\xE6\x9A\xB4\xE4\xB9\xB1\xE7\x89\x8C\xE6\xB4\x97\xE5\x85\xA5\xE4\xBD\xA0\xE7\x9A\x84\xE7\x89\x8C\xE5\xBA\x93\xE3\x80\x82", "Assets\\Textures\\btn-tips-resourcecaches.dds", SoundLink("UI_Pickup_Money", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DEBUFF_DECK, lib1_gt_EffectRiot3);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DRAW, lib1_gt_CommonEffectDraw3);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_tERRAN, "Ghost Trainees", "\xE5\xB9\xBD\xE7\x81\xB5\xE6\x96\xB0\xE5\x85\xB5", lib1_gv_tACTICAL, "", lib1_gv_uNCOMMON, 3, 1, lib1_gt_EffectGhostOperatives, "\xE4\xBB\x96\xE4\xBB\xAC\xE7\x9A\x84\xE5\x88\x9D\xE5\xA7\x8B\xE8\x83\xBD\xE9\x87\x8F\xE5\x80\xBC\xE4\xB8\xBA 0", "Assets\\Textures\\btn-unit-terran-dom-femaleghost.dds", SoundLink("GhostAlternate_ExitBunkerVO", 0));
    lib1_gf_DefineCardUnit(lv_id, "GhostAlternate", 4);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DEFAULT, lib1_gt_EffectGhostOperatives);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_tERRAN, "Vulture Clan", "\xE7\xA7\x83\xE9\xB9\xAB\xE5\xB0\x8F\xE9\x98\x9F", lib1_gv_aGGRESSIVE, "", lib1_gv_uNCOMMON, 3, 0, null, "", "Assets\\Textures\\btn-unit-terran-vulture.dds", SoundLink("Vulture", 0));
    lib1_gf_DefineCardUnit(lv_id, "Vulture", 4);
    lib1_gf_AddRushtoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_tERRAN, "Science Vessels", "\xE7\xA7\x91\xE6\x8A\x80\xE7\x90\x83", lib1_gv_tACTICAL, "", lib1_gv_uNCOMMON, 2, 2, null, "\xE6\x88\x98\xE5\x90\xBC\xEF\xBC\x9A\xE6\xB7\xBB\xE5\x8A\xA0 2 \xE5\xBC\xA0\xE5\xBC\x82\xE5\xBD\xA2\xE7\xA0\x94\xE7\xA9\xB6\xE7\x89\x8C\xE5\x88\xB0\xE6\x82\xA8\xE7\x9A\x84\xE6\x89\x8B\xE4\xB8\xAD\xE3\x80\x82", "Assets\\Textures\\btn-unit-terran-sciencevessel.dds", SoundLink("ScienceVessel", 0));
    lib1_gf_DefineCardUnit(lv_id, "ScienceVessel", 2);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DRAW, lib1_gt_EffectScienceVessels);
    lib1_gf_AddRushtoCardDefinition(lv_id);
    lib1_gf_AddDetectiontoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_tERRAN, "Tarsonis Battalion", "\xE5\xA1\x94\xE6\xA1\x91\xE5\xB0\xBC\xE6\x96\xAF\xE8\x90\xA5", lib1_gv_aGGRESSIVE, lib1_gv_cONFEDERATE, lib1_gv_uNCOMMON, 5, 1, null, "", "Assets\\Textures\\btn-upgrade-terran-infantryweaponslevel2.dds", SoundLink("Goliath", 2));
    lib1_gf_DefineCardUnit(lv_id, "Marine", 8);
    lib1_gf_DefineCardUnit(lv_id, "Goliath", 2);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_tERRAN, "Tarsonis Commander", "\xE5\xA1\x94\xE6\xA1\x91\xE5\xB0\xBC\xE6\x96\xAF\xE6\x8C\x87\xE6\x8C\xA5\xE5\xAE\x98", lib1_gv_dEFENSIVE, lib1_gv_cONFEDERATE, lib1_gv_uNCOMMON, 1, 0, null, "", "Assets\\Textures\\ach-Hellit'saboottime_SC2Portrait.dds", SoundLink("Marine_Attack", 1));
    lib1_gf_DefineCardUnit(lv_id, "Commander", 1);
    lib1_gf_DefineCardUnit(lv_id, "Marine", 2);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_tERRAN, "Research Facility", "\xE7\xA0\x94\xE7\xA9\xB6\xE4\xB8\xAD\xE5\xBF\x83", lib1_gv_sTRUCTURE, "", lib1_gv_uNCOMMON, 3, 2, lib1_gt_EffectResearchFacility, "\xE5\xBB\xBA\xE9\x80\xA0\xE4\xB8\x80\xE4\xB8\xAA\xE7\xA0\x94\xE7\xA9\xB6\xE8\xAE\xBE\xE6\x96\xBD\xEF\xBC\x8C\xE6\xAF\x8F\xE5\x9B\x9E\xE5\x90\x88\xE6\xB7\xBB\xE5\x8A\xA0\xE4\xB8\x80\xE5\xBC\xA0\xE5\xBC\x82\xE5\xBD\xA2\xE7\xA0\x94\xE7\xA9\xB6\xE7\x89\x8C\xE5\x88\xB0\xE4\xBD\xA0\xE7\x9A\x84\xE6\x89\x8B\xE7\x89\x8C\xE4\xB8\xAD\xE3\x80\x82", "Assets\\Textures\\btn-building-nova-fusioncore.dds", SoundLink("FusionCore_What", 0));
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_tERRAN, "Council Corruption", "\xE8\xB4\xBF\xE8\xB5\x82\xE8\xAE\xAE\xE4\xBC\x9A", lib1_gv_aCTION, lib1_gv_cONFEDERATE, lib1_gv_uNCOMMON, 2, 0, null, "\xE4\xBD\xA0\xE6\x89\x8B\xE4\xB8\xAD\xE5\x85\xA8\xE9\x83\xA8\xE8\x81\x94\xE9\x82\xA6\xE7\x89\x8C\xE5\x87\x8F\xE5\xB0\x91 2 \xE7\x82\xB9\xE7\x9F\xBF\xE7\x89\xA9\xE5\x92\x8C 2 \xE7\x82\xB9\xE7\x93\xA6\xE6\x96\xAF\xE8\xB4\xB9\xE7\x94\xA8\xE3\x80\x82 \xE6\xB4\x97\xE4\xB8\xA4\xE5\xBC\xA0\xE6\x9A\xB4\xE4\xB9\xB1\xE7\x89\x8C\xE5\x88\xB0\xE4\xBD\xA0\xE7\x89\x8C\xE5\xBA\x93\xE4\xB8\xAD\xE3\x80\x82", "Assets\\Textures\\microtransactions_coop.dds", SoundLink("UI_Screens_WarChest_OpenPad", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_BUFF_SPECIFIC_HAND_CARD, lib1_gt_EffectCouncilCorruption);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DEBUFF_DECK, lib1_gt_EffectRiot2);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_tERRAN, "Machine Shop", "\xE6\x9C\xBA\xE6\xA2\xB0\xE6\x94\xBB\xE5\x9F\x8E", lib1_gv_aCTION, "", lib1_gv_uNCOMMON, 3, 2, null, "\xE4\xB8\xBA\xE4\xBD\xA0\xE4\xB8\xA4\xE4\xB8\xAA\xE6\xB2\xA1\xE6\x9C\x89\xE6\x8C\x82\xE4\xBB\xB6\xE7\x9A\x84\xE9\x87\x8D\xE5\xB7\xA5\xE6\xB7\xBB\xE5\x8A\xA0\xE6\x9C\xBA\xE6\xA2\xB0\xE6\x8C\x82\xE4\xBB\xB6\xE3\x80\x82\xE5\xB9\xB6\xE8\xAE\xA9\xE8\xBF\x99\xE4\xB8\xAA\xE9\x87\x8D\xE5\xB7\xA5\xE7\x94\x9F\xE4\xBA\xA7\xE6\xAD\x8C\xE8\x8E\x89\xE5\xA8\x85\xE6\x9C\xBA\xE5\x99\xA8\xE4\xBA\xBA\xE3\x80\x82", "Assets\\Textures\\btn-building-hornerhan-techlab.dds", SoundLink("TechLab_Birth", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_CREATE_UNIT, lib1_gt_EffectMachineShop);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_tERRAN, "22nd Division", "22\xE5\xB8\x88", lib1_gv_aGGRESSIVE, lib1_gv_cONFEDERATE, lib1_gv_rARE, 8, 3, null, "\xE6\x88\x98\xE5\x90\xBC\xEF\xBC\x9A\xE6\xB7\xBB\xE5\x8A\xA0\xE4\xB8\x80\xE5\xBC\xA0 22 \xE5\xB8\x88\xE7\x9A\x84\xE5\xA2\x9E\xE6\x8F\xB4\xE7\x89\x8C\xE5\x88\xB0\xE4\xBD\xA0\xE6\x89\x8B\xE4\xB8\xAD\xE3\x80\x82", "Assets\\Textures\\btn-unit-collection-marine-covertops.dds", SoundLink("Marine_Yes", 13));
    lib1_gf_DefineCardUnit(lv_id, "Commander", 2);
    lib1_gf_DefineCardUnit(lv_id, "Marine", 20);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DRAW, lib1_gt_Effect22ndDivision);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_tERRAN, "Alpha Fleet", "\xE9\x98\xBF\xE5\xB0\x94\xE6\xB3\x95\xE8\x88\xB0\xE9\x98\x9F", lib1_gv_tACTICAL, lib1_gv_cONFEDERATE, lib1_gv_rARE, 8, 3, null, "", "Assets\\Textures\\btn-ability-hornerhan-wraith-attackspeed.dds", SoundLink("Battlecruiser_Ready", 0));
    lib1_gf_DefineCardUnit(lv_id, "Battlecruiser", 1);
    lib1_gf_DefineCardUnit(lv_id, "Wraith", 2);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_tERRAN, "Ghost Academy", "\xE5\xB9\xBD\xE7\x81\xB5\xE5\xAD\xA6\xE9\x99\xA2", lib1_gv_sTRUCTURE, "", lib1_gv_rARE, 2, 2, lib1_gt_EffectGhostAcademy, "\xE5\xBB\xBA\xE9\x80\xA0\xE4\xB8\x80\xE4\xB8\xAA\xE5\xB9\xBD\xE7\x81\xB5\xE5\xAD\xA6\xE9\x99\xA2\xEF\xBC\x8C\xE6\xAF\x8F\xE5\x9B\x9E\xE5\x90\x88\xE9\x83\xBD\xE4\xBC\x9A\xE4\xBB\x8E\xE4\xBD\xA0\xE6\x89\x8B\xE4\xB8\xAD\xE4\xB8\xA2\xE5\xBC\x83\xE6\x9C\x80\xE4\xBE\xBF\xE5\xAE\x9C\xE7\x9A\x84\xE5\x8D\x95\xE4\xBD\x8D\xE7\x89\x8C\xEF\xBC\x8C\xE5\xB9\xB6\xE7\x94\xA8\xE5\xB9\xBD\xE7\x81\xB5\xE5\xAD\xA6\xE5\x91\x98\xE7\x89\x8C\xE6\x9B\xBF\xE6\x8D\xA2\xE5\xAE\x83\xE3\x80\x82\xE5\xA6\x82\xE6\x9E\x9C\xE4\xBD\xA0\xE6\xB2\xA1\xE6\x9C\x89\xE5\x8D\x95\xE4\xBD\x8D\xE5\x8D\xA1\xEF\xBC\x8C\xE6\x8A\xBD\xE4\xB8\x80\xE5\xBC\xA0\xE7\x89\x8C\xE3\x80\x82", "Assets\\Textures\\btn-building-terran-ghostacademy.dds", SoundLink("GhostAcademy_What", 0));
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_tERRAN, "Backwater Station", "\xE6\xAD\xBB\xE6\xB0\xB4\xE5\x9F\xBA\xE5\x9C\xB0", lib1_gv_sTRUCTURE, "", lib1_gv_rARE, 3, 0, null, "\xE5\xBB\xBA\xE9\x80\xA0\xE4\xB8\x80\xE4\xB8\xAA\xE5\x85\xB5\xE8\x90\xA5\xE3\x80\x81\xE4\xB8\x80\xE4\xB8\xAA\xE5\x9C\xB0\xE5\xA0\xA1\xE5\x92\x8C\xE4\xB8\x80\xE4\xB8\xAA\xE5\xAF\xBC\xE5\xBC\xB9\xE5\xA1\x94\xE3\x80\x82\xE6\x88\x98\xE5\x90\xBC\xEF\xBC\x9A\xE4\xBB\x8E\xE6\x88\x98\xE5\x9C\xBA\xEF\xBC\x8C\xE6\x89\x8B\xE7\x89\x8C\xEF\xBC\x8C\xE7\x89\x8C\xE5\xBA\x93\xE4\xB8\xAD\xE6\x91\xA7\xE6\xAF\x81\xE4\xBD\xA0\xE7\x9A\x84\xE5\x85\xA8\xE9\x83\xA8\xE5\xBB\xBA\xE7\xAD\x91\xE3\x80\x82", "Assets\\Textures\\talent-raynor-level04-barracksresearchbundle.dds", SoundLink("Barracks_What", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DISCARD_FROM_HAND, lib1_gt_EffectBackwaterStationDiscardFromHand);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DISCARD_FROM_DECK, lib1_gt_EffectBackwaterStationDiscardFromDeck);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_tERRAN, "Korhal's Destruction", "\xE5\x85\x8B\xE5\x93\x88\xE9\x99\xA8\xE7\x81\xAD", lib1_gv_aCTION, lib1_gv_cONFEDERATE, lib1_gv_rARE, 8, 3, lib1_gt_EffectKorhalsDestruction, "\xE5\x88\x86\xE5\x88\xAB\xE5\xAF\xB9\xE5\x9C\xB0\xE5\x9B\xBE\xE4\xB8\xAD\xE9\x97\xB4\xE5\x92\x8C\xE6\x95\x8C\xE6\x96\xB9\xE9\x98\xB2\xE5\xAE\x88\xE5\x8C\xBA\xE5\x8F\x91\xE5\xB0\x84\xE4\xB8\x80\xE6\x9E\x9A\xE6\xA0\xB8\xE5\xBC\xB9,\xE6\xA0\xB8\xE5\xBC\xB9\xE5\xB0\x86\xE5\x9C\xA8\xE4\xB8\x8B\xE4\xB8\xAA\xE6\x88\x98\xE6\x96\x97\xE9\x98\xB6\xE6\xAE\xB5\xE7\x9D\x80\xE5\xBC\xB9\xE3\x80\x82\xE5\xB0\x86 4 \xE5\xBC\xA0\xE6\x9A\xB4\xE4\xB9\xB1\xE7\x89\x8C\xE6\xB4\x97\xE5\x85\xA5\xE7\x89\x8C\xE5\xBA\x93\xE3\x80\x82", "Assets\\Textures\\nukes_coop.dds", SoundLink("Ghost_NukeExplode", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DEBUFF_DECK, lib1_gt_EffectRiot4);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_tERRAN, "Resocialization", "\xE5\x86\x8D\xE7\xA4\xBE\xE4\xBC\x9A\xE5\x8C\x96", lib1_gv_aCTION, lib1_gv_cONFEDERATE, lib1_gv_rARE, 2, 1, null, "\xE4\xBB\x8E\xE4\xBD\xA0\xE5\x8D\xA1\xE7\xBB\x84\xE9\x87\x8C\xE6\xB8\x85\xE9\x99\xA4\xE6\x9C\x80\xE5\xA4\x9A 3 \xE5\xBC\xA0\xE6\x9A\xB4\xE4\xB9\xB1\xE7\x89\x8C,\xE6\xAF\x8F\xE6\xB8\x85\xE9\x99\xA4 1 \xE5\xBC\xA0\xE5\x8F\xAC\xE5\x94\xA4 6 \xE4\xB8\xAA rush \xE6\x9C\xBA\xE6\x9E\xAA\xE5\x85\xB5\xE3\x80\x82", "Assets\\Textures\\momentofsilence_coop.dds", SoundLink("Marine_Pissed", 10));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DISCARD_FROM_DECK, lib1_gt_EffectResocialization);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_tERRAN, "Norad II", "\xE8\xAF\xBA\xE6\x8B\x89\xE5\xBE\xB7\xE4\xBA\x8C\xE5\x8F\xB7", lib1_gv_aGGRESSIVE, lib1_gv_cONFEDERATE, lib1_gv_uNIQUE, 6, 3, null, "\xE4\xBA\xA1\xE8\xAF\xAD\xEF\xBC\x9A\xE6\x8E\x89\xE8\x90\xBD 4 \xE4\xB8\xAA\xE6\x9C\xBA\xE6\x9E\xAA 1 \xE4\xB8\xAA\xE6\xAD\x8C\xE8\x8E\x89\xE5\xA8\x85 1 \xE4\xB8\xAA\xE4\xBC\x9A\xE8\xBF\x9B\xE5\x85\xA5\xE6\x94\xBB\xE5\x9F\x8E\xE6\xA8\xA1\xE5\xBC\x8F\xE7\x9A\x84\xE8\x8B\xB1\xE9\x9B\x84\xE5\x9D\xA6\xE5\x85\x8B\xE3\x80\x82(\xE6\x8E\x89\xE8\x90\xBD\xE7\x9A\x84\xE5\x8D\x95\xE4\xBD\x8D\xE9\x83\xBD\xE6\x98\xAF\xE8\xBF\x9B\xE6\x94\xBB\xE5\x8D\x95\xE4\xBD\x8D)", "Assets\\Textures\\btn-unit-terran-merc-battlecruiser.dds", SoundLink("NoradII", 0));
    lib1_gf_DefineCardUnit(lv_id, "BattlecruiserNoradII", 1);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DEFAULT, lib1_gt_EffectNoradII);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_tERRAN, "Kerrigan, Assassin", "\xE6\x9D\x80\xE6\x89\x8B\xE5\x87\xAF\xE7\x91\x9E\xE7\x94\x98", lib1_gv_aGGRESSIVE, "", lib1_gv_uNIQUE, 1, 2, null, "\xE6\x88\x98\xE5\x90\xBC\xEF\xBC\x9A\xE9\x9A\x8F\xE6\x9C\xBA\xE4\xB8\xA2\xE5\xBC\x83\xE4\xB8\x80\xE4\xBD\x8D\xE5\xAF\xB9\xE6\x89\x8B\xE7\x9A\x84\xE4\xB8\x80\xE5\xBC\xA0\xE8\x8B\xB1\xE9\x9B\x84\xE7\x89\x8C\xE3\x80\x82", "Assets\\Textures\\btn-hero-kerriganghost.dds", SoundLink("KerriganGhost", 0));
    lib1_gf_DefineCardUnit(lv_id, "KerriganGhostLab", 1);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DISCARD_FROM_DECK, lib1_gt_EffectKerriganAssassin);
    lib1_gf_AddHeroictoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_tERRAN, "Raynor, Rebel", "\xE5\x8F\x9B\xE5\x86\x9B\xE9\x9B\xB7\xE8\xAF\xBA", lib1_gv_aGGRESSIVE, "", lib1_gv_uNIQUE, 6, 0, null, "\xE4\xB8\xA2\xE5\xBC\x83\xE4\xBD\xA0\xE7\x9A\x84\xE6\x89\x8B\xE7\x89\x8C\xE4\xB8\xAD\xE6\x89\x80\xE6\x9C\x89\xE8\x81\x94\xE9\x82\xA6\xE5\x92\x8C\xE6\x9A\xB4\xE4\xB9\xB1\xE7\x89\x8C\xEF\xBC\x8C\xE6\xAF\x8F\xE4\xB8\xA2\xE5\xBC\x83\xE4\xB8\x80\xE5\xBC\xA0\xE7\x89\x8C\xE5\x8F\xAC\xE5\x94\xA4 20 \xE5\x90\x8D\xE9\x99\x86\xE6\x88\x98\xE9\x98\x9F\xE5\x91\x98\xE3\x80\x82", "Assets\\Textures\\btn-unit-terran-marineraynor.dds", SoundLink("Raynor", 1));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DISCARD_FROM_HAND, lib1_gt_EffectRaynorRebel);
    lib1_gf_DefineCardUnit(lv_id, "Raynor", 1);
    lib1_gf_AddHeroictoCardDefinition(lv_id);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_FirstContactTerran_Init () {
    lib1_gt_FirstContactTerran = TriggerCreate("lib1_gt_FirstContactTerran_Func");
    TriggerAddEventMapInit(lib1_gt_FirstContactTerran);
}

//--------------------------------------------------------------------------------------------------
// Trigger: First Contact Zerg
//--------------------------------------------------------------------------------------------------
bool lib1_gt_FirstContactZerg_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_id;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_id = 229;
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_zERG, "Scourge Cloud", "\xE7\x88\x86\xE8\x9A\x8A\xE4\xBA\x91", lib1_gv_aGGRESSIVE, "", lib1_gv_cOMMON, 1, 2, null, "", "Assets\\Textures\\btn-unit-zerg-scourge.dds", SoundLink("ScourgeMP_Attack", 0));
    lib1_gf_DefineCardUnit(lv_id, "Scourge", 12);
    lib1_gf_AddRushtoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_zERG, "Hive Guardians", "\xE4\xB8\xBB\xE5\xB7\xA2\xE5\xAE\x88\xE6\x8A\xA4\xE8\x80\x85", lib1_gv_dEFENSIVE, "", lib1_gv_cOMMON, 3, 2, null, "", "Assets\\Textures\\btn-unit-zerg-primalguardian.dds", SoundLink("GuardianMP_What", 0));
    lib1_gf_DefineCardUnit(lv_id, "Guardian", 2);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_zERG, "Endless Swarm", "\xE6\x97\xA0\xE5\xB0\xBD\xE8\x99\xAB\xE7\xBE\xA4", lib1_gv_aGGRESSIVE, "", lib1_gv_cOMMON, 8, 0, null, "", "Assets\\Textures\\btn-upgrade-zerg-hotsmetabolicboost.dds", SoundLink("Zergling_Ready", 0));
    lib1_gf_DefineCardUnit(lv_id, "Zergling", 50);
    lib1_gf_AddStreamtoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_zERG, "Stray Mutalisks", "\xE6\xB5\x81\xE6\xB5\xAA\xE9\xA3\x9E\xE9\xBE\x99", lib1_gv_tACTICAL, "", lib1_gv_cOMMON, 2, 1, null, "\xE6\x88\x98\xE5\x90\xBC\xEF\xBC\x9A\xE6\x8A\xBD\xE4\xB8\x80\xE5\xBC\xA0\xE7\x89\x8C\xE3\x80\x82", "Assets\\Textures\\ach-WakingtheAncient.dds", SoundLink("Mutalisk_Ready", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DRAW, lib1_gt_CommonEffectDraw1);
    lib1_gf_DefineCardUnit(lv_id, "Mutalisk", 2);
    lib1_gf_AddRushtoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_zERG, "Volatile Infested", "\xE6\x84\x9F\xE6\x9F\x93\xE8\x87\xAA\xE7\x88\x86\xE4\xBA\xBA", lib1_gv_aGGRESSIVE, "", lib1_gv_cOMMON, 0, 1, null, "", "Assets\\Textures\\btn-unit-zerg-volatileinfested.dds", SoundLink("InfestedTerran_Attack", 0));
    lib1_gf_DefineCardUnit(lv_id, "InfestedExploder", 10);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_zERG, "Mobile Pack", "\xE6\x9C\xBA\xE5\x8A\xA8\xE5\xB7\xA2\xE7\xBE\xA4", lib1_gv_aGGRESSIVE, "", lib1_gv_cOMMON, 3, 1, null, "", "Assets\\Textures\\ach-AnvilOfWill.dds", SoundLink("Zergling_Attack", 1));
    lib1_gf_DefineCardUnit(lv_id, "Zergling", 8);
    lib1_gf_DefineCardUnit(lv_id, "Hydralisk", 2);
    lib1_gf_AddStreamtoCardDefinition(lv_id);
    lib1_gf_AddRushtoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_zERG, "Sunken Colony", "\xE6\xB7\xB1\xE9\x99\xB7\xE8\x8F\x8C\xE8\x90\xBD", lib1_gv_sTRUCTURE, "", lib1_gv_cOMMON, 2, 0, null, "\xE5\xBB\xBA\xE9\x80\xA0\xE4\xB8\x80\xE4\xB8\xAA\xE6\xBD\x9C\xE9\x9A\x90\xE8\x8F\x8C\xE8\x90\xBD\xE3\x80\x82 \xE6\x88\x98\xE5\x90\xBC\xEF\xBC\x9A\xE5\xA6\x82\xE6\x9E\x9C\xE5\x9C\xBA\xE4\xB8\x8A\xE6\xB2\xA1\xE6\x9C\x89\xE5\x85\xB6\xE4\xBB\x96\xE6\xBD\x9C\xE9\x9A\x90\xE8\x8F\x8C\xE8\x90\xBD\xEF\xBC\x8C\xE5\x88\x99\xE5\xB0\x86\xE4\xB8\x80\xE5\xBC\xA0\xE6\xBD\x9C\xE9\x9A\x90\xE8\x8F\x8C\xE8\x90\xBD\xE6\xB7\xBB\xE5\x8A\xA0\xE5\x88\xB0\xE4\xBD\xA0\xE6\x89\x8B\xE4\xB8\xAD\xE3\x80\x82", "Assets\\Textures\\btn-building-zerg-impalercolony.dds", SoundLink("SpineCrawler_Ready", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DRAW, lib1_gt_EffectSunkenColony);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_zERG, "Flyer Carapace", "\xE9\xA3\x9E\xE8\xA1\x8C\xE8\x85\x94", lib1_gv_aCTION, lib1_gv_eVOLUTION, lib1_gv_cOMMON, 1, 1, null, "\xE4\xBD\xBF\xE4\xBD\xA0\xE7\x9A\x84\xE7\x94\x9F\xE7\x89\xA9\xE7\xA9\xBA\xE4\xB8\xAD\xE5\x8D\x95\xE4\xBD\x8D\xE8\x8E\xB7\xE5\xBE\x97 +100 \xE7\x94\x9F\xE5\x91\xBD\xE5\x80\xBC (\xE4\xB8\x8D\xE5\x8F\xA0\xE5\x8A\xA0)\xE3\x80\x82", "Assets\\Textures\\btn-upgrade-zerg-flyercarapace-level1.dds", SoundLink("Mutalisk_Segment1AttackLaunch", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_BUFF_UNITS, lib1_gt_EffectFlyerCarapace);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_zERG, "Chitinous Plating", "\xE9\x95\x80\xE7\x94\xB2", lib1_gv_aCTION, lib1_gv_eVOLUTION, lib1_gv_cOMMON, 2, 2, null, "\xE4\xBD\xA0\xE7\x9A\x84\xE5\x9C\xB0\xE9\x9D\xA2\xE7\x94\x9F\xE7\x89\xA9\xE5\x8D\x95\xE4\xBD\x8D\xE8\x8E\xB7\xE5\xBE\x97 +3 \xE6\x8A\xA4\xE7\x94\xB2 (\xE4\xB8\x8D\xE5\x8F\xA0\xE5\x8A\xA0)\xE3\x80\x82", "Assets\\Textures\\btn-upgrade-zerg-chitinousplating.dds", SoundLink("Ultralisk_Burrow", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_BUFF_UNITS, lib1_gt_EffectChitinousPlating);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_zERG, "Dune Runner DNA", "\xE5\xB0\x8F\xE7\x8B\x97 DNA", lib1_gv_aCTION, "", lib1_gv_cOMMON, 2, 0, null, "\xE5\xBE\x80\xE4\xBD\xA0\xE7\x9A\x84\xE6\x89\x8B\xE4\xB8\xAD\xE5\x85\xA8\xE9\x83\xA8\xE8\x99\xAB\xE5\x8D\xB5\xE7\x89\x8C\xE4\xB8\xAD\xE5\xA2\x9E\xE6\xB7\xBB 8 \xE6\x9D\xA1\xE7\x8B\x97\xE5\x92\x8C 1 \xE7\x9F\xBF\xE7\x89\xA9\xE8\xB4\xB9\xE7\x94\xA8\xE3\x80\x82", "Assets\\Textures\\talent-kerrigan-level04-zerglingresearchbundle.dds", SoundLink("Zergling_Ready", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_BUFF_SPECIFIC_HAND_CARD, lib1_gt_EffectDuneRunnerDNA);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_zERG, "Hunter Killers", "\xE5\xB1\xA0\xE7\x8C\x8E\xE8\x80\x85", lib1_gv_aGGRESSIVE, "", lib1_gv_uNCOMMON, 6, 2, null, "", "Assets\\Textures\\btn-unit-collection-noxious-hydralisk.dds", SoundLink("ClassicHydralisk", 0));
    lib1_gf_DefineCardUnit(lv_id, "HydraliskHunterKiller", 4);
    lib1_gf_AddHeroictoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_zERG, "Brood Queens", "\xE6\xAF\x8D\xE5\xB7\xA2\xE4\xB9\x8B\xE6\x88\x98\xE8\x99\xAB\xE5\x90\x8E", lib1_gv_tACTICAL, "", lib1_gv_uNCOMMON, 2, 1, null, "", "Assets\\Textures\\btn-unit-zerg-classicqueen.dds", SoundLink("ClassicQueen", 0));
    lib1_gf_DefineCardUnit(lv_id, "QueenMP", 2);
    lib1_gf_AddRushtoCardDefinition(lv_id);
    lib1_gf_AddDetectiontoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_zERG, "Eyes of the Overmind", "\xE4\xB8\xBB\xE5\xAE\xB0\xE4\xB9\x8B\xE7\x9C\xBC", lib1_gv_dEFENSIVE, "", lib1_gv_uNCOMMON, 3, 0, null, "\xE5\xAE\x83\xE4\xBB\xAC\xE5\x90\x84\xE6\x8F\x90\xE5\x8D\x87\xE4\xBD\xA0\xE6\x89\x8B\xE7\x89\x8C\xE5\xAE\xB9\xE9\x87\x8F 1 \xE7\x82\xB9\xE3\x80\x82", "Assets\\Textures\\btn-ability-zerg-overlord-oversight.dds", SoundLink("Overlord_What", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_INCREASE_HAND_SIZE, lib1_gt_CommonEffectAddHandSizeBufftoAllCreatedUnits);
    lib1_gf_DefineCardUnit(lv_id, "OverlordOvermind", 2);
    lib1_gf_AddHeroictoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_zERG, "Aerial Invasion", "\xE7\xA9\xBA\xE4\xB8\xAD\xE5\x85\xA5\xE4\xBE\xB5", lib1_gv_aGGRESSIVE, "", lib1_gv_uNCOMMON, 6, 3, null, "\xE6\xAF\x8F\xE4\xB8\xAA\xE7\x8E\x8B\xE8\x99\xAB\xE7\xA9\xBA\xE6\x8A\x95 1 \xE5\x88\xBA\xE8\x9B\x87 6 \xE5\xB0\x8F\xE7\x8B\x97\xE5\x88\xB0\xE6\x95\x8C\xE5\xAF\xB9\xE9\x98\xB2\xE5\xAE\x88\xE5\x8C\xBA\xE4\xB8\x8A\xE6\x96\xB9\xE3\x80\x82", "Assets\\Textures\\btn-unit-zerg-overlordtransport.dds", SoundLink("Overlord_What", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DEFAULT, lib1_gt_EffectAerialInvasion);
    lib1_gf_DefineCardUnit(lv_id, "OverlordTransport", 4);
    lib1_gf_AddStreamtoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_zERG, "Acidic Spire", "\xE9\x85\xB8\xE6\x80\xA7\xE5\xB0\x96\xE5\xA1\x94", lib1_gv_sTRUCTURE, "", lib1_gv_uNCOMMON, 1, 2, lib1_gt_EffectAcidicSpire, "\xE5\xBB\xBA\xE9\x80\xA0\xE4\xB8\x80\xE4\xB8\xAA\xE9\xBE\x99\xE5\xA1\x94\xE3\x80\x82 \xE6\xAF\x8F\xE5\x9B\x9E\xE5\x90\x88\xE9\x9A\x8F\xE6\x9C\xBA\xE6\xB7\xBB\xE5\x8A\xA0\xE4\xB8\x80\xE5\xBC\xA0\xE7\x88\x86\xE8\x9A\x8A\xE8\x99\xAB\xE5\x8D\xB5\xE7\x89\x8C\xE6\x88\x96\xE9\xA3\x9E\xE9\xBE\x99\xE8\x99\xAB\xE5\x8D\xB5\xE7\x89\x8C\xE5\x88\xB0\xE4\xBD\xA0\xE7\x9A\x84\xE6\x89\x8B\xE4\xB8\xAD\xE3\x80\x82 \xE6\x88\x98\xE5\x90\xBC\xEF\xBC\x9A\xE5\x87\x8F\xE5\xB0\x91 1 \xE7\x82\xB9\xE7\x93\xA6\xE6\x96\xAF\xE4\xBA\xA7\xE8\x83\xBD\xE3\x80\x82", "Assets\\Textures\\talent-kerrigan-level11-spireresearchbundle.dds", SoundLink("Spire_Ready", 0));
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_zERG, "Escaped Experiments", "\xE8\x84\xB1\xE9\x80\x83\xE6\xA0\xB7\xE6\x9C\xAC", lib1_gv_aCTION, "", lib1_gv_uNCOMMON, 5, 2, null, "\xE6\x91\xA7\xE6\xAF\x81 1 \xE4\xB8\xAA\xE9\x9A\x8F\xE6\x9C\xBA\xE6\x95\x8C\xE5\xAF\xB9\xE5\xBB\xBA\xE7\xAD\x91\xEF\xBC\x8C\xE5\xB9\xB6\xE4\xBB\x8E\xE4\xB8\xAD\xE5\x8F\xAC\xE5\x94\xA4 8 \xE7\x8B\x97 2 \xE5\x88\xBA\xE8\x9B\x87\xE3\x80\x82", "Assets\\Textures\\ach-MutatorHard25_SC2AchiveImage.dds", SoundLink("Zerg_UnburrowLarge", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_REMOVE_UNIT, lib1_gt_EffectEscapedExperiments);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_zERG, "Metasynaptic Node", "\xE5\x85\x83\xE7\xAA\x81\xE8\xA7\xA6\xE8\x8A\x82\xE7\x82\xB9", lib1_gv_aCTION, lib1_gv_eVOLUTION, lib1_gv_uNCOMMON, 1, 1, null, "\xE4\xBD\xA0\xE7\x9A\x84\xE7\x94\x9F\xE7\x89\xA9\xE8\x83\xBD\xE9\x87\x8F\xE5\x8D\x95\xE4\xBD\x8D\xE8\x8E\xB7\xE5\xBE\x97 400 \xE7\x82\xB9\xE8\x83\xBD\xE9\x87\x8F\xE5\x80\xBC (\xE4\xBC\x9A\xE5\x8F\x98\xE6\x9B\xB4\xE5\x8D\x95\xE4\xBD\x8D\xE7\x9A\x84\xE8\x83\xBD\xE9\x87\x8F\xE4\xB8\x8A\xE9\x99\x90)\xE3\x80\x82", "Assets\\Textures\\btn-upgrade-zerg-abathur-biomass.dds", SoundLink("Infestor_FungalGrowthLaunch", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_BUFF_UNITS, lib1_gt_EffectMetasynapticNode);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_zERG, "Slothien DNA", "\xE5\x88\xBA\xE8\x9B\x87 DNA", lib1_gv_aCTION, "", lib1_gv_uNCOMMON, 3, 1, null, "\xE5\xBE\x80\xE4\xBD\xA0\xE6\x89\x8B\xE4\xB8\xAD\xE5\x85\xA8\xE9\x83\xA8\xE8\x99\xAB\xE5\x8D\xB5\xE7\x89\x8C\xE5\xA2\x9E\xE6\xB7\xBB 2 \xE5\x88\xBA\xE8\x9B\x87\xE5\x92\x8C 1 \xE7\x82\xB9\xE6\xB0\xB4\xE6\x99\xB6\xE8\xB4\xB9\xE7\x94\xA8\xE3\x80\x82", "Assets\\Textures\\talent-kerrigan-level06-hydralisklurkerresearchbundle.dds", SoundLink("Hydralisk_Ready", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_BUFF_SPECIFIC_HAND_CARD, lib1_gt_EffectSlothienDNA);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_zERG, "Blacken the Sky", "\xE9\x81\xAE\xE5\xA4\xA9\xE8\x94\xBD\xE6\x97\xA5", lib1_gv_aGGRESSIVE, "", lib1_gv_rARE, 8, 3, null, "\xE6\x88\x98\xE5\x90\xBC\xEF\xBC\x9A\xE6\x89\x93\xE5\x87\xBA\xE4\xBD\xA0\xE6\x89\x8B\xE4\xB8\xAD\xE5\x85\xA8\xE9\x83\xA8\xE7\x9A\x84\xE7\x89\x8C\xEF\xBC\x8C\xE5\x8F\xAA\xE5\x8F\xAC\xE5\x94\xA4\xE5\x85\xB6\xE4\xB8\xAD\xE7\x9A\x84\xE7\xA9\xBA\xE4\xB8\xAD\xE5\x8D\x95\xE4\xBD\x8D\xEF\xBC\x8C\xE5\xB9\xB6\xE6\x91\xA7\xE6\xAF\x81\xE5\x85\xB6\xE4\xBB\x96\xE4\xB8\x9C\xE8\xA5\xBF\xE3\x80\x82", "Assets\\Textures\\btn-ability-zerg-dehaka-mutalisk-airattackdamageupgrade.dds", SoundLink("Mutalisk_Attack", 0));
    lib1_gf_DefineCardUnit(lv_id, "Mutalisk", 12);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_PLAY_CARD, lib1_gt_EffectBlackentheSky);
    lib1_gf_AddStreamtoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_zERG, "Foul Defilers", "\xE9\x82\xAA\xE6\x81\xB6\xE7\x9A\x84\xE8\x9D\x8E\xE5\xAD\x90", lib1_gv_tACTICAL, "", lib1_gv_rARE, 2, 2, lib1_gt_CommonEffectRemove1GasIncome, "\xE6\x88\x98\xE5\x90\xBC\xEF\xBC\x9A\xE5\x87\x8F\xE5\xB0\x91\xE4\xBD\xA0\xE7\x9A\x84\xE7\x93\xA6\xE6\x96\xAF\xE4\xBA\xA7\xE8\x83\xBD 1 \xE7\x82\xB9\xE3\x80\x82", "Assets\\Textures\\btn-unit-zerg-defilerex3.dds", SoundLink("ClassicDefiler", 0));
    lib1_gf_DefineCardUnit(lv_id, "DefilerMP", 2);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_zERG, "Creep Colony", "\xE8\x8F\x8C\xE6\xAF\xAF\xE8\x8F\x8C\xE8\x90\xBD", lib1_gv_sTRUCTURE, "", lib1_gv_rARE, 3, 0, null, "\xE5\xBB\xBA\xE9\x80\xA0\xE4\xB8\x80\xE4\xB8\xAA\xE8\x8F\x8C\xE6\xBB\xA9\xE8\x8F\x8C\xE8\x90\xBD\xE3\x80\x82 \xE6\x88\x98\xE5\x90\xBC\xEF\xBC\x9A\xE6\x8A\xBD\xE4\xB8\x80\xE5\xBC\xA0\xE7\x89\x8C\xE3\x80\x82 \xE5\xA6\x82\xE6\x9E\x9C\xE5\x9C\xBA\xE4\xB8\x8A\xE6\xB2\xA1\xE6\x9C\x89\xE5\x85\xB6\xE4\xBB\x96\xE8\x8F\x8C\xE6\xBB\xA9\xE8\x8F\x8C\xE8\x90\xBD\xEF\xBC\x8C \xE5\x88\x99\xE6\xB7\xBB\xE5\x8A\xA0\xE4\xB8\x80\xE5\xBC\xA0\xE8\x8F\x8C\xE6\xBB\xA9\xE8\x8F\x8C\xE8\x90\xBD\xE7\x89\x8C\xE5\x88\xB0\xE4\xBD\xA0\xE7\x9A\x84\xE6\x89\x8B\xE4\xB8\xAD\xE3\x80\x82", "Assets\\Textures\\btn-unit-zerg-nyduscreeptower.dds", SoundLink("CreepTower_What", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DRAW, lib1_gt_EffectCreepColony);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_zERG, "Brontolith DNA", "\xE5\xA4\xA7\xE7\x89\x9B DNA", lib1_gv_aCTION, "", lib1_gv_rARE, 4, 2, null, "\xE5\xBE\x80\xE4\xBD\xA0\xE6\x89\x8B\xE4\xB8\xAD\xE5\x85\xA8\xE9\x83\xA8\xE8\x99\xAB\xE5\x8D\xB5\xE7\x89\x8C\xE5\xA2\x9E\xE6\xB7\xBB\xE4\xB8\x80\xE5\x8F\xAA\xE9\x9B\xB7\xE5\x85\xBD, 1 \xE7\x82\xB9\xE7\x93\xA6\xE6\x96\xAF\xE5\x92\x8C\xE7\x9F\xBF\xE7\x89\xA9\xE8\xB4\xB9\xE7\x94\xA8\xE3\x80\x82", "Assets\\Textures\\talent-kerrigan-level13-ultraliskresearchbundle.dds", SoundLink("Ultralisk_Ready", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_BUFF_SPECIFIC_HAND_CARD, lib1_gt_EffectBrontolithDNA);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_zERG, "Deep Infestation", "\xE6\xB7\xB1\xE5\xBA\xA6\xE6\x84\x9F\xE6\x9F\x93", lib1_gv_aCTION, "", lib1_gv_rARE, 1, 3, null, "\xE5\xB0\x86 1 \xE5\xBC\xA0\xE6\x84\x9F\xE6\x9F\x93\xE7\x89\x8C\xE6\xB4\x97\xE5\x85\xA5\xE4\xBD\xA0\xE6\xAF\x8F\xE4\xB8\xAA\xE5\xAF\xB9\xE6\x89\x8B\xE7\x9A\x84\xE7\x89\x8C\xE5\xBA\x93\xE4\xB8\xAD\xE3\x80\x82", "Assets\\Textures\\btn-ability-zerg-dehaka-burrow-color.dds", SoundLink("Ultralisk_Burrow", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_BUFF_DECK, lib1_gt_EffectDeepInfestation);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_zERG, "Psionic Attraction", "\xE7\x81\xB5\xE8\x83\xBD\xE5\xBC\x95\xE8\xAF\xB1", lib1_gv_aGGRESSIVE, "", lib1_gv_rARE, 3, 2, null, "\xE6\xAF\x8F\xE5\x9B\x9E\xE5\x90\x88\xE9\x87\x8D\xE7\xBD\xAE\xE8\xBF\x99\xE5\xBC\xA0\xE7\x89\x8C\xE5\x8F\xAC\xE5\x94\xA4\xE7\x9A\x84\xE5\x8D\x95\xE4\xBD\x8D\xE4\xB8\xBA\xEF\xBC\x9A\xE6\x95\x8C\xE4\xBA\xBA\xE6\xAF\x8F\xE6\x9C\x89\xE4\xB8\x80\xE4\xB8\xAA\xE8\x83\xBD\xE9\x87\x8F\xE5\x8D\x95\xE4\xBD\x8D\xE5\x88\x99\xE4\xBB\x8E 6 \xE6\x9D\xA1\xE7\x8B\x97\xEF\xBC\x9B 2 \xE9\xA3\x9E\xE9\xBE\x99\xEF\xBC\x9B 1 \xE5\x88\xBA\xE8\x9B\x87\xE4\xB8\xAD\xE9\x9A\x8F\xE6\x9C\xBA\xE9\x80\x89\xE6\x8B\xA9\xE4\xB8\x80\xE7\xBB\x84\xE5\x8F\xAC\xE5\x94\xA4\xE3\x80\x82", "Assets\\Textures\\talent-kerrigan-level15-energyregeneration.dds", SoundLink("LairViper_Consume_Start", 0));
    lib1_gf_DefineCardUnit(lv_id, "Zergling", 0);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_zERG, "Overmind", "\xE4\xB8\xBB\xE5\xAE\xB0", lib1_gv_aCTION, "", lib1_gv_uNIQUE, 8, 3, null, "\xE7\x94\xA8\xE4\xB8\xBB\xE5\xAE\xB0\xE6\x9B\xBF\xE6\x8D\xA2\xE6\x8E\x89\xE4\xBD\xA0\xE7\x9A\x84\xE5\x9F\xBA\xE5\x9C\xB0\xE9\x92\xA5\xE5\x8C\x99\xE3\x80\x82 \xE6\xAF\x8F\xE5\x9B\x9E\xE5\x90\x88\xE9\x9A\x8F\xE6\x9C\xBA\xE6\xB7\xBB\xE5\x8A\xA0\xE4\xB8\x80\xE5\xBC\xA0\xE8\x99\xAB\xE5\x8D\xB5\xE7\x89\x8C\xE5\x88\xB0\xE4\xBD\xA0\xE6\x89\x8B\xE4\xB8\xAD\xEF\xBC\x8C\xE5\xB9\xB6\xE4\xBD\xBF\xE5\x85\xB6\xE4\xBA\xA7\xE9\x87\x8F\xE7\xBF\xBB\xE5\x80\x8D\xE3\x80\x82", "Assets\\Textures\\zergdroneeyesemmisive.dds", SoundLink("Overmind", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_CREATE_UNIT, lib1_gt_EffectOvermind);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_zERG, "Torrasque", "\xE6\x89\x98\xE9\x9B\xB7\xE6\x96\xAF", lib1_gv_aGGRESSIVE, "", lib1_gv_uNIQUE, 5, 3, lib1_gt_EffectTorrasque, "\xE4\xBA\xA1\xE8\xAF\xAD\xEF\xBC\x9A\xE5\xB0\x86\xE4\xB8\x80\xE5\xBC\xA0\xE6\x9A\xB4\xE9\xBE\x99\xE5\x85\xBD\xE7\x9A\x84\xE5\xA4\x8D\xE6\xB4\xBB\xE6\xB4\x97\xE5\x85\xA5\xE4\xBD\xA0\xE7\x9A\x84\xE7\x89\x8C\xE5\xBA\x93\xE3\x80\x82", "Assets\\Textures\\btn-unit-zerg-ultralisk-torrasque.dds", SoundLink("Ultralisk_Roar", 0));
    lib1_gf_DefineCardUnit(lv_id, "UltraliskTorrasque", 1);
    lib1_gf_AddHeroictoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_zERG, "Kerrigan's Chrysalis", "\xE5\x87\xAF\xE7\x91\x9E\xE7\x94\x98\xE7\x9A\x84\xE8\x99\xAB\xE8\x8C\xA7", lib1_gv_aGGRESSIVE, "", lib1_gv_uNIQUE, 2, 1, lib1_gt_EffectKerrigansChrysalis, "\xE6\x88\x98\xE5\x90\xBC\xEF\xBC\x9A\xE4\xBD\xA0\xE7\x9A\x84\xE6\xB0\xB4\xE6\x99\xB6\xE4\xBB\xA5\xE5\x8F\x8A\xE7\x93\xA6\xE6\x96\xAF\xE7\x9A\x84\xE4\xBA\xA7\xE8\x83\xBD\xE5\x9D\x87\xE5\x87\x8F\xE5\xB0\x91 1 \xE7\x82\xB9\xE3\x80\x82", "Assets\\Textures\\btn-doodad-chrysalis.dds", SoundLink("Egg_Birth", 0));
    lib1_gf_DefineCardUnit(lv_id, "KerriganVoid", 1);
    lib1_gf_AddHeroictoCardDefinition(lv_id);
    lib1_gf_AddDelaytoCardDefinition(lv_id);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_FirstContactZerg_Init () {
    lib1_gt_FirstContactZerg = TriggerCreate("lib1_gt_FirstContactZerg_Func");
    TriggerAddEventMapInit(lib1_gt_FirstContactZerg);
}

//--------------------------------------------------------------------------------------------------
// Trigger: First Contact Protoss
//--------------------------------------------------------------------------------------------------
bool lib1_gt_FirstContactProtoss_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_id;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_id = 259;
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_pROTOSS, "Dragoon Force", "\xE9\xBE\x99\xE9\xAA\x91\xE9\x83\xA8\xE9\x98\x9F", lib1_gv_aGGRESSIVE, "", lib1_gv_cOMMON, 4, 2, null, "", "Assets\\Textures\\btn-unit-protoss-dragoon-void.dds", SoundLink("Dragoon", 0));
    lib1_gf_DefineCardUnit(lv_id, "Dragoon", 4);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_pROTOSS, "Scout Formation", "\xE4\xBE\xA6\xE5\xAF\x9F\xE6\x9C\xBA\xE8\x88\xB0\xE9\x98\x9F", lib1_gv_aGGRESSIVE, "", lib1_gv_cOMMON, 5, 2, null, "", "Assets\\Textures\\btn-unit-protoss-scout.dds", SoundLink("Scout", 1));
    lib1_gf_DefineCardUnit(lv_id, "ScoutMP", 3);
    lib1_gf_AddRushtoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_pROTOSS, "Gathering Warriors", "\xE8\x81\x9A\xE9\x9B\x86\xE5\x8B\x87\xE5\xA3\xAB", lib1_gv_aGGRESSIVE, "", lib1_gv_cOMMON, 3, 0, null, "\xE7\xA9\xBA\xE8\xBF\x87\xEF\xBC\x9A\xE5\xA2\x9E\xE6\xB7\xBB\xE4\xB8\xA4\xE4\xB8\xAA\xE5\x8F\x89", "Assets\\Textures\\btn-ability-spearofadun-temporalfield.dds", SoundLink("Zealot_What", 0));
    lib1_gf_DefineCardUnit(lv_id, "Zealot", 3);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_pROTOSS, "Expedition Scout", "\xE6\x8E\xA2\xE9\x99\xA9\xE4\xBE\xA6\xE5\xAF\x9F\xE6\x9C\xBA", lib1_gv_tACTICAL, "", lib1_gv_cOMMON, 1, 1, null, "\xE5\xBD\x93\xE4\xBB\x96\xE5\x90\x8E\xE6\x92\xA4\xE6\x97\xB6\xE4\xBC\x9A\xE5\xB0\x9D\xE8\xAF\x95\xE6\x92\xA4\xE7\xA6\xBB\xE6\x88\x98\xE5\x9C\xBA\xEF\xBC\x8C\xE6\x92\xA4\xE7\xA6\xBB\xE6\x88\x90\xE5\x8A\x9F\xE6\x97\xB6\xE5\x9B\x9E\xE5\x88\xB0\xE4\xBD\xA0\xE7\x9A\x84\xE6\x89\x8B\xE7\x89\x8C\xE3\x80\x82", "Assets\\Textures\\btn-upgrade-protoss-airweaponslevel1.dds", SoundLink("Scout", 0));
    lib1_gf_DefineCardUnit(lv_id, "ScoutMP", 1);
    lib1_gf_AddRushtoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_pROTOSS, "Wardens of Aiur", "\xE8\x89\xBE\xE5\xB0\x94\xE5\xAE\x88\xE5\x8D\xAB", lib1_gv_dEFENSIVE, "", lib1_gv_cOMMON, 6, 3, null, "", "Assets\\Textures\\btn-upgrade-protoss-groundarmorlevel1.dds", SoundLink("ClassicZealot", 0));
    lib1_gf_DefineCardUnit(lv_id, "Zealot", 4);
    lib1_gf_DefineCardUnit(lv_id, "Dragoon", 2);
    lib1_gf_DefineCardUnit(lv_id, "ScoutMP", 1);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_pROTOSS, "Psi Matrix", "\xE7\x81\xB5\xE8\x83\xBD\xE7\x9F\xA9\xE9\x98\xB5", lib1_gv_sTRUCTURE, "", lib1_gv_cOMMON, 2, 0, null, "\xE5\xBB\xBA\xE9\x80\xA0\xE4\xB8\xA4\xE4\xB8\xAA\xE6\xB0\xB4\xE6\x99\xB6\xE5\xA1\x94\xE3\x80\x82 \xE6\x88\x98\xE5\x90\xBC\xEF\xBC\x9A \xE5\xAE\x8C\xE5\x85\xA8\xE6\x81\xA2\xE5\xA4\x8D\xE4\xBD\xA0\xE5\xBB\xBA\xE7\xAD\x91\xE7\x9A\x84\xE5\x85\xA8\xE9\x83\xA8\xE6\x8A\xA4\xE7\x9B\xBE\xE5\x80\xBC\xE5\x92\x8C\xE8\x83\xBD\xE9\x87\x8F\xE5\x80\xBC", "Assets\\Textures\\btn-upgrade-artanis-pylonpower.dds", SoundLink("Pylon_What", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_BUFF_UNITS, lib1_gt_EffectPsiMatrix);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_pROTOSS, "Aiur Gateway", "\xE8\x89\xBE\xE5\xB0\x94\xE4\xBC\xA0\xE9\x80\x81\xE9\x97\xA8", lib1_gv_sTRUCTURE, "", lib1_gv_cOMMON, 3, 0, null, "\xE5\xBB\xBA\xE9\x80\xA0\xE4\xBC\xA0\xE9\x80\x81\xE9\x97\xA8\xE3\x80\x82 \xE6\x88\x98\xE5\x90\xBC\xEF\xBC\x9A\xE6\x8A\xBD\xE5\x8F\x96\xE7\x89\x8C\xE5\xBA\x93\xE9\x87\x8C\xE6\x9C\x80\xE4\xBE\xBF\xE5\xAE\x9C\xE7\x9A\x84\xE4\xB8\x80\xE5\xBC\xA0\xE5\x8D\x95\xE4\xBD\x8D\xE7\x89\x8C\xE3\x80\x82 \xE5\xA6\x82\xE6\x9E\x9C\xE6\x8A\xBD\xE5\x8F\x96\xE6\x88\x90\xE5\x8A\x9F\xEF\xBC\x8C \xE8\xB7\xB3\xE8\xBF\x87\xE4\xBD\xA0\xE7\x9A\x84\xE4\xB8\x8B\xE4\xB8\xAA\xE6\x8A\xBD\xE7\x89\x8C\xE9\x98\xB6\xE6\xAE\xB5\xE3\x80\x82", "Assets\\Textures\\aiur-gateway.dds", SoundLink("Mothership_TimeWarpLaunch", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_FETCH, lib1_gt_EffectAiurGateway);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_pROTOSS, "Cloaking Field", "\xE9\x9A\x90\xE5\xBD\xA2\xE5\x8A\x9B\xE5\x9C\xBA", lib1_gv_aCTION, "", lib1_gv_cOMMON, 2, 2, null, "\xE6\x9C\xAC\xE5\x9B\x9E\xE5\x90\x88\xE5\x86\x85\xE4\xBD\xA0\xE5\x85\xA8\xE9\x83\xA8\xE5\x9C\xB0\xE9\x9D\xA2\xE5\x8D\x95\xE4\xBD\x8D\xE9\x9A\x90\xE5\xBD\xA2\xE3\x80\x82", "Assets\\Textures\\btn-ability-protoss-cloakfield-color.dds", SoundLink("ArbiterMP_CloakFieldOn", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_BUFF_UNITS, lib1_gt_EffectCloakingField);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_pROTOSS, "Charging Zealots", "\xE5\x86\xB2\xE9\x94\x8B\xE7\x8B\x82\xE7\x83\xAD\xE8\x80\x85", lib1_gv_aGGRESSIVE, "", lib1_gv_cOMMON, 3, 0, null, "\xE6\x88\x98\xE5\x90\xBC\xEF\xBC\x9A \xE4\xBD\xA0\xE5\x85\xA8\xE9\x83\xA8\xE5\x9C\xB0\xE9\x9D\xA2\xE5\x8D\x95\xE4\xBD\x8D\xE5\x8F\x98\xE6\x88\x90\xE8\xBF\x9B\xE6\x94\xBB\xE5\x8D\x95\xE4\xBD\x8D\xE5\xB9\xB6 rush \xE3\x80\x82", "Assets\\Textures\\btn-ability-protoss-charge-color.dds", SoundLink("Zealot_Charge", 0));
    lib1_gf_DefineCardUnit(lv_id, "Zealot", 3);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_BUFF_UNITS, lib1_gt_EffectCharge);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_pROTOSS, "Stasis Field", "\xE9\x9D\x99\xE6\xBB\x9E\xE5\x9C\xBA", lib1_gv_aCTION, "", lib1_gv_cOMMON, 1, 2, null, "\xE4\xBD\xBF\xE7\x94\xA8\xE7\xA6\x81\xE6\xBB\x9E\xE7\xAB\x8B\xE5\x9C\xBA\xE7\xA6\x81\xE9\x94\xA2\xE4\xB8\xA4\xE4\xB8\xAA\xE6\x95\x8C\xE5\xAF\xB9\xE5\x8D\x95\xE4\xBD\x8D\xE9\x9B\x86\xE7\xBE\xA4\xE4\xB8\xA4\xE5\x9B\x9E\xE5\x90\x88\xE3\x80\x82\xE6\x9C\x9F\xE9\x97\xB4\xE8\xA2\xAB\xE7\xA6\x81\xE9\x94\xA2\xE7\x9A\x84\xE5\x8D\x95\xE4\xBD\x8D\xE6\x97\xA0\xE6\x95\x8C\xE3\x80\x82", "Assets\\Textures\\btn-ability-protoss-stasisfield.dds", SoundLink("ArbiterMP_StasisFieldOn", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_INSTANT_AOE_FREEZE, lib1_gt_EffectStasisField);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_pROTOSS, "Reaver Advance", "\xE9\x87\x91\xE7\x94\xB2\xE8\x99\xAB\xE6\x8E\xA8\xE8\xBF\x9B", lib1_gv_aGGRESSIVE, "", lib1_gv_uNCOMMON, 2, 1, lib1_gt_EffectReaverAdvance, "\xE7\xBB\xB4\xE6\x8A\xA4\xEF\xBC\x9A 1 \xE7\x9F\xBF\xE7\x89\xA9\xE6\xAF\x8F\xE5\x9B\x9E\xE5\x90\x88\xE3\x80\x82", "Assets\\Textures\\btn-unit-protoss-reaver.dds", SoundLink("Reaver", 0));
    lib1_gf_DefineCardUnit(lv_id, "Reaver", 2);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_pROTOSS, "Gathering Fleet", "\xE8\x81\x9A\xE9\x9B\x86\xE8\x88\xB0\xE9\x98\x9F", lib1_gv_aGGRESSIVE, "", lib1_gv_uNCOMMON, 5, 3, lib1_gt_EffectGoldenArmada, "\xE7\xBB\xB4\xE6\x8A\xA4\xEF\xBC\x9A 1 \xE7\x9F\xBF\xE7\x89\xA9\xE6\xAF\x8F\xE5\x9B\x9E\xE5\x90\x88\xE3\x80\x82 \xE7\xA9\xBA\xE8\xBF\x87\xEF\xBC\x9A\xE5\xA2\x9E\xE6\xB7\xBB\xE4\xB8\x80\xE4\xB8\xAA\xE4\xBE\xA6\xE5\xAF\x9F\xE6\x9C\xBA\xE3\x80\x82", "Assets\\Textures\\btn-upgrade-protoss-gravitoncatapult.dds", SoundLink("Carrier_What", 3));
    lib1_gf_DefineCardUnit(lv_id, "Carrier", 1);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DEFAULT, lib1_gt_CommonEffectPopulateWithInterceptors);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_pROTOSS, "Planetary Surveyor", "\xE8\xA1\x8C\xE6\x98\x9F\xE6\xB5\x8B\xE9\x87\x8F", lib1_gv_tACTICAL, "", lib1_gv_uNCOMMON, 2, 2, null, "\xE6\x88\x98\xE5\x90\xBC\xEF\xBC\x9A\xE6\x8A\xBD\xE5\x8F\x96\xE4\xB8\x80\xE5\xBC\xA0\xE6\x9C\x80\xE8\xB4\xB5\xE7\x9A\x84\xE5\x8A\xA8\xE4\xBD\x9C\xE5\x8D\xA1\xE3\x80\x82", "Assets\\Textures\\btn-ability-protoss-permanentlycloaked-observer-color.dds", SoundLink("Observer_Yes", 0));
    lib1_gf_DefineCardUnit(lv_id, "Observer", 1);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_FETCH, lib1_gt_EffectPlanetarySurveyor);
    lib1_gf_AddDetectiontoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_pROTOSS, "War Robotics", "\xE6\x88\x98\xE4\xBA\x89\xE6\x9C\xBA\xE6\xA2\xB0", lib1_gv_aGGRESSIVE, "", lib1_gv_uNCOMMON, 5, 2, lib1_gt_EffectWarRobotics, "\xE7\xBB\xB4\xE6\x8A\xA4\xEF\xBC\x9A\xE6\xAF\x8F\xE4\xB8\xAA\xE9\x87\x91\xE7\x94\xB2\xE8\x99\xAB 1 \xE7\x9F\xBF\xE7\x89\xA9\xE6\xAF\x8F\xE5\x9B\x9E\xE5\x90\x88\xE3\x80\x82", "Assets\\Textures\\btn-ability-protoss-dragoonchassis.dds", SoundLink("Dragoon", 1));
    lib1_gf_DefineCardUnit(lv_id, "Reaver", 1);
    lib1_gf_DefineCardUnit(lv_id, "Dragoon", 3);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_pROTOSS, "Shield Matrix", "\xE6\x8A\xA4\xE7\x9B\xBE\xE7\x9F\xA9\xE9\x98\xB5", lib1_gv_sTRUCTURE, "", lib1_gv_uNCOMMON, 4, 1, null, "\xE5\xBB\xBA\xE9\x80\xA0\xE4\xB8\xA4\xE4\xB8\xAA\xE6\x8A\xA4\xE7\x9B\xBE\xE7\x94\xB5\xE6\xB1\xA0\xE3\x80\x82 \xE6\x88\x98\xE5\x90\xBC\xEF\xBC\x9A\xE5\xAE\x8C\xE5\x85\xA8\xE6\x81\xA2\xE5\xA4\x8D\xE4\xBD\xA0\xE6\x89\x80\xE6\x9C\x89\xE5\x8D\x95\xE4\xBD\x8D\xE7\x9A\x84\xE6\x8A\xA4\xE7\x9B\xBE\xE5\x80\xBC\xE3\x80\x82", "Assets\\Textures\\btn-ability-protoss-doubleshieldrecharge.dds", SoundLink("ShieldBattery_RechargeStart", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_BUFF_UNITS, lib1_gt_EffectShieldMatrix);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_pROTOSS, "Mass Recall", "\xE7\xBE\xA4\xE4\xBD\x93\xE5\x8F\xAC\xE5\x94\xA4", lib1_gv_aCTION, "", lib1_gv_uNCOMMON, 1, 1, null, "\xE5\x8F\xAC\xE5\x9B\x9E\xE4\xBD\xA0\xE5\x85\xA8\xE9\x83\xA8\xE5\x8D\x95\xE4\xBD\x8D\xE5\x88\xB0\xE4\xBD\xA0\xE9\x98\x9F\xE4\xBC\x8D\xE7\x9A\x84\xE5\x87\xBA\xE7\x94\x9F\xE7\x82\xB9\xEF\xBC\x8C\xE5\xB9\xB6\xE8\xAE\xA9\xE8\xBF\x99\xE4\xBA\x9B\xE5\x8D\x95\xE4\xBD\x8D\xE5\x8F\x98\xE4\xB8\xBA\xE9\x98\xB2\xE5\xAE\x88\xE5\x8D\x95\xE4\xBD\x8D\xE3\x80\x82", "Assets\\Textures\\btn-ability-protoss-recall.dds", SoundLink("ArbiterMP_RecallStart", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_BUFF_UNITS, lib1_gt_EffectMassRecall);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_pROTOSS, "Structural Stasis", "\xE5\xBB\xBA\xE7\xAD\x91\xE9\x9D\x99\xE6\xBB\x9E", lib1_gv_aCTION, "", lib1_gv_uNCOMMON, 5, 3, null, "\xE7\xA6\x81\xE9\x94\xA2\xE5\x85\xA8\xE9\x83\xA8\xE6\x95\x8C\xE5\xAF\xB9\xE5\xBB\xBA\xE7\xAD\x91\xE4\xB8\x80\xE5\x9B\x9E\xE5\x90\x88\xE3\x80\x82\xE6\x9C\x9F\xE9\x97\xB4\xE8\xBF\x99\xE4\xBA\x9B\xE5\xBB\xBA\xE7\xAD\x91\xE6\x97\xA0\xE6\x95\x8C\xE3\x80\x82", "Assets\\Textures\\btn-ability-protoss-forcefield-color.dds", SoundLink("ArbiterMP_StasisFieldShockwave", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_INSTANT_AOE_FREEZE, lib1_gt_EffectStructuralStasis);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_pROTOSS, "Recall Suits", "\xE5\x8F\xAC\xE5\x94\xA4\xE8\xA3\x85", lib1_gv_aCTION, "", lib1_gv_uNCOMMON, 5, 2, null, "\xE8\xAE\xA9\xE4\xBD\xA0\xE7\x9A\x84\xE7\x94\x9F\xE7\x89\xA9\xE5\x8D\x95\xE4\xBD\x8D\xE8\x8E\xB7\xE5\xBE\x97\xE4\xBA\xA1\xE8\xAF\xAD\xEF\xBC\x9A \xE5\xBD\x93\xE4\xBB\x96\xE4\xBB\xAC\xE6\xAD\xBB\xE4\xBA\xA1\xE6\x97\xB6\xE9\x87\x8D\xE7\x94\x9F\xE4\xB8\xBA\xE4\xB8\x80\xE4\xB8\xAA\xE9\xBE\x99\xE9\xAA\x91 \xEF\xBC\x88\xE4\xBC\x98\xE5\x85\x88\xE4\xBA\x8E\xE6\x8E\xA7\xE5\x88\xB6\xE6\xA0\xB8\xE5\xBF\x83\xE7\x9A\x84\xE5\xA4\x8D\xE6\xB4\xBB\xE6\x95\x88\xE6\x9E\x9C\xEF\xBC\x89\xE3\x80\x82", "Assets\\Textures\\btn-ability-protoss-recallondeath.dds", SoundLink("WarpGate_TrainFinish", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_BUFF_UNITS, lib1_gt_EffectRecallSuits);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_pROTOSS, "Dual Arbiters", "\xE5\x8F\x8C\xE4\xBB\xB2\xE8\xA3\x81\xE8\x80\x85", lib1_gv_dEFENSIVE, "", lib1_gv_rARE, 5, 2, null, "", "Assets\\Textures\\btn-unit-protoss-arbiter.dds", SoundLink("Arbiter", 0));
    lib1_gf_DefineCardUnit(lv_id, "ArbiterMP", 2);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_pROTOSS, "Gathering Storm", "\xE8\x81\x9A\xE9\x9B\x86\xE9\xA3\x8E\xE6\x9A\xB4", lib1_gv_aGGRESSIVE, "", lib1_gv_rARE, 2, 2, null, "\xE7\xA9\xBA\xE8\xBF\x87\xEF\xBC\x9A\xE5\xA2\x9E\xE6\xB7\xBB\xE4\xB8\x80\xE4\xB8\xAA\xE9\xAB\x98\xE9\x98\xB6\xE5\x9C\xA3\xE5\xA0\x82\xE6\xAD\xA6\xE5\xA3\xAB\xE3\x80\x82\xE6\x88\x98\xE5\x90\xBC\xEF\xBC\x9A\xE4\xBB\x96\xE4\xBB\xAC\xE4\xBC\x9A\xE5\xAF\xB9\xE6\x95\x8C\xE5\xAF\xB9\xE5\x8D\x95\xE4\xBD\x8D\xE9\x9B\x86\xE7\xBE\xA4\xE4\xBD\xBF\xE7\x94\xA8\xE7\x81\xB5\xE8\x83\xBD\xE9\x97\xAA\xE7\x94\xB5\xE3\x80\x82", "Assets\\Textures\\btn-ability-protoss-forceofwill.dds", SoundLink("HighTemplar_Yes", 6));
    lib1_gf_DefineCardUnit(lv_id, "HighTemplar", 4);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_REMOVE_UNIT_AOE_DAMAGE, lib1_gt_EffectGatheringStorm);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_pROTOSS, "Exiled Ones", "\xE8\xA2\xAB\xE6\xB5\x81\xE6\x94\xBE\xE8\x80\x85", lib1_gv_aGGRESSIVE, "", lib1_gv_rARE, 2, 2, null, "\xE4\xBD\xA0\xE5\x8F\xAA\xE8\x83\xBD\xE5\x9C\xA8\xE4\xBD\xA0\xE6\x89\x80\xE6\x8E\xA7\xE5\x88\xB6\xE7\x9A\x84\xE5\x8D\x95\xE4\xBD\x8D\xE9\x83\xBD\xE9\x9A\x90\xE8\xBA\xAB\xE6\x97\xB6\xE4\xBD\xBF\xE7\x94\xA8\xE8\xBF\x99\xE5\xBC\xA0\xE7\x89\x8C\xE3\x80\x82", "Assets\\Textures\\btn-unit-protoss-darktemplar-nerazim.dds", SoundLink("DarkTemplar_What", 4));
    lib1_gf_DefineCardUnit(lv_id, "DarkTemplar", 4);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_pROTOSS, "Robotics Bay", "\xE6\x9C\xBA\xE6\xA2\xB0\xE6\xB9\xBE", lib1_gv_sTRUCTURE, "", lib1_gv_rARE, 2, 1, lib1_gt_EffectRoboticsBay, "\xE5\xBB\xBA\xE9\x80\xA0\xE4\xB8\x80\xE4\xB8\xAA\xE6\x9C\xBA\xE6\xA2\xB0\xE7\xA0\x94\xE7\xA9\xB6\xE6\x89\x80\xE3\x80\x82 \xE7\x9B\xB4\xE8\x87\xB3\xE8\xA2\xAB\xE6\x91\xA7\xE6\xAF\x81\xEF\xBC\x8C \xE6\x97\xA0\xE8\xA7\x86\xE6\x89\x80\xE6\x9C\x89\xE7\xBB\xB4\xE6\x8A\xA4\xE8\xB4\xB9\xE7\x94\xA8 \xEF\xBC\x88\xE6\xAF\x8F\xE5\x9B\x9E\xE5\x90\x88\xE9\x83\xBD\xE8\xA6\x81\xE6\x94\xAF\xE4\xBB\x98\xE7\x9A\x84\xE8\xB5\x84\xE6\xBA\x90\xE6\x94\xAF\xE5\x87\xBA\xEF\xBC\x89\xE3\x80\x82", "Assets\\Textures\\btn-building-protoss-roboticssupportbay.dds", SoundLink("RoboticsBay_What", 0));
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_pROTOSS, "Planet Cracker", "\xE8\xA1\x8C\xE6\x98\x9F\xE7\xA0\xB4\xE7\xA2\x8E", lib1_gv_aCTION, "", lib1_gv_rARE, 6, 3, lib1_gt_EffectPlanetCracker, "\xE6\xB4\xBE\xE5\x87\xBA\xE4\xB8\x80\xE4\xB8\xAA\xE4\xB8\x8D\xE5\x8F\xAF\xE7\xA0\xB4\xE5\x9D\x8F\xE7\x9A\x84\xE6\xAF\x8D\xE8\x88\xB0\xE4\xBD\xBF\xE7\x94\xA8\xE7\xA2\x8E\xE8\xA3\x82\xE7\x82\xAE\xEF\xBC\x8C \xE8\xB4\xAF\xE7\xA9\xBF\xE6\x95\xB4\xE4\xB8\xAA\xE6\x88\x98\xE5\x9C\xBA\xE5\xB9\xB6\xE5\xAF\xB9\xE5\x85\xA8\xE9\x83\xA8\xE5\x9C\xB0\xE9\x9D\xA2\xE5\x8D\x95\xE4\xBD\x8D\xE5\x92\x8C\xE5\xBB\xBA\xE7\xAD\x91\xE9\x80\xA0\xE6\x88\x90\xE5\xB7\xA8\xE9\xA2\x9D\xE4\xBC\xA4\xE5\xAE\xB3\xE3\x80\x82", "Assets\\Textures\\btn-ability-spearofadun-purifierbeam.dds", SoundLink("Mothership_PlanetcrackerVO", 0));
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_pROTOSS, "Conclave Directive", "\xE6\x9C\x80\xE9\xAB\x98\xE8\xAE\xAE\xE4\xBC\x9A\xE7\x9A\x84\xE6\x8C\x87\xE7\xA4\xBA", lib1_gv_aCTION, "", lib1_gv_rARE, 2, 0, null, "\xE4\xB8\xA2\xE5\xBC\x83 10 \xE5\xBC\xA0\xE5\x90\xAB\xE6\x9C\x89\xE5\x8F\xAC\xE5\x94\xA4\xE5\x9C\xB0\xE9\x9D\xA2\xE5\x8D\x95\xE4\xBD\x8D\xE7\x9A\x84\xE7\x89\x8C\xE3\x80\x82 \xE6\x8F\x90\xE5\x8D\x87\xE4\xBD\xA0 1 \xE7\x82\xB9\xE6\xB0\xB4\xE6\x99\xB6\xE4\xBA\xA7\xE8\x83\xBD\xE3\x80\x82", "Assets\\Textures\\ui_tipicon_story-travel.dds", SoundLink("Carrier_Pissed", 5));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DISCARD_FROM_DECK, lib1_gt_EffectConclaveDirective);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_INCREASE_INCOME, lib1_gt_CommonEffectAdd1MineralIncome);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_pROTOSS, "Praetor Fenix", "\xE6\x89\xA7\xE6\xB3\x95\xE5\xAE\x98\xE8\x8F\xB2\xE5\xB0\xBC\xE5\x85\x8B\xE6\x96\xAF", lib1_gv_aGGRESSIVE, "", lib1_gv_uNIQUE, 2, 0, lib1_gt_EffectPraetorFenix, "\xE4\xBA\xA1\xE8\xAF\xAD\xEF\xBC\x9A\xE6\xB7\xBB\xE5\x8A\xA0\xE8\x8F\xB2\xE5\xB0\xBC\xE5\x85\x8B\xE6\x96\xAF\xE7\x9A\x84\xE9\x87\x8D\xE7\x94\x9F\xE5\x92\x8C\xE4\xB8\xA4\xE5\xBC\xA0\xE6\x8A\x98\xE8\xB6\x8A\xE7\x89\x8C\xE5\x88\xB0\xE4\xBD\xA0\xE6\x89\x8B\xE4\xB8\xAD\xE3\x80\x82", "Assets\\Textures\\btn-unit-collection-zealot-golden.dds", SoundLink("FenixZealot", 0));
    lib1_gf_DefineCardUnit(lv_id, "ZealotFexix", 1);
    lib1_gf_AddHeroictoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_pROTOSS, "Gantrithor", "\xE7\x94\x98\xE7\xBF\xA0\xE7\xB4\xA2\xE5\x8F\xB7", lib1_gv_tACTICAL, "", lib1_gv_uNIQUE, 5, 3, lib1_gt_EffectGantrithor, "\xE7\x9B\xB4\xE8\x87\xB3\xE8\xA2\xAB\xE6\x91\xA7\xE6\xAF\x81\xEF\xBC\x8C \xE7\xBB\xB4\xE6\x8A\xA4\xEF\xBC\x9A 1 \xE6\xB0\xB4\xE6\x99\xB6\xE6\xAF\x8F\xE5\x9B\x9E\xE5\x90\x88\xE3\x80\x82\xE7\xA9\xBA\xE8\xBF\x87\xEF\xBC\x9A\xE5\x87\x8F\xE5\xB0\x91 1 \xE7\x82\xB9\xE9\x9A\x8F\xE6\x9C\xBA\xE8\xB4\xB9\xE7\x94\xA8\xE3\x80\x82", "Assets\\Textures\\btn-unit-protoss-carrier-golden.dds", SoundLink("Tassadar", 0));
    lib1_gf_DefineCardUnit(lv_id, "CarrierGantrithor", 1);
    lib1_gf_AddHeroictoCardDefinition(lv_id);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DEFAULT, lib1_gt_CommonEffectPopulateWithInterceptors);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_fIRST_CONTACT, lib1_gv_pROTOSS, "Tassadar", "\xE5\xA1\x94\xE8\x90\xA8\xE8\xBE\xBE", lib1_gv_dEFENSIVE, "", lib1_gv_uNIQUE, 2, 2, null, "\xE7\x9B\xB4\xE8\x87\xB3\xE6\xAD\xBB\xE4\xBA\xA1\xEF\xBC\x8C \xE6\xAF\x8F\xE5\x9B\x9E\xE5\x90\x88\xE9\x9A\x8F\xE6\x9C\xBA\xE6\x89\x93\xE5\x87\xBA\xE4\xBD\xA0\xE6\x89\x8B\xE4\xB8\xAD\xE4\xB8\x80\xE5\xBC\xA0\xE5\x8A\xA8\xE4\xBD\x9C\xE7\x89\x8C\xE3\x80\x82 \xE6\xAF\x8F\xE5\xBD\x93\xE5\xA1\x94\xE8\x90\xA8\xE8\xBE\xBE\xE6\x89\x93\xE5\x87\xBA\xE5\x8A\xA8\xE4\xBD\x9C\xE7\x89\x8C\xEF\xBC\x8C\xE6\x8A\xBD\xE4\xB8\x80\xE5\xBC\xA0\xE7\x89\x8C\xE3\x80\x82", "Assets\\Textures\\btn-unit-collection-hightemplar-golden.dds", SoundLink("Tassadar", 1));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_PLAY_CARD, lib1_gt_EffectTassadarPeriodicEffect);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_CREATE_UNIT, lib1_gt_EffectTassadarInitialization);
    lib1_gf_DefineCardUnit(lv_id, "HighTemplarTassadar", 1);
    lib1_gf_AddHeroictoCardDefinition(lv_id);
    lib1_gf_AddDelaytoCardDefinition(lv_id);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_FirstContactProtoss_Init () {
    lib1_gt_FirstContactProtoss = TriggerCreate("lib1_gt_FirstContactProtoss_Func");
    TriggerAddEventMapInit(lib1_gt_FirstContactProtoss);
}

//--------------------------------------------------------------------------------------------------
// Trigger: First Contact Uncollectible
//--------------------------------------------------------------------------------------------------
bool lib1_gt_FirstContactUncollectible_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_id;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_id = 289;
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNCOLLECTIBLE, lib1_gv_tERRAN, "Riot", "\xE5\x8F\x9B\xE4\xB9\xB1", lib1_gv_aCTION, "", lib1_gv_uNCOLLECTIBLE, 3, 0, null, "\xE5\x8F\xAA\xE8\xA6\x81\xE8\xAF\xA5\xE7\x89\x8C\xE5\x9C\xA8\xE4\xBD\xA0\xE6\x89\x8B\xE4\xB8\xAD\xEF\xBC\x8C\xE6\xAF\x8F\xE5\x9B\x9E\xE5\x90\x88\xE9\x9A\x8F\xE6\x9C\xBA\xE4\xB8\xBA\xE4\xBD\xA0\xE7\x9A\x84\xE4\xB8\x80\xE4\xB8\xAA\xE6\x95\x8C\xE4\xBA\xBA\xE5\x8F\xAC\xE5\x94\xA4\xE4\xB8\xA4\xE4\xB8\xAA\xE6\x9C\xBA\xE6\x9E\xAA\xE5\x85\xB5\xE3\x80\x82 \xE6\x89\x93\xE5\x87\xBA\xE8\xBF\x99\xE5\xBC\xA0\xE7\x89\x8C\xE6\xB8\x85\xE9\x99\xA4\xE6\x9A\xB4\xE4\xB9\xB1\xE5\xB9\xB6\xE6\x8A\xBD\xE4\xB8\x80\xE5\xBC\xA0\xE7\x89\x8C\xE3\x80\x82", "Assets\\Textures\\ui_btn_generic_exclemation_red.dds", SoundLink("Marine_AttackLaunch", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DRAW, lib1_gt_EffectRiot);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNCOLLECTIBLE, lib1_gv_tERRAN, "22nd Reinforcements", "22\xE5\xB8\x88\xE7\x9A\x84\xE5\xA2\x9E\xE6\x8F\xB4", lib1_gv_aCTION, lib1_gv_cONFEDERATE, lib1_gv_rARE, 4, 0, null, "\xE5\x91\xBC\xE5\x8F\xAB\xE7\xA9\xBA\xE6\x8A\x95\xE8\xA1\xA5\xE5\x85\x85\xE9\x99\x86\xE6\x88\x98\xE9\x98\x9F\xE5\x91\x98\xE7\x9B\xB4\xE5\x88\xB0\xE4\xBD\xA0\xE7\x9A\x84\xE9\x99\x86\xE6\x88\x98\xE9\x98\x9F\xE5\x91\x98\xE6\x95\xB0\xE9\x87\x8F\xE6\x98\xAF\xE6\x8C\x87\xE6\x8C\xA5\xE5\xAE\x98\xE6\x95\xB0\xE9\x87\x8F\xE7\x9A\x84 10 \xE5\x80\x8D,\xE5\xA6\x82\xE6\x9E\x9C\xE4\xBD\xA0\xE6\x9C\x80\xE5\x90\x8E\xE4\xB8\x80\xE4\xB8\xAA\xE6\x8C\x87\xE6\x8C\xA5\xE5\xAE\x98\xE6\xAD\xBB\xE4\xBA\xA1\xE4\xB8\xA2\xE5\xBC\x83\xE8\xBF\x99\xE5\xBC\xA0\xE7\x89\x8C\xE3\x80\x82", "Assets\\Textures\\talent-raynor-level08-orbitaldroppods.dds", SoundLink("Marine_Help", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_CREATE_UNIT, lib1_gt_Effect22ndReinforcements);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNCOLLECTIBLE, lib1_gv_tERRAN, "Spider Mines", "\xE8\x9C\x98\xE8\x9B\x9B\xE9\x9B\xB7", lib1_gv_aCTION, "", lib1_gv_uNCOMMON, 3, 0, null, "\xE5\x8F\xAC\xE5\x94\xA4 4 \xE7\xA7\x83\xE9\xB9\xAB\xE5\x9C\xA8\xE4\xBD\xA0\xE7\x9A\x84\xE9\x98\xB2\xE5\xAE\x88\xE5\x8C\xBA\xE5\x90\x84\xE6\x94\xBE\xE7\xBD\xAE 3 \xE4\xB8\xAA\xE8\x9C\x98\xE8\x9B\x9B\xE9\x9B\xB7\xE9\x9A\x8F\xE5\x90\x8E\xE7\xA6\xBB\xE5\xBC\x80\xE3\x80\x82", "Assets\\Textures\\btn-unit-terran-spidermine.dds", SoundLink("Vulture_SpiderMinePlace", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_CREATE_UNIT, lib1_gt_EffectSpiderMines);
    lib1_gf_AddTransformRelationship("Vulture Clan", "Spider Mines");
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNCOLLECTIBLE, lib1_gv_tERRAN, "Tarsonis Security", "\xE5\xA1\x94\xE6\xA1\x91\xE5\xB0\xBC\xE6\x96\xAF\xE5\xAE\x89\xE4\xBF\x9D\xE9\x98\x9F", lib1_gv_dEFENSIVE, lib1_gv_cONFEDERATE, lib1_gv_uNCOMMON, 5, 1, null, "\xE6\x88\x98\xE5\x90\xBC\xEF\xBC\x9A \xE4\xB8\xA2\xE5\xBC\x83\xE6\x89\x8B\xE4\xB8\xAD\xE5\x85\xA8\xE9\x83\xA8\xE6\x9A\xB4\xE4\xB9\xB1\xE7\x89\x8C,\xE6\xAF\x8F\xE4\xB8\xA2\xE5\xBC\x83\xE4\xB8\x80\xE5\xBC\xA0\xE6\x8A\xBD\xE4\xB8\x80\xE5\xBC\xA0\xE7\x89\x8C\xE3\x80\x82", "Assets\\Textures\\btn-upgrade-terran-infantryarmorlevel2.dds", SoundLink("Goliath", 1));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DISCARD_FROM_HAND, lib1_gt_EffectTarsonisSecurity);
    lib1_gf_DefineCardUnit(lv_id, "Marine", 8);
    lib1_gf_DefineCardUnit(lv_id, "Goliath", 2);
    lib1_gf_AddTransformRelationship("Tarsonis Battalion", "Tarsonis Security");
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNCOLLECTIBLE, lib1_gv_tERRAN, "Drone Research", "\xE5\xB7\xA5\xE8\x9C\x82\xE7\xA0\x94\xE7\xA9\xB6", lib1_gv_aCTION, lib1_gv_rESEARCH, lib1_gv_uNCOLLECTIBLE, -1, 0, null, "\xE8\xA2\xAB\xE9\x80\x89\xE4\xB8\xAD\xE6\x97\xB6 +1 \xE7\x9F\xBF\xE7\x89\xA9\xE3\x80\x82", "Assets\\Textures\\wireframe-zerg-drone.dds", SoundLink("Drone_Death", 2));
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNCOLLECTIBLE, lib1_gv_tERRAN, "Zergling Research", "\xE8\xB7\xB3\xE8\x99\xAB\xE7\xA0\x94\xE7\xA9\xB6", lib1_gv_aCTION, lib1_gv_rESEARCH, lib1_gv_uNCOLLECTIBLE, 1, 0, null, "\xE6\x9C\xAC\xE5\x9B\x9E\xE5\x90\x88\xE4\xBD\xA0\xE6\x89\x93\xE5\x87\xBA\xE7\x9A\x84\xE5\x8D\x95\xE4\xBD\x8D\xE7\x89\x8C\xE8\x8E\xB7\xE5\xBE\x97 rush\xE3\x80\x82", "Assets\\Textures\\wireframe-zerg-zergling.dds", SoundLink("Zergling_Death", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_BUFF_UNITS, lib1_gt_EffectZerglingResearch);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNCOLLECTIBLE, lib1_gv_tERRAN, "Hydralisk Research", "\xE5\x88\xBA\xE8\x9B\x87\xE7\xA0\x94\xE7\xA9\xB6", lib1_gv_aCTION, lib1_gv_rESEARCH, lib1_gv_uNCOLLECTIBLE, 1, 0, null, "\xE5\xAF\xB9\xE6\x9C\x80\xE8\x82\x89\xE7\x9A\x84\xE6\x95\x8C\xE5\xAF\xB9\xE5\x8D\x95\xE4\xBD\x8D\xE9\x80\xA0\xE6\x88\x90 500 \xE4\xBC\xA4\xE5\xAE\xB3\xE3\x80\x82", "Assets\\Textures\\wireframe-zerg-hydralisk.dds", SoundLink("Hydralisk_Death", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_REMOVE_UNIT_800_DAMAGE, lib1_gt_EffectHydraliskResearch);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNCOLLECTIBLE, lib1_gv_tERRAN, "Overlord Research", "\xE7\x8E\x8B\xE8\x99\xAB\xE7\xA0\x94\xE7\xA9\xB6", lib1_gv_aCTION, lib1_gv_rESEARCH, lib1_gv_uNCOLLECTIBLE, 1, 0, null, "\xE6\x8A\xBD 1 \xE5\xBC\xA0\xE5\x8D\xA1\xE3\x80\x82", "Assets\\Textures\\wireframe-zerg-overlord.dds", SoundLink("Overlord_Death", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DRAW, lib1_gt_CommonEffectDraw1);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNCOLLECTIBLE, lib1_gv_tERRAN, "Defiler Research", "\xE8\x9D\x8E\xE5\xAD\x90\xE7\xA0\x94\xE7\xA9\xB6", lib1_gv_aCTION, lib1_gv_rESEARCH, lib1_gv_uNCOLLECTIBLE, 0, 1, null, "\xE5\xAF\xB9\xE4\xB8\xA4\xE4\xB8\xAA\xE6\x95\x8C\xE5\xAF\xB9\xE7\x94\x9F\xE7\x89\xA9\xE5\x8D\x95\xE4\xBD\x8D\xE6\x96\xBD\xE6\x94\xBE\xE8\xBE\x90\xE7\x85\xA7,\xE9\x9A\x8F\xE6\x97\xB6\xE9\x97\xB4\xE6\x8E\xA8\xE7\xA7\xBB,\xE5\xAE\x83\xE5\x92\x8C\xE5\xAE\x83\xE9\x99\x84\xE8\xBF\x91\xE7\x9A\x84\xE7\x94\x9F\xE7\x89\xA9\xE5\x8D\x95\xE4\xBD\x8D\xE4\xBC\x9A\xE9\x80\x90\xE6\xB8\x90\xE5\x8F\x97\xE5\x88\xB0\xE4\xBC\xA4\xE5\xAE\xB3\xE3\x80\x82", "Assets\\Textures\\wireframe-defiler_ex3.dds", SoundLink("Drone_Death", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_REMOVE_UNIT_AOE_DAMAGE, lib1_gt_EffectDefilerResearch);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNCOLLECTIBLE, lib1_gv_zERG, "Scourge Spawn", "\xE7\x88\x86\xE8\x9A\x8A\xE5\x8D\xB5", lib1_gv_aGGRESSIVE, lib1_gv_sPAWN, lib1_gv_uNCOLLECTIBLE, 0, 1, null, "", "Assets\\Textures\\wireframe-zerg-scourge.dds", SoundLink("ScourgeMP_Attack", 0));
    lib1_gf_DefineCardUnit(lv_id, "Scourge", 4);
    lib1_gf_AddRushtoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNCOLLECTIBLE, lib1_gv_zERG, "Torrasque Revival", "\xE6\x89\x98\xE9\x9B\xB7\xE6\x96\xAF\xE5\xA4\x8D\xE6\xB4\xBB", lib1_gv_aGGRESSIVE, "", lib1_gv_uNIQUE, 5, 3, null, "", "Assets\\Textures\\btn-ability-zerg-ultralisk-revive.dds", SoundLink("Ultralisk_Roar", 0));
    lib1_gf_DefineCardUnit(lv_id, "UltraliskTorrasque", 1);
    lib1_gf_AddHeroictoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNCOLLECTIBLE, lib1_gv_zERG, "Infestation", "\xE6\x84\x9F\xE6\x9F\x93", lib1_gv_aCTION, "", lib1_gv_uNCOLLECTIBLE, 8, 3, null, "\xE5\x8F\xAA\xE8\xA6\x81\xE8\xAF\xA5\xE7\x89\x8C\xE5\x9C\xA8\xE4\xBD\xA0\xE6\x89\x8B\xE4\xB8\xAD\xEF\xBC\x8C \xE6\xAF\x8F\xE5\x9B\x9E\xE5\x90\x88\xE4\xB8\xBA\xE4\xBD\xA0\xE7\x9A\x84\xE4\xB8\x80\xE4\xB8\xAA\xE5\xAF\xB9\xE6\x89\x8B\xE5\x8F\xAC\xE5\x94\xA4 4 \xE5\xB0\x8F\xE7\x8B\x97 1 \xE5\x88\xBA\xE8\x9B\x87\xE3\x80\x82 \xE6\x89\x93\xE5\x87\xBA\xE8\xBF\x99\xE5\xBC\xA0\xE7\x89\x8C\xE6\xB8\x85\xE9\x99\xA4\xE6\x84\x9F\xE6\x9F\x93\xE5\xB9\xB6\xE6\x8A\xBD\xE4\xB8\x80\xE5\xBC\xA0\xE7\x89\x8C\xE3\x80\x82", "Assets\\Textures\\ui_btn_generic_exclemation_red.dds", SoundLink("Zergling_DeathFXFire", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DRAW, lib1_gt_EffectInfestation);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNCOLLECTIBLE, lib1_gv_pROTOSS, "Fenix Reborn", "\xE8\x8F\xB2\xE5\xB0\xBC\xE5\x85\x8B\xE6\x96\xAF\xE9\x87\x8D\xE7\x94\x9F", lib1_gv_aGGRESSIVE, "", lib1_gv_uNIQUE, 1, 1, null, "", "Assets\\Textures\\btn-unit-protoss-dragoon-purifier.dds", SoundLink("FenixDragoon", 0));
    lib1_gf_DefineCardUnit(lv_id, "DragoonFenix", 1);
    lib1_gf_AddHeroictoCardDefinition(lv_id);
    lib1_gf_AddRushtoCardDefinition(lv_id);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_FirstContactUncollectible_Init () {
    lib1_gt_FirstContactUncollectible = TriggerCreate("lib1_gt_FirstContactUncollectible_Func");
    TriggerAddEventMapInit(lib1_gt_FirstContactUncollectible);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Riot 1
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectRiot1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_GenerateCardtoTopofDeck(lv_player, lib1_gf_GetCardIDByName("Riot"));
    lib1_gf_ShuffleDeck(lv_player);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectRiot1_Init () {
    lib1_gt_EffectRiot1 = TriggerCreate("lib1_gt_EffectRiot1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Riot 2
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectRiot2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_GenerateCardtoTopofDeck(lv_player, lib1_gf_GetCardIDByName("Riot"));
    lib1_gf_GenerateCardtoTopofDeck(lv_player, lib1_gf_GetCardIDByName("Riot"));
    lib1_gf_ShuffleDeck(lv_player);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectRiot2_Init () {
    lib1_gt_EffectRiot2 = TriggerCreate("lib1_gt_EffectRiot2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Riot 3
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectRiot3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_GenerateCardtoTopofDeck(lv_player, lib1_gf_GetCardIDByName("Riot"));
    lib1_gf_GenerateCardtoTopofDeck(lv_player, lib1_gf_GetCardIDByName("Riot"));
    lib1_gf_GenerateCardtoTopofDeck(lv_player, lib1_gf_GetCardIDByName("Riot"));
    lib1_gf_ShuffleDeck(lv_player);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectRiot3_Init () {
    lib1_gt_EffectRiot3 = TriggerCreate("lib1_gt_EffectRiot3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Riot 4
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectRiot4_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_GenerateCardtoTopofDeck(lv_player, lib1_gf_GetCardIDByName("Riot"));
    lib1_gf_GenerateCardtoTopofDeck(lv_player, lib1_gf_GetCardIDByName("Riot"));
    lib1_gf_GenerateCardtoTopofDeck(lv_player, lib1_gf_GetCardIDByName("Riot"));
    lib1_gf_GenerateCardtoTopofDeck(lv_player, lib1_gf_GetCardIDByName("Riot"));
    lib1_gf_ShuffleDeck(lv_player);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectRiot4_Init () {
    lib1_gt_EffectRiot4 = TriggerCreate("lib1_gt_EffectRiot4_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Recon Squad
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectReconSquad_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_GenerateXenomorphResearchCardforHand(lv_player);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectReconSquad_Init () {
    lib1_gt_EffectReconSquad = TriggerCreate("lib1_gt_EffectReconSquad_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Tarsonis Turrets
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectTarsonisTurrets_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_BuildStructure(lv_player, lv_card_id, "SCV", AbilityCommand("TerranBuild", 5), "MissileTurret", true, 1.25);
    lib1_gf_BuildStructure(lv_player, lv_card_id, "SCV", AbilityCommand("TerranBuild", 5), "MissileTurret", true, 1.25);
    lib1_gf_BuildStructure(lv_player, lv_card_id, "SCV", AbilityCommand("TerranBuild", 5), "MissileTurret", true, 1.25);
    lib1_gf_BuildStructure(lv_player, lv_card_id, "SCV", AbilityCommand("TerranBuild", 5), "MissileTurret", true, 1.25);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectTarsonisTurrets_Init () {
    lib1_gt_EffectTarsonisTurrets = TriggerCreate("lib1_gt_EffectTarsonisTurrets_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Badlands Garage
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectBadlandsGarage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_BuildStructure(lv_player, lv_card_id, "SCV", AbilityCommand("TerranBuild", 12), "FactoryVulture", false, -1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectBadlandsGarage_Init () {
    lib1_gt_EffectBadlandsGarage = TriggerCreate("lib1_gt_EffectBadlandsGarage_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Spider Minefield
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectSpiderMinefield_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    int lv_oracle_count;

    // Automatic Variable Declarations
    const int autoF1117306_ae = 6;
    const int autoF1117306_ai = 1;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lv_oracle_count = 1;
    for ( ; ( (autoF1117306_ai >= 0 && lv_oracle_count <= autoF1117306_ae) || (autoF1117306_ai < 0 && lv_oracle_count >= autoF1117306_ae) ) ; lv_oracle_count += autoF1117306_ai ) {
        UnitCreate(1, "Vulture", 0, lv_player, RegionRandomPoint(lib1_gv_player[lv_player].lv_spawn_region), libNtve_gf_RandomAngle());
        UnitBehaviorAdd(UnitLastCreated(), "KillableCaster", UnitLastCreated(), 1);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("VultureSpiderMines", 0), RegionRandomPoint(RegionFromId(15))), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("VultureSpiderMines", 0), RegionRandomPoint(RegionFromId(15))), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("VultureSpiderMines", 0), RegionRandomPoint(RegionFromId(15))), c_orderQueueAddToEnd);
        lib1_gf_IssueLeaveOrders(UnitLastCreated(), c_orderQueueAddToEnd);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectSpiderMinefield_Init () {
    lib1_gt_EffectSpiderMinefield = TriggerCreate("lib1_gt_EffectSpiderMinefield_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Irradiate
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectIrradiate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    int lv_count;

    // Automatic Variable Declarations
    const int autoDCC33F0E_ae = 4;
    const int autoDCC33F0E_ai = 1;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lv_count = 1;
    for ( ; ( (autoDCC33F0E_ai >= 0 && lv_count <= autoDCC33F0E_ae) || (autoDCC33F0E_ai < 0 && lv_count >= autoDCC33F0E_ae) ) ; lv_count += autoDCC33F0E_ai ) {
        UnitCreate(1, "ScienceVessel", 0, lv_player, RegionRandomPoint(lib1_gv_player[lv_player].lv_spawn_region), libNtve_gf_RandomAngle());
        UnitBehaviorAdd(UnitLastCreated(), "Caster", UnitLastCreated(), 1);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("Irradiate", 0), lib1_gf_BestTargetforSplash(lv_player, UnitFilter((1 << c_targetFilterBiological) | (1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 1.5, false)), c_orderQueueReplace);
        lib1_gf_IssueLeaveOrders(UnitLastCreated(), c_orderQueueAddToEnd);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectIrradiate_Init () {
    lib1_gt_EffectIrradiate = TriggerCreate("lib1_gt_EffectIrradiate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Science Vessels
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectScienceVessels_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_GenerateXenomorphResearchCardforHand(lv_player);
    lib1_gf_GenerateXenomorphResearchCardforHand(lv_player);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectScienceVessels_Init () {
    lib1_gt_EffectScienceVessels = TriggerCreate("lib1_gt_EffectScienceVessels_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Tarsonis Security
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectTarsonisSecurity_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    int lv_hand_index;
    int lv_riot_count;
    int lv_count;

    // Automatic Variable Declarations
    int autoF7807328_ae;
    const int autoF7807328_ai = 1;
    int auto071FB0B1_ae;
    const int auto071FB0B1_ai = 1;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    autoF7807328_ae = lib1_gf_TopofHand(lv_player);
    lv_hand_index = 0;
    for ( ; ( (autoF7807328_ai >= 0 && lv_hand_index <= autoF7807328_ae) || (autoF7807328_ai < 0 && lv_hand_index >= autoF7807328_ae) ) ; lv_hand_index += autoF7807328_ai ) {
        if ((lib1_gv_player[lv_player].lv_hand.lv_card[lv_hand_index].lv_id == lib1_gf_GetCardIDByName("Riot"))) {
            lv_riot_count = (lv_riot_count + 1);
        }

    }
    lib1_gf_DiscardAllCardsWithName(lv_player, "Riot");
    auto071FB0B1_ae = lv_riot_count;
    lv_count = 1;
    for ( ; ( (auto071FB0B1_ai >= 0 && lv_count <= auto071FB0B1_ae) || (auto071FB0B1_ai < 0 && lv_count >= auto071FB0B1_ae) ) ; lv_count += auto071FB0B1_ai ) {
        lib1_gf_AddEffecttoQueue(lv_player, lib1_gf_GetCardIDByName("Tarsonis Security"), lib1_gv_eF_DRAW, lib1_gt_CommonEffectDraw1, UnitGroupEmpty(), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectTarsonisSecurity_Init () {
    lib1_gt_EffectTarsonisSecurity = TriggerCreate("lib1_gt_EffectTarsonisSecurity_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Research Facility
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectResearchFacility_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_BuildStructure(lv_player, lv_card_id, "SCV", AbilityCommand("TerranBuild", 16), "FusionCore", false, -1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectResearchFacility_Init () {
    lib1_gt_EffectResearchFacility = TriggerCreate("lib1_gt_EffectResearchFacility_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Council Corruption
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectCouncilCorruption_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    int lv_hand_index;
    int lv_count;

    // Automatic Variable Declarations
    int auto925CD5A1_ae;
    const int auto925CD5A1_ai = 1;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto925CD5A1_ae = lib1_gf_TopofHand(lv_player);
    lv_hand_index = 0;
    for ( ; ( (auto925CD5A1_ai >= 0 && lv_hand_index <= auto925CD5A1_ae) || (auto925CD5A1_ai < 0 && lv_hand_index >= auto925CD5A1_ae) ) ; lv_hand_index += auto925CD5A1_ai ) {
        if ((lib1_gv_player[lv_player].lv_hand.lv_card[lv_hand_index].lv_subtype == lib1_gv_cONFEDERATE)) {
            lib1_gf_AddtoHandCardCost(lv_player, lv_hand_index, -2, -2);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectCouncilCorruption_Init () {
    lib1_gt_EffectCouncilCorruption = TriggerCreate("lib1_gt_EffectCouncilCorruption_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Machine Shop
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectMachineShop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unitgroup lv_possible_targets;
    unitgroup lv_chosen_targets;
    unit lv_structure;
    int lv_i;
    int lv_count;

    // Automatic Variable Declarations
    unitgroup auto76E27C51_g;
    int auto76E27C51_u;
    unitgroup auto6E5BA80A_g;
    int auto6E5BA80A_u;
    int auto90253622_ae;
    const int auto90253622_ai = 1;
    unitgroup autoD77020F0_g;
    int autoD77020F0_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();
    lv_possible_targets = UnitGroupEmpty();
    lv_chosen_targets = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto76E27C51_g = UnitGroup("Factory", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto76E27C51_u = UnitGroupCount(auto76E27C51_g, c_unitCountAll);
    for (;; auto76E27C51_u -= 1) {
        lv_structure = UnitGroupUnitFromEnd(auto76E27C51_g, auto76E27C51_u);
        if (lv_structure == null) { break; }
        if ((UnitAddOnChild(lv_structure, 0) == null)) {
            UnitGroupAdd(lv_possible_targets, lv_structure);
        }

    }
    auto6E5BA80A_g = UnitGroup("FactoryVulture", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6E5BA80A_u = UnitGroupCount(auto6E5BA80A_g, c_unitCountAll);
    for (;; auto6E5BA80A_u -= 1) {
        lv_structure = UnitGroupUnitFromEnd(auto6E5BA80A_g, auto6E5BA80A_u);
        if (lv_structure == null) { break; }
        if ((UnitAddOnChild(lv_structure, 0) == null)) {
            UnitGroupAdd(lv_possible_targets, lv_structure);
        }

    }
    lv_count = MinI(UnitGroupCount(lv_possible_targets, c_unitCountAlive), 2);
    auto90253622_ae = lv_count;
    lv_i = 1;
    for ( ; ( (auto90253622_ai >= 0 && lv_i <= auto90253622_ae) || (auto90253622_ai < 0 && lv_i >= auto90253622_ae) ) ; lv_i += auto90253622_ai ) {
        lv_structure = UnitGroupRandomUnit(lv_possible_targets, c_unitCountAlive);
        UnitGroupAdd(lv_chosen_targets, lv_structure);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "MachineShop", c_unitCreateIgnorePlacement, lv_player, PointWithOffset(UnitGetPosition(lv_structure), 2.5, -0.5));
        UnitSetCustomValue(lv_structure, 0, (UnitGetCustomValue(lv_structure, 0) + 2.5));
        UnitGroupRemove(lv_possible_targets, lv_structure);
    }
    autoD77020F0_g = lv_chosen_targets;
    autoD77020F0_u = UnitGroupCount(autoD77020F0_g, c_unitCountAll);
    for (;; autoD77020F0_u -= 1) {
        lv_structure = UnitGroupUnitFromEnd(autoD77020F0_g, autoD77020F0_u);
        if (lv_structure == null) { break; }
        Wait(1.0, c_timeGame);
        UnitIssueOrder(lv_structure, Order(AbilityCommand("que5", 0)), c_orderQueueReplace);
        UnitIssueOrder(lv_structure, Order(AbilityCommand("que5", 0)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectMachineShop_Init () {
    lib1_gt_EffectMachineShop = TriggerCreate("lib1_gt_EffectMachineShop_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - 22nd Division
//--------------------------------------------------------------------------------------------------
bool lib1_gt_Effect22ndDivision_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_GenerateCardforHand(lv_player, lib1_gf_GetCardIDByName("22nd Reinforcements"));
    lib1_gf_UpdateCardPropertiesBasedonGameState(lv_player, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_Effect22ndDivision_Init () {
    lib1_gt_Effect22ndDivision = TriggerCreate("lib1_gt_Effect22ndDivision_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Ghost Academy
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectGhostAcademy_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_BuildStructure(lv_player, lv_card_id, "SCV", AbilityCommand("TerranBuild", 9), "GhostAcademy", false, -1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectGhostAcademy_Init () {
    lib1_gt_EffectGhostAcademy = TriggerCreate("lib1_gt_EffectGhostAcademy_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Backwater Station (Discard From Hand)
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectBackwaterStationDiscardFromHand_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_structure;

    // Automatic Variable Declarations
    unitgroup autoB2DCFE29_g;
    int autoB2DCFE29_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    autoB2DCFE29_g = UnitGroup(null, lv_player, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0);
    autoB2DCFE29_u = UnitGroupCount(autoB2DCFE29_g, c_unitCountAll);
    for (;; autoB2DCFE29_u -= 1) {
        lv_structure = UnitGroupUnitFromEnd(autoB2DCFE29_g, autoB2DCFE29_u);
        if (lv_structure == null) { break; }
        UnitKill(lv_structure);
    }
    lib1_gf_BuildStructure(lv_player, lv_card_id, "SCV", AbilityCommand("TerranBuild", 3), "Barracks", false, 3.0);
    lib1_gf_BuildStructure(lv_player, lv_card_id, "SCV", AbilityCommand("TerranBuild", 6), "Bunker", true, 0.0);
    lib1_gf_BuildStructure(lv_player, lv_card_id, "SCV", AbilityCommand("TerranBuild", 5), "MissileTurret", true, 0.0);
    lib1_gf_DiscardAllCardsWithType(lv_player, lib1_gv_sTRUCTURE);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectBackwaterStationDiscardFromHand_Init () {
    lib1_gt_EffectBackwaterStationDiscardFromHand = TriggerCreate("lib1_gt_EffectBackwaterStationDiscardFromHand_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Backwater Station (Discard From Deck)
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectBackwaterStationDiscardFromDeck_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_structure;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_DiscardFromDeckAllCardsWithType(lv_player, lib1_gv_sTRUCTURE);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectBackwaterStationDiscardFromDeck_Init () {
    lib1_gt_EffectBackwaterStationDiscardFromDeck = TriggerCreate("lib1_gt_EffectBackwaterStationDiscardFromDeck_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Korhal's Destruction
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectKorhalsDestruction_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    Wait(1.8, c_timeGame);
    UnitCreate(1, "Ghost", 0, lv_player, RegionRandomPoint(lib1_gv_player[lv_player].lv_spawn_region), libNtve_gf_RandomAngle());
    UnitBehaviorAdd(UnitLastCreated(), "Caster", UnitLastCreated(), 1);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("TacNukeStrike", 0), RegionRandomPoint(lib1_gv_player[lv_player].lv_aoe_target_region)), c_orderQueueReplace);
    lib1_gf_IssueLeaveOrders(UnitLastCreated(), c_orderQueueAddToEnd);
    UnitCreate(1, "Ghost", 0, lv_player, RegionRandomPoint(lib1_gv_player[lv_player].lv_spawn_region), libNtve_gf_RandomAngle());
    UnitBehaviorAdd(UnitLastCreated(), "Caster", UnitLastCreated(), 1);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("TacNukeStrike", 0), RegionRandomPoint(RegionCircle(RegionGetCenter(RegionFromId(15)), 1.0))), c_orderQueueReplace);
    lib1_gf_IssueLeaveOrders(UnitLastCreated(), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectKorhalsDestruction_Init () {
    lib1_gt_EffectKorhalsDestruction = TriggerCreate("lib1_gt_EffectKorhalsDestruction_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Resocialization
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectResocialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    int lv_top_of_deck;
    int lv_deck_index;
    int lv_discarded_count;
    int lv_count;
    int lv_unit_count;

    // Automatic Variable Declarations
    const int autoA44E4A8E_ae = 0;
    const int autoA44E4A8E_ai = -1;
    int auto8E3727A4_ae;
    const int auto8E3727A4_ai = 1;
    const int auto55A547B4_ae = 6;
    const int auto55A547B4_ai = 1;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lv_top_of_deck = lib1_gf_TopofDeck(lv_player);
    if ((lv_top_of_deck >= 0)) {
        lv_deck_index = lv_top_of_deck;
        for ( ; ( (autoA44E4A8E_ai >= 0 && lv_deck_index <= autoA44E4A8E_ae) || (autoA44E4A8E_ai < 0 && lv_deck_index >= autoA44E4A8E_ae) ) ; lv_deck_index += autoA44E4A8E_ai ) {
            if ((lv_discarded_count < 3) && (lib1_gv_player[lv_player].lv_deck.lv_card[lv_deck_index].lv_id == lib1_gf_GetCardIDByName("Riot"))) {
                lib1_gf_DiscardCardFromDecktoDiscard(lv_player, lv_deck_index);
                lv_discarded_count = (lv_discarded_count + 1);
            }

        }
        if ((lv_discarded_count >= 1)) {
            lib1_gf_ShuffleDeck(lv_player);
            auto8E3727A4_ae = lv_discarded_count;
            lv_count = 1;
            for ( ; ( (auto8E3727A4_ai >= 0 && lv_count <= auto8E3727A4_ae) || (auto8E3727A4_ai < 0 && lv_count >= auto8E3727A4_ae) ) ; lv_count += auto8E3727A4_ai ) {
                lv_unit_count = 1;
                for ( ; ( (auto55A547B4_ai >= 0 && lv_unit_count <= auto55A547B4_ae) || (auto55A547B4_ai < 0 && lv_unit_count >= auto55A547B4_ae) ) ; lv_unit_count += auto55A547B4_ai ) {
                    UnitCreate(1, "Marine", 0, lv_player, RegionRandomPoint(lib1_gv_player[lv_player].lv_spawn_region), libNtve_gf_RandomAngle());
                    UnitGroupAdd(lib1_gv_aggressive_units, UnitLastCreated());
                    UnitBehaviorAdd(UnitLastCreated(), "PermanentlyUncommandable", UnitLastCreated(), 1);
                    UnitGroupAdd(lib1_gv_units_from_card[lib1_gf_GetCardIDByName("Resocialization")], UnitLastCreated());
                    lib1_gf_IssueDefaultOrders(UnitLastCreated());
                }
            }
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectResocialization_Init () {
    lib1_gt_EffectResocialization = TriggerCreate("lib1_gt_EffectResocialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Norad II
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectNoradII_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto0CE35123_g;
    int auto0CE35123_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto0CE35123_g = lv_units_created;
    auto0CE35123_u = UnitGroupCount(auto0CE35123_g, c_unitCountAll);
    for (;; auto0CE35123_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto0CE35123_g, auto0CE35123_u);
        if (lv_unit == null) { break; }
        UnitBehaviorRemove(lv_unit, "WaitingToMoveOut", 1);
        lib1_gf_CreateCargoUnitsWithStatTracking(4, "Marine", lv_unit);
        UnitGroupAddUnitGroup(lib1_gv_units_from_card[lv_card_id], UnitCargoLastCreatedGroup());
        UnitGroupAddUnitGroup(lib1_gv_aggressive_units, UnitCargoLastCreatedGroup());
        lib1_gf_CreateCargoUnitsWithStatTracking(1, "Goliath", lv_unit);
        UnitGroupAddUnitGroup(lib1_gv_units_from_card[lv_card_id], UnitCargoLastCreatedGroup());
        UnitGroupAddUnitGroup(lib1_gv_aggressive_units, UnitCargoLastCreatedGroup());
        lib1_gf_CreateCargoUnitsWithStatTracking(1, "SiegeTankMerc", lv_unit);
        UnitBehaviorAdd(UnitCargoLastCreated(), "Heroic", UnitCargoLastCreated(), 1);
        UnitGroupAddUnitGroup(lib1_gv_units_from_card[lv_card_id], UnitCargoLastCreatedGroup());
        UnitGroupAddUnitGroup(lib1_gv_aggressive_units, UnitCargoLastCreatedGroup());
        UnitBehaviorAdd(lv_unit, "WaitingToMoveOut", lv_unit, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectNoradII_Init () {
    lib1_gt_EffectNoradII = TriggerCreate("lib1_gt_EffectNoradII_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Kerrigan, Assassin
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectKerriganAssassin_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    int[3000] lv_possible_player;
    int[3000] lv_possible_deck_index;
    int lv_opponent;
    int lv_deck_index;
    int lv_possible_target_count;
    int lv_random_choice;

    // Automatic Variable Declarations
    playergroup autoC21E0AE0_g;
    const int auto55F5601D_ae = lib1_gv_dECK_LIMIT;
    const int auto55F5601D_ai = 1;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    autoC21E0AE0_g = lib1_gf_OpposingTeamofPlayer(lv_player);
    lv_opponent = -1;
    while (true) {
        lv_opponent = PlayerGroupNextPlayer(autoC21E0AE0_g, lv_opponent);
        if (lv_opponent < 0) { break; }
        lv_deck_index = 0;
        for ( ; ( (auto55F5601D_ai >= 0 && lv_deck_index <= auto55F5601D_ae) || (auto55F5601D_ai < 0 && lv_deck_index >= auto55F5601D_ae) ) ; lv_deck_index += auto55F5601D_ai ) {
            if ((lib1_gv_player[lv_opponent].lv_deck.lv_card[lv_deck_index].lv_heroic == true)) {
                lv_possible_player[lv_possible_target_count] = lv_opponent;
                lv_possible_deck_index[lv_possible_target_count] = lv_deck_index;
                lv_possible_target_count = (lv_possible_target_count + 1);
            }
            else if ((lib1_gf_PlayerHasCardAtDeckIndex(lv_opponent, lv_deck_index) == false)) {
                break;
            }
        }
    }
    if ((lv_possible_target_count > 0)) {
        lv_random_choice = RandomInt(0, (lv_possible_target_count - 1));
        UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaChat, (StringExternal("Param/Value/lib_1_19A5A895") + StringToText(lib1_gv_player[lv_possible_player[lv_random_choice]].lv_deck.lv_card[lv_possible_deck_index[lv_random_choice]].lv_name) + StringExternal("Param/Value/lib_1_CD32EB22") + PlayerName(lv_possible_player[lv_random_choice]) + StringExternal("Param/Value/lib_1_C1685E9F")));
        UIDisplayMessage(PlayerGroupSingle(lv_possible_player[lv_random_choice]), c_messageAreaChat, (PlayerName(lv_player) + StringExternal("Param/Value/lib_1_74C16B57") + StringToText(lib1_gv_player[lv_possible_player[lv_random_choice]].lv_deck.lv_card[lv_possible_deck_index[lv_random_choice]].lv_name) + StringExternal("Param/Value/lib_1_E0073986")));
        lib1_gf_DiscardCardFromDecktoDiscard(lv_possible_player[lv_random_choice], lv_possible_deck_index[lv_random_choice]);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectKerriganAssassin_Init () {
    lib1_gt_EffectKerriganAssassin = TriggerCreate("lib1_gt_EffectKerriganAssassin_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Raynor, Rebel
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectRaynorRebel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    int lv_top;
    int lv_deck_index;
    int lv_discarded_count;
    int lv_count;
    int lv_unit_count;
    int lv_hand_index;

    // Automatic Variable Declarations
    const int autoF3AFB2F0_ae = 0;
    const int autoF3AFB2F0_ai = -1;
    int autoEC8C2444_ae;
    const int autoEC8C2444_ai = 1;
    const int auto84A84F09_ae = 20;
    const int auto84A84F09_ai = 1;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lv_top = lib1_gf_TopofHand(lv_player);
    if ((lv_top >= 0)) {
        lv_hand_index = lv_top;
        for ( ; ( (autoF3AFB2F0_ai >= 0 && lv_hand_index <= autoF3AFB2F0_ae) || (autoF3AFB2F0_ai < 0 && lv_hand_index >= autoF3AFB2F0_ae) ) ; lv_hand_index += autoF3AFB2F0_ai ) {
            if (((lib1_gv_player[lv_player].lv_hand.lv_card[lv_hand_index].lv_id == lib1_gf_GetCardIDByName("Riot")) || (lib1_gv_player[lv_player].lv_hand.lv_card[lv_hand_index].lv_subtype == lib1_gv_cONFEDERATE))) {
                lib1_gf_DiscardCardFromHandtoDiscard(lv_player, lv_hand_index);
                lv_discarded_count = (lv_discarded_count + 1);
            }

        }
    }

    if ((lv_discarded_count >= 1)) {
        autoEC8C2444_ae = lv_discarded_count;
        lv_count = 1;
        for ( ; ( (autoEC8C2444_ai >= 0 && lv_count <= autoEC8C2444_ae) || (autoEC8C2444_ai < 0 && lv_count >= autoEC8C2444_ae) ) ; lv_count += autoEC8C2444_ai ) {
            lv_unit_count = 1;
            for ( ; ( (auto84A84F09_ai >= 0 && lv_unit_count <= auto84A84F09_ae) || (auto84A84F09_ai < 0 && lv_unit_count >= auto84A84F09_ae) ) ; lv_unit_count += auto84A84F09_ai ) {
                UnitCreate(1, "Marine", 0, lv_player, RegionRandomPoint(lib1_gv_player[lv_player].lv_spawn_region), lib1_gf_RandomAngleforSpawn(lv_player));
                UnitGroupAdd(lib1_gv_aggressive_units, UnitLastCreated());
                UnitBehaviorAdd(UnitLastCreated(), "PermanentlyUncommandable", UnitLastCreated(), 1);
                UnitBehaviorAdd(UnitLastCreated(), "WaitingToMoveOut", UnitLastCreated(), 1);
                UnitGroupAdd(lib1_gv_units_from_card[lib1_gf_GetCardIDByName("Raynor, Rebel")], UnitLastCreated());
                UnitGroupAdd(lib1_gv_ready_units, UnitLastCreated());
                lib1_gf_IssueDefaultOrders(UnitLastCreated());
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectRaynorRebel_Init () {
    lib1_gt_EffectRaynorRebel = TriggerCreate("lib1_gt_EffectRaynorRebel_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Sunken Colony
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectSunkenColony_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_BuildStructure(lv_player, lv_card_id, "Drone", AbilityCommand("ZergBuild", 16), "SunkenColony", true, -1);
    if ((UnitGroupCount(UnitGroup("SunkenColony", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        lib1_gf_GenerateCardforHand(lv_player, lib1_gf_GetCardIDByName("Sunken Colony"));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectSunkenColony_Init () {
    lib1_gt_EffectSunkenColony = TriggerCreate("lib1_gt_EffectSunkenColony_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Flyer Carapace
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectFlyerCarapace_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto8B6E18F1_g;
    int auto8B6E18F1_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto8B6E18F1_g = UnitGroup(null, lv_player, RegionEntireMap(), UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterGround) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8B6E18F1_u = UnitGroupCount(auto8B6E18F1_g, c_unitCountAll);
    for (;; auto8B6E18F1_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto8B6E18F1_g, auto8B6E18F1_u);
        if (lv_unit == null) { break; }
        UnitBehaviorAdd(lv_unit, "FlyerCarapace", lv_unit, 1);
        UnitBehaviorAdd(lv_unit, "AggressiveMutation", lv_unit, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectFlyerCarapace_Init () {
    lib1_gt_EffectFlyerCarapace = TriggerCreate("lib1_gt_EffectFlyerCarapace_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Chitinous Plating
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectChitinousPlating_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup autoAC87F9E5_g;
    int autoAC87F9E5_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    autoAC87F9E5_g = UnitGroup(null, lv_player, RegionEntireMap(), UnitFilter((1 << c_targetFilterGround) | (1 << c_targetFilterBiological), 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoAC87F9E5_u = UnitGroupCount(autoAC87F9E5_g, c_unitCountAll);
    for (;; autoAC87F9E5_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoAC87F9E5_g, autoAC87F9E5_u);
        if (lv_unit == null) { break; }
        UnitBehaviorAdd(lv_unit, "ChitinousPlating", lv_unit, 1);
        UnitBehaviorAdd(lv_unit, "AggressiveMutation", lv_unit, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectChitinousPlating_Init () {
    lib1_gt_EffectChitinousPlating = TriggerCreate("lib1_gt_EffectChitinousPlating_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Dune Runner DNA
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectDuneRunnerDNA_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    int lv_hand_index;

    // Automatic Variable Declarations
    int auto097CDEBC_ae;
    const int auto097CDEBC_ai = 1;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto097CDEBC_ae = lib1_gf_TopofHand(lv_player);
    lv_hand_index = 0;
    for ( ; ( (auto097CDEBC_ai >= 0 && lv_hand_index <= auto097CDEBC_ae) || (auto097CDEBC_ai < 0 && lv_hand_index >= auto097CDEBC_ae) ) ; lv_hand_index += auto097CDEBC_ai ) {
        if ((lib1_gv_player[lv_player].lv_hand.lv_card[lv_hand_index].lv_subtype == lib1_gv_sPAWN)) {
            lib1_gf_AddUnittoHandCard(lv_player, lv_hand_index, 8, "Zergling");
            lib1_gf_AddtoHandCardCost(lv_player, lv_hand_index, 1, 0);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectDuneRunnerDNA_Init () {
    lib1_gt_EffectDuneRunnerDNA = TriggerCreate("lib1_gt_EffectDuneRunnerDNA_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Acidic Spire
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectAcidicSpire_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_ReduceGasIncome(lv_player, 1);
    lib1_gf_BuildStructure(lv_player, lv_card_id, "Drone", AbilityCommand("ZergBuild", 12), "ScourgeSpire", false, -1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectAcidicSpire_Init () {
    lib1_gt_EffectAcidicSpire = TriggerCreate("lib1_gt_EffectAcidicSpire_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Aerial Invasion
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectAerialInvasion_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;
    int lv_unit_count;

    // Automatic Variable Declarations
    unitgroup auto3289DBCA_g;
    int auto3289DBCA_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto3289DBCA_g = lv_units_created;
    auto3289DBCA_u = UnitGroupCount(auto3289DBCA_g, c_unitCountAll);
    for (;; auto3289DBCA_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto3289DBCA_g, auto3289DBCA_u);
        if (lv_unit == null) { break; }
        UnitBehaviorRemove(lv_unit, "WaitingToMoveOut", 1);
        lib1_gf_CreateCargoUnitsWithStatTracking(6, "Zergling", lv_unit);
        UnitGroupAddUnitGroup(lib1_gv_units_from_card[lv_card_id], UnitCargoLastCreatedGroup());
        UnitGroupAddUnitGroup(lib1_gv_aggressive_units, UnitCargoLastCreatedGroup());
        lib1_gf_CreateCargoUnitsWithStatTracking(1, "Hydralisk", lv_unit);
        UnitGroupAddUnitGroup(lib1_gv_units_from_card[lv_card_id], UnitCargoLastCreatedGroup());
        UnitGroupAddUnitGroup(lib1_gv_aggressive_units, UnitCargoLastCreatedGroup());
        UnitBehaviorAdd(lv_unit, "WaitingToMoveOut", lv_unit, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectAerialInvasion_Init () {
    lib1_gt_EffectAerialInvasion = TriggerCreate("lib1_gt_EffectAerialInvasion_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Escaped Experiments
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectEscapedExperiments_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;
    int lv_unit_index;
    unit lv_target_structure;
    unitgroup lv_unburrowing_units;

    // Automatic Variable Declarations
    const int autoF5DBBB1F_ae = 8;
    const int autoF5DBBB1F_ai = 1;
    unitgroup auto9FABE37A_g;
    int auto9FABE37A_u;
    const int autoE2EE8E12_ae = 2;
    const int autoE2EE8E12_ai = 1;
    unitgroup auto17089711_g;
    int auto17089711_u;
    unitgroup autoE0D87274_g;
    int autoE0D87274_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();
    lv_unburrowing_units = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lv_target_structure = lib1_gf_RandomTargetForHardRemoval(lv_player, UnitFilter((1 << c_targetFilterStructure), 0, 0, (1 << (c_targetFilterMapBoss - 32))));
    if ((lv_target_structure != null)) {
        UnitKill(lv_target_structure);
        lv_unit_index = 1;
        for ( ; ( (autoF5DBBB1F_ai >= 0 && lv_unit_index <= autoF5DBBB1F_ae) || (autoF5DBBB1F_ai < 0 && lv_unit_index >= autoF5DBBB1F_ae) ) ; lv_unit_index += autoF5DBBB1F_ai ) {
            UnitCreate(1, "ZerglingBurrowed", c_unitCreateIgnorePlacement, lv_player, PointWithOffsetPolar(UnitGetPosition(lv_target_structure), RandomFixed(0.0, 1.75), libNtve_gf_RandomAngle()), libNtve_gf_RandomAngle());
            UnitGroupAdd(lv_unburrowing_units, UnitLastCreated());
            UnitBehaviorAdd(UnitLastCreated(), "PermanentlyUncommandable", UnitLastCreated(), 1);
            UnitGroupAdd(lib1_gv_aggressive_units, UnitLastCreated());
        }
        auto9FABE37A_g = lv_unburrowing_units;
        auto9FABE37A_u = UnitGroupCount(auto9FABE37A_g, c_unitCountAll);
        for (;; auto9FABE37A_u -= 1) {
            lv_unit = UnitGroupUnitFromEnd(auto9FABE37A_g, auto9FABE37A_u);
            if (lv_unit == null) { break; }
            UnitIssueOrder(lv_unit, Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        }
        lv_unit_index = 1;
        for ( ; ( (autoE2EE8E12_ai >= 0 && lv_unit_index <= autoE2EE8E12_ae) || (autoE2EE8E12_ai < 0 && lv_unit_index >= autoE2EE8E12_ae) ) ; lv_unit_index += autoE2EE8E12_ai ) {
            UnitCreate(1, "HydraliskBurrowed", c_unitCreateIgnorePlacement, lv_player, PointWithOffsetPolar(UnitGetPosition(lv_target_structure), RandomFixed(0.0, 1.75), libNtve_gf_RandomAngle()), libNtve_gf_RandomAngle());
            UnitGroupAdd(lv_unburrowing_units, UnitLastCreated());
            UnitBehaviorAdd(UnitLastCreated(), "PermanentlyUncommandable", UnitLastCreated(), 1);
            UnitGroupAdd(lib1_gv_aggressive_units, UnitLastCreated());
        }
        auto17089711_g = lv_unburrowing_units;
        auto17089711_u = UnitGroupCount(auto17089711_g, c_unitCountAll);
        for (;; auto17089711_u -= 1) {
            lv_unit = UnitGroupUnitFromEnd(auto17089711_g, auto17089711_u);
            if (lv_unit == null) { break; }
            UnitIssueOrder(lv_unit, Order(AbilityCommand("BurrowHydraliskUp", 0)), c_orderQueueReplace);
        }
        Wait(1.65, c_timeGame);
        autoE0D87274_g = lv_unburrowing_units;
        autoE0D87274_u = UnitGroupCount(autoE0D87274_g, c_unitCountAll);
        for (;; autoE0D87274_u -= 1) {
            lv_unit = UnitGroupUnitFromEnd(autoE0D87274_g, autoE0D87274_u);
            if (lv_unit == null) { break; }
            lib1_gf_IssueDefaultOrders(lv_unit);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectEscapedExperiments_Init () {
    lib1_gt_EffectEscapedExperiments = TriggerCreate("lib1_gt_EffectEscapedExperiments_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Metasynaptic Node
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectMetasynapticNode_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto8181920A_g;
    int auto8181920A_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto8181920A_g = UnitGroup(null, lv_player, RegionEntireMap(), UnitFilter((1 << c_targetFilterBiological) | (1 << c_targetFilterCanHaveEnergy), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8181920A_u = UnitGroupCount(auto8181920A_g, c_unitCountAll);
    for (;; auto8181920A_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto8181920A_g, auto8181920A_u);
        if (lv_unit == null) { break; }
        UnitBehaviorAdd(lv_unit, "MetasynapticNode", lv_unit, 1);
        UnitSetPropertyFixed(lv_unit, c_unitPropEnergyMax, 400.0);
        UnitSetPropertyFixed(lv_unit, c_unitPropEnergyPercent, 100.0);
        UnitBehaviorAdd(lv_unit, "AggressiveMutation", lv_unit, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectMetasynapticNode_Init () {
    lib1_gt_EffectMetasynapticNode = TriggerCreate("lib1_gt_EffectMetasynapticNode_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Slothien DNA
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectSlothienDNA_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    int lv_hand_index;

    // Automatic Variable Declarations
    int auto4658B8F7_ae;
    const int auto4658B8F7_ai = 1;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto4658B8F7_ae = lib1_gf_TopofHand(lv_player);
    lv_hand_index = 0;
    for ( ; ( (auto4658B8F7_ai >= 0 && lv_hand_index <= auto4658B8F7_ae) || (auto4658B8F7_ai < 0 && lv_hand_index >= auto4658B8F7_ae) ) ; lv_hand_index += auto4658B8F7_ai ) {
        if ((lib1_gv_player[lv_player].lv_hand.lv_card[lv_hand_index].lv_subtype == lib1_gv_sPAWN)) {
            lib1_gf_AddUnittoHandCard(lv_player, lv_hand_index, 2, "Hydralisk");
            lib1_gf_AddtoHandCardCost(lv_player, lv_hand_index, 1, 0);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectSlothienDNA_Init () {
    lib1_gt_EffectSlothienDNA = TriggerCreate("lib1_gt_EffectSlothienDNA_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Blacken the Sky
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectBlackentheSky_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unitgroup lv_discarded_units_created;
    int lv_hand_index;
    int lv_unit_type_index;
    bool lv_discard_flag;
    int lv_top_of_hand;
    unit lv_unit;
    unitgroup lv_streaming_units_for_player;
    int lv_unit_count;
    fixed lv_stream_time;

    // Automatic Variable Declarations
    const int auto912AD627_ae = 0;
    const int auto912AD627_ai = -1;
    const int autoFED20575_ae = lib1_gv_mAX_UNIT_TYPE_PER_CARD;
    const int autoFED20575_ai = 1;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();
    lv_discarded_units_created = UnitGroupEmpty();
    lv_streaming_units_for_player = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lv_top_of_hand = lib1_gf_TopofHand(lv_player);
    if ((lv_top_of_hand >= 0)) {
        lv_hand_index = lv_top_of_hand;
        for ( ; ( (auto912AD627_ai >= 0 && lv_hand_index <= auto912AD627_ae) || (auto912AD627_ai < 0 && lv_hand_index >= auto912AD627_ae) ) ; lv_hand_index += auto912AD627_ai ) {
            lv_discard_flag = false;
            if (((lib1_gv_player[lv_player].lv_hand.lv_card[lv_hand_index].lv_type == lib1_gv_aCTION) || (lib1_gv_player[lv_player].lv_hand.lv_card[lv_hand_index].lv_type == lib1_gv_sTRUCTURE))) {
                lv_discard_flag = true;
            }
            else {
                lv_unit_type_index = 0;
                for ( ; ( (autoFED20575_ai >= 0 && lv_unit_type_index <= autoFED20575_ae) || (autoFED20575_ai < 0 && lv_unit_type_index >= autoFED20575_ae) ) ; lv_unit_type_index += autoFED20575_ai ) {
                    if ((lib1_gv_player[lv_player].lv_hand.lv_card[lv_hand_index].lv_unit_count[lv_unit_type_index] == 0)) {
                        break;
                    }

                    UnitCreate(1, lib1_gv_player[lv_player].lv_hand.lv_card[lv_hand_index].lv_unit_type[lv_unit_type_index], 0, lv_player, RegionRandomPoint(lib1_gv_player[lv_player].lv_cleanup_region), libNtve_gf_RandomAngle());
                    if ((UnitFilterMatch(UnitLastCreated(), lv_player, UnitFilter(0, 0, (1 << c_targetFilterGround) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true)) {
                        UnitRemove(UnitLastCreated());
                    }
                    else {
                        lv_discard_flag = true;
                        UnitRemove(UnitLastCreated());
                    }
                }
            }
            if ((lv_discard_flag == true)) {
                lib1_gf_DiscardCardFromHandtoDiscard(lv_player, lv_hand_index);
            }
            else {
                lib1_gf_PlayHandCardFromEffect(lv_player, lv_hand_index, true);
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectBlackentheSky_Init () {
    lib1_gt_EffectBlackentheSky = TriggerCreate("lib1_gt_EffectBlackentheSky_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Creep Colony
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectCreepColony_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_BuildStructure(lv_player, lv_card_id, "Drone", AbilityCommand("ZergBuild", 1), "NydusCanalCreeper", false, -1);
    lib1_gf_DrawCardFromDecktoHand(lv_player);
    if ((UnitGroupCount(UnitGroup("NydusCanalCreeper", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        lib1_gf_GenerateCardforHand(lv_player, lib1_gf_GetCardIDByName("Creep Colony"));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectCreepColony_Init () {
    lib1_gt_EffectCreepColony = TriggerCreate("lib1_gt_EffectCreepColony_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Brontolith DNA
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectBrontolithDNA_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    int lv_hand_index;

    // Automatic Variable Declarations
    int auto766AAF9C_ae;
    const int auto766AAF9C_ai = 1;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto766AAF9C_ae = lib1_gf_TopofHand(lv_player);
    lv_hand_index = 0;
    for ( ; ( (auto766AAF9C_ai >= 0 && lv_hand_index <= auto766AAF9C_ae) || (auto766AAF9C_ai < 0 && lv_hand_index >= auto766AAF9C_ae) ) ; lv_hand_index += auto766AAF9C_ai ) {
        if ((lib1_gv_player[lv_player].lv_hand.lv_card[lv_hand_index].lv_subtype == lib1_gv_sPAWN)) {
            lib1_gf_AddUnittoHandCard(lv_player, lv_hand_index, 1, "Ultralisk");
            lib1_gf_AddtoHandCardCost(lv_player, lv_hand_index, 1, 1);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectBrontolithDNA_Init () {
    lib1_gt_EffectBrontolithDNA = TriggerCreate("lib1_gt_EffectBrontolithDNA_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Deep Infestation
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectDeepInfestation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    int lv_opposing_team;
    int lv_opposing_player;

    // Automatic Variable Declarations
    playergroup auto5E922366_g;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    if ((lib1_gv_player[lv_player].lv_team == 0)) {
        lv_opposing_team = 1;
    }
    else {
        lv_opposing_team = 0;
    }
    auto5E922366_g = lib1_gv_team[lv_opposing_team];
    lv_opposing_player = -1;
    while (true) {
        lv_opposing_player = PlayerGroupNextPlayer(auto5E922366_g, lv_opposing_player);
        if (lv_opposing_player < 0) { break; }
        UIDisplayMessage(PlayerGroupSingle(lv_opposing_player), c_messageAreaChat, (PlayerName(lv_player) + StringExternal("Param/Value/lib_1_09A5B200")));
        lib1_gf_GenerateCardtoTopofDeck(lv_opposing_player, lib1_gf_GetCardIDByName("Infestation"));
        lib1_gf_ShuffleDeck(lv_opposing_player);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectDeepInfestation_Init () {
    lib1_gt_EffectDeepInfestation = TriggerCreate("lib1_gt_EffectDeepInfestation_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Overmind
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectOvermind_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_overmind_unit;
    unit lv_overmind_model;
    unit lv_rumble;
    int lv_team;
    unit lv_old_keystone;
    int lv_teammate;
    bool lv_create_new_overmind;
    bool lv_overmind_starts_with_overcharge;
    int lv_extra_overcharge_count;
    int lv_count;

    // Automatic Variable Declarations
    playergroup auto7D1D2A70_g;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();
    lv_create_new_overmind = true;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gv_player[lv_player].lv_control_overmind = true;
    lv_team = lib1_gv_player[lv_player].lv_team;
    auto7D1D2A70_g = lib1_gv_team[lv_team];
    lv_teammate = -1;
    while (true) {
        lv_teammate = PlayerGroupNextPlayer(auto7D1D2A70_g, lv_teammate);
        if (lv_teammate < 0) { break; }
        if ((lv_teammate != lv_player) && (lib1_gv_player[lv_teammate].lv_control_overmind == true)) {
            lv_create_new_overmind = false;
            break;
        }

    }
    if ((lv_create_new_overmind == true)) {
        if ((UnitHasBehavior2(lib1_gv_keystone[lv_team], "Purify") == true)) {
            lv_overmind_starts_with_overcharge = true;
            lv_extra_overcharge_count = UnitBehaviorCount(lib1_gv_keystone[lv_team], "Overcharge2");
        }

        lv_old_keystone = lib1_gv_keystone[lv_team];
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "OvermindHive", c_unitCreateIgnorePlacement, lv_player, UnitGetPosition(lib1_gv_keystone[lv_team]));
        lib1_gv_keystone[lv_team] = UnitLastCreated();
        lv_overmind_unit = UnitLastCreated();
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergy, lib1_gv_keystone_energy[lv_team]);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Overmind", c_unitCreateIgnorePlacement, lv_player, UnitGetPosition(lib1_gv_keystone[lv_team]));
        lv_overmind_model = UnitLastCreated();
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "OvermindRumble", c_unitCreateIgnorePlacement, lv_player, UnitGetPosition(lib1_gv_keystone[lv_team]));
        lv_rumble = UnitLastCreated();
        Wait(0.1, c_timeGame);
        UnitKill(lv_old_keystone);
        Wait(0.5, c_timeGame);
        UnitIssueOrder(lv_rumble, Order(AbilityCommand("OvermindRumble", 0)), c_orderQueueReplace);
        Wait(2.5, c_timeGame);
        UnitSetHeight(lv_overmind_model, 3.0, 1.0);
        Wait(1.5, c_timeGame);
        UnitKill(lv_rumble);
        if ((lv_overmind_starts_with_overcharge == true)) {
            UnitIssueOrder(lv_overmind_unit, OrderTargetingUnit(AbilityCommand("MothershipCorePurifyNexus", 0), lv_overmind_unit), c_orderQueueReplace);
            UnitBehaviorAdd(lv_overmind_unit, "Overcharge2", lv_overmind_unit, lv_extra_overcharge_count);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectOvermind_Init () {
    lib1_gt_EffectOvermind = TriggerCreate("lib1_gt_EffectOvermind_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Torrasque
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectTorrasque_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto7928BF7E_g;
    int auto7928BF7E_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto7928BF7E_g = lv_units_created;
    auto7928BF7E_u = UnitGroupCount(auto7928BF7E_g, c_unitCountAll);
    for (;; auto7928BF7E_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto7928BF7E_g, auto7928BF7E_u);
        if (lv_unit == null) { break; }
        if ((UnitGetType(lv_unit) == "UltraliskTorrasque")) {
            UnitBehaviorAdd(lv_unit, "TorrasqueRevival", lv_unit, 1);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectTorrasque_Init () {
    lib1_gt_EffectTorrasque = TriggerCreate("lib1_gt_EffectTorrasque_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Kerrigan's Chrysalis
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectKerrigansChrysalis_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto6DFD61F1_g;
    int auto6DFD61F1_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_ReduceMineralIncome(lv_player, 1);
    lib1_gf_ReduceGasIncome(lv_player, 1);
    auto6DFD61F1_g = lv_units_created;
    auto6DFD61F1_u = UnitGroupCount(auto6DFD61F1_g, c_unitCountAll);
    for (;; auto6DFD61F1_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto6DFD61F1_g, auto6DFD61F1_u);
        if (lv_unit == null) { break; }
        if ((UnitGroupCount(UnitGroup("NydusNetwork", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterDazed - 32))), 0), c_unitCountAlive) == 0)) {
            UnitBehaviorAdd(lv_unit, "2BattlePhaseDisappear", lv_unit, 1);
            UnitCreate(1, "Chrysalis", 0, lv_player, UnitGetPosition(lv_unit), libNtve_gf_RandomAngle());
            UnitBehaviorAdd(UnitLastCreated(), "PermanentlyInvulnerable", UnitLastCreated(), 1);
            UnitBehaviorAdd(UnitLastCreated(), "PermanentlyUncommandable", UnitLastCreated(), 1);
            UnitBehaviorAdd(UnitLastCreated(), "2BattlePhaseTimedlife", UnitLastCreated(), 1);
            lib1_gf_ApplyWaitingTint(UnitLastCreated(), true);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectKerrigansChrysalis_Init () {
    lib1_gt_EffectKerrigansChrysalis = TriggerCreate("lib1_gt_EffectKerrigansChrysalis_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Psi Matrix
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectPsiMatrix_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_structure;

    // Automatic Variable Declarations
    unitgroup auto4537DBE4_g;
    int auto4537DBE4_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_BuildStructure(lv_player, lv_card_id, "Probe", AbilityCommand("ProtossBuild", 1), "Pylon", false, 1.0);
    lib1_gf_BuildStructure(lv_player, lv_card_id, "Probe", AbilityCommand("ProtossBuild", 1), "Pylon", false, 1.0);
    auto4537DBE4_g = UnitGroup(null, lv_player, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0);
    auto4537DBE4_u = UnitGroupCount(auto4537DBE4_g, c_unitCountAll);
    for (;; auto4537DBE4_u -= 1) {
        lv_structure = UnitGroupUnitFromEnd(auto4537DBE4_g, auto4537DBE4_u);
        if (lv_structure == null) { break; }
        UnitSetPropertyFixed(lv_structure, c_unitPropShieldsPercent, 100.0);
        UnitSetPropertyFixed(lv_structure, c_unitPropEnergyPercent, 100.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectPsiMatrix_Init () {
    lib1_gt_EffectPsiMatrix = TriggerCreate("lib1_gt_EffectPsiMatrix_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Aiur Gateway
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectAiurGateway_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    bool lv_fetch;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_BuildStructure(lv_player, lv_card_id, "Probe", AbilityCommand("ProtossBuild", 3), "Gateway", false, -1);
    lv_fetch = lib1_gf_FetchLeastExpensiveCardWithType(lv_player, lib1_gv_uNIT);
    if ((lv_fetch == true)) {
        lib1_gv_player[lv_player].lv_skip_next_draw_step = true;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectAiurGateway_Init () {
    lib1_gt_EffectAiurGateway = TriggerCreate("lib1_gt_EffectAiurGateway_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Cloaking Field
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectCloakingField_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup autoBC2AAD37_g;
    int autoBC2AAD37_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    autoBC2AAD37_g = UnitGroup(null, lv_player, RegionEntireMap(), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBC2AAD37_u = UnitGroupCount(autoBC2AAD37_g, c_unitCountAll);
    for (;; autoBC2AAD37_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoBC2AAD37_g, autoBC2AAD37_u);
        if (lv_unit == null) { break; }
        UnitBehaviorAdd(lv_unit, "CloakingFieldFromCard", lv_unit, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectCloakingField_Init () {
    lib1_gt_EffectCloakingField = TriggerCreate("lib1_gt_EffectCloakingField_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Charge
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectCharge_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto3911F691_g;
    int auto3911F691_u;
    unitgroup autoE94C5327_g;
    int autoE94C5327_u;
    unitgroup auto2B31FC75_g;
    int auto2B31FC75_u;
    unitgroup auto96CC0518_g;
    int auto96CC0518_u;
    unitgroup auto0C2B7CE9_g;
    int auto0C2B7CE9_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto3911F691_g = UnitGroupFilterPlayer(lib1_gv_ready_units, lv_player, 0);
    auto3911F691_u = UnitGroupCount(auto3911F691_g, c_unitCountAll);
    for (;; auto3911F691_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto3911F691_g, auto3911F691_u);
        if (lv_unit == null) { break; }
        lib1_gf_RemoveWaitingToMoveOutBuffs(lv_unit);
        UnitGroupRemove(lib1_gv_ready_units, lv_unit);
        lib1_gf_IssueDefaultOrders(lv_unit);
    }
    autoE94C5327_g = UnitGroupFilterPlayer(lib1_gv_one_turn_wait_units, lv_player, 0);
    autoE94C5327_u = UnitGroupCount(autoE94C5327_g, c_unitCountAll);
    for (;; autoE94C5327_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoE94C5327_g, autoE94C5327_u);
        if (lv_unit == null) { break; }
        lib1_gf_RemoveWaitingToMoveOutBuffs(lv_unit);
        UnitGroupRemove(lib1_gv_one_turn_wait_units, lv_unit);
        lib1_gf_IssueDefaultOrders(lv_unit);
    }
    auto2B31FC75_g = UnitGroupFilterPlayer(lib1_gv_two_turn_wait_units, lv_player, 0);
    auto2B31FC75_u = UnitGroupCount(auto2B31FC75_g, c_unitCountAll);
    for (;; auto2B31FC75_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto2B31FC75_g, auto2B31FC75_u);
        if (lv_unit == null) { break; }
        lib1_gf_RemoveWaitingToMoveOutBuffs(lv_unit);
        UnitGroupRemove(lib1_gv_two_turn_wait_units, lv_unit);
        lib1_gf_IssueDefaultOrders(lv_unit);
    }
    auto96CC0518_g = UnitGroupFilterPlayer(lib1_gv_defensive_units, lv_player, 0);
    auto96CC0518_u = UnitGroupCount(auto96CC0518_g, c_unitCountAll);
    for (;; auto96CC0518_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto96CC0518_g, auto96CC0518_u);
        if (lv_unit == null) { break; }
        UnitGroupAdd(lib1_gv_aggressive_units, lv_unit);
        UnitGroupRemove(lib1_gv_defensive_units, lv_unit);
        lib1_gf_IssueDefaultOrders(lv_unit);
    }
    auto0C2B7CE9_g = UnitGroupFilterPlayer(lib1_gv_tactical_units, lv_player, 0);
    auto0C2B7CE9_u = UnitGroupCount(auto0C2B7CE9_g, c_unitCountAll);
    for (;; auto0C2B7CE9_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto0C2B7CE9_g, auto0C2B7CE9_u);
        if (lv_unit == null) { break; }
        UnitGroupAdd(lib1_gv_aggressive_units, lv_unit);
        UnitGroupRemove(lib1_gv_tactical_units, lv_unit);
        lib1_gf_IssueDefaultOrders(lv_unit);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectCharge_Init () {
    lib1_gt_EffectCharge = TriggerCreate("lib1_gt_EffectCharge_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Stasis Field
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectStasisField_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    int lv_count;

    // Automatic Variable Declarations
    const int auto775E4F17_ae = 2;
    const int auto775E4F17_ai = 1;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lv_count = 1;
    for ( ; ( (auto775E4F17_ai >= 0 && lv_count <= auto775E4F17_ae) || (auto775E4F17_ai < 0 && lv_count >= auto775E4F17_ae) ) ; lv_count += auto775E4F17_ai ) {
        UnitCreate(1, "ArbiterMP", 0, lv_player, RegionRandomPoint(lib1_gv_player[lv_player].lv_spawn_region), libNtve_gf_RandomAngle());
        UnitBehaviorRemove(UnitLastCreated(), "ArbiterMPCloakField", c_unitBehaviorCountAll);
        UnitBehaviorAdd(UnitLastCreated(), "Caster", UnitLastCreated(), 1);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("ArbiterMPStasisField", 0), UnitGetPosition(lib1_gf_BestTargetforSplash(lv_player, UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 5.0, false))), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderSetAutoCast(AbilityCommand("ArbiterMPRecall", 0), false), c_orderQueueAddToFront);
        UnitIssueOrder(UnitLastCreated(), OrderSetAutoCast(AbilityCommand("ArbiterMPStasisField", 0), false), c_orderQueueAddToFront);
        lib1_gf_IssueLeaveOrders(UnitLastCreated(), c_orderQueueAddToEnd);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectStasisField_Init () {
    lib1_gt_EffectStasisField = TriggerCreate("lib1_gt_EffectStasisField_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Planetary Surveyor
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectPlanetarySurveyor_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    bool lv_fetch;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lv_fetch = lib1_gf_FetchMostExpensiveCardWithType(lv_player, lib1_gv_aCTION);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectPlanetarySurveyor_Init () {
    lib1_gt_EffectPlanetarySurveyor = TriggerCreate("lib1_gt_EffectPlanetarySurveyor_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Reaver Advance
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectReaverAdvance_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup autoEFEDC3B7_g;
    int autoEFEDC3B7_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    autoEFEDC3B7_g = lv_units_created;
    autoEFEDC3B7_u = UnitGroupCount(autoEFEDC3B7_g, c_unitCountAll);
    for (;; autoEFEDC3B7_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoEFEDC3B7_g, autoEFEDC3B7_u);
        if (lv_unit == null) { break; }
        UnitBehaviorAdd(lv_unit, "MineralUpkeep", lv_unit, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectReaverAdvance_Init () {
    lib1_gt_EffectReaverAdvance = TriggerCreate("lib1_gt_EffectReaverAdvance_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - War Robotics
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectWarRobotics_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto8D88DB63_g;
    int auto8D88DB63_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto8D88DB63_g = lv_units_created;
    auto8D88DB63_u = UnitGroupCount(auto8D88DB63_g, c_unitCountAll);
    for (;; auto8D88DB63_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto8D88DB63_g, auto8D88DB63_u);
        if (lv_unit == null) { break; }
        if ((UnitGetType(lv_unit) == "Reaver")) {
            UnitBehaviorAdd(lv_unit, "MineralUpkeep", lv_unit, 1);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectWarRobotics_Init () {
    lib1_gt_EffectWarRobotics = TriggerCreate("lib1_gt_EffectWarRobotics_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Shield Matrix
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectShieldMatrix_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup autoAF4BAB72_g;
    int autoAF4BAB72_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_BuildStructure(lv_player, lv_card_id, "Probe", AbilityCommand("ProtossBuild", 15), "ShieldBattery", true, 2.5);
    lib1_gf_BuildStructure(lv_player, lv_card_id, "Probe", AbilityCommand("ProtossBuild", 15), "ShieldBattery", true, 2.5);
    autoAF4BAB72_g = UnitGroup(null, lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0);
    autoAF4BAB72_u = UnitGroupCount(autoAF4BAB72_g, c_unitCountAll);
    for (;; autoAF4BAB72_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoAF4BAB72_g, autoAF4BAB72_u);
        if (lv_unit == null) { break; }
        UnitSetPropertyFixed(lv_unit, c_unitPropShieldsPercent, 100.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectShieldMatrix_Init () {
    lib1_gt_EffectShieldMatrix = TriggerCreate("lib1_gt_EffectShieldMatrix_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Mass Recall
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectMassRecall_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_target;

    // Automatic Variable Declarations
    unitgroup autoA04EC914_g;
    int autoA04EC914_u;
    unitgroup autoFCCFB32F_g;
    int autoFCCFB32F_u;
    unitgroup auto5A1C1CFE_g;
    int auto5A1C1CFE_u;
    unitgroup auto1DE101D0_g;
    int auto1DE101D0_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    autoA04EC914_g = UnitGroup(null, lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterSummoned - 32))), 0);
    autoA04EC914_u = UnitGroupCount(autoA04EC914_g, c_unitCountAll);
    for (;; autoA04EC914_u -= 1) {
        lv_target = UnitGroupUnitFromEnd(autoA04EC914_g, autoA04EC914_u);
        if (lv_target == null) { break; }
        if ((UnitHasBehavior2(lv_target, "KillableCaster") == false) && ((UnitGroupHasUnit(lib1_gv_aggressive_units, lv_target) == true) || (UnitGroupHasUnit(lib1_gv_defensive_units, lv_target) == true) || (UnitGroupHasUnit(lib1_gv_tactical_units, lv_target) == true))) {
            UnitCreate(1, "ArbiterMP", 0, lv_player, RegionRandomPoint(lib1_gv_player[lv_player].lv_spawn_region), libNtve_gf_RandomAngle());
            UnitBehaviorAdd(UnitLastCreated(), "Caster", UnitLastCreated(), 1);
            UnitBehaviorRemove(UnitLastCreated(), "ArbiterMPCloakField", c_unitBehaviorCountAll);
            UnitIssueOrder(UnitLastCreated(), OrderSetAutoCast(AbilityCommand("ArbiterMPRecall", 0), false), c_orderQueueAddToFront);
            UnitIssueOrder(UnitLastCreated(), OrderSetAutoCast(AbilityCommand("ArbiterMPStasisField", 0), false), c_orderQueueAddToFront);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("ArbiterMPRecall", 0), UnitGetPosition(lv_target)), c_orderQueueAddToEnd);
            lib1_gf_IssueLeaveOrders(UnitLastCreated(), c_orderQueueAddToEnd);
            UnitSetPropertyFixed(lv_target, c_unitPropShieldsPercent, 100.0);
        }

    }
    Wait(3.3, c_timeGame);
    autoFCCFB32F_g = UnitGroupFilterPlayer(lib1_gv_aggressive_units, lv_player, 0);
    autoFCCFB32F_u = UnitGroupCount(autoFCCFB32F_g, c_unitCountAll);
    for (;; autoFCCFB32F_u -= 1) {
        lv_target = UnitGroupUnitFromEnd(autoFCCFB32F_g, autoFCCFB32F_u);
        if (lv_target == null) { break; }
        UnitGroupRemove(lib1_gv_aggressive_units, lv_target);
        UnitGroupAdd(lib1_gv_defensive_units, lv_target);
        lib1_gf_IssueDefaultOrders(lv_target);
    }
    auto5A1C1CFE_g = UnitGroupFilterPlayer(lib1_gv_tactical_units, lv_player, 0);
    auto5A1C1CFE_u = UnitGroupCount(auto5A1C1CFE_g, c_unitCountAll);
    for (;; auto5A1C1CFE_u -= 1) {
        lv_target = UnitGroupUnitFromEnd(auto5A1C1CFE_g, auto5A1C1CFE_u);
        if (lv_target == null) { break; }
        UnitGroupRemove(lib1_gv_tactical_units, lv_target);
        UnitGroupAdd(lib1_gv_defensive_units, lv_target);
        lib1_gf_IssueDefaultOrders(lv_target);
    }
    auto1DE101D0_g = UnitGroupFilterPlayer(lib1_gv_defensive_units, lv_player, 0);
    auto1DE101D0_u = UnitGroupCount(auto1DE101D0_g, c_unitCountAll);
    for (;; auto1DE101D0_u -= 1) {
        lv_target = UnitGroupUnitFromEnd(auto1DE101D0_g, auto1DE101D0_u);
        if (lv_target == null) { break; }
        lib1_gf_IssueDefaultOrders(lv_target);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectMassRecall_Init () {
    lib1_gt_EffectMassRecall = TriggerCreate("lib1_gt_EffectMassRecall_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Structural Stasis
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectStructuralStasis_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_arbiter;
    unit lv_structure;

    // Automatic Variable Declarations
    unitgroup auto10A13AF0_g;
    int auto10A13AF0_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto10A13AF0_g = UnitGroupAlliance(lv_player, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0);
    auto10A13AF0_u = UnitGroupCount(auto10A13AF0_g, c_unitCountAll);
    for (;; auto10A13AF0_u -= 1) {
        lv_structure = UnitGroupUnitFromEnd(auto10A13AF0_g, auto10A13AF0_u);
        if (lv_structure == null) { break; }
        UnitIssueOrder(lv_structure, Order(AbilityCommand("que5", 0)), c_orderQueueReplace);
        UnitIssueOrder(lv_structure, Order(AbilityCommand("que5", 0)), c_orderQueueReplace);
        UnitIssueOrder(lv_structure, Order(AbilityCommand("que5Addon", 0)), c_orderQueueReplace);
        UnitIssueOrder(lv_structure, Order(AbilityCommand("que5Addon", 0)), c_orderQueueReplace);
        UnitCreate(1, "ArbiterMP", 0, lv_player, RegionRandomPoint(lib1_gv_player[lv_player].lv_spawn_region), libNtve_gf_RandomAngle());
        UnitBehaviorAdd(UnitLastCreated(), "Caster", UnitLastCreated(), 1);
        UnitBehaviorRemove(UnitLastCreated(), "ArbiterMPCloakField", c_unitBehaviorCountAll);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("ArbiterMPStasisFieldStructure", 0), UnitGetPosition(lv_structure)), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderSetAutoCast(AbilityCommand("ArbiterMPRecall", 0), false), c_orderQueueAddToFront);
        UnitIssueOrder(UnitLastCreated(), OrderSetAutoCast(AbilityCommand("ArbiterMPStasisField", 0), false), c_orderQueueAddToFront);
        lib1_gf_IssueLeaveOrders(UnitLastCreated(), c_orderQueueAddToEnd);
        lib1_gf_IssueLeaveOrders(UnitLastCreated(), c_orderQueueAddToEnd);
        lib1_gf_IssueLeaveOrders(UnitLastCreated(), c_orderQueueAddToEnd);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectStructuralStasis_Init () {
    lib1_gt_EffectStructuralStasis = TriggerCreate("lib1_gt_EffectStructuralStasis_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Recall Suits
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectRecallSuits_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup autoCDE3E1F8_g;
    int autoCDE3E1F8_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    autoCDE3E1F8_g = UnitGroup(null, lv_player, RegionEntireMap(), UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32))), 0);
    autoCDE3E1F8_u = UnitGroupCount(autoCDE3E1F8_g, c_unitCountAll);
    for (;; autoCDE3E1F8_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoCDE3E1F8_g, autoCDE3E1F8_u);
        if (lv_unit == null) { break; }
        if ((lib1_gf_UnitTypeIsProtoss(UnitGetType(lv_unit)) == true) && (UnitHasBehavior2(lv_unit, "Pet") == false)) {
            UnitBehaviorAdd(lv_unit, "PersonalRecall", lv_unit, 1);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectRecallSuits_Init () {
    lib1_gt_EffectRecallSuits = TriggerCreate("lib1_gt_EffectRecallSuits_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Gathering Storm
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectGatheringStorm_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;
    unit lv_target;

    // Automatic Variable Declarations
    unitgroup autoF1836F72_g;
    int autoF1836F72_u;
    unitgroup auto00B634E7_g;
    int auto00B634E7_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    autoF1836F72_g = lv_units_created;
    autoF1836F72_u = UnitGroupCount(autoF1836F72_g, c_unitCountAll);
    for (;; autoF1836F72_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoF1836F72_g, autoF1836F72_u);
        if (lv_unit == null) { break; }
        if ((UnitGetType(lv_unit) == "HighTemplar") && (UnitGroupHasUnit(lib1_gv_merging_units, lv_unit) == true)) {
            lv_target = lib1_gf_BestTargetforSplash(lv_player, UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 1.5, false);
            if ((lv_target != null)) {
                UnitIssueOrder(lv_unit, OrderTargetingPoint(AbilityCommand("PsiStorm", 0), UnitGetPosition(lv_target)), c_orderQueueAddToFront);
            }

        }

    }
    auto00B634E7_g = lv_units_created;
    auto00B634E7_u = UnitGroupCount(auto00B634E7_g, c_unitCountAll);
    for (;; auto00B634E7_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto00B634E7_g, auto00B634E7_u);
        if (lv_unit == null) { break; }
        if ((UnitGetType(lv_unit) == "HighTemplar") && (UnitGroupHasUnit(lib1_gv_merging_units, lv_unit) == false)) {
            Wait(0.5, c_timeGame);
            lv_target = lib1_gf_BestTargetforSplash(lv_player, UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 1.5, false);
            if ((lv_target != null)) {
                if ((UnitHasBehavior2(lv_unit, "WaitingToMoveOut") == true)) {
                    UnitBehaviorRemove(lv_unit, "WaitingToMoveOut", c_unitBehaviorCountAll);
                    UnitBehaviorAdd(lv_unit, "CasterWaitingToMoveOut", lv_unit, 1);
                }

                UnitIssueOrder(lv_unit, OrderTargetingPoint(AbilityCommand("PsiStorm", 0), UnitGetPosition(lv_target)), c_orderQueueAddToFront);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectGatheringStorm_Init () {
    lib1_gt_EffectGatheringStorm = TriggerCreate("lib1_gt_EffectGatheringStorm_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Robotics Bay
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectRoboticsBay_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_BuildStructure(lv_player, lv_card_id, "Probe", AbilityCommand("ProtossBuild", 12), "RoboticsBay", false, -1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectRoboticsBay_Init () {
    lib1_gt_EffectRoboticsBay = TriggerCreate("lib1_gt_EffectRoboticsBay_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Conclave Directive
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectConclaveDirective_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    int lv_top_of_deck;
    int lv_deck_index;
    int lv_unit_type_index;
    int lv_count_discarded;

    // Automatic Variable Declarations
    const int auto78CE2EB6_ae = 0;
    const int auto78CE2EB6_ai = -1;
    const int auto55A0320C_ae = lib1_gv_mAX_UNIT_TYPE_PER_CARD;
    const int auto55A0320C_ai = 1;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lv_top_of_deck = lib1_gf_TopofDeck(lv_player);
    if ((lv_top_of_deck >= 0)) {
        lv_deck_index = lv_top_of_deck;
        for ( ; ( (auto78CE2EB6_ai >= 0 && lv_deck_index <= auto78CE2EB6_ae) || (auto78CE2EB6_ai < 0 && lv_deck_index >= auto78CE2EB6_ae) ) ; lv_deck_index += auto78CE2EB6_ai ) {
            if ((lv_count_discarded < 10)) {
                lv_unit_type_index = 0;
                for ( ; ( (auto55A0320C_ai >= 0 && lv_unit_type_index <= auto55A0320C_ae) || (auto55A0320C_ai < 0 && lv_unit_type_index >= auto55A0320C_ae) ) ; lv_unit_type_index += auto55A0320C_ai ) {
                    if ((lib1_gv_player[lv_player].lv_deck.lv_card[lv_deck_index].lv_unit_count[lv_unit_type_index] == 0)) {
                        break;
                    }
                    else {
                        UnitCreate(1, lib1_gv_player[lv_player].lv_deck.lv_card[lv_deck_index].lv_unit_type[lv_unit_type_index], 0, lv_player, RegionGetCenter(lib1_gv_player[lv_player].lv_cleanup_region), libNtve_gf_RandomAngle());
                        if ((UnitFilterMatch(UnitLastCreated(), lv_player, UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true)) {
                            UnitRemove(UnitLastCreated());
                            lib1_gf_DiscardCardFromDecktoDiscard(lv_player, lv_deck_index);
                            lv_count_discarded = (lv_count_discarded + 1);
                            break;
                        }
                        else {
                            UnitRemove(UnitLastCreated());
                        }
                    }
                }
            }
            else {
                break;
            }
        }
        lib1_gf_ShuffleDeck(lv_player);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectConclaveDirective_Init () {
    lib1_gt_EffectConclaveDirective = TriggerCreate("lib1_gt_EffectConclaveDirective_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Planet Cracker
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectPlanetCracker_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Mothership", 0, lv_player, UnitGetPosition(lib1_gv_keystone[lib1_gv_player[lv_player].lv_team]));
    UnitBehaviorAdd(UnitLastCreated(), "AttackingCaster", UnitLastCreated(), 1);
    UnitBehaviorRemove(UnitLastCreated(), "CloakField", c_unitBehaviorCountAll);
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("MothershipPlanetCracker", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(lib1_gv_player[lv_player].lv_attack_region)), c_orderQueueAddToEnd);
    lib1_gf_IssueLeaveOrders(UnitLastCreated(), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectPlanetCracker_Init () {
    lib1_gt_EffectPlanetCracker = TriggerCreate("lib1_gt_EffectPlanetCracker_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Praetor Fenix
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectPraetorFenix_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto20C9EA1A_g;
    int auto20C9EA1A_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto20C9EA1A_g = lv_units_created;
    auto20C9EA1A_u = UnitGroupCount(auto20C9EA1A_g, c_unitCountAll);
    for (;; auto20C9EA1A_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto20C9EA1A_g, auto20C9EA1A_u);
        if (lv_unit == null) { break; }
        UnitBehaviorAdd(lv_unit, "EternalWarrior", lv_unit, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectPraetorFenix_Init () {
    lib1_gt_EffectPraetorFenix = TriggerCreate("lib1_gt_EffectPraetorFenix_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Gantrithor
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectGantrithor_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;
    int lv_most_expensive_hand_index;

    // Automatic Variable Declarations
    unitgroup auto01FE3844_g;
    int auto01FE3844_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto01FE3844_g = lv_units_created;
    auto01FE3844_u = UnitGroupCount(auto01FE3844_g, c_unitCountAll);
    for (;; auto01FE3844_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto01FE3844_g, auto01FE3844_u);
        if (lv_unit == null) { break; }
        if ((UnitGetType(lv_unit) == "CarrierGantrithor")) {
            UnitBehaviorAdd(lv_unit, "MineralUpkeep", lv_unit, 1);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectGantrithor_Init () {
    lib1_gt_EffectGantrithor = TriggerCreate("lib1_gt_EffectGantrithor_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Tassadar Initialization
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectTassadarInitialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup autoBAF462C6_g;
    int autoBAF462C6_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    autoBAF462C6_g = lv_units_created;
    autoBAF462C6_u = UnitGroupCount(autoBAF462C6_g, c_unitCountAll);
    for (;; autoBAF462C6_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoBAF462C6_g, autoBAF462C6_u);
        if (lv_unit == null) { break; }
        UnitBehaviorAdd(lv_unit, "PsionicMaster", lv_unit, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectTassadarInitialization_Init () {
    lib1_gt_EffectTassadarInitialization = TriggerCreate("lib1_gt_EffectTassadarInitialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Riot
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectRiot_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_DrawCardFromDecktoHand(lv_player);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectRiot_Init () {
    lib1_gt_EffectRiot = TriggerCreate("lib1_gt_EffectRiot_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Infestation
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectInfestation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_DrawCardFromDecktoHand(lv_player);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (PlayerName(lv_player) + StringExternal("Param/Value/lib_1_2FDE7433")));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectInfestation_Init () {
    lib1_gt_EffectInfestation = TriggerCreate("lib1_gt_EffectInfestation_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - 22nd Reinforcements
//--------------------------------------------------------------------------------------------------
bool lib1_gt_Effect22ndReinforcements_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unitgroup lv_commanders;
    unit lv_unit;
    int lv_new_marine_count;
    int lv_current_marine_count;
    int lv_count;
    point lv_target_point;

    // Automatic Variable Declarations
    unitgroup auto5E518AC4_g;
    int auto5E518AC4_u;
    unitgroup autoD8145EEC_g;
    int autoD8145EEC_u;
    unitgroup autoA90EE138_g;
    int autoA90EE138_u;
    int auto0E4E37F0_ae;
    const int auto0E4E37F0_ai = 1;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();
    lv_commanders = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto5E518AC4_g = UnitGroup("Commander", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5E518AC4_u = UnitGroupCount(auto5E518AC4_g, c_unitCountAll);
    for (;; auto5E518AC4_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto5E518AC4_g, auto5E518AC4_u);
        if (lv_unit == null) { break; }
        UnitGroupAdd(lv_commanders, lv_unit);
    }
    autoD8145EEC_g = UnitGroup("Raynor", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD8145EEC_u = UnitGroupCount(autoD8145EEC_g, c_unitCountAll);
    for (;; autoD8145EEC_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoD8145EEC_g, autoD8145EEC_u);
        if (lv_unit == null) { break; }
        UnitGroupAdd(lv_commanders, lv_unit);
    }
    autoA90EE138_g = UnitGroup(null, lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA90EE138_u = UnitGroupCount(autoA90EE138_g, c_unitCountAll);
    for (;; autoA90EE138_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoA90EE138_g, autoA90EE138_u);
        if (lv_unit == null) { break; }
        if (((UnitGetType(lv_unit) == "Marine") || (UnitGetType(lv_unit) == "EliteMarine") || (UnitGetType(lv_unit) == "JunkerMarine") || (UnitGetType(lv_unit) == "MercMarine") || (UnitGetType(lv_unit) == "ShieldMarine"))) {
            lv_current_marine_count = (lv_current_marine_count + 1);
        }

    }
    lv_new_marine_count = (UnitGroupCount(lv_commanders, c_unitCountAlive) * 10);
    lv_new_marine_count = (lv_new_marine_count - lv_current_marine_count);
    if ((lv_new_marine_count >= 1)) {
        auto0E4E37F0_ae = lv_new_marine_count;
        lv_count = 1;
        for ( ; ( (auto0E4E37F0_ai >= 0 && lv_count <= auto0E4E37F0_ae) || (auto0E4E37F0_ai < 0 && lv_count >= auto0E4E37F0_ae) ) ; lv_count += auto0E4E37F0_ai ) {
            lv_unit = UnitGroupRandomUnit(lv_commanders, c_unitCountAlive);
            lv_target_point = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_unit), RandomFixed(0.0, 3.0), RegionRandomPoint(lib1_gv_player[UnitGetOwner(lv_unit)].lv_attack_region));
            UnitIssueOrder(lv_unit, OrderTargetingPoint(AbilityCommand("CalldownMarine", 0), lv_target_point), c_orderQueueReplace);
            Wait(0.1, c_timeGame);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_Effect22ndReinforcements_Init () {
    lib1_gt_Effect22ndReinforcements = TriggerCreate("lib1_gt_Effect22ndReinforcements_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Spider Mines
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectSpiderMines_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    int lv_oracle_count;

    // Automatic Variable Declarations
    const int auto2D06F605_ae = 4;
    const int auto2D06F605_ai = 1;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lv_oracle_count = 1;
    for ( ; ( (auto2D06F605_ai >= 0 && lv_oracle_count <= auto2D06F605_ae) || (auto2D06F605_ai < 0 && lv_oracle_count >= auto2D06F605_ae) ) ; lv_oracle_count += auto2D06F605_ai ) {
        UnitCreate(1, "Vulture", 0, lv_player, RegionRandomPoint(lib1_gv_player[lv_player].lv_spawn_region), libNtve_gf_RandomAngle());
        UnitBehaviorAdd(UnitLastCreated(), "KillableCaster", UnitLastCreated(), 1);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("VultureSpiderMines", 0), UnitTypePlacementFromPoint("SensorTower", lv_player, RegionRandomPoint(lib1_gv_player[lv_player].lv_defense_region), 2.0)), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("VultureSpiderMines", 0), UnitTypePlacementFromPoint("SensorTower", lv_player, RegionRandomPoint(lib1_gv_player[lv_player].lv_defense_region), 2.0)), c_orderQueueAddToEnd);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("VultureSpiderMines", 0), UnitTypePlacementFromPoint("SensorTower", lv_player, RegionRandomPoint(lib1_gv_player[lv_player].lv_defense_region), 2.0)), c_orderQueueAddToEnd);
        lib1_gf_IssueLeaveOrders(UnitLastCreated(), c_orderQueueAddToEnd);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectSpiderMines_Init () {
    lib1_gt_EffectSpiderMines = TriggerCreate("lib1_gt_EffectSpiderMines_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Zergling Research
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectZerglingResearch_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto5F0E1B7D_g;
    int auto5F0E1B7D_u;
    unitgroup auto92038944_g;
    int auto92038944_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto5F0E1B7D_g = UnitGroup(null, lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5F0E1B7D_u = UnitGroupCount(auto5F0E1B7D_g, c_unitCountAll);
    for (;; auto5F0E1B7D_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto5F0E1B7D_g, auto5F0E1B7D_u);
        if (lv_unit == null) { break; }
        UnitBehaviorRemove(lv_unit, "WaitingToMoveOut", 1);
        UnitBehaviorRemove(lv_unit, "Waiting1Turn", 1);
        UnitBehaviorRemove(lv_unit, "Waiting2Turns", 1);
        UnitBehaviorRemove(lv_unit, "CasterWaitingToMoveOut", 1);
        if (((UnitGroupHasUnit(lib1_gv_ready_units, lv_unit) == true) || (UnitGroupHasUnit(lib1_gv_one_turn_wait_units, lv_unit) == true) || (UnitGroupHasUnit(lib1_gv_two_turn_wait_units, lv_unit) == true))) {
            UnitGroupRemove(lib1_gv_ready_units, lv_unit);
            UnitGroupRemove(lib1_gv_one_turn_wait_units, lv_unit);
            UnitGroupRemove(lib1_gv_two_turn_wait_units, lv_unit);
            lib1_gf_IssueDefaultOrders(lv_unit);
        }

    }
    Wait(1.0, c_timeGame);
    auto92038944_g = UnitGroup(null, lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto92038944_u = UnitGroupCount(auto92038944_g, c_unitCountAll);
    for (;; auto92038944_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto92038944_g, auto92038944_u);
        if (lv_unit == null) { break; }
        if (((UnitHasBehavior2(lv_unit, "WaitingToMoveOut") == true) || (UnitHasBehavior2(lv_unit, "CasterWaitingToMoveOut") == true))) {
            UnitBehaviorRemove(lv_unit, "WaitingToMoveOut", 1);
            UnitBehaviorRemove(lv_unit, "Waiting1Turn", 1);
            UnitBehaviorRemove(lv_unit, "Waiting2Turns", 1);
            UnitBehaviorRemove(lv_unit, "CasterWaitingToMoveOut", 1);
            lib1_gf_IssueDefaultOrders(lv_unit);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectZerglingResearch_Init () {
    lib1_gt_EffectZerglingResearch = TriggerCreate("lib1_gt_EffectZerglingResearch_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Hydralisk Research
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectHydraliskResearch_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;
    int lv_count;

    // Automatic Variable Declarations
    const int auto1E884C03_ae = 1;
    const int auto1E884C03_ai = 1;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lv_count = 1;
    for ( ; ( (auto1E884C03_ai >= 0 && lv_count <= auto1E884C03_ae) || (auto1E884C03_ai < 0 && lv_count >= auto1E884C03_ae) ) ; lv_count += auto1E884C03_ai ) {
        UnitCreate(1, "Ghost", 0, lv_player, RegionRandomPoint(lib1_gv_player[lv_player].lv_spawn_region), libNtve_gf_RandomAngle());
        UnitBehaviorAdd(UnitLastCreated(), "Caster", UnitLastCreated(), 1);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("Sniper500", 0), lib1_gf_ToughestEnemyTargetForHardRemoval(lv_player, UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))))), c_orderQueueReplace);
        lib1_gf_IssueLeaveOrders(UnitLastCreated(), c_orderQueueAddToEnd);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectHydraliskResearch_Init () {
    lib1_gt_EffectHydraliskResearch = TriggerCreate("lib1_gt_EffectHydraliskResearch_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Defiler Research
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectDefilerResearch_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    int lv_count;

    // Automatic Variable Declarations
    const int auto70D3512D_ae = 2;
    const int auto70D3512D_ai = 1;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lv_count = 1;
    for ( ; ( (auto70D3512D_ai >= 0 && lv_count <= auto70D3512D_ae) || (auto70D3512D_ai < 0 && lv_count >= auto70D3512D_ae) ) ; lv_count += auto70D3512D_ai ) {
        UnitCreate(1, "ScienceVessel", 0, lv_player, RegionRandomPoint(lib1_gv_player[lv_player].lv_spawn_region), libNtve_gf_RandomAngle());
        UnitBehaviorAdd(UnitLastCreated(), "Caster", UnitLastCreated(), 1);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("Irradiate", 0), lib1_gf_BestTargetforSplash(lv_player, UnitFilter((1 << c_targetFilterBiological) | (1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 1.5, false)), c_orderQueueReplace);
        lib1_gf_IssueLeaveOrders(UnitLastCreated(), c_orderQueueAddToEnd);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectDefilerResearch_Init () {
    lib1_gt_EffectDefilerResearch = TriggerCreate("lib1_gt_EffectDefilerResearch_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Tassadar Periodic Effect
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectTassadarPeriodicEffect_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    int lv_random_hand_index;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lv_random_hand_index = lib1_gf_RandomHandCard(lv_player, lib1_gv_aCTION, "", -1, "");
    if ((lv_random_hand_index >= 0)) {
        lib1_gf_PlayHandCardFromEffect(lv_player, lv_random_hand_index, false);
        lib1_gf_AddEffecttoQueue(lv_player, lib1_gf_GetCardIDByName("Tassadar"), lib1_gv_eF_DRAW, lib1_gt_CommonEffectDraw1, UnitGroupEmpty(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectTassadarPeriodicEffect_Init () {
    lib1_gt_EffectTassadarPeriodicEffect = TriggerCreate("lib1_gt_EffectTassadarPeriodicEffect_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Personal Recall Revive
//--------------------------------------------------------------------------------------------------
bool lib1_gt_PersonalRecallRevive_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "PersonalRecall") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreate(1, "Dragoon", c_unitCreateIgnorePlacement, EventPlayer(), RegionRandomPoint(lib1_gv_player[EventPlayer()].lv_spawn_region), libNtve_gf_RandomAngle());
    UnitBehaviorAdd(UnitLastCreated(), "PermanentlyUncommandable", UnitLastCreated(), 1);
    UnitGroupAdd(lib1_gv_aggressive_units, UnitLastCreated());
    lib1_gf_IssueDefaultOrders(UnitLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_PersonalRecallRevive_Init () {
    lib1_gt_PersonalRecallRevive = TriggerCreate("lib1_gt_PersonalRecallRevive_Func");
    TriggerAddEventUnitDied(lib1_gt_PersonalRecallRevive, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Torrasque Death
//--------------------------------------------------------------------------------------------------
bool lib1_gt_TorrasqueDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "TorrasqueRevival") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gf_GenerateCardtoTopofDeck(EventPlayer(), lib1_gf_GetCardIDByName("Torrasque Revival"));
    lib1_gf_ShuffleDeck(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_TorrasqueDeath_Init () {
    lib1_gt_TorrasqueDeath = TriggerCreate("lib1_gt_TorrasqueDeath_Func");
    TriggerAddEventUnitDied(lib1_gt_TorrasqueDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Praetor Fenix Death
//--------------------------------------------------------------------------------------------------
bool lib1_gt_PraetorFenixDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "EternalWarrior") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gf_GenerateCardforHand(EventPlayer(), lib1_gf_GetCardIDByName("Fenix Reborn"));
    lib1_gf_GenerateWarpInCardforHand(EventPlayer());
    lib1_gf_GenerateWarpInCardforHand(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_PraetorFenixDeath_Init () {
    lib1_gt_PraetorFenixDeath = TriggerCreate("lib1_gt_PraetorFenixDeath_Func");
    TriggerAddEventUnitDied(lib1_gt_PraetorFenixDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Commander Dies
//--------------------------------------------------------------------------------------------------
bool lib1_gt_CommanderDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "Commander") || (UnitGetType(EventUnit()) == "Raynor")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = EventPlayer();
    Wait(0.1, c_timeGame);
    if ((UnitGroupCount(UnitGroup("Commander", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("Raynor", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        lib1_gf_DiscardAllCardsWithName(lv_player, "22nd Reinforcements");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_CommanderDies_Init () {
    lib1_gt_CommanderDies = TriggerCreate("lib1_gt_CommanderDies_Func");
    TriggerAddEventUnitDied(lib1_gt_CommanderDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unnatural Experiments Set
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UnnaturalExperimentsSet_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_set;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_set = lib1_gv_uNNATURAL_EXPERIMENTS;
    lib1_gv_set[lv_set].lv_name = "\xe6\x89\xa9\xe5\xb1\x95\xe5\x8c\x85 B";
    lib1_gv_set[lv_set].lv_description = "\xe6\x8c\x96\xe6\x8e\x98\xe5\x8f\xa4\xe8\x80\x81\xe7\x9a\x84\xe6\x8a\x80\xe6\x9c\xaf\xef\xbc\x8c\xe8\xbf\x9b\xe8\xa1\x8c\xe9\xbb\x91\xe6\x9a\x97\xe7\x9a\x84\xe5\xae\x9e\xe9\xaa\x8c\xef\xbc\x8c\xe6\x8e\xa2\xe7\xb4\xa2\xe6\x97\xa0\xe5\xb0\xbd\xe7\x9a\x84\xe7\xa9\xba\xe8\x99\x9a\xe3\x80\x82\xe4\xbd\xa0\xe7\x9a\x84\xe7\xac\xac\xe4\xb8\x80\xe5\x8c\x85\xe8\x82\xaf\xe5\xae\x9a\xe5\x8c\x85\xe5\x90\xab\xe5\x9f\x83\xe8\x92\x99\xef\xbc\x8c\xe4\xbb\x96\xe5\xb0\x86\xe6\x89\x80\xe6\x9c\x89\xe7\x9a\x84\xe7\xa7\x91\xe6\x99\xae\xe9\xb2\x81\xe5\xb1\x85\xe6\xb0\x91\xe4\xbd\x9c\xe4\xb8\xba\xe8\x87\xaa\xe5\xb7\xb1\xe7\x9a\x84\xe5\xae\x9e\xe9\xaa\x8c\xe5\x93\x81\xe2\x80\xa6 \xe4\xbd\x86\xe5\x8f\xac\xe9\x9b\x86\xe4\xbb\x96\xe5\x8f\xaf\xe4\xb8\x8d\xe6\x98\xaf\xe4\xbb\xb6\xe5\xae\xb9\xe6\x98\x93\xe7\x9a\x84\xe4\xba\x8b\xef\xbc\x81";
    lib1_gv_set[lv_set].lv_icon = "Assets\\Textures\\ForbiddenExperiments.tga";
    lib1_gv_set[lv_set].lv_store_image = "Assets\\Textures\\UnnaturalExperimentsStore.tga";
    lib1_gv_set[lv_set].lv_start_id = 305;
    lib1_gv_set[lv_set].lv_end_id = 362;
    lib1_gv_set[lv_set].lv_state = lib1_gv_aVAILABLE;
    lib1_gv_set[lv_set].lv_price = 15;
    lib1_gv_set[lv_set].lv_common_cost = 40;
    lib1_gv_set[lv_set].lv_uncommon_cost = 75;
    lib1_gv_set[lv_set].lv_rare_cost = 300;
    lib1_gv_set[lv_set].lv_unique_cost = 900;
    lib1_gv_set[lv_set].lv_common_sell = 15;
    lib1_gv_set[lv_set].lv_uncommon_sell = 35;
    lib1_gv_set[lv_set].lv_rare_sell = 150;
    lib1_gv_set[lv_set].lv_unique_sell = 450;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UnnaturalExperimentsSet_Init () {
    lib1_gt_UnnaturalExperimentsSet = TriggerCreate("lib1_gt_UnnaturalExperimentsSet_Func");
    TriggerAddEventMapInit(lib1_gt_UnnaturalExperimentsSet);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unnatural Experiments Promo
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UnnaturalExperimentsPromo_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_id;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_id = 304;
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNNATURAL_EXPERIMENTS, lib1_gv_tERRAN, "Physics Lab", "\xE7\x89\xA9\xE7\x90\x86\xE5\xAE\x9E\xE9\xAA\x8C\xE5\xAE\xA4", lib1_gv_aCTION, "", lib1_gv_rARE, 5, 3, null, "\xE5\xBE\x80\xE4\xB8\x80\xE4\xB8\xAA\xE6\xB2\xA1\xE6\x9C\x89\xE6\x8C\x82\xE4\xBB\xB6\xE7\x9A\x84\xE9\x87\x8D\xE5\xB7\xA5\xE6\x88\x96\xE6\x9C\xBA\xE5\xBA\x93\xE6\xB7\xBB\xE5\x8A\xA0\xE4\xB8\x80\xE4\xB8\xAA\xE7\x89\xA9\xE7\x90\x86\xE5\xAE\x9E\xE9\xAA\x8C\xE5\xAE\xA4\xEF\xBC\x8C \xE4\xBD\xBF\xE5\x85\xB6\xE7\x94\x9F\xE4\xBA\xA7\xE9\x9B\xB7\xE7\xA5\x9E\xE6\x88\x96\xE6\x88\x98\xE8\x88\xB0\xE3\x80\x82 \xE6\xAF\x8F\xE5\x9B\x9E\xE5\x90\x88\xE9\x9A\x8F\xE6\x9C\xBA\xE4\xB8\xA2\xE5\xBC\x83\xE4\xB8\xA4\xE5\xBC\xA0\xE7\x89\x8C,\xE5\x90\xA6\xE5\x88\x99\xE6\x91\xA7\xE6\xAF\x81\xE8\xAF\xA5\xE5\xAE\x9E\xE9\xAA\x8C\xE5\xAE\xA4\xE3\x80\x82", "Assets\\Textures\\btn-building-terran-techreactor.dds", SoundLink("Doodad_UmojanLabGasTurret_StandWorkStart", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_CREATE_UNIT, lib1_gt_EffectPhysicsLab);
    lib1_gf_MakeCardPromo(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNNATURAL_EXPERIMENTS, lib1_gv_zERG, "Explosive Mutagen", "\xE8\x87\xAA\xE7\x88\x86\xE7\xAA\x81\xE5\x8F\x98\xE4\xBD\x93", lib1_gv_aCTION, "Evolution", lib1_gv_rARE, 1, 2, null, "\xE5\xB0\x86\xE4\xBD\xA0\xE7\x89\x8C\xE5\xBA\x93\xE4\xB8\xAD\xE6\x89\x80\xE6\x9C\x89\xE5\x8F\xAA\xE5\x8F\xAC\xE5\x94\xA4\xE5\xB0\x8F\xE7\x8B\x97\xE7\x9A\x84\xE7\x89\x8C\xE6\x9B\xBF\xE6\x8D\xA2\xE6\x88\x90\xE9\x9A\x8F\xE6\x9C\xBA\xE7\x9A\x84\xE5\x8F\xAC\xE5\x94\xA4\xE6\xAF\x92\xE7\x88\x86\xE7\x9A\x84\xE7\x89\x8C\xE3\x80\x82", "Assets\\Textures\\btn-baneling-outline.tga", SoundLink("Baneling_Attack", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_BUFF_DECK, lib1_gt_EffectExplosiveMutagen);
    lib1_gf_MakeCardPromo(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNNATURAL_EXPERIMENTS, lib1_gv_pROTOSS, "Viridescent Archons", "\xE7\xBB\xBF\xE8\x89\xB2\xE6\x89\xA7\xE6\x94\xBF\xE5\xAE\x98", lib1_gv_aGGRESSIVE, "Tal'darim", lib1_gv_rARE, 3, 0, null, "\xE8\xBF\x99\xE5\xBC\xA0\xE7\x89\x8C\xE5\x8F\xAC\xE5\x94\xA4\xE7\x9A\x84\xE6\x89\xA7\xE6\x94\xBF\xE5\xAE\x98\xE6\x95\xB0\xE9\x87\x8F\xE7\xAD\x89\xE5\x90\x8C\xE4\xBA\x8E\xE6\x9C\xAC\xE5\x9B\x9E\xE5\x90\x88\xE4\xBD\xA0\xE5\xB0\x9A\xE6\x9C\xAA\xE4\xBD\xBF\xE7\x94\xA8\xE7\x9A\x84\xE7\x93\xA6\xE6\x96\xAF\xE7\x9A\x84\xE6\x95\xB0\xE9\x87\x8F \xEF\xBC\x88\xE6\x9C\x80\xE5\xB0\x91 1 \xE4\xB8\xAA\xEF\xBC\x89\xE3\x80\x82", "Assets\\Textures\\btn-unit-protoss-archon-dark.dds", SoundLink("Archon_What", 2));
    lib1_gf_DefineCardUnit(lv_id, "ArchonGreen", 1);
    lib1_gf_MakeCardPromo(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNNATURAL_EXPERIMENTS, lib1_gv_vOID, "Amon", "\xE5\x9F\x83\xE8\x92\x99", lib1_gv_aGGRESSIVE, "Void", lib1_gv_uNIQUE, 6, 6, null, "\xE6\x88\x98\xE5\x90\xBC\xEF\xBC\x9A\xE4\xB8\xA2\xE5\xBC\x83\xE4\xBD\xA0\xE5\x85\xA8\xE9\x83\xA8\xE6\x89\x8B\xE7\x89\x8C\xE3\x80\x82 \xE5\x85\x85\xE8\x83\xBD\xEF\xBC\x9A\xE6\xB7\xBB\xE5\x8A\xA0 6 \xE4\xB8\xAA\xE8\x99\x9A\xE7\xA9\xBA\xE5\x8D\x95\xE4\xBD\x8D\xE7\x89\x8C\xE5\x88\xB0\xE4\xBD\xA0\xE6\x89\x8B\xE4\xB8\xAD\xE3\x80\x82", "Assets\\Textures\\tip_voidthrasher.dds", SoundLink("Amon", 0));
    lib1_gf_DefineCardUnit(lv_id, "FallenXelnagaAmon", 1);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DISCARD_FROM_HAND, lib1_gt_EffectAmonDiscard);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DRAW, lib1_gt_EffectAmonDraw);
    lib1_gf_AddChanneltoCardDefinition(lv_id, 10);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UnnaturalExperimentsPromo_Init () {
    lib1_gt_UnnaturalExperimentsPromo = TriggerCreate("lib1_gt_UnnaturalExperimentsPromo_Func");
    TriggerAddEventMapInit(lib1_gt_UnnaturalExperimentsPromo);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unnatural Experiments Terran
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UnnaturalExperimentsTerran_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_id;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_id = 308;
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNNATURAL_EXPERIMENTS, lib1_gv_tERRAN, "Moebius Scientists", "\xE8\x8E\xAB\xE6\xAF\x94\xE6\x96\xAF\xE7\xA7\x91\xE5\xAD\xA6\xE5\xAE\xB6", lib1_gv_dEFENSIVE, "Moebius", lib1_gv_cOMMON, 1, 1, null, "\xE6\x88\x98\xE5\x90\xBC\xEF\xBC\x9A\xE4\xBD\xBF\xE4\xBD\xA0\xE7\x89\x8C\xE5\xBA\x93\xE4\xBB\xA5\xE5\x8F\x8A\xE6\x89\x8B\xE7\x89\x8C\xE4\xB8\xAD\xE5\x85\xA8\xE9\x83\xA8\xE8\x99\x9A\xE7\xA9\xBA\xE7\x89\x8C\xE5\x92\x8C\xE6\xB7\xB7\xE5\x90\x88\xE4\xBD\x93\xE7\x89\x8C\xE7\x9A\x84\xE7\x93\xA6\xE6\x96\xAF\xE8\xB4\xB9\xE7\x94\xA8\xE5\x87\x8F 1 \xE3\x80\x82", "Assets\\Textures\\btn-unit-terran-medicmercenary.dds", SoundLink("Medic", 0));
    lib1_gf_DefineCardUnit(lv_id, "Medic", 6);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_BUFF_ALL_HAND_CARDS, lib1_gt_EffectMoebius);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNNATURAL_EXPERIMENTS, lib1_gv_tERRAN, "Terrazine Canister", "\xE5\x9C\xB0\xE5\x97\xAA\xE7\xBD\x90", lib1_gv_aCTION, "", lib1_gv_rARE, 0, -1, null, "\xE5\xBD\x93\xE8\xA2\xAB\xE9\x80\x89\xE4\xB8\xAD\xEF\xBC\x8C\xE8\x8E\xB7\xE5\xBE\x97 1 \xE7\x93\xA6\xE6\x96\xAF\xE3\x80\x82\xE5\xBD\x93\xE8\xA2\xAB\xE6\x89\x93\xE5\x87\xBA\xEF\xBC\x8C\xE6\xB7\xBB\xE5\x8A\xA0\xE4\xB8\x80\xE5\xBC\xA0\xE5\xB9\xBD\xE9\xAD\x82\xE5\xB0\x8F\xE9\x98\x9F\xE7\x89\x8C\xE5\x88\xB0\xE4\xBD\xA0\xE6\x89\x8B\xE4\xB8\xAD\xE3\x80\x82", "Assets\\Textures\\btn-tips-droppedterrazine.dds", SoundLink("Protoss_RechargeEnergy", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DRAW, lib1_gt_EffectTerrazineCanister);
    lib1_gf_AddBuriedtoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNNATURAL_EXPERIMENTS, lib1_gv_tERRAN, "Loaded Valkyrie", "\xE8\xBD\xBD\xE4\xBA\xBA\xE5\xA5\xB3\xE6\xAD\xA6\xE7\xA5\x9E", lib1_gv_aGGRESSIVE, "", lib1_gv_cOMMON, 3, 1, null, "\xE4\xBA\xA1\xE8\xAF\xAD\xEF\xBC\x9A\xE6\x8E\x89\xE8\x90\xBD 8 \xE4\xB8\xAA\xE6\x9C\xBA\xE6\x9E\xAA\xE5\x85\xB5\xE3\x80\x82", "Assets\\Textures\\btn-unit-terran-valkyrieclassic-loaded.dds", SoundLink("ClassicValkyrie", 0));
    lib1_gf_DefineCardUnit(lv_id, "Valkyrie", 1);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DEFAULT, lib1_gt_EffectLoadedValkyrie);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNNATURAL_EXPERIMENTS, lib1_gv_tERRAN, "Moebius Enforcers", "\xE8\x8E\xAB\xE6\xAF\x94\xE6\x96\xAF\xE6\x89\xA7\xE8\xA1\x8C\xE8\x80\x85", lib1_gv_aGGRESSIVE, "Moebius", lib1_gv_cOMMON, 3, 2, null, "\xE6\x88\x98\xE5\x90\xBC\xEF\xBC\x9A\xE4\xBD\xBF\xE4\xBD\xA0\xE7\x89\x8C\xE5\xBA\x93\xE4\xBB\xA5\xE5\x8F\x8A\xE6\x89\x8B\xE7\x89\x8C\xE4\xB8\xAD\xE5\x85\xA8\xE9\x83\xA8\xE8\x99\x9A\xE7\xA9\xBA\xE7\x89\x8C\xE5\x92\x8C\xE6\xB7\xB7\xE5\x90\x88\xE4\xBD\x93\xE7\x89\x8C\xE7\x9A\x84\xE7\x93\xA6\xE6\x96\xAF\xE8\xB4\xB9\xE7\x94\xA8\xE5\x87\x8F 1 \xE3\x80\x82", "Assets\\Textures\\btn-unit-maurader-collectionskin-deluxe.dds", SoundLink("Marauder_Attack", 5));
    lib1_gf_DefineCardUnit(lv_id, "MarauderMoebius", 4);
    lib1_gf_DefineCardUnit(lv_id, "Spectre", 1);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_BUFF_ALL_HAND_CARDS, lib1_gt_EffectMoebius);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNNATURAL_EXPERIMENTS, lib1_gv_tERRAN, "Protoss Relic", "\xE6\x98\x9F\xE7\x81\xB5\xE9\x81\x97\xE7\x89\xA9", lib1_gv_aCTION, "", lib1_gv_uNCOMMON, 2, 0, null, "\xE6\xB7\xBB\xE5\x8A\xA0\xE4\xB8\x80\xE5\xBC\xA0\xE6\x8A\xA4\xE7\x9B\xBE\xE7\x9F\xA9\xE9\x98\xB5\xE5\x88\xB0\xE4\xBD\xA0\xE7\x9A\x84\xE6\x89\x8B\xE7\x89\x8C\xE4\xB8\xAD\xE3\x80\x82 \xE7\x84\xB6\xE5\x90\x8E\xE5\xB0\x86\xE4\xBD\xA0\xE5\x85\xA8\xE9\x83\xA8\xE6\x89\x8B\xE7\x89\x8C\xE7\x9A\x84\xE6\xB0\xB4\xE6\x99\xB6\xE8\xB4\xB9\xE7\x94\xA8\xE5\x87\x8F 1 \xE3\x80\x82", "Assets\\Textures\\btn-tips-protossrelic.dds", SoundLink("Obelisk_TimeWarpImpact", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DRAW, lib1_gt_EffectProtossRelicCard);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_BUFF_ALL_HAND_CARDS, lib1_gt_EffectProtossRelicCost);
    lib1_gf_AddBuriedtoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNNATURAL_EXPERIMENTS, lib1_gv_tERRAN, "Moebius Search Crew", "\xE8\x8E\xAB\xE6\xAF\x94\xE6\x96\xAF\xE6\x90\x9C\xE7\xB4\xA2\xE9\x98\x9F", lib1_gv_tACTICAL, "Moebius", lib1_gv_uNCOMMON, 1, 1, null, "\xE6\x88\x98\xE5\x90\xBC\xEF\xBC\x9A\xE4\xBB\x8E\xE5\xBC\x83\xE7\x89\x8C\xE5\xA0\x86\xE9\x87\x8C\xE8\xBF\x94\xE5\x9B\x9E\xE4\xB8\x80\xE5\xBC\xA0\xE5\x90\xAB\xE6\x9C\x89'\xE5\x9F\x8B\xE8\x91\xAC'\xE7\x89\xB9\xE6\x80\xA7\xE7\x9A\x84\xE7\x89\x8C\xE5\x88\xB0\xE4\xBD\xA0\xE6\x89\x8B\xE7\x89\x8C\xE4\xB8\xAD", "Assets\\Textures\\btn-unit-collection-reaper-covertops.dds", SoundLink("Reaper_Yes", 0));
    lib1_gf_DefineCardUnit(lv_id, "ReaperMoebius", 4);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DRAW, lib1_gt_EffectMoebiusSearchCrew);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNNATURAL_EXPERIMENTS, lib1_gv_tERRAN, "Dig For Artifacts", "\xE6\x8C\x96\xE6\x8E\x98\xE6\x96\x87\xE7\x89\xA9", lib1_gv_aCTION, "", lib1_gv_cOMMON, 4, 2, null, "\xE4\xBB\x8E\xE5\xBC\x83\xE7\x89\x8C\xE5\xA0\x86\xE9\x87\x8C\xE8\xBF\x94\xE5\x9B\x9E\xE4\xB8\x89\xE5\xBC\xA0\xE5\x90\xAB\xE6\x9C\x89'\xE5\x9F\x8B\xE8\x91\xAC'\xE7\x89\xB9\xE6\x80\xA7\xE7\x9A\x84\xE7\x89\x8C\xE5\x88\xB0\xE4\xBD\xA0\xE6\x89\x8B\xE7\x89\x8C\xE4\xB8\xAD", "Assets\\Textures\\btn-upgrade-terran-researchdrillingclaws.dds", SoundLink("WidowMineBurrow", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DRAW, lib1_gt_EffectDigForArtifacts);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNNATURAL_EXPERIMENTS, lib1_gv_tERRAN, "Psi Disruptor", "\xE7\x81\xB5\xE8\x83\xBD\xE5\xB9\xB2\xE6\x89\xB0\xE5\x99\xA8", lib1_gv_sTRUCTURE, "", lib1_gv_rARE, 4, 2, null, "\xE5\xBB\xBA\xE9\x80\xA0\xE4\xB8\x80\xE4\xB8\xAA psi \xE5\x8E\x8B\xE5\x88\xB6\xE5\x99\xA8\xE3\x80\x82 \xE7\x9B\xB4\xE8\x87\xB3\xE8\xA2\xAB\xE6\x91\xA7\xE6\xAF\x81\xEF\xBC\x8C \xE5\xAE\x83\xE8\x83\xBD\xE9\x98\xBB\xE7\xA2\x8D\xE6\x89\x80\xE6\x9C\x89\xE6\x95\x8C\xE5\xAF\xB9\xE7\x8E\xA9\xE5\xAE\xB6\xE8\x8E\xB7\xE5\x8F\x96\xE5\x90\x84\xE8\x87\xAA\xE7\x9A\x84 1 \xE7\x82\xB9\xE7\x9F\xBF\xE7\x89\xA9\xE3\x80\x82", "Assets\\Textures\\btn-research-zerg-psidisruptor.dds", SoundLink("PsiDisruptor_What", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DEFAULT, lib1_gt_EffectOldPsiDisruptor);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNNATURAL_EXPERIMENTS, lib1_gv_tERRAN, "Defensive Matrix", "\xE9\x98\xB2\xE5\xBE\xA1\xE7\x9F\xA9\xE9\x98\xB5", lib1_gv_aCTION, "", lib1_gv_cOMMON, 2, 0, null, "\xE5\xAF\xB9\xE4\xBD\xA0\xE6\x9C\x80\xE8\x82\x89\xE7\x9A\x84 6 \xE4\xB8\xAA\xE5\x8D\x95\xE4\xBD\x8D\xE4\xBD\xBF\xE7\x94\xA8\xE6\x8A\xA4\xE7\x9B\xBE\xE6\x8A\x80\xE8\x83\xBD\xE3\x80\x82 \xE8\xAF\xA5\xE6\x8A\x80\xE8\x83\xBD\xE6\x8C\x81\xE7\xBB\xAD\xE4\xB8\xA4\xE5\x9B\x9E\xE5\x90\x88\xE5\xB9\xB6\xE5\x90\x84\xE8\x87\xAA\xE8\x83\xBD\xE5\x90\xB8\xE6\x94\xB6 200 \xE7\x82\xB9\xE4\xBC\xA4\xE5\xAE\xB3\xE3\x80\x82", "Assets\\Textures\\btn-upgrade-swann-defensivematrix.dds", SoundLink("Raven_DefensiveMatrixDeath", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_BUFF_TARGETED_UNIT, lib1_gt_EffectDefensiveMatrix);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNNATURAL_EXPERIMENTS, lib1_gv_tERRAN, "Underground Base", "\xE5\x9C\xB0\xE4\xB8\x8B\xE5\x9F\xBA\xE5\x9C\xB0", lib1_gv_sTRUCTURE, "", lib1_gv_rARE, 2, 0, null, "\xE5\xBB\xBA\xE9\x80\xA0\xE4\xB8\x80\xE4\xB8\xAA\xE5\x9C\xB0\xE5\xA0\xA1\xE3\x80\x82\xE7\x84\xB6\xE5\x90\x8E\xE6\xB4\x97\xE4\xB8\x80\xE5\xBC\xA0\xE7\xA7\x98\xE5\xAF\x86\xE6\x9C\xBA\xE5\xBA\x93\xE5\x88\xB0\xE4\xBD\xA0\xE7\x9A\x84\xE7\x89\x8C\xE5\xBA\x93\xE4\xB8\xAD\xE3\x80\x82", "Assets\\Textures\\btn-doodad-dominiongasvent.dds", SoundLink("NydusDestroyer_Unburrow", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_BUFF_DECK, lib1_gt_EffectUndergroundBase);
    lib1_gf_AddBuriedtoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNNATURAL_EXPERIMENTS, lib1_gv_tERRAN, "Narud's Creations", "\xE7\xBA\xB3\xE9\xB2\x81\xE5\xBE\xB7\xE7\x9A\x84\xE9\x80\xA0\xE7\x89\xA9", lib1_gv_aCTION, "", lib1_gv_uNIQUE, 8, 3, null, "\xE9\x9A\x8F\xE6\x9C\xBA\xE6\xB7\xBB\xE5\x8A\xA0\xE6\xB7\xB7\xE5\x90\x88\xE4\xBD\x93\xE7\x89\x8C\xE5\x88\xB0\xE4\xBD\xA0\xE7\x9A\x84\xE6\x89\x8B\xE7\x89\x8C\xE4\xB8\xAD,\xE7\x9B\xB4\xE5\x88\xB0\xE4\xBD\xA0\xE6\x8B\xA5\xE6\x9C\x89 7 \xE5\xBC\xA0\xE6\x89\x8B\xE7\x89\x8C\xE3\x80\x82", "Assets\\Textures\\btn-unit-zerg-narud.dds", SoundLink("Narud", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_FILL_HAND, lib1_gt_EffectNarudsCreations);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNNATURAL_EXPERIMENTS, lib1_gv_tERRAN, "Deserted Diamondbacks", "\xE8\xA2\xAB\xE9\x81\x97\xE5\xBC\x83\xE7\x9A\x84\xE5\x93\x8D\xE5\xB0\xBE\xE8\x9B\x87", lib1_gv_tACTICAL, "", lib1_gv_cOMMON, 3, 1, null, "", "Assets\\Textures\\btn-unit-terran-cobra.dds", SoundLink("Diamondback", 0));
    lib1_gf_DefineCardUnit(lv_id, "Diamondback", 2);
    lib1_gf_AddBuriedtoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNNATURAL_EXPERIMENTS, lib1_gv_tERRAN, "Interference Matrix", "\xE5\xB9\xB2\xE6\x89\xB0\xE7\x9F\xA9\xE9\x98\xB5", lib1_gv_aCTION, "", lib1_gv_uNCOMMON, 1, 1, null, "\xE5\x90\x91\xE6\x95\x8C\xE5\xAF\xB9 3 \xE4\xB8\xAA\xE6\x9C\x80\xE8\x82\x89\xE7\x9A\x84\xE6\x9C\xBA\xE6\xA2\xB0\xE6\x88\x96\xE7\x81\xB5\xE8\x83\xBD\xE5\x8D\x95\xE4\xBD\x8D\xE5\x8F\x91\xE5\xB0\x84\xE5\xB9\xB2\xE6\x89\xB0\xE5\xAF\xBC\xE5\xBC\xB9\xE5\xB9\xB6\xE7\xA6\x81\xE7\x94\xA8\xE4\xBB\x96\xE4\xBB\xAC\xE7\x9A\x84\xE6\xAD\xA6\xE5\x99\xA8\xE5\x92\x8C\xE6\x8A\x80\xE8\x83\xBD\xE4\xB8\x80\xE5\x9B\x9E\xE5\x90\x88\xE3\x80\x82", "Assets\\Textures\\btn-upgrade-terran-interferencematrix.dds", SoundLink("Raven_ScramblerMissileImpact", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_REMOVE_UNIT_800_DAMAGE, lib1_gt_EffectInterferenceMatrix);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNNATURAL_EXPERIMENTS, lib1_gv_tERRAN, "Egon Stetmann", "\xE8\x89\xBE\xE8\xB4\xA1\xE6\x96\xAF\xE5\x8F\xB0\xE7\x89\xB9\xE6\x9B\xBC", lib1_gv_dEFENSIVE, "", lib1_gv_uNIQUE, 5, 1, null, "\xE7\x9B\xB4\xE8\x87\xB3\xE6\xAD\xBB\xE4\xBA\xA1,\xE6\xAF\x8F\xE4\xB8\xAA\xE6\x8A\xBD\xE7\x89\x8C\xE9\x98\xB6\xE6\xAE\xB5\xE9\xA2\x9D\xE5\xA4\x96\xE6\x8A\xBD\xE4\xB8\x80\xE5\xBC\xA0\xE7\x89\x8C\xE3\x80\x82", "Assets\\Textures\\ui_heroicons_portrait_stetmann.dds", SoundLink("Stetmann", 0));
    lib1_gf_DefineCardUnit(lv_id, "MedicStetmann", 1);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_CREATE_UNIT, lib1_gt_EffectEgonStetmann);
    lib1_gf_AddHeroictoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNNATURAL_EXPERIMENTS, lib1_gv_tERRAN, "Moebius Hybrid", "\xE8\x8E\xAB\xE6\xAF\x94\xE6\x96\xAF\xE6\xB7\xB7\xE5\x90\x88\xE4\xBD\x93", lib1_gv_aGGRESSIVE, "Hybrid", lib1_gv_rARE, 5, 5, null, "\xE5\x85\x85\xE8\x83\xBD 5\xEF\xBC\x9A\xE5\xAE\x83\xE4\xBC\x9A\xE5\xAF\xB9\xE6\x95\x8C\xE6\x96\xB9\xE5\x8D\x95\xE4\xBD\x8D\xE9\x9B\x86\xE7\xBE\xA4\xE5\x8F\x91\xE5\xB0\x84 5 \xE4\xB8\xAA\xE5\x88\xB6\xE5\xAF\xBC\xE9\xA3\x9E\xE5\xBC\xB9\xE3\x80\x82", "Assets\\Textures\\btn-unit-moebiushybrid.dds", SoundLink("MoebiusHybrid", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_REMOVE_UNIT_AOE_DAMAGE, lib1_gt_EffectMoebiusHybrid);
    lib1_gf_DefineCardUnit(lv_id, "MoebiusHybrid", 1);
    lib1_gf_AddChanneltoCardDefinition(lv_id, 5);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNNATURAL_EXPERIMENTS, lib1_gv_tERRAN, "Behemoth-I Cannons", "\xE8\xB4\x9D\xE8\xA5\xBF\xE6\x91\xA9\xE6\x96\xAF\xE7\x81\xAB\xE7\x82\xAE", lib1_gv_aCTION, "", lib1_gv_uNCOMMON, 6, 3, null, "\xE5\xAF\xB9\xE4\xB8\xA4\xE4\xB8\xAA\xE6\x9C\x80\xE8\x82\x89\xE7\x9A\x84\xE6\x95\x8C\xE5\xAF\xB9\xE5\x8D\x95\xE4\xBD\x8D\xE5\x90\x84\xE9\x80\xA0\xE6\x88\x90 1500 \xE7\x82\xB9\xE4\xBC\xA4\xE5\xAE\xB3\xE3\x80\x82", "Assets\\Textures\\btn-upgrade-terran-behemothreactor.dds", SoundLink("Battlecruiser_YamatoAttackLaunch", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_REMOVE_UNIT_1500_DAMAGE, lib1_gt_EffectBehemothICannons);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNNATURAL_EXPERIMENTS, lib1_gv_tERRAN, "Laboratory Supplies", "\xE5\xAE\x9E\xE9\xAA\x8C\xE5\xAE\xA4\xE8\xA1\xA5\xE7\xBB\x99", lib1_gv_sTRUCTURE, "", lib1_gv_uNCOMMON, 1, 0, lib1_gt_EffectLaboratorySuppliesBuild, "\xE5\xBB\xBA\xE9\x80\xA0\xE4\xB8\x80\xE4\xB8\xAA\xE8\xA1\xA5\xE7\xBB\x99\xE7\xAB\x99\xE3\x80\x82 \xE4\xBA\xA1\xE8\xAF\xAD\xEF\xBC\x9A \xE9\x9A\x8F\xE6\x9C\xBA\xE4\xB8\xA2\xE5\xBC\x83\xE4\xBD\xA0\xE7\x9A\x84\xE4\xB8\x80\xE5\xBC\xA0\xE6\x89\x8B\xE7\x89\x8C\xE3\x80\x82 \xE6\x88\x98\xE5\x90\xBC\xEF\xBC\x9A\xE6\xB7\xBB\xE5\x8A\xA0\xE4\xB8\x80\xE5\xBC\xA0\xE8\xBE\x90\xE7\x85\xA7\xE5\x92\x8C\xE4\xB8\x80\xE5\xBC\xA0\xE5\xB9\xB2\xE6\x89\xB0\xE9\xA3\x9E\xE5\xBC\xB9\xE5\x88\xB0\xE4\xBD\xA0\xE7\x9A\x84\xE6\x89\x8B\xE7\x89\x8C\xE4\xB8\xAD\xE3\x80\x82", "Assets\\Textures\\btn-building-terran-supplydepotxpreward.dds", SoundLink("SupplyDepot_What", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DRAW, lib1_gt_EffectLaboratorySuppliesMakeCards);
    lv_id = 360;
    lib1_gf_DefineCard(lv_id, lib1_gv_uNNATURAL_EXPERIMENTS, lib1_gv_tERRAN, "Cloaked Airstrike", "\xE9\x9A\x90\xE5\xBD\xA2\xE7\xA9\xBA\xE8\xA2\xAD", lib1_gv_aGGRESSIVE, "", lib1_gv_cOMMON, 5, 2, null, "\xE4\xBB\x96\xE4\xBB\xAC\xE5\x87\xBA\xE5\x9C\xBA\xE6\x97\xB6\xE9\x9A\x90\xE8\xBA\xAB\xE3\x80\x82", "Assets\\Textures\\talent-raynor-level02-bansheeairstrike.dds", SoundLink("Banshee_CloakOnVO", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_BUFF_UNITS, lib1_gt_EffectCloakedAirstrike);
    lib1_gf_DefineCardUnit(lv_id, "Banshee", 3);
    lib1_gf_AddRushtoCardDefinition(lv_id);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UnnaturalExperimentsTerran_Init () {
    lib1_gt_UnnaturalExperimentsTerran = TriggerCreate("lib1_gt_UnnaturalExperimentsTerran_Func");
    TriggerAddEventMapInit(lib1_gt_UnnaturalExperimentsTerran);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unnatural Experiments Zerg
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UnnaturalExperimentsZerg_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_id;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_id = 325;
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNNATURAL_EXPERIMENTS, lib1_gv_zERG, "Bloated Devourer", "\xE8\x86\xA8\xE8\x83\x80\xE7\x9A\x84\xE5\x90\x9E\xE5\x99\xAC\xE8\x80\x85", lib1_gv_aGGRESSIVE, "", lib1_gv_cOMMON, 2, 2, null, "\xE4\xBA\xA1\xE8\xAF\xAD\xEF\xBC\x9A\xE6\x8E\x89\xE8\x90\xBD 8 \xE6\xAF\x92\xE7\x88\x86\xE3\x80\x82", "Assets\\Textures\\btn-unit-zerg-devourerex3-loaded.dds", SoundLink("ClassicDevourer", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DEFAULT, lib1_gt_EffectBloatedDevourer);
    lib1_gf_DefineCardUnit(lv_id, "DevourerMP", 1);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNNATURAL_EXPERIMENTS, lib1_gv_zERG, "Swelling Eggs", "\xE9\xBC\x93\xE8\xB5\xB7\xE7\x9A\x84\xE8\x9B\x8B", lib1_gv_aCTION, "", lib1_gv_cOMMON, 3, 1, null, "\xE9\x9A\x8F\xE6\x9C\xBA\xE6\x89\x93\xE5\x87\xBA\xE4\xB8\xA4\xE5\xBC\xA0\xE4\xBD\xA0\xE6\x89\x8B\xE4\xB8\xAD\xE8\xB4\xB9\xE7\x94\xA8\xE4\xBD\x8E\xE4\xBA\x8E 4 \xE7\x9A\x84\xE5\x8D\x95\xE4\xBD\x8D\xE7\x89\x8C\xE3\x80\x82", "Assets\\Textures\\talent-zagara-level01-relentless.dds", SoundLink("Egg_Birth", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_PLAY_CARD, lib1_gt_EffectSwellingEggs);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNNATURAL_EXPERIMENTS, lib1_gv_zERG, "Ominous Egg", "\xE4\xB8\x8D\xE8\xAF\xA6\xE7\x9A\x84\xE8\x9B\x8B", lib1_gv_aCTION, "", lib1_gv_uNCOMMON, 7, 2, null, "\xE6\x89\x93\xE5\x87\xBA\xE4\xBD\xA0\xE6\x89\x8B\xE4\xB8\xAD\xE6\x9C\x80\xE8\xB4\xB5\xE7\x9A\x84\xE5\x8D\x95\xE4\xBD\x8D\xE7\x89\x8C\xE3\x80\x82", "Assets\\Textures\\easter egg_zerg.dds", SoundLink("Egg_Birth", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_PLAY_CARD, lib1_gt_EffectOminousEgg);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNNATURAL_EXPERIMENTS, lib1_gv_zERG, "Mysterious Egg", "\xE7\xA5\x9E\xE7\xA7\x98\xE7\x9A\x84\xE8\x9B\x8B", lib1_gv_aCTION, "", lib1_gv_rARE, 6, 1, null, "\xE6\x89\x93\xE5\x87\xBA\xE4\xBD\xA0\xE6\x89\x8B\xE4\xB8\xAD\xE6\x9C\x80\xE4\xBE\xBF\xE5\xAE\x9C\xE7\x9A\x84\xE5\x8D\x95\xE4\xBD\x8D\xE7\x89\x8C\xE3\x80\x82", "Assets\\Textures\\ui_tipicon_story-evolutionmission.dds", SoundLink("Egg_Birth", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_PLAY_CARD, lib1_gt_EffectMysteriousEgg);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNNATURAL_EXPERIMENTS, lib1_gv_zERG, "Hybrid Reaver", "\xE6\xB7\xB7\xE5\x90\x88\xE4\xBD\x93\xE6\x8E\xA0\xE5\xA4\xBA\xE8\x80\x85", lib1_gv_aGGRESSIVE, "Hybrid", lib1_gv_rARE, 4, 4, null, "\xE5\x85\x85\xE8\x83\xBD 4\xEF\xBC\x9A\xE5\xAE\x83\xE7\xAB\x8B\xE5\x88\xBB\xE4\xBB\x8E\xE4\xB8\x80\xE4\xB8\xAA\xE9\x9A\x8F\xE6\x9C\xBA\xE6\x95\x8C\xE6\x96\xB9\xE5\xBB\xBA\xE7\xAD\x91\xE4\xB8\xAD\xE5\x87\xBA\xE7\x8E\xB0\xE5\xB9\xB6\xE6\x91\xA7\xE6\xAF\x81\xE8\xAF\xA5\xE5\xBB\xBA\xE7\xAD\x91\xE3\x80\x82", "Assets\\Textures\\btn-unit-xelnaga-viper.dds", SoundLink("HybridReaver", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_REMOVE_UNIT_1500_DAMAGE, lib1_gt_EffectHybridReaver);
    lib1_gf_DefineCardUnit(lv_id, "HybridReaver", 1);
    lib1_gf_AddChanneltoCardDefinition(lv_id, 4);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNNATURAL_EXPERIMENTS, lib1_gv_zERG, "Hybrid Behemoth", "\xE6\xB7\xB7\xE5\x90\x88\xE4\xBD\x93\xE5\xB7\xA8\xE5\x85\xBD", lib1_gv_aGGRESSIVE, "Hybrid", lib1_gv_uNIQUE, 5, 5, null, "\xE5\x85\x85\xE8\x83\xBD 5\xEF\xBC\x9A \xE8\x8E\xB7\xE5\xBE\x97 +15 \xE6\x8A\xA4\xE7\x94\xB2\xE3\x80\x82", "Assets\\Textures\\tip_hybridbehemoth.dds", SoundLink("HybridBehemoth", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_BUFF_TARGETED_UNIT, lib1_gt_EffectHybridBehemoth);
    lib1_gf_DefineCardUnit(lv_id, "HybridBehemoth", 1);
    lib1_gf_AddChanneltoCardDefinition(lv_id, 5);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNNATURAL_EXPERIMENTS, lib1_gv_zERG, "Aberration", "\xE7\x95\xB8\xE5\x8F\x98\xE4\xBD\x93", lib1_gv_aGGRESSIVE, "", lib1_gv_uNCOMMON, 3, 1, null, "\xE6\x88\x98\xE5\x90\xBC\xEF\xBC\x9A \xE8\xAF\xA5\xE7\x95\xB8\xE5\x8F\x98\xE4\xBD\x93\xE5\xA2\x9E\xE5\x8A\xA0\xE4\xBD\xA0\xE8\xA2\xAB\xE6\x84\x9F\xE6\x9F\x93\xE7\x9A\x84\xE5\x8D\x95\xE4\xBD\x8D\xE6\xAD\xBB\xE4\xBA\xA1\xE6\xAC\xA1\xE6\x95\xB0 X10 \xE7\x94\x9F\xE5\x91\xBD\xE5\x80\xBC\xE3\x80\x82", "Assets\\Textures\\btn-unit-zerg-aberration.dds", SoundLink("Aberration", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_BUFF_TARGETED_UNIT, lib1_gt_EffectAberration);
    lib1_gf_DefineCardUnit(lv_id, "Aberration", 1);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNNATURAL_EXPERIMENTS, lib1_gv_zERG, "Abathur's Evolution", "\xE9\x98\xBF\xE5\xB7\xB4\xE7\x91\x9F\xE5\xBC\x8F\xE8\xBF\x9B\xE5\x8C\x96", lib1_gv_aCTION, lib1_gv_eVOLUTION, lib1_gv_uNIQUE, 8, 3, null, "\xE4\xBB\x8E\xE4\xBD\xA0\xE5\x8D\xA1\xE7\xBB\x84\xE9\x87\x8C\xE6\x89\x93\xE5\x87\xBA\xE6\x89\x80\xE6\x9C\x89\xE7\xA7\x8D\xE7\xB1\xBB\xE7\x9A\x84\xE8\xBF\x9B\xE5\x8C\x96\xE5\x8D\xA1\xE5\x90\x84\xE4\xB8\x80\xE5\xBC\xA0\xE3\x80\x82", "Assets\\Textures\\abathur_evolutionmaster.dds", SoundLink("Abathur", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_PLAY_CARD, lib1_gt_EffectAbathursEvolution);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNNATURAL_EXPERIMENTS, lib1_gv_zERG, "Unstable Locusts", "\xE4\xB8\x8D\xE7\xA8\xB3\xE5\xAE\x9A\xE7\x9A\x84\xE8\x9D\x97\xE8\x99\xAB", lib1_gv_aGGRESSIVE, "", lib1_gv_cOMMON, 3, 0, null, "\xE5\xAE\x83\xE4\xBB\xAC\xE5\xB0\x86\xE5\x9C\xA8\xE4\xB8\xA4\xE5\x9B\x9E\xE5\x90\x88\xE5\x90\x8E\xE6\xAD\xBB\xE4\xBA\xA1\xE3\x80\x82", "Assets\\Textures\\btn-unit-zerg-locustflyerex3.dds", SoundLink("SwarmHost_Flying_Locust_Spawn", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_BUFF_UNITS, lib1_gt_CommonEffectUnstableZergUnit);
    lib1_gf_DefineCardUnit(lv_id, "LocustMPFlying", 10);
    lib1_gf_AddRushtoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNNATURAL_EXPERIMENTS, lib1_gv_zERG, "Swarmlings", "\xE8\x99\xAB\xE6\xB5\xB7", lib1_gv_aGGRESSIVE, "", lib1_gv_cOMMON, 5, 0, null, "\xE8\xBF\x99\xE5\xBC\xA0\xE7\x89\x8C\xE5\x8F\xAC\xE5\x94\xA4\xE7\x9A\x84\xE5\xB0\x8F\xE7\x8B\x97\xE6\x95\xB0\xE9\x87\x8F\xE7\xAD\x89\xE5\x90\x8C\xE4\xBA\x8E\xE7\x8E\xB0\xE5\x9C\xA8\xE4\xBD\xA0\xE6\x8E\xA7\xE5\x88\xB6\xE5\x8D\x95\xE4\xBD\x8D\xE7\x9A\x84\xE6\x95\xB0\xE9\x87\x8F\xE3\x80\x82", "Assets\\Textures\\btn-unit-zerg-zergling-swarmling.dds", SoundLink("Zergling_Ready", 0));
    lib1_gf_DefineCardUnit(lv_id, "ZerglingSwarmer", 1);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNNATURAL_EXPERIMENTS, lib1_gv_zERG, "Broodling Gestation", "\xE6\xA4\x8D\xE5\x85\xA5\xE5\xB7\xA2\xE8\x99\xAB", lib1_gv_aCTION, lib1_gv_eVOLUTION, lib1_gv_uNCOMMON, 5, 3, null, "\xE4\xBD\xBF\xE4\xBD\xA0\xE7\x9A\x84\xE5\x8D\x95\xE4\xBD\x8D\xE8\x8E\xB7\xE5\xBE\x97\xE4\xBA\xA1\xE8\xAF\xAD\xEF\xBC\x9A\xE6\x8E\x89\xE8\x90\xBD\xE4\xB8\xA4\xE5\x8F\xAA\xE5\xB7\xA2\xE8\x99\xAB(\xE4\xB8\x8D\xE5\x8F\xA0\xE5\x8A\xA0)\xE3\x80\x82", "Assets\\Textures\\btn-upgrade-zerg-stukov-infestedspawnbroodling.dds", SoundLink("Broodling_Death", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_BUFF_UNITS, lib1_gt_EffectBroodlingGestation);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNNATURAL_EXPERIMENTS, lib1_gv_zERG, "Mutable Roaches", "\xE8\x83\xBD\xE7\xAA\x81\xE5\x8F\x98\xE7\x9A\x84\xE8\x9F\x91\xE8\x9E\x82", lib1_gv_tACTICAL, "", lib1_gv_cOMMON, 4, 1, null, "\xE6\x98\x93\xE5\x8F\x98\xEF\xBC\x9A\xE5\xBD\x93\xE4\xBD\xA0\xE6\x89\x93\xE5\x87\xBA\xE4\xB8\x80\xE5\xBC\xA0\xE8\xBF\x9B\xE5\x8C\x96\xE7\x89\x8C\xEF\xBC\x8C\xE5\xAE\x83\xE5\xB0\x86\xE4\xBC\x9A\xE5\x8F\x98\xE5\xBC\x82\xE4\xB8\xBA\xE7\x81\xAB\xE8\x9F\x91\xE8\x9E\x82\xE3\x80\x82", "Assets\\Textures\\btn-ability-zerg-dehaka-roach-glialreconstruction.dds", SoundLink("Roach_Attack", 0));
    lib1_gf_DefineCardUnit(lv_id, "Roach", 4);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_CREATE_UNIT, lib1_gt_EffectMutable);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNNATURAL_EXPERIMENTS, lib1_gv_zERG, "Mutable Mutalisks", "\xE8\x83\xBD\xE7\xAA\x81\xE5\x8F\x98\xE7\x9A\x84\xE5\x88\xBA\xE8\x9B\x87", lib1_gv_tACTICAL, "", lib1_gv_uNCOMMON, 5, 2, null, "\xE6\x98\x93\xE5\x8F\x98\xEF\xBC\x9A\xE5\xBD\x93\xE4\xBD\xA0\xE6\x89\x93\xE5\x87\xBA\xE4\xB8\x80\xE5\xBC\xA0\xE8\xBF\x9B\xE5\x8C\x96\xE7\x89\x8C\xEF\xBC\x8C\xE5\xAE\x83\xE5\xB0\x86\xE4\xBC\x9A\xE9\x9A\x8F\xE6\x9C\xBA\xE5\x8F\x98\xE5\xBC\x82\xE4\xB8\xBA\xE5\xAE\x88\xE6\x8A\xA4\xE8\x80\x85\xE6\x88\x96\xE5\x90\x9E\xE5\x99\xAC\xE8\x80\x85\xE3\x80\x82", "Assets\\Textures\\btn-ability-zerg-dehaka-mutalisk-primalreconstitution.dds", SoundLink("Mutalisk_Yes", 0));
    lib1_gf_DefineCardUnit(lv_id, "Mutalisk", 4);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_CREATE_UNIT, lib1_gt_EffectMutable);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNNATURAL_EXPERIMENTS, lib1_gv_zERG, "Mutable Overlord", "\xE8\x83\xBD\xE7\xAA\x81\xE5\x8F\x98\xE7\x9A\x84\xE8\x99\xAB\xE7\xBE\xA4\xE5\xAE\xBF\xE4\xB8\xBB", lib1_gv_dEFENSIVE, "", lib1_gv_rARE, 1, 0, null, "\xE6\x8F\x90\xE5\x8D\x87\xE4\xBD\xA0\xE6\x89\x8B\xE7\x89\x8C\xE5\xAE\xB9\xE9\x87\x8F 1 \xE7\x82\xB9,\xE4\xB8\x8A\xE9\x99\x90\xE4\xB8\xBA 12\xE3\x80\x82 \xE6\x98\x93\xE5\x8F\x98 \xEF\xBC\x9A\xE5\xBD\x93\xE4\xBD\xA0\xE6\x89\x93\xE5\x87\xBA\xE4\xB8\x80\xE5\xBC\xA0\xE8\xBF\x9B\xE5\x8C\x96\xE7\x89\x8C\xEF\xBC\x8C\xE5\xAE\x83\xE4\xBC\x9A\xE5\xAF\xB9\xE6\x95\x8C\xE6\x96\xB9 3 \xE4\xB8\xAA\xE6\x9C\x80\xE8\xB4\xB5\xE7\x9A\x84\xE5\xBB\xBA\xE7\xAD\x91\xE4\xBD\xBF\xE7\x94\xA8\xE6\xB1\xA1\xE6\x9F\x93\xE6\x8A\x80\xE8\x83\xBD ,\xE5\xB9\xB6\xE4\xB8\x94\xE4\xBD\xBF\xE5\xAE\x83\xE4\xBB\xAC\xE5\xA4\xB1\xE6\x95\x88\xE4\xB8\xA4\xE5\x9B\x9E\xE5\x90\x88\xE3\x80\x82", "Assets\\Textures\\btn-ability-kerrigan-improvedoverlords.dds", SoundLink("Overlord_Yes", 0));
    lib1_gf_DefineCardUnit(lv_id, "Overlord", 1);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_CREATE_UNIT, lib1_gt_EffectMutable);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_INCREASE_HAND_SIZE, lib1_gt_CommonEffectAddHandSizeBufftoAllCreatedUnits);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNNATURAL_EXPERIMENTS, lib1_gv_zERG, "Rolling Hunters", "\xE6\xBB\x9A\xE5\x8A\xA8\xE7\x9A\x84\xE7\x8C\x8E\xE6\x89\x8B", lib1_gv_aGGRESSIVE, "", lib1_gv_cOMMON, 4, 1, null, "\xE5\xAE\x83\xE4\xBB\xAC\xE5\x8D\x87\xE7\xBA\xA7\xE4\xBA\x86\xE7\xA7\xBB\xE9\x80\x9F\xE5\xB9\xB6\xE4\xB8\x94\xE5\xBC\xBA\xE5\x88\xB6\xE6\x94\xBB\xE5\x87\xBB\xE5\xBB\xBA\xE7\xAD\x91", "Assets\\Textures\\btn-unit-collection-webby-baneling.dds", SoundLink("Baneling_Attack", 1));
    lib1_gf_DefineCardUnit(lv_id, "BanelingStructureKiller", 16);
    lib1_gf_AddRushtoCardDefinition(lv_id);
    lib1_gf_AddHeroictoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNNATURAL_EXPERIMENTS, lib1_gv_zERG, "Mutation Chamber", "\xE8\xBF\x9B\xE5\x8C\x96\xE8\x85\x94", lib1_gv_sTRUCTURE, "", lib1_gv_rARE, 5, 2, lib1_gt_EffectMutationChamber, "\xE5\xBB\xBA\xE9\x80\xA0\xE4\xB8\x80\xE4\xB8\xAA\xE5\x8F\x98\xE5\xBC\x82\xE8\x85\x94\xE3\x80\x82 \xE6\xAF\x8F\xE5\x9B\x9E\xE5\x90\x88\xE9\x9A\x8F\xE6\x9C\xBA\xE8\xAE\xA9\xE4\xBD\xA0\xE7\x9A\x84\xE8\x9F\x91\xE8\x9E\x82\xEF\xBC\x8C\xE5\x88\xBA\xE8\x9B\x87\xEF\xBC\x8C\xE9\xA3\x9E\xE9\xBE\x99\xE6\x88\x96\xE8\x85\x90\xE5\x8C\x96\xE5\x8F\x98\xE5\xBC\x82\xE6\x88\x90\xE4\xB8\xBA\xE5\xAF\xB9\xE5\xBA\x94\xE7\x9A\x84\xE5\x8D\x95\xE4\xBD\x8D\xE3\x80\x82", "Assets\\Textures\\btn-upgrade-zerg-abathur-evolutionchamberupgradecache.dds", SoundLink("EvolutionChamber_What", 0));
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNNATURAL_EXPERIMENTS, lib1_gv_zERG, "Hybrid Nemesis", "\xE6\xB7\xB7\xE5\x90\x88\xE4\xBD\x93\xE5\xA4\xA9\xE7\xBD\x9A\xE8\x80\x85", lib1_gv_aGGRESSIVE, "Hybrid", lib1_gv_uNCOMMON, 3, 3, null, "\xE5\x85\x85\xE8\x83\xBD 3\xEF\xBC\x9A +6 \xE5\xB0\x84\xE7\xA8\x8B\xE3\x80\x82", "Assets\\Textures\\tip_hybridnemesis.dds", SoundLink("HybridNemesis", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_BUFF_TARGETED_UNIT, lib1_gt_EffectHybridNemesis);
    lib1_gf_DefineCardUnit(lv_id, "HybridNemesis", 1);
    lib1_gf_AddChanneltoCardDefinition(lv_id, 3);
    lv_id = 361;
    lib1_gf_DefineCard(lv_id, lib1_gv_uNNATURAL_EXPERIMENTS, lib1_gv_zERG, "Flawless Specimens", "\xE5\xAE\x8C\xE7\xBE\x8E\xE6\xA0\xB7\xE6\x9C\xAC", lib1_gv_aGGRESSIVE, "", lib1_gv_cOMMON, 6, 1, null, "", "Assets\\Textures\\btn-ability-kerrigan-wildmutation.dds", SoundLink("Hydralisk_Attack", 1));
    lib1_gf_DefineCardUnit(lv_id, "ZerglingHero", 6);
    lib1_gf_DefineCardUnit(lv_id, "MutaliskKukulza", 2);
    lib1_gf_DefineCardUnit(lv_id, "HydraliskHunterKiller", 1);
    lib1_gf_AddHeroictoCardDefinition(lv_id);
    lib1_gf_AddStreamtoCardDefinition(lv_id);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UnnaturalExperimentsZerg_Init () {
    lib1_gt_UnnaturalExperimentsZerg = TriggerCreate("lib1_gt_UnnaturalExperimentsZerg_Func");
    TriggerAddEventMapInit(lib1_gt_UnnaturalExperimentsZerg);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unnatural Experiments Protoss
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UnnaturalExperimentsProtoss_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_id;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_id = 342;
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNNATURAL_EXPERIMENTS, lib1_gv_pROTOSS, "Void Rift", "\xE8\x99\x9A\xE7\xA9\xBA\xE8\xA3\x82\xE9\x9A\x99", lib1_gv_aCTION, "Void", lib1_gv_uNCOMMON, 2, 1, null, "\xE4\xBF\xAE\xE6\x94\xB9\xE4\xBD\xA0\xE6\xB0\xB4\xE6\x99\xB6\xE5\x92\x8C\xE7\x93\xA6\xE6\x96\xAF\xE7\x9A\x84\xE4\xBA\xA7\xE8\x83\xBD\xE4\xB8\x8A\xE9\x99\x90\xE4\xB8\xBA 6 \xE3\x80\x82 \xE5\x85\x85\xE8\x83\xBD\xEF\xBC\x9A\xE6\x8F\x90\xE5\x8D\x87 1 \xE7\x82\xB9\xE7\x93\xA6\xE6\x96\xAF\xE4\xBA\xA7\xE8\x83\xBD\xE3\x80\x82", "Assets\\Textures\\btn-ability-protoss-voidstasis.dds", SoundLink("Amb_AmonTemple_ElectricArc_B", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_SET_INCOME, lib1_gt_EffectVoidRiftIncomeLimitSet);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_INCREASE_INCOME, lib1_gt_EffectVoidRiftGasBoost);
    lib1_gf_AddChanneltoCardDefinition(lv_id, 1);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNNATURAL_EXPERIMENTS, lib1_gv_pROTOSS, "Viridescent Stalkers", "\xE7\xBB\xBF\xE8\x89\xB2\xE8\xBF\xBD\xE7\x8C\x8E", lib1_gv_aGGRESSIVE, "Tal'darim", lib1_gv_uNCOMMON, 1, 0, null, "\xE8\xBF\x99\xE5\xBC\xA0\xE7\x89\x8C\xE5\x8F\xAC\xE5\x94\xA4\xE8\xBF\xBD\xE7\x8C\x8E\xE7\x9A\x84\xE6\x95\xB0\xE9\x87\x8F\xE7\xAD\x89\xE5\x90\x8C\xE4\xBA\x8E\xE6\x9C\xAC\xE5\x9B\x9E\xE5\x90\x88\xE4\xB8\xAD\xE4\xBD\xA0\xE5\xB0\x9A\xE6\x9C\xAA\xE4\xBD\xBF\xE7\x94\xA8\xE7\x9A\x84\xE7\x93\xA6\xE6\x96\xAF\xE6\x95\xB0\xE9\x87\x8F\xEF\xBC\x88\xE6\x9C\x80\xE5\xB0\x91 1 \xE4\xB8\xAA\xEF\xBC\x89\xE3\x80\x82", "Assets\\Textures\\btn-unit-protoss-stalker-dark.dds", SoundLink("Stalker_Attack", 2));
    lib1_gf_DefineCardUnit(lv_id, "StalkerGreen", 1);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNNATURAL_EXPERIMENTS, lib1_gv_pROTOSS, "Piloted Corsair", "\xE8\xBD\xBD\xE4\xBA\xBA\xE6\xB5\xB7\xE7\x9B\x97\xE8\x88\xB9", lib1_gv_aGGRESSIVE, "", lib1_gv_cOMMON, 1, 3, null, "\xE4\xBA\xA1\xE8\xAF\xAD\xEF\xBC\x9A\xE6\x8E\x89\xE8\x90\xBD\xE4\xB8\xA4\xE4\xB8\xAA\xE6\x9A\x97\xE5\xA0\x82\xE6\xAD\xA6\xE5\xA3\xAB\xE3\x80\x82", "Assets\\Textures\\btn-unit-protoss-corsair-loaded.dds", SoundLink("ClassicCorsair", 0));
    lib1_gf_DefineCardUnit(lv_id, "CorsairMP", 1);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DEFAULT, lib1_gt_EffectPilotedCorsair);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNNATURAL_EXPERIMENTS, lib1_gv_pROTOSS, "Void Shades", "\xE8\x99\x9A\xE7\xA9\xBA\xE9\x98\xB4\xE5\xBD\xB1", lib1_gv_aCTION, "Void", lib1_gv_cOMMON, 2, 2, null, "\xE9\x9A\x8F\xE6\x9C\xBA\xE4\xBB\x8E\xE4\xB8\x80\xE4\xB8\xAA\xE6\x95\x8C\xE5\xAF\xB9\xE7\x8E\xA9\xE5\xAE\xB6\xE7\x9A\x84\xE7\x89\x8C\xE5\xBA\x93\xE4\xB8\xAD\xE5\xA4\x8D\xE5\x88\xB6\xE4\xB8\x80\xE5\xBC\xA0\xE5\x8D\x95\xE4\xBD\x8D\xE7\x89\x8C\xE3\x80\x82 \xE5\x85\x85\xE8\x83\xBD 2\xEF\xBC\x9A\xE9\xA2\x9D\xE5\xA4\x96\xE5\xA4\x8D\xE5\x88\xB6 1 \xE5\xBC\xA0\xE3\x80\x82 \xE5\xA4\x8D\xE5\x88\xB6\xE7\x9A\x84\xE5\x8D\xA1\xE4\xB8\x8D\xE5\xB1\x9E\xE4\xBA\x8E\xE4\xBB\xBB\xE4\xBD\x95\xE7\xA7\x8D\xE6\x97\x8F\xE3\x80\x82", "Assets\\Textures\\btn-ability-protoss-amoncloud.dds", SoundLink("Sentry_HallucinationLaunchMedium", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DRAW, lib1_gt_EffectVoidShades);
    lib1_gf_AddChanneltoCardDefinition(lv_id, 2);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNNATURAL_EXPERIMENTS, lib1_gv_pROTOSS, "Hybrid Destroyers", "\xE6\xB7\xB7\xE5\x90\x88\xE4\xBD\x93\xE6\xAF\x81\xE7\x81\xAD\xE8\x80\x85", lib1_gv_aGGRESSIVE, "Hybrid", lib1_gv_uNCOMMON, 4, 4, null, "\xE5\x85\x85\xE8\x83\xBD 4\xEF\xBC\x9A\xE5\xAE\x83\xE4\xBB\xAC\xE5\x90\x84\xE9\x9A\x8F\xE6\x9C\xBA\xE4\xBB\x8E\xE4\xB8\x80\xE4\xB8\xAA\xE4\xBD\x8E\xE4\xBA\x8E 4 \xE8\xB4\xB9\xE7\x9A\x84\xE6\x95\x8C\xE5\xAF\xB9\xE5\xBB\xBA\xE7\xAD\x91\xE4\xB8\xAD\xE5\x87\xBA\xE7\x94\x9F\xE5\xB9\xB6\xE6\x91\xA7\xE6\xAF\x81\xE8\xAF\xA5\xE5\xBB\xBA\xE7\xAD\x91\xE3\x80\x82", "Assets\\Textures\\btn-unit-xelnaga-destroyer.dds", SoundLink("Archon_Attack", 2));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_REMOVE_UNIT_1500_DAMAGE, lib1_gt_EffectHybridDestroyers);
    lib1_gf_DefineCardUnit(lv_id, "HybridDestroyer", 2);
    lib1_gf_AddChanneltoCardDefinition(lv_id, 4);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNNATURAL_EXPERIMENTS, lib1_gv_pROTOSS, "Enduring Stasis", "\xE6\x8C\x81\xE7\xBB\xAD\xE9\x9D\x99\xE6\xBB\x9E", lib1_gv_aCTION, "", lib1_gv_cOMMON, 2, 1, null, "\xE7\xA6\x81\xE9\x94\xA2\xE4\xB8\x80\xE4\xB8\xAA\xE6\x9C\x80\xE8\xB4\xB5\xE7\x9A\x84\xE6\x95\x8C\xE5\xAF\xB9\xE5\xBB\xBA\xE7\xAD\x91\xE3\x80\x82\xE5\xA4\xB1\xE6\x95\x88\xE6\x9C\x9F\xE9\x97\xB4\xE5\xBB\xBA\xE7\xAD\x91\xE6\x97\xA0\xE6\x95\x8C\xE3\x80\x82 \xE6\xB7\xBB\xE5\x8A\xA0\xE4\xB8\x80\xE4\xB8\xAA\xE8\xAF\xA5\xE7\x89\x8C\xE7\x9A\x84\xE5\xA4\x8D\xE5\x88\xB6\xE5\x88\xB0\xE4\xBD\xA0\xE7\x9A\x84\xE6\x89\x8B\xE7\x89\x8C\xE4\xB8\xAD\xE3\x80\x82", "Assets\\Textures\\btn-ability-protoss-forcefield-blue.dds", SoundLink("ArbiterMP_StasisFieldOff", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_FREEZE_SPECIFIC_UNIT, lib1_gt_EffectEnduringStasisAbility);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DRAW, lib1_gt_EffectEnduringStasisDraw);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNNATURAL_EXPERIMENTS, lib1_gv_pROTOSS, "Amon's Chosen", "\xE5\x9F\x83\xE8\x92\x99\xE7\xA5\x9E\xE9\x80\x89", lib1_gv_aGGRESSIVE, "Tal'darim", lib1_gv_cOMMON, 6, 3, null, "", "Assets\\Textures\\btn-upgrade-protoss-alarak-melleeweapon.dds", SoundLink("AmonsChosen", 0));
    lib1_gf_DefineCardUnit(lv_id, "ZealotTaldarim", 5);
    lib1_gf_DefineCardUnit(lv_id, "AdeptTaldarim", 5);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNNATURAL_EXPERIMENTS, lib1_gv_pROTOSS, "Karax's Invention", "\xE5\x87\xAF\xE6\x8B\x89\xE5\x85\x8B\xE6\x96\xAF\xE7\x9A\x84\xE5\x8F\x91\xE6\x98\x8E", lib1_gv_aCTION, "", lib1_gv_uNIQUE, 8, 3, null, "\xE5\xB0\x86\xE6\x89\x80\xE6\x9C\x89\xE8\x83\xBD\xE5\x8F\xAC\xE5\x94\xA4\xE6\x9C\xBA\xE6\xA2\xB0\xE5\x8D\x95\xE4\xBD\x8D\xE7\x9A\x84\xE5\x8D\x95\xE4\xBD\x8D\xE7\x89\x8C\xE4\xBB\x8E\xE5\xBC\x83\xE7\x89\x8C\xE5\xA0\x86\xE8\xBF\x94\xE5\x9B\x9E\xE5\x88\xB0\xE4\xBD\xA0\xE7\x9A\x84\xE7\x89\x8C\xE5\xBA\x93\xE4\xB8\xAD\xEF\xBC\x8C\xE5\xB9\xB6\xE4\xB8\x94\xE4\xBD\xBF\xE8\xBF\x99\xE4\xBA\x9B\xE7\x89\x8C\xE7\x9A\x84\xE6\x9C\xBA\xE6\xA2\xB0\xE5\x8D\x95\xE4\xBD\x8D\xE5\x8F\xAC\xE5\x94\xA4\xE6\x95\xB0\xE9\x87\x8F +1 \xE3\x80\x82", "Assets\\Textures\\btn-hero-karax.dds", SoundLink("Karax", 1));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_BUFF_DECK, lib1_gt_EffectKaraxsInvention);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNNATURAL_EXPERIMENTS, lib1_gv_pROTOSS, "Tal'darim Supplicants", "\xE5\xA1\x94\xE8\xBE\xBE\xE6\x9E\x97\xE6\xAD\xBB\xE5\xBE\x92", lib1_gv_tACTICAL, "Tal'darim", lib1_gv_cOMMON, 3, 0, null, "\xE6\xAD\xBB\xE5\xBE\x92\xE6\xB0\xB8\xE4\xB9\x85\xE8\xA7\x86\xE4\xB8\xBA\xE6\x9C\x80\xE8\x99\x9A\xE5\xBC\xB1\xE7\x9A\x84\xE5\x8D\x95\xE4\xBD\x8D,\xE5\x8D\xB3\xE4\xBE\xBF\xE6\x9C\x89\xE5\x85\xB6\xE4\xBB\x96\xE8\xA1\x80\xE9\x87\x8F\xE5\x8F\x8A\xE6\x8A\xA4\xE7\x9B\xBE\xE6\x9B\xB4\xE5\xB0\x91\xE7\x9A\x84\xE5\x8D\x95\xE4\xBD\x8D\xE5\x9C\xA8\xE5\x9C\xBA\xE3\x80\x82", "Assets\\Textures\\btn-unit-protoss-alarak-taldarim-supplicant.dds", SoundLink("Supplicant", 0));
    lib1_gf_DefineCardUnit(lv_id, "Supplicant", 8);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNNATURAL_EXPERIMENTS, lib1_gv_pROTOSS, "Murderous Ascendance", "\xE5\x8D\x87\xE6\xA0\xBC\xE4\xB9\x8B\xE9\x93\xBE", lib1_gv_aCTION, "Tal'darim", lib1_gv_uNCOMMON, 1, 1, null, "\xE7\x89\xBA\xE7\x89\xB2\xE4\xBD\xA0 4 \xE4\xB8\xAA\xE6\x9C\x80\xE8\x99\x9A\xE5\xBC\xB1\xE7\x9A\x84\xE5\x8D\x95\xE4\xBD\x8D,\xE5\xB9\xB6\xE8\xAE\xA9\xE4\xBD\xA0\xE6\x9C\x80\xE8\x82\x89\xE7\x9A\x84\xE5\x9C\xB0\xE9\x9D\xA2\xE5\x8D\x95\xE4\xBD\x8D\xE8\x8E\xB7\xE5\xBE\x97 1200 \xE6\x8A\xA4\xE7\x9B\xBE\xE5\x80\xBC\xE5\x92\x8C +12 \xE6\x94\xBB\xE5\x87\xBB\xE3\x80\x82", "Assets\\Textures\\btn-upgrade-protoss-alarak-supplicantsacrifice.dds", SoundLink("Supplicant", 1));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_REMOVE_UNIT, lib1_gt_EffectMurderousAscendance);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNNATURAL_EXPERIMENTS, lib1_gv_pROTOSS, "Hybrid Dominator", "\xE6\xB7\xB7\xE5\x90\x88\xE4\xBD\x93\xE6\x94\xAF\xE9\x85\x8D\xE8\x80\x85", lib1_gv_tACTICAL, "Hybrid", lib1_gv_rARE, 5, 5, null, "\xE5\x85\x85\xE8\x83\xBD 5\xEF\xBC\x9A\xE7\xB2\xBE\xE6\x8E\xA7 10 \xE4\xB8\xAA\xE6\x95\x8C\xE5\xAF\xB9\xE6\x9C\x80\xE5\xBC\xB1\xE7\x9A\x84\xE5\x8D\x95\xE4\xBD\x8D\xE5\xB9\xB6\xE5\xB0\x86\xE4\xBB\x96\xE4\xBB\xAC\xE5\x8F\xAC\xE5\x9B\x9E\xE5\x88\xB0\xE8\x87\xAA\xE5\xB7\xB1\xE7\x9A\x84\xE5\x87\xBA\xE7\x94\x9F\xE7\x82\xB9\xE3\x80\x82", "Assets\\Textures\\tip_hybriddominator.dds", SoundLink("Archon_Attack", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_REMOVE_UNIT, lib1_gt_EffectHybridDominator);
    lib1_gf_DefineCardUnit(lv_id, "HybridDominator", 1);
    lib1_gf_AddChanneltoCardDefinition(lv_id, 5);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNNATURAL_EXPERIMENTS, lib1_gv_pROTOSS, "Ma'lash", "\xE7\x8E\x9B\xE6\x8B\x89\xE4\xBB\x80", lib1_gv_tACTICAL, "Tal'darim", lib1_gv_uNIQUE, 2, 2, null, "\xE6\xAF\x8F\xE5\x9B\x9E\xE5\x90\x88\xE7\x89\xBA\xE7\x89\xB2\xE6\x8E\x89\xE4\xBD\xA0\xE6\x9C\x80\xE8\x99\x9A\xE5\xBC\xB1\xE7\x9A\x84\xE5\x8D\x95\xE4\xBD\x8D,\xE9\x9A\x8F\xE5\x90\x8E\xE8\xAF\xA5\xE5\x8D\x95\xE4\xBD\x8D\xE8\x8E\xB7\xE5\xBE\x97 +3 \xE6\x94\xBB\xE5\x87\xBB +300 \xE6\x8A\xA4\xE7\x9B\xBE\xE4\xBB\xA5\xE5\x8F\x8A\xE5\xAE\x8C\xE5\x85\xA8\xE6\x81\xA2\xE5\xA4\x8D\xE8\x83\xBD\xE9\x87\x8F\xE5\x80\xBC\xE3\x80\x82", "Assets\\Textures\\btn-upgrade-protoss-alarak-unlockascendant.dds", SoundLink("Malash", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_CREATE_UNIT, lib1_gt_EffectMalashInitialization);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_REMOVE_UNIT, lib1_gt_EffectMalashPeriodicEffect);
    lib1_gf_DefineCardUnit(lv_id, "HighTemplarMalash", 1);
    lib1_gf_AddHeroictoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNNATURAL_EXPERIMENTS, lib1_gv_pROTOSS, "Psionic Orb", "\xE7\x81\xB5\xE8\x83\xBD\xE7\x90\x83", lib1_gv_aCTION, "", lib1_gv_rARE, 6, 3, null, "\xE6\x96\xBD\xE6\x94\xBE\xE4\xB8\xA4\xE4\xB8\xAA\xE7\x81\xB5\xE8\x83\xBD\xE7\x90\x83\xE3\x80\x82 \xE4\xBB\x96\xE4\xBB\xAC\xE7\xA7\xBB\xE5\x8A\xA8\xE5\xB9\xB6\xE8\xB4\xAF\xE7\xA9\xBF\xE6\x95\xB4\xE4\xB8\xAA\xE6\x88\x98\xE5\x9C\xBA\xE5\x90\x8C\xE6\x97\xB6\xE5\xAF\xB9\xE6\x89\x80\xE6\x9C\x89\xE6\x95\x8C\xE5\xAF\xB9\xE5\x8D\x95\xE4\xBD\x8D\xE9\x80\xA0\xE6\x88\x90\xE9\x80\x82\xE4\xB8\xAD\xE7\x9A\x84\xE4\xBC\xA4\xE5\xAE\xB3\xE3\x80\x82", "Assets\\Textures\\btn-ability-protoss-psionicorb.dds", SoundLink("HighTemplar_PsionicOrbImpact", 2));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_REMOVE_UNIT_AOE_DAMAGE, lib1_gt_EffectPsionicOrb);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNNATURAL_EXPERIMENTS, lib1_gv_pROTOSS, "Warp Stargate", "\xE6\x8A\x98\xE8\xB7\x83\xE6\x98\x9F\xE9\x97\xA8", lib1_gv_aCTION, "", lib1_gv_rARE, 2, 2, null, "\xE5\xB0\x86\xE4\xB8\x80\xE4\xB8\xAA\xE6\x98\x9F\xE9\x97\xA8\xE5\x8D\x87\xE7\xBA\xA7\xE4\xB8\xBA\xE6\x8A\x98\xE8\xB6\x8A\xE6\x98\x9F\xE9\x97\xA8\xEF\xBC\x8C \xE6\xAF\x8F\xE5\x9B\x9E\xE5\x90\x88\xE6\xB7\xBB\xE5\x8A\xA0\xE4\xB8\x80\xE5\xBC\xA0\xE6\x98\x9F\xE9\x99\x85\xE6\x8A\x98\xE8\xB6\x8A\xE7\x89\x8C\xE5\x88\xB0\xE4\xBD\xA0\xE6\x89\x8B\xE4\xB8\xAD\xE3\x80\x82 \xE5\xA6\x82\xE6\x9E\x9C\xE4\xBD\xA0\xE6\xB2\xA1\xE6\x9C\x89\xE6\x98\x9F\xE9\x97\xA8\xEF\xBC\x8C\xE5\x88\x99\xE6\xB7\xBB\xE5\x8A\xA0\xE4\xB8\xA4\xE5\xBC\xA0\xE6\x98\x9F\xE9\x99\x85\xE6\x8A\x98\xE8\xB6\x8A\xE5\x8D\xA1\xE5\x88\xB0\xE4\xBD\xA0\xE6\x89\x8B\xE4\xB8\xAD\xE3\x80\x82", "Assets\\Textures\\btn-building-protoss-starwarpgate.dds", SoundLink("WarpGate_What", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DRAW, lib1_gt_EffectWarpStargate);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNNATURAL_EXPERIMENTS, lib1_gv_pROTOSS, "Void Gate", "\xE8\x99\x9A\xE7\xA9\xBA\xE9\x97\xA8", lib1_gv_sTRUCTURE, "", lib1_gv_uNCOMMON, 5, 2, lib1_gt_EffectVoidGate, "\xE5\xBB\xBA\xE9\x80\xA0\xE4\xB8\x80\xE4\xB8\xAA\xE6\x98\x9F\xE9\x97\xA8\xE3\x80\x82 \xE6\xAF\x8F\xE5\x9B\x9E\xE5\x90\x88\xE7\x94\x9F\xE4\xBA\xA7\xE4\xB8\x80\xE4\xB8\xAA\xE8\x99\x9A\xE7\xA9\xBA\xE8\xBE\x89\xE5\x85\x89\xE8\x88\xB0\xEF\xBC\x8C\xE7\xBB\xB4\xE6\x8A\xA4\xEF\xBC\x9A 1 \xE7\x93\xA6\xE6\x96\xAF\xE6\xAF\x8F\xE5\x9B\x9E\xE5\x90\x88\xE3\x80\x82", "Assets\\Textures\\btn-unit-protoss-alarak-taldarim-stargate.dds", SoundLink("Stargate_What", 0));
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNNATURAL_EXPERIMENTS, lib1_gv_pROTOSS, "Argus Crystal", "\xE9\x98\xBF\xE5\x8F\xA4\xE6\x96\xAF\xE6\xB0\xB4\xE6\x99\xB6", lib1_gv_sTRUCTURE, "", lib1_gv_rARE, 2, 2, lib1_gt_EffectArgusCrystal, "\xE5\xBB\xBA\xE9\x80\xA0\xE4\xB8\x80\xE4\xB8\xAA\xE9\x98\xBF\xE5\x8F\xA4\xE6\x96\xAF\xE6\xB0\xB4\xE6\x99\xB6\xE3\x80\x82 \xE6\x88\x98\xE5\x90\xBC\xEF\xBC\x9A\xE9\x94\x81\xE5\xAE\x9A\xE4\xB8\x80\xE5\xBC\xA0\xE6\x95\x8C\xE5\xAF\xB9\xE7\x8E\xA9\xE5\xAE\xB6\xE6\x9C\x80\xE8\xB4\xB5\xE7\x9A\x84\xE5\x8D\x95\xE4\xBD\x8D\xE7\x89\x8C, \xE7\x9B\xB4\xE5\x88\xB0\xE4\xBD\xA0\xE6\x9C\x80\xE5\x90\x8E\xE4\xB8\x80\xE4\xB8\xAA\xE9\x98\xBF\xE5\x8F\xA4\xE6\x96\xAF\xE6\xB0\xB4\xE6\x99\xB6\xE8\xA2\xAB\xE6\x91\xA7\xE6\xAF\x81\xE3\x80\x82", "Assets\\Textures\\btn-upgrade-vorazun-summondarkpylon.dds", SoundLink("Pylon_What", 0));
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_uNNATURAL_EXPERIMENTS, lib1_gv_pROTOSS, "Energy Crystal", "\xE8\x83\xBD\xE9\x87\x8F\xE6\xB0\xB4\xE6\x99\xB6", lib1_gv_sTRUCTURE, "", lib1_gv_cOMMON, 2, 1, lib1_gt_EffectEnergyCrystal, "\xE5\xBB\xBA\xE9\x80\xA0\xE4\xB8\x80\xE4\xB8\xAA\xE6\xB0\xB4\xE6\x99\xB6\xE3\x80\x82\xE6\x88\x98\xE5\x90\xBC\xEF\xBC\x9A\xE6\x8A\xBD\xE4\xB8\x80\xE5\xBC\xA0\xE7\x89\x8C\xEF\xBC\x8C \xE7\x84\xB6\xE5\x90\x8E\xE5\xA2\x9E\xE5\x8A\xA0\xE5\x9F\xBA\xE5\x9C\xB0\xE7\x9A\x84\xE8\x83\xBD\xE9\x87\x8F 3 \xE7\x82\xB9\xE3\x80\x82", "Assets\\Textures\\btn-unit-collection-pylon-judicator.dds", SoundLink("Pylon_What", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_BUFF_TARGETED_UNIT, lib1_gt_EffectEnergyCrystalEnergy);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DRAW, lib1_gt_CommonEffectDraw1);
    lv_id = 362;
    lib1_gf_DefineCard(lv_id, lib1_gv_uNNATURAL_EXPERIMENTS, lib1_gv_pROTOSS, "Tal'darim Vanguard", "\xE5\xA1\x94\xE8\xBE\xBE\xE6\x9E\x97\xE5\x85\x88\xE9\x94\x8B", lib1_gv_aGGRESSIVE, "Tal'darim", lib1_gv_cOMMON, 4, 1, null, "", "Assets\\Textures\\btn-unit-collection-taldarim-immortal.dds", SoundLink("Vanguard", 0));
    lib1_gf_DefineCardUnit(lv_id, "ImmortalVanguard", 1);
    lib1_gf_AddHeroictoCardDefinition(lv_id);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UnnaturalExperimentsProtoss_Init () {
    lib1_gt_UnnaturalExperimentsProtoss = TriggerCreate("lib1_gt_UnnaturalExperimentsProtoss_Func");
    TriggerAddEventMapInit(lib1_gt_UnnaturalExperimentsProtoss);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unnatural Experiments Uncollectible
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UnnaturalExperimentsUncollectible_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_id;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_id = 176;
    lib1_gf_DefineCard(lv_id, lib1_gv_uNCOLLECTIBLE, lib1_gv_vOID, "Void Army", "\xE8\x99\x9A\xE7\xA9\xBA\xE5\xA4\xA7\xE5\x86\x9B", lib1_gv_aGGRESSIVE, "Void", lib1_gv_uNCOLLECTIBLE, 0, 0, null, "", "Assets\\Textures\\tip_voidrift.dds", SoundLink("Sentry_HallucinationDeathLarge", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DEFAULT, lib1_gt_EffectVoidArmy);
    lv_id = 177;
    lib1_gf_DefineCard(lv_id, lib1_gv_uNCOLLECTIBLE, lib1_gv_tERRAN, "Stetmann, Addict", "\xE4\xB8\x8A\xE7\x98\xBE\xE8\x80\x85\xE6\x96\xAF\xE5\x8F\xB0\xE7\x89\xB9\xE6\x9B\xBC", lib1_gv_aGGRESSIVE, "", lib1_gv_uNIQUE, 1, 5, null, "\xE7\x9B\xB4\xE8\x87\xB3\xE6\xAD\xBB\xE4\xBA\xA1\xEF\xBC\x8C\xE6\xAF\x8F\xE4\xB8\xAA\xE5\x9B\x9E\xE5\x90\x88\xE7\xBB\x93\xE6\x9D\x9F\xE6\x97\xB6\xE6\xB7\xBB\xE5\x8A\xA0\xE4\xB8\x80\xE4\xB8\xAA\xE5\x9C\xB0\xE5\x8B\xA4\xE6\xB0\x94\xE7\xBD\x90\xE7\x89\x8C\xE5\x88\xB0\xE4\xBD\xA0\xE7\x9A\x84\xE6\x89\x8B\xE7\x89\x8C\xE4\xB8\xAD\xE3\x80\x82", "Assets\\Textures\\ui_heroicons_portrait_stetmann_addict.dds", SoundLink("Stetmann", 1));
    lib1_gf_DefineCardUnit(lv_id, "MedicStetmann", 1);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_CREATE_UNIT, lib1_gt_EffectStetmannAddict);
    lib1_gf_AddHeroictoCardDefinition(lv_id);
    lib1_gf_AddTransformRelationship("Egon Stetmann", "Stetmann, Addict");
    lv_id = 178;
    lib1_gf_DefineCard(lv_id, lib1_gv_uNCOLLECTIBLE, lib1_gv_pROTOSS, "Star Warp", "\xE6\x98\x9F\xE7\xA9\xBA\xE6\x8A\x98\xE8\xB7\x83", lib1_gv_aGGRESSIVE, "Warp", lib1_gv_uNCOLLECTIBLE, 2, 1, null, "", "Assets\\Textures\\btn-ability-protoss-phasingarmor.dds", SoundLink("WarpGate_TrainStart", 0));
    lib1_gf_AddRushtoCardDefinition(lv_id);
    lv_id = 179;
    lib1_gf_DefineCard(lv_id, lib1_gv_uNCOLLECTIBLE, lib1_gv_tERRAN, "Behemoth-II Cannons", "\xE8\xB4\x9D\xE8\xA5\xBF\xE6\x91\xA9\xE6\x96\xAFII\xE5\x9E\x8B\xE7\x81\xAB\xE7\x82\xAE", lib1_gv_aCTION, "", lib1_gv_uNCOMMON, 6, 3, null, "\xE5\xAF\xB9\xE4\xB8\xA4\xE4\xB8\xAA\xE6\x95\x8C\xE5\xAF\xB9\xE6\x9C\x80\xE8\xB4\xB5\xE7\x9A\x84\xE5\xBB\xBA\xE7\xAD\x91\xE5\x90\x84\xE9\x80\xA0\xE6\x88\x90 1500 \xE7\x82\xB9\xE4\xBC\xA4\xE5\xAE\xB3\xE3\x80\x82", "Assets\\Textures\\btn-upgrade-terran-behemothreactor.dds", SoundLink("Battlecruiser_YamatoAttackLaunch", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_REMOVE_UNIT_1500_DAMAGE, lib1_gt_EffectBehemothIICannons);
    lib1_gf_AddTransformRelationship("Behemoth-I Cannons", "Behemoth-II Cannons");
    lv_id = 195;
    lib1_gf_DefineCard(lv_id, lib1_gv_uNCOLLECTIBLE, lib1_gv_tERRAN, "Secret Hangar", "\xE7\xA7\x98\xE5\xAF\x86\xE6\x9C\xBA\xE5\xBA\x93", lib1_gv_sTRUCTURE, "", lib1_gv_rARE, 5, 2, null, "\xE5\xBB\xBA\xE9\x80\xA0\xE4\xB8\x80\xE4\xB8\xAA\xE6\x9C\xBA\xE5\xBA\x93\xE3\x80\x82 \xE6\xAF\x8F\xE5\x9B\x9E\xE5\x90\x88\xE7\x94\x9F\xE4\xBA\xA7\xE4\xB8\x80\xE4\xB8\xAA\xE6\x80\xA8\xE7\x81\xB5\xE6\x88\x98\xE6\x9C\xBA\xE3\x80\x82", "Assets\\Textures\\btn-building-nova-starport.dds", SoundLink("Starport_Land", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DEFAULT, lib1_gt_EffectSecretHangar);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UnnaturalExperimentsUncollectible_Init () {
    lib1_gt_UnnaturalExperimentsUncollectible = TriggerCreate("lib1_gt_UnnaturalExperimentsUncollectible_Func");
    TriggerAddEventMapInit(lib1_gt_UnnaturalExperimentsUncollectible);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Physics Lab
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectPhysicsLab_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unitgroup lv_possible_targets;
    unit lv_structure;
    int lv_count;

    // Automatic Variable Declarations
    unitgroup autoC7DDFDA7_g;
    int autoC7DDFDA7_u;
    unitgroup autoF2A44FEE_g;
    int autoF2A44FEE_u;
    unitgroup autoF9279CC6_g;
    int autoF9279CC6_u;
    unitgroup auto693A55AE_g;
    int auto693A55AE_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();
    lv_possible_targets = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    autoC7DDFDA7_g = UnitGroup("Factory", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC7DDFDA7_u = UnitGroupCount(autoC7DDFDA7_g, c_unitCountAll);
    for (;; autoC7DDFDA7_u -= 1) {
        lv_structure = UnitGroupUnitFromEnd(autoC7DDFDA7_g, autoC7DDFDA7_u);
        if (lv_structure == null) { break; }
        if ((UnitAddOnChild(lv_structure, 0) == null)) {
            UnitGroupAdd(lv_possible_targets, lv_structure);
        }

    }
    autoF2A44FEE_g = UnitGroup("FactoryVulture", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF2A44FEE_u = UnitGroupCount(autoF2A44FEE_g, c_unitCountAll);
    for (;; autoF2A44FEE_u -= 1) {
        lv_structure = UnitGroupUnitFromEnd(autoF2A44FEE_g, autoF2A44FEE_u);
        if (lv_structure == null) { break; }
        if ((UnitAddOnChild(lv_structure, 0) == null)) {
            UnitGroupAdd(lv_possible_targets, lv_structure);
        }

    }
    autoF9279CC6_g = UnitGroup("Starport", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF9279CC6_u = UnitGroupCount(autoF9279CC6_g, c_unitCountAll);
    for (;; autoF9279CC6_u -= 1) {
        lv_structure = UnitGroupUnitFromEnd(autoF9279CC6_g, autoF9279CC6_u);
        if (lv_structure == null) { break; }
        if ((UnitAddOnChild(lv_structure, 0) == null)) {
            UnitGroupAdd(lv_possible_targets, lv_structure);
        }

    }
    auto693A55AE_g = UnitGroup("StarportSecretHangar", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto693A55AE_u = UnitGroupCount(auto693A55AE_g, c_unitCountAll);
    for (;; auto693A55AE_u -= 1) {
        lv_structure = UnitGroupUnitFromEnd(auto693A55AE_g, auto693A55AE_u);
        if (lv_structure == null) { break; }
        if ((UnitAddOnChild(lv_structure, 0) == null)) {
            UnitGroupAdd(lv_possible_targets, lv_structure);
        }

    }
    lv_structure = UnitGroupRandomUnit(lv_possible_targets, c_unitCountAlive);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhysicsLab", c_unitCreateIgnorePlacement, lv_player, PointWithOffset(UnitGetPosition(lv_structure), 2.5, -0.5));
    UnitSetCustomValue(lv_structure, 0, (UnitGetCustomValue(lv_structure, 0) + 8.0));
    Wait(1.0, c_timeGame);
    UnitIssueOrder(lv_structure, Order(AbilityCommand("que5", 0)), c_orderQueueReplace);
    UnitIssueOrder(lv_structure, Order(AbilityCommand("que5", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectPhysicsLab_Init () {
    lib1_gt_EffectPhysicsLab = TriggerCreate("lib1_gt_EffectPhysicsLab_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Moebius
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectMoebius_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    int lv_index;

    // Automatic Variable Declarations
    int auto6B3C72C0_ae;
    const int auto6B3C72C0_ai = 1;
    int auto200DC1F8_ae;
    const int auto200DC1F8_ai = 1;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto6B3C72C0_ae = lib1_gf_TopofHand(lv_player);
    lv_index = 0;
    for ( ; ( (auto6B3C72C0_ai >= 0 && lv_index <= auto6B3C72C0_ae) || (auto6B3C72C0_ai < 0 && lv_index >= auto6B3C72C0_ae) ) ; lv_index += auto6B3C72C0_ai ) {
        if (((lib1_gv_player[lv_player].lv_hand.lv_card[lv_index].lv_subtype == "Hybrid") || (lib1_gv_player[lv_player].lv_hand.lv_card[lv_index].lv_subtype == "Void"))) {
            lib1_gf_SetHandCardGasCost(lv_player, lv_index, MaxI((lib1_gv_player[lv_player].lv_hand.lv_card[lv_index].lv_gas - 1), 0));
        }

    }
    auto200DC1F8_ae = lib1_gf_TopofDeck(lv_player);
    lv_index = 0;
    for ( ; ( (auto200DC1F8_ai >= 0 && lv_index <= auto200DC1F8_ae) || (auto200DC1F8_ai < 0 && lv_index >= auto200DC1F8_ae) ) ; lv_index += auto200DC1F8_ai ) {
        if (((lib1_gv_player[lv_player].lv_deck.lv_card[lv_index].lv_subtype == "Hybrid") || (lib1_gv_player[lv_player].lv_deck.lv_card[lv_index].lv_subtype == "Void"))) {
            lib1_gv_player[lv_player].lv_deck.lv_card[lv_index].lv_gas = MaxI((lib1_gv_player[lv_player].lv_deck.lv_card[lv_index].lv_gas - 1), 0);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectMoebius_Init () {
    lib1_gt_EffectMoebius = TriggerCreate("lib1_gt_EffectMoebius_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Terrazine Canister
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectTerrazineCanister_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_GenerateCardforHand(lv_player, lib1_gf_GetCardIDByName("Spectre Cell"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectTerrazineCanister_Init () {
    lib1_gt_EffectTerrazineCanister = TriggerCreate("lib1_gt_EffectTerrazineCanister_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Loaded Valkyrie
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectLoadedValkyrie_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;
    int lv_unit_count;

    // Automatic Variable Declarations
    unitgroup autoD4BB1CB3_g;
    int autoD4BB1CB3_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    autoD4BB1CB3_g = lv_units_created;
    autoD4BB1CB3_u = UnitGroupCount(autoD4BB1CB3_g, c_unitCountAll);
    for (;; autoD4BB1CB3_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoD4BB1CB3_g, autoD4BB1CB3_u);
        if (lv_unit == null) { break; }
        UnitBehaviorRemove(lv_unit, "WaitingToMoveOut", 1);
        lib1_gf_CreateCargoUnitsWithStatTracking(8, "Marine", lv_unit);
        UnitGroupAddUnitGroup(lib1_gv_units_from_card[lv_card_id], UnitCargoLastCreatedGroup());
        UnitGroupAddUnitGroup(lib1_gv_aggressive_units, UnitCargoLastCreatedGroup());
        UnitBehaviorAdd(lv_unit, "WaitingToMoveOut", lv_unit, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectLoadedValkyrie_Init () {
    lib1_gt_EffectLoadedValkyrie = TriggerCreate("lib1_gt_EffectLoadedValkyrie_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Protoss Relic Card
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectProtossRelicCard_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_GenerateCardforHand(lv_player, lib1_gf_GetCardIDByName("Defensive Matrix"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectProtossRelicCard_Init () {
    lib1_gt_EffectProtossRelicCard = TriggerCreate("lib1_gt_EffectProtossRelicCard_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Protoss Relic Cost
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectProtossRelicCost_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    int lv_index;

    // Automatic Variable Declarations
    int autoA6A2325B_ae;
    const int autoA6A2325B_ai = 1;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    autoA6A2325B_ae = lib1_gf_TopofHand(lv_player);
    lv_index = 0;
    for ( ; ( (autoA6A2325B_ai >= 0 && lv_index <= autoA6A2325B_ae) || (autoA6A2325B_ai < 0 && lv_index >= autoA6A2325B_ae) ) ; lv_index += autoA6A2325B_ai ) {
        lib1_gf_AddtoHandCardCost(lv_player, lv_index, -1, 0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectProtossRelicCost_Init () {
    lib1_gt_EffectProtossRelicCost = TriggerCreate("lib1_gt_EffectProtossRelicCost_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Moebius Search Crew
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectMoebiusSearchCrew_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    int lv_discard_index;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lv_discard_index = lib1_gf_RandomDiscardCardWithBuried(lv_player);
    if ((lv_discard_index >= 0)) {
        lib1_gf_ReturnCardFromDiscardtoHand(lv_player, lv_discard_index);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectMoebiusSearchCrew_Init () {
    lib1_gt_EffectMoebiusSearchCrew = TriggerCreate("lib1_gt_EffectMoebiusSearchCrew_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Dig For Artifacts
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectDigForArtifacts_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    int lv_discard_index;
    int lv_count;

    // Automatic Variable Declarations
    const int autoE9CF79CF_ae = 3;
    const int autoE9CF79CF_ai = 1;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lv_count = 1;
    for ( ; ( (autoE9CF79CF_ai >= 0 && lv_count <= autoE9CF79CF_ae) || (autoE9CF79CF_ai < 0 && lv_count >= autoE9CF79CF_ae) ) ; lv_count += autoE9CF79CF_ai ) {
        lv_discard_index = lib1_gf_RandomDiscardCardWithBuried(lv_player);
        if ((lv_discard_index >= 0)) {
            lib1_gf_ReturnCardFromDiscardtoHand(lv_player, lv_discard_index);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectDigForArtifacts_Init () {
    lib1_gt_EffectDigForArtifacts = TriggerCreate("lib1_gt_EffectDigForArtifacts_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Old Psi Disruptor
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectOldPsiDisruptor_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_BuildStructure(lv_player, lv_card_id, "SCV", AbilityCommand("TerranBuild", 7), "PsiDisruptor", true, -1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectOldPsiDisruptor_Init () {
    lib1_gt_EffectOldPsiDisruptor = TriggerCreate("lib1_gt_EffectOldPsiDisruptor_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Defensive Matrix
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectDefensiveMatrix_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    int lv_count;

    // Automatic Variable Declarations
    const int auto2687F772_ae = 6;
    const int auto2687F772_ai = 1;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lv_count = 1;
    for ( ; ( (auto2687F772_ai >= 0 && lv_count <= auto2687F772_ae) || (auto2687F772_ai < 0 && lv_count >= auto2687F772_ae) ) ; lv_count += auto2687F772_ai ) {
        UnitCreate(1, "ScienceVessel", 0, lv_player, RegionRandomPoint(lib1_gv_player[lv_player].lv_spawn_region), libNtve_gf_RandomAngle());
        UnitBehaviorAdd(UnitLastCreated(), "Caster", UnitLastCreated(), 1);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("DefensiveMatrixTarget", 0), lib1_gf_ToughestTargetForBuff(lv_player, UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterSummoned - 32))), true)), c_orderQueueReplace);
        lib1_gf_IssueLeaveOrders(UnitLastCreated(), c_orderQueueAddToEnd);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectDefensiveMatrix_Init () {
    lib1_gt_EffectDefensiveMatrix = TriggerCreate("lib1_gt_EffectDefensiveMatrix_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Secret Hangar
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectSecretHangar_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_BuildStructure(lv_player, lv_card_id, "SCV", AbilityCommand("TerranBuild", 14), "StarportSecretHangar", false, -1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectSecretHangar_Init () {
    lib1_gt_EffectSecretHangar = TriggerCreate("lib1_gt_EffectSecretHangar_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Narud's Creations
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectNarudsCreations_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    while ((lib1_gf_TopofHand(lv_player) < (lib1_gf_HandLimit(lv_player) - 1))) {
        lib1_gf_GenerateCardforHand(lv_player, lib1_gf_GetRandomCardIDWithSubtype("Hybrid", true));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectNarudsCreations_Init () {
    lib1_gt_EffectNarudsCreations = TriggerCreate("lib1_gt_EffectNarudsCreations_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Interference Matrix
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectInterferenceMatrix_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    int lv_count;

    // Automatic Variable Declarations
    const int autoAAA70C12_ae = 3;
    const int autoAAA70C12_ai = 1;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lv_count = 1;
    for ( ; ( (autoAAA70C12_ai >= 0 && lv_count <= autoAAA70C12_ae) || (autoAAA70C12_ai < 0 && lv_count >= autoAAA70C12_ae) ) ; lv_count += autoAAA70C12_ai ) {
        UnitCreate(1, "Raven", 0, lv_player, RegionRandomPoint(lib1_gv_player[lv_player].lv_spawn_region), libNtve_gf_RandomAngle());
        UnitBehaviorAdd(UnitLastCreated(), "Caster", UnitLastCreated(), 1);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("ScramblerMissileFromCard", 0), lib1_gf_ToughestEnemyTargetForHardRemovalOrFilters(lv_player, UnitFilter((1 << c_targetFilterMechanical) | (1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterStunned - 32))), UnitFilter((1 << c_targetFilterPsionic) | (1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterStunned - 32))))), c_orderQueueReplace);
        lib1_gf_IssueLeaveOrders(UnitLastCreated(), c_orderQueueAddToEnd);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectInterferenceMatrix_Init () {
    lib1_gt_EffectInterferenceMatrix = TriggerCreate("lib1_gt_EffectInterferenceMatrix_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Egon Stetmann
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectEgonStetmann_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup autoCD5E573B_g;
    int autoCD5E573B_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    autoCD5E573B_g = lv_units_created;
    autoCD5E573B_u = UnitGroupCount(autoCD5E573B_g, c_unitCountAll);
    for (;; autoCD5E573B_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoCD5E573B_g, autoCD5E573B_u);
        if (lv_unit == null) { break; }
        UnitBehaviorAdd(lv_unit, "ScientificGenius", lv_unit, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectEgonStetmann_Init () {
    lib1_gt_EffectEgonStetmann = TriggerCreate("lib1_gt_EffectEgonStetmann_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Stetmann, Addict
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectStetmannAddict_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup autoAC5C61FC_g;
    int autoAC5C61FC_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    autoAC5C61FC_g = lv_units_created;
    autoAC5C61FC_u = UnitGroupCount(autoAC5C61FC_g, c_unitCountAll);
    for (;; autoAC5C61FC_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoAC5C61FC_g, autoAC5C61FC_u);
        if (lv_unit == null) { break; }
        UnitBehaviorAdd(lv_unit, "TerrazineAddict", lv_unit, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectStetmannAddict_Init () {
    lib1_gt_EffectStetmannAddict = TriggerCreate("lib1_gt_EffectStetmannAddict_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Moebius Hybrid
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectMoebiusHybrid_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    bool lv_channel_enabled;
    unit lv_target;
    unit lv_unit;
    int lv_count;

    // Automatic Variable Declarations
    unitgroup auto9F044888_g;
    int auto9F044888_u;
    const int auto70BF6AC8_ae = 5;
    const int auto70BF6AC8_ai = 1;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lv_channel_enabled = lib1_gv_current_channel_enabled;
    if ((lv_channel_enabled == true)) {
        auto9F044888_g = lv_units_created;
        auto9F044888_u = UnitGroupCount(auto9F044888_g, c_unitCountAll);
        for (;; auto9F044888_u -= 1) {
            lv_unit = UnitGroupUnitFromEnd(auto9F044888_g, auto9F044888_u);
            if (lv_unit == null) { break; }
            lv_count = 1;
            for ( ; ( (auto70BF6AC8_ai >= 0 && lv_count <= auto70BF6AC8_ae) || (auto70BF6AC8_ai < 0 && lv_count >= auto70BF6AC8_ae) ) ; lv_count += auto70BF6AC8_ai ) {
                Wait(0.2, c_timeGame);
                lv_target = lib1_gf_BestTargetforSplash(lv_player, UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 1.5, false);
                if ((lv_target != null)) {
                    if ((UnitHasBehavior2(lv_unit, "WaitingToMoveOut") == true)) {
                        UnitBehaviorRemove(lv_unit, "WaitingToMoveOut", c_unitBehaviorCountAll);
                        UnitBehaviorAdd(lv_unit, "CasterWaitingToMoveOut", lv_unit, 1);
                    }

                    UnitIssueOrder(lv_unit, OrderTargetingUnit(AbilityCommand("SeekerMissileMoebius", 0), lv_target), c_orderQueueAddToFront);
                }

            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectMoebiusHybrid_Init () {
    lib1_gt_EffectMoebiusHybrid = TriggerCreate("lib1_gt_EffectMoebiusHybrid_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Behemoth-I Cannons
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectBehemothICannons_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;
    int lv_count;

    // Automatic Variable Declarations
    const int auto4495C3EE_ae = 2;
    const int auto4495C3EE_ai = 1;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lv_count = 1;
    for ( ; ( (auto4495C3EE_ai >= 0 && lv_count <= auto4495C3EE_ae) || (auto4495C3EE_ai < 0 && lv_count >= auto4495C3EE_ae) ) ; lv_count += auto4495C3EE_ai ) {
        UnitCreate(1, "Hyperion", 0, lv_player, RegionRandomPoint(lib1_gv_player[lv_player].lv_spawn_region), libNtve_gf_RandomAngle());
        UnitBehaviorAdd(UnitLastCreated(), "Caster", UnitLastCreated(), 1);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("YamatoGunHyperion", 0), lib1_gf_ToughestEnemyTargetForHardRemoval(lv_player, UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))))), c_orderQueueReplace);
        lib1_gf_IssueLeaveOrders(UnitLastCreated(), c_orderQueueAddToEnd);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectBehemothICannons_Init () {
    lib1_gt_EffectBehemothICannons = TriggerCreate("lib1_gt_EffectBehemothICannons_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Behemoth-II Cannons
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectBehemothIICannons_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;
    int lv_count;

    // Automatic Variable Declarations
    const int auto1DFB7593_ae = 2;
    const int auto1DFB7593_ai = 1;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lv_count = 1;
    for ( ; ( (auto1DFB7593_ai >= 0 && lv_count <= auto1DFB7593_ae) || (auto1DFB7593_ai < 0 && lv_count >= auto1DFB7593_ae) ) ; lv_count += auto1DFB7593_ai ) {
        UnitCreate(1, "Hyperion", 0, lv_player, RegionRandomPoint(lib1_gv_player[lv_player].lv_spawn_region), libNtve_gf_RandomAngle());
        UnitBehaviorAdd(UnitLastCreated(), "Caster", UnitLastCreated(), 1);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("YamatoGunHyperion", 0), lib1_gf_MostExpensiveStructureforRemoval(lv_player)), c_orderQueueReplace);
        lib1_gf_IssueLeaveOrders(UnitLastCreated(), c_orderQueueAddToEnd);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectBehemothIICannons_Init () {
    lib1_gt_EffectBehemothIICannons = TriggerCreate("lib1_gt_EffectBehemothIICannons_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Laboratory Supplies Make Cards
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectLaboratorySuppliesMakeCards_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_GenerateCardforHand(lv_player, lib1_gf_GetCardIDByName("Interference Matrix"));
    lib1_gf_GenerateCardforHand(lv_player, lib1_gf_GetCardIDByName("Irradiate"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectLaboratorySuppliesMakeCards_Init () {
    lib1_gt_EffectLaboratorySuppliesMakeCards = TriggerCreate("lib1_gt_EffectLaboratorySuppliesMakeCards_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Laboratory Supplies Build
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectLaboratorySuppliesBuild_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_BuildStructure(lv_player, lv_card_id, "SCV", AbilityCommand("TerranBuild", 17), "SupplyDepotLab", false, 1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectLaboratorySuppliesBuild_Init () {
    lib1_gt_EffectLaboratorySuppliesBuild = TriggerCreate("lib1_gt_EffectLaboratorySuppliesBuild_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Cloaked Airstrike
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectCloakedAirstrike_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup autoA4328F74_g;
    int autoA4328F74_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    autoA4328F74_g = lv_units_created;
    autoA4328F74_u = UnitGroupCount(autoA4328F74_g, c_unitCountAll);
    for (;; autoA4328F74_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoA4328F74_g, autoA4328F74_u);
        if (lv_unit == null) { break; }
        UnitIssueOrder(lv_unit, Order(AbilityCommand("BansheeCloak", 0)), c_orderQueueAddToFront);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectCloakedAirstrike_Init () {
    lib1_gt_EffectCloakedAirstrike = TriggerCreate("lib1_gt_EffectCloakedAirstrike_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Underground Base
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectUndergroundBase_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_BuildStructure(lv_player, lv_card_id, "SCV", AbilityCommand("TerranBuild", 6), "Bunker", true, -1);
    lib1_gf_GenerateCardtoTopofDeck(lv_player, lib1_gf_GetCardIDByName("Secret Hangar"));
    lib1_gf_ShuffleDeck(lv_player);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectUndergroundBase_Init () {
    lib1_gt_EffectUndergroundBase = TriggerCreate("lib1_gt_EffectUndergroundBase_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Explosive Mutagen
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectExplosiveMutagen_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    int lv_top_of_deck;
    int lv_deck_index;
    int lv_count_discarded;
    int lv_count;

    // Automatic Variable Declarations
    const int auto72CABB32_ae = 0;
    const int auto72CABB32_ai = -1;
    int auto9FC5DDAD_ae;
    const int auto9FC5DDAD_ai = 1;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lv_top_of_deck = lib1_gf_TopofDeck(lv_player);
    if ((lv_top_of_deck >= 0)) {
        lv_deck_index = lv_top_of_deck;
        for ( ; ( (auto72CABB32_ai >= 0 && lv_deck_index <= auto72CABB32_ae) || (auto72CABB32_ai < 0 && lv_deck_index >= auto72CABB32_ae) ) ; lv_deck_index += auto72CABB32_ai ) {
            if ((lib1_gv_player[lv_player].lv_deck.lv_card[lv_deck_index].lv_unit_count[1] == 0) && ((lib1_gv_player[lv_player].lv_deck.lv_card[lv_deck_index].lv_unit_type[0] == "Zergling") || (lib1_gv_player[lv_player].lv_deck.lv_card[lv_deck_index].lv_unit_type[0] == "ZerglingBurrowed") || (lib1_gv_player[lv_player].lv_deck.lv_card[lv_deck_index].lv_unit_type[0] == "ZerglingFastBurrowed") || (lib1_gv_player[lv_player].lv_deck.lv_card[lv_deck_index].lv_unit_type[0] == "ZerglingFast") || (lib1_gv_player[lv_player].lv_deck.lv_card[lv_deck_index].lv_unit_type[0] == "ZerglingLeapingBurrowed") || (lib1_gv_player[lv_player].lv_deck.lv_card[lv_deck_index].lv_unit_type[0] == "ZerglingLeaping") || (lib1_gv_player[lv_player].lv_deck.lv_card[lv_deck_index].lv_unit_type[0] == "ZerglingSwarmerBurrowed") || (lib1_gv_player[lv_player].lv_deck.lv_card[lv_deck_index].lv_unit_type[0] == "ZerglingSwarmer") || (lib1_gv_player[lv_player].lv_deck.lv_card[lv_deck_index].lv_unit_type[0] == "ZerglingHero") || (lib1_gv_player[lv_player].lv_deck.lv_card[lv_deck_index].lv_unit_type[0] == "ZerglingHeroBurrowed"))) {
                lib1_gf_DiscardCardFromDecktoDiscard(lv_player, lv_deck_index);
                lv_count_discarded = (lv_count_discarded + 1);
            }

        }
        if ((lv_count_discarded >= 1)) {
            auto9FC5DDAD_ae = lv_count_discarded;
            lv_count = 1;
            for ( ; ( (auto9FC5DDAD_ai >= 0 && lv_count <= auto9FC5DDAD_ae) || (auto9FC5DDAD_ai < 0 && lv_count >= auto9FC5DDAD_ae) ) ; lv_count += auto9FC5DDAD_ai ) {
                lib1_gf_GenerateCardtoTopofDeck(lv_player, lib1_gf_GetRandomCollectibleCardIDWithOnlyUnitType("Baneling", "BanelingFast", "BanelingStructureKiller"));
            }
            lib1_gf_ShuffleDeck(lv_player);
        }

    }

    if ((lv_count_discarded == 1)) {
        UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaChat, (StringExternal("Param/Value/lib_1_9B0B616A") + IntToText(lv_count_discarded) + StringExternal("Param/Value/lib_1_78E7ACF2")));
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaChat, (StringExternal("Param/Value/lib_1_9B157784") + IntToText(lv_count_discarded) + StringExternal("Param/Value/lib_1_2BA2A991")));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectExplosiveMutagen_Init () {
    lib1_gt_EffectExplosiveMutagen = TriggerCreate("lib1_gt_EffectExplosiveMutagen_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Bloated Devourer
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectBloatedDevourer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;
    int lv_unit_count;

    // Automatic Variable Declarations
    unitgroup autoDCCB3CF1_g;
    int autoDCCB3CF1_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    autoDCCB3CF1_g = lv_units_created;
    autoDCCB3CF1_u = UnitGroupCount(autoDCCB3CF1_g, c_unitCountAll);
    for (;; autoDCCB3CF1_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoDCCB3CF1_g, autoDCCB3CF1_u);
        if (lv_unit == null) { break; }
        UnitBehaviorRemove(lv_unit, "WaitingToMoveOut", 1);
        lib1_gf_CreateCargoUnitsWithStatTracking(8, "Baneling", lv_unit);
        UnitGroupAddUnitGroup(lib1_gv_units_from_card[lv_card_id], UnitCargoLastCreatedGroup());
        UnitGroupAddUnitGroup(lib1_gv_aggressive_units, UnitCargoLastCreatedGroup());
        UnitBehaviorAdd(lv_unit, "WaitingToMoveOut", lv_unit, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectBloatedDevourer_Init () {
    lib1_gt_EffectBloatedDevourer = TriggerCreate("lib1_gt_EffectBloatedDevourer_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Swelling Eggs
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectSwellingEggs_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    int lv_attempt;
    int lv_hand_index;
    int lv_possible_hand_index_count;
    int[lib1_gv_bOOSTED_HAND_LIMIT + 1] lv_possible_hand_index;

    // Automatic Variable Declarations
    const int autoB4AEEDBD_ae = 2;
    const int autoB4AEEDBD_ai = 1;
    int autoF3CC621F_ae;
    const int autoF3CC621F_ai = 1;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lv_attempt = 1;
    for ( ; ( (autoB4AEEDBD_ai >= 0 && lv_attempt <= autoB4AEEDBD_ae) || (autoB4AEEDBD_ai < 0 && lv_attempt >= autoB4AEEDBD_ae) ) ; lv_attempt += autoB4AEEDBD_ai ) {
        lv_possible_hand_index_count = 0;
        autoF3CC621F_ae = lib1_gf_TopofHand(lv_player);
        lv_hand_index = 0;
        for ( ; ( (autoF3CC621F_ai >= 0 && lv_hand_index <= autoF3CC621F_ae) || (autoF3CC621F_ai < 0 && lv_hand_index >= autoF3CC621F_ae) ) ; lv_hand_index += autoF3CC621F_ai ) {
            if (((lib1_gv_player[lv_player].lv_hand.lv_card[lv_hand_index].lv_mineral + lib1_gv_player[lv_player].lv_hand.lv_card[lv_hand_index].lv_gas) <= 4) && (lib1_gv_player[lv_player].lv_hand.lv_card[lv_hand_index].lv_locked_by_player == 0) && ((lib1_gv_player[lv_player].lv_hand.lv_card[lv_hand_index].lv_type == lib1_gv_tACTICAL) || (lib1_gv_player[lv_player].lv_hand.lv_card[lv_hand_index].lv_type == lib1_gv_aGGRESSIVE) || (lib1_gv_player[lv_player].lv_hand.lv_card[lv_hand_index].lv_type == lib1_gv_dEFENSIVE))) {
                lv_possible_hand_index[lv_possible_hand_index_count] = lv_hand_index;
                lv_possible_hand_index_count = (lv_possible_hand_index_count + 1);
            }

        }
        if ((lv_possible_hand_index_count >= 1)) {
            lib1_gf_PlayHandCardFromEffect(lv_player, lv_possible_hand_index[RandomInt(0, (lv_possible_hand_index_count - 1))], true);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectSwellingEggs_Init () {
    lib1_gt_EffectSwellingEggs = TriggerCreate("lib1_gt_EffectSwellingEggs_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Ominous Egg
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectOminousEgg_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    int lv_hand_index;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lv_hand_index = lib1_gf_MostExpensiveHandCard(lv_player, lib1_gv_uNIT, false, false);
    if ((lv_hand_index >= 0)) {
        lib1_gf_PlayHandCardFromEffect(lv_player, lv_hand_index, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectOminousEgg_Init () {
    lib1_gt_EffectOminousEgg = TriggerCreate("lib1_gt_EffectOminousEgg_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Mysterious Egg
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectMysteriousEgg_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    int lv_hand_index;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lv_hand_index = lib1_gf_CheapestHandCard(lv_player, lib1_gv_uNIT, false, -1);
    if ((lv_hand_index >= 0)) {
        lib1_gf_PlayHandCardFromEffect(lv_player, lv_hand_index, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectMysteriousEgg_Init () {
    lib1_gt_EffectMysteriousEgg = TriggerCreate("lib1_gt_EffectMysteriousEgg_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Hybrid Reaver
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectHybridReaver_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    bool lv_channel_enabled;
    unit lv_unit;
    unit lv_target_structure;
    point lv_target_structure_position;

    // Automatic Variable Declarations
    unitgroup auto6B1AB0FA_g;
    int auto6B1AB0FA_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lv_channel_enabled = lib1_gv_current_channel_enabled;
    lv_target_structure = lib1_gf_RandomTargetForHardRemoval(lv_player, UnitFilter((1 << c_targetFilterStructure), 0, 0, (1 << (c_targetFilterMapBoss - 32))));
    if ((lv_target_structure != null) && (lv_channel_enabled == true)) {
        lv_target_structure_position = UnitGetPosition(lv_target_structure);
        UnitKill(lv_target_structure);
        auto6B1AB0FA_g = lv_units_created;
        auto6B1AB0FA_u = UnitGroupCount(auto6B1AB0FA_g, c_unitCountAll);
        for (;; auto6B1AB0FA_u -= 1) {
            lv_unit = UnitGroupUnitFromEnd(auto6B1AB0FA_g, auto6B1AB0FA_u);
            if (lv_unit == null) { break; }
            UnitSetPosition(lv_unit, lv_target_structure_position, false);
            UnitBehaviorRemove(lv_unit, "WaitingToMoveOut", 1);
            UnitBehaviorRemove(lv_unit, "Waiting1Turn", 1);
            UnitBehaviorRemove(lv_unit, "Waiting2Turns", 1);
            UnitGroupRemove(lib1_gv_one_turn_wait_units, lv_unit);
            UnitGroupRemove(lib1_gv_two_turn_wait_units, lv_unit);
            lib1_gf_IssueDefaultOrders(lv_unit);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectHybridReaver_Init () {
    lib1_gt_EffectHybridReaver = TriggerCreate("lib1_gt_EffectHybridReaver_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Hybrid Behemoth
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectHybridBehemoth_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    bool lv_channel_enabled;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto307005F9_g;
    int auto307005F9_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lv_channel_enabled = lib1_gv_current_channel_enabled;
    if ((lv_channel_enabled == true)) {
        auto307005F9_g = lv_units_created;
        auto307005F9_u = UnitGroupCount(auto307005F9_g, c_unitCountAll);
        for (;; auto307005F9_u -= 1) {
            lv_unit = UnitGroupUnitFromEnd(auto307005F9_g, auto307005F9_u);
            if (lv_unit == null) { break; }
            UnitBehaviorAdd(lv_unit, "HybridPlating", lv_unit, 1);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectHybridBehemoth_Init () {
    lib1_gt_EffectHybridBehemoth = TriggerCreate("lib1_gt_EffectHybridBehemoth_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Aberration
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectAberration_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    bool lv_channel_enabled;
    int lv_count;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup autoDD95ED6E_g;
    int autoDD95ED6E_u;
    int autoEF9769DE_ae;
    const int autoEF9769DE_ai = 1;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lv_channel_enabled = lib1_gv_current_channel_enabled;
    autoDD95ED6E_g = lv_units_created;
    autoDD95ED6E_u = UnitGroupCount(autoDD95ED6E_g, c_unitCountAll);
    for (;; autoDD95ED6E_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoDD95ED6E_g, autoDD95ED6E_u);
        if (lv_unit == null) { break; }
        autoEF9769DE_ae = lib1_gv_player[lv_player].lv_infested_unit_lost;
        lv_count = 1;
        for ( ; ( (autoEF9769DE_ai >= 0 && lv_count <= autoEF9769DE_ae) || (autoEF9769DE_ai < 0 && lv_count >= autoEF9769DE_ae) ) ; lv_count += autoEF9769DE_ai ) {
            UnitBehaviorAdd(lv_unit, "AberrantStrength", lv_unit, 1);
        }
        UnitSetPropertyFixed(lv_unit, c_unitPropLifePercent, 100.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectAberration_Init () {
    lib1_gt_EffectAberration = TriggerCreate("lib1_gt_EffectAberration_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Abathur's Evolution
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectAbathursEvolution_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    int[lib1_gv_mAX_CARD_ID + 1] lv_cards_played;
    int lv_deck_index;
    bool lv_already_played;
    int lv_played_index;
    int lv_played_count;
    string lv_output_string;

    // Automatic Variable Declarations
    const int auto0C3CB1B8_ae = 0;
    const int auto0C3CB1B8_ai = -1;
    int autoED0BE6FE_ae;
    const int autoED0BE6FE_ai = 1;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();
    for (init_i = 0; init_i <= lib1_gv_mAX_CARD_ID; init_i += 1) {
        lv_cards_played[init_i] = -1;
    }
    lv_output_string = "";

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lv_deck_index = lib1_gf_TopofDeck(lv_player);
    for ( ; ( (auto0C3CB1B8_ai >= 0 && lv_deck_index <= auto0C3CB1B8_ae) || (auto0C3CB1B8_ai < 0 && lv_deck_index >= auto0C3CB1B8_ae) ) ; lv_deck_index += auto0C3CB1B8_ai ) {
        if ((lib1_gv_player[lv_player].lv_deck.lv_card[lv_deck_index].lv_subtype == lib1_gv_eVOLUTION)) {
            lv_already_played = false;
            autoED0BE6FE_ae = lv_played_count;
            lv_played_index = 0;
            for ( ; ( (autoED0BE6FE_ai >= 0 && lv_played_index <= autoED0BE6FE_ae) || (autoED0BE6FE_ai < 0 && lv_played_index >= autoED0BE6FE_ae) ) ; lv_played_index += autoED0BE6FE_ai ) {
                if ((lib1_gv_player[lv_player].lv_deck.lv_card[lv_deck_index].lv_id == lv_cards_played[lv_played_index])) {
                    lv_already_played = true;
                    break;
                }

            }
            if ((lv_already_played == false)) {
                if ((lv_played_count > 0)) {
                    lv_output_string = (lv_output_string + ", ");
                }

                lv_output_string = (lv_output_string + lib1_gv_player[lv_player].lv_deck.lv_card[lv_deck_index].lv_name);
                lv_cards_played[lv_played_count] = lib1_gv_player[lv_player].lv_deck.lv_card[lv_deck_index].lv_id;
                lv_played_count = (lv_played_count + 1);
                lib1_gf_PlayDeckCardFromEffect(lv_player, lv_deck_index, true);
            }

        }

    }
    if ((lv_output_string != "")) {
        UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaChat, StringToText(("Abathur's Experiment played: " + lv_output_string)));
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaChat, StringToText("Abathur couldn't find any Evolution cards in your deck to play."));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectAbathursEvolution_Init () {
    lib1_gt_EffectAbathursEvolution = TriggerCreate("lib1_gt_EffectAbathursEvolution_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Broodling Gestation
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectBroodlingGestation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup autoC3258500_g;
    int autoC3258500_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    autoC3258500_g = UnitGroup(null, lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC3258500_u = UnitGroupCount(autoC3258500_g, c_unitCountAll);
    for (;; autoC3258500_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoC3258500_g, autoC3258500_u);
        if (lv_unit == null) { break; }
        UnitBehaviorAdd(lv_unit, "BroodlingGestation", lv_unit, 1);
        UnitBehaviorAdd(lv_unit, "AggressiveMutation", lv_unit, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectBroodlingGestation_Init () {
    lib1_gt_EffectBroodlingGestation = TriggerCreate("lib1_gt_EffectBroodlingGestation_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Mutable
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectMutable_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto8671749B_g;
    int auto8671749B_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto8671749B_g = lv_units_created;
    auto8671749B_u = UnitGroupCount(auto8671749B_g, c_unitCountAll);
    for (;; auto8671749B_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto8671749B_g, auto8671749B_u);
        if (lv_unit == null) { break; }
        if ((lib1_gf_UnitIsPet(lv_unit) == false)) {
            UnitBehaviorAdd(lv_unit, "Mutable", lv_unit, 1);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectMutable_Init () {
    lib1_gt_EffectMutable = TriggerCreate("lib1_gt_EffectMutable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Mutable Morph
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectMutableMorph_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto47C913B9_g;
    int auto47C913B9_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto47C913B9_g = UnitGroup(null, lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto47C913B9_u = UnitGroupCount(auto47C913B9_g, c_unitCountAll);
    for (;; auto47C913B9_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto47C913B9_g, auto47C913B9_u);
        if (lv_unit == null) { break; }
        if ((UnitGroupHasUnit(lib1_gv_mutated_units, lv_unit) == false) && (UnitHasBehavior2(lv_unit, "Mutable") == true)) {
            lib1_gf_IssueMutateOrders(lv_unit);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectMutableMorph_Init () {
    lib1_gt_EffectMutableMorph = TriggerCreate("lib1_gt_EffectMutableMorph_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Mutation Chamber
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectMutationChamber_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_BuildStructure(lv_player, lv_card_id, "Drone", AbilityCommand("ZergBuild", 17), "MutationChamber", false, -1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectMutationChamber_Init () {
    lib1_gt_EffectMutationChamber = TriggerCreate("lib1_gt_EffectMutationChamber_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Mutation Chamber Periodic Effect
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectMutationChamberPeriodicEffect_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unitgroup lv_possible_targets;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup autoF0266FFF_g;
    int autoF0266FFF_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();
    lv_possible_targets = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    autoF0266FFF_g = UnitGroup(null, lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF0266FFF_u = UnitGroupCount(autoF0266FFF_g, c_unitCountAll);
    for (;; autoF0266FFF_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoF0266FFF_g, autoF0266FFF_u);
        if (lv_unit == null) { break; }
        if ((UnitGroupHasUnit(lib1_gv_mutated_units, lv_unit) == false) && ((UnitGetType(lv_unit) == "Roach") || (UnitGetType(lv_unit) == "RoachBurrowed") || (UnitGetType(lv_unit) == "RoachVile") || (UnitGetType(lv_unit) == "RoachVileBurrowed") || (UnitGetType(lv_unit) == "Hydralisk") || (UnitGetType(lv_unit) == "HydraliskBurrowed") || (UnitGetType(lv_unit) == "HydraliskHunterKiller") || (UnitGetType(lv_unit) == "HydraliskHunterKillerBurrowed") || (UnitGetType(lv_unit) == "Mutalisk") || (UnitGetType(lv_unit) == "MutaliskKukulza") || (UnitGetType(lv_unit) == "Corruptor"))) {
            UnitGroupAdd(lv_possible_targets, lv_unit);
        }

    }
    if ((UnitGroupCount(lv_possible_targets, c_unitCountAlive) >= 1)) {
        lib1_gf_IssueMutateOrders(UnitGroupRandomUnit(lv_possible_targets, c_unitCountAlive));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectMutationChamberPeriodicEffect_Init () {
    lib1_gt_EffectMutationChamberPeriodicEffect = TriggerCreate("lib1_gt_EffectMutationChamberPeriodicEffect_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Hybrid Nemesis
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectHybridNemesis_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    bool lv_channel_enabled;
    unit lv_unit;
    unit lv_target;

    // Automatic Variable Declarations
    unitgroup auto49701F55_g;
    int auto49701F55_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lv_channel_enabled = lib1_gv_current_channel_enabled;
    if ((lv_channel_enabled == true)) {
        auto49701F55_g = lv_units_created;
        auto49701F55_u = UnitGroupCount(auto49701F55_g, c_unitCountAll);
        for (;; auto49701F55_u -= 1) {
            lv_unit = UnitGroupUnitFromEnd(auto49701F55_g, auto49701F55_u);
            if (lv_unit == null) { break; }
            UnitBehaviorAdd(lv_unit, "AugmentedAnnihilation", lv_unit, 1);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectHybridNemesis_Init () {
    lib1_gt_EffectHybridNemesis = TriggerCreate("lib1_gt_EffectHybridNemesis_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Void Rift Income Limit Set
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectVoidRiftIncomeLimitSet_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    bool lv_channel_enabled;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lv_channel_enabled = lib1_gv_current_channel_enabled;
    lib1_gv_player[lv_player].lv_resources.lv_max_mineral_income = 6;
    lib1_gv_player[lv_player].lv_resources.lv_max_gas_income = 6;
    lib1_gv_player[lv_player].lv_resources.lv_mineral_income = MinI(lib1_gv_player[lv_player].lv_resources.lv_mineral_income, lib1_gf_MaxMineralIncome(lv_player));
    lib1_gv_player[lv_player].lv_resources.lv_gas_income = MinI(lib1_gv_player[lv_player].lv_resources.lv_gas_income, lib1_gf_MaxGasIncome(lv_player));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectVoidRiftIncomeLimitSet_Init () {
    lib1_gt_EffectVoidRiftIncomeLimitSet = TriggerCreate("lib1_gt_EffectVoidRiftIncomeLimitSet_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Void Rift Gas Boost
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectVoidRiftGasBoost_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    bool lv_channel_enabled;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lv_channel_enabled = lib1_gv_current_channel_enabled;
    if ((lv_channel_enabled == true)) {
        lib1_gv_player[lv_player].lv_resources.lv_gas_income = MinI(lib1_gv_gAS_LIMIT, (lib1_gv_player[lv_player].lv_resources.lv_gas_income + 1));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectVoidRiftGasBoost_Init () {
    lib1_gt_EffectVoidRiftGasBoost = TriggerCreate("lib1_gt_EffectVoidRiftGasBoost_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Piloted Corsair
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectPilotedCorsair_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;
    int lv_unit_count;

    // Automatic Variable Declarations
    unitgroup auto40CA9BB4_g;
    int auto40CA9BB4_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto40CA9BB4_g = lv_units_created;
    auto40CA9BB4_u = UnitGroupCount(auto40CA9BB4_g, c_unitCountAll);
    for (;; auto40CA9BB4_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto40CA9BB4_g, auto40CA9BB4_u);
        if (lv_unit == null) { break; }
        UnitBehaviorRemove(lv_unit, "WaitingToMoveOut", 1);
        lib1_gf_CreateCargoUnitsWithStatTracking(2, "DarkTemplar", lv_unit);
        UnitGroupAddUnitGroup(lib1_gv_units_from_card[lv_card_id], UnitCargoLastCreatedGroup());
        UnitGroupAddUnitGroup(lib1_gv_aggressive_units, UnitCargoLastCreatedGroup());
        UnitBehaviorAdd(lv_unit, "WaitingToMoveOut", lv_unit, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectPilotedCorsair_Init () {
    lib1_gt_EffectPilotedCorsair = TriggerCreate("lib1_gt_EffectPilotedCorsair_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Void Shades
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectVoidShades_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    bool lv_channel_enabled;
    int[3000] lv_possible_opponent;
    int[3000] lv_possible_deck_index;
    int lv_possibility_count;
    int lv_deck_index;
    int lv_enemy_team;
    int lv_opponent;
    int lv_random_choice_1;
    int lv_random_choice_2;

    // Automatic Variable Declarations
    playergroup autoD0158C36_g;
    int autoB64D8C47_ae;
    const int autoB64D8C47_ai = 1;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lv_channel_enabled = lib1_gv_current_channel_enabled;
    if ((lib1_gv_player[lv_player].lv_team == 0)) {
        lv_enemy_team = 1;
    }
    else {
        lv_enemy_team = 0;
    }
    autoD0158C36_g = lib1_gv_team[lv_enemy_team];
    lv_opponent = -1;
    while (true) {
        lv_opponent = PlayerGroupNextPlayer(autoD0158C36_g, lv_opponent);
        if (lv_opponent < 0) { break; }
        autoB64D8C47_ae = lib1_gf_TopofDeck(lv_opponent);
        lv_deck_index = 0;
        for ( ; ( (autoB64D8C47_ai >= 0 && lv_deck_index <= autoB64D8C47_ae) || (autoB64D8C47_ai < 0 && lv_deck_index >= autoB64D8C47_ae) ) ; lv_deck_index += autoB64D8C47_ai ) {
            if (((lib1_gv_player[lv_opponent].lv_deck.lv_card[lv_deck_index].lv_type == lib1_gv_aGGRESSIVE) || (lib1_gv_player[lv_opponent].lv_deck.lv_card[lv_deck_index].lv_type == lib1_gv_tACTICAL) || (lib1_gv_player[lv_opponent].lv_deck.lv_card[lv_deck_index].lv_type == lib1_gv_dEFENSIVE))) {
                lv_possible_opponent[lv_possibility_count] = lv_opponent;
                lv_possible_deck_index[lv_possibility_count] = lv_deck_index;
                lv_possibility_count = (lv_possibility_count + 1);
            }

        }
    }
    if ((lv_possibility_count >= 1)) {
        lv_random_choice_1 = RandomInt(1, (lv_possibility_count - 1));
        lib1_gf_CopyOpponentsDeckCard(lv_player, lv_possible_opponent[lv_random_choice_1], lv_possible_deck_index[lv_random_choice_1], true);
        if ((lv_possibility_count >= 2) && (lv_channel_enabled == true)) {
            lv_random_choice_2 = lv_random_choice_1;
            while ((lv_random_choice_2 == lv_random_choice_1)) {
                lv_random_choice_2 = RandomInt(1, (lv_possibility_count - 1));
            }
            lib1_gf_CopyOpponentsDeckCard(lv_player, lv_possible_opponent[lv_random_choice_2], lv_possible_deck_index[lv_random_choice_2], true);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectVoidShades_Init () {
    lib1_gt_EffectVoidShades = TriggerCreate("lib1_gt_EffectVoidShades_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Hybrid Destroyers
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectHybridDestroyers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    bool lv_channel_enabled;
    unit lv_target;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup autoA4375BAA_g;
    int autoA4375BAA_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lv_channel_enabled = lib1_gv_current_channel_enabled;
    if ((lv_channel_enabled == true)) {
        autoA4375BAA_g = lv_units_created;
        autoA4375BAA_u = UnitGroupCount(autoA4375BAA_g, c_unitCountAll);
        for (;; autoA4375BAA_u -= 1) {
            lv_unit = UnitGroupUnitFromEnd(autoA4375BAA_g, autoA4375BAA_u);
            if (lv_unit == null) { break; }
            lv_target = lib1_gf_RandomStructureForHardRemovalWithCostRestrictions(lv_player, 0, 4);
            if ((lv_target != null)) {
                if ((UnitHasBehavior2(lv_unit, "WaitingToMoveOut") == true)) {
                    UnitBehaviorRemove(lv_unit, "WaitingToMoveOut", c_unitBehaviorCountAll);
                    UnitBehaviorAdd(lv_unit, "CasterWaitingToMoveOut", lv_unit, 1);
                }

                UnitIssueOrder(lv_unit, OrderTargetingUnit(AbilityCommand("HybridDestroyerStructureKill", 0), lv_target), c_orderQueueAddToFront);
            }

        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectHybridDestroyers_Init () {
    lib1_gt_EffectHybridDestroyers = TriggerCreate("lib1_gt_EffectHybridDestroyers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Enduring Stasis Ability
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectEnduringStasisAbility_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_structure;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lv_structure = lib1_gf_MostExpensiveStructureforRemoval(lv_player);
    UnitIssueOrder(lv_structure, Order(AbilityCommand("que5", 0)), c_orderQueueReplace);
    UnitIssueOrder(lv_structure, Order(AbilityCommand("que5", 0)), c_orderQueueReplace);
    UnitIssueOrder(lv_structure, Order(AbilityCommand("que5Addon", 0)), c_orderQueueReplace);
    UnitIssueOrder(lv_structure, Order(AbilityCommand("que5Addon", 0)), c_orderQueueReplace);
    UnitCreate(1, "ArbiterMP", 0, lv_player, RegionRandomPoint(lib1_gv_player[lv_player].lv_spawn_region), libNtve_gf_RandomAngle());
    UnitBehaviorAdd(UnitLastCreated(), "Caster", UnitLastCreated(), 1);
    UnitBehaviorRemove(UnitLastCreated(), "ArbiterMPCloakField", c_unitBehaviorCountAll);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("ArbiterMPStasisFieldStructure", 0), UnitGetPosition(lv_structure)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderSetAutoCast(AbilityCommand("ArbiterMPRecall", 0), false), c_orderQueueAddToFront);
    UnitIssueOrder(UnitLastCreated(), OrderSetAutoCast(AbilityCommand("ArbiterMPStasisField", 0), false), c_orderQueueAddToFront);
    lib1_gf_IssueLeaveOrders(UnitLastCreated(), c_orderQueueAddToEnd);
    lib1_gf_IssueLeaveOrders(UnitLastCreated(), c_orderQueueAddToEnd);
    lib1_gf_IssueLeaveOrders(UnitLastCreated(), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectEnduringStasisAbility_Init () {
    lib1_gt_EffectEnduringStasisAbility = TriggerCreate("lib1_gt_EffectEnduringStasisAbility_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Enduring Stasis Draw
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectEnduringStasisDraw_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_structure;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_GenerateCardforHand(lv_player, lib1_gf_GetCardIDByName("Enduring Stasis"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectEnduringStasisDraw_Init () {
    lib1_gt_EffectEnduringStasisDraw = TriggerCreate("lib1_gt_EffectEnduringStasisDraw_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Karax's Invention
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectKaraxsInvention_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    int lv_discard_index;
    int lv_return_count;
    int lv_unit_type_index_1;
    int lv_unit_type_index_2;

    // Automatic Variable Declarations
    const int auto8D4AE689_ae = 0;
    const int auto8D4AE689_ai = -1;
    const int auto6CECA8C5_ae = lib1_gv_mAX_UNIT_TYPE_PER_CARD;
    const int auto6CECA8C5_ai = 1;
    const int auto62AD3C2F_ae = lib1_gv_mAX_UNIT_TYPE_PER_CARD;
    const int auto62AD3C2F_ai = 1;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lv_discard_index = lib1_gf_TopofDiscard(lv_player);
    for ( ; ( (auto8D4AE689_ai >= 0 && lv_discard_index <= auto8D4AE689_ae) || (auto8D4AE689_ai < 0 && lv_discard_index >= auto8D4AE689_ae) ) ; lv_discard_index += auto8D4AE689_ai ) {
        lv_unit_type_index_1 = 0;
        for ( ; ( (auto6CECA8C5_ai >= 0 && lv_unit_type_index_1 <= auto6CECA8C5_ae) || (auto6CECA8C5_ai < 0 && lv_unit_type_index_1 >= auto6CECA8C5_ae) ) ; lv_unit_type_index_1 += auto6CECA8C5_ai ) {
            if ((UnitTypeTestAttribute(lib1_gv_player[lv_player].lv_new_discard.lv_card[lv_discard_index].lv_unit_type[lv_unit_type_index_1], c_unitAttributeMechanical) == true)) {
                lv_unit_type_index_2 = 0;
                for ( ; ( (auto62AD3C2F_ai >= 0 && lv_unit_type_index_2 <= auto62AD3C2F_ae) || (auto62AD3C2F_ai < 0 && lv_unit_type_index_2 >= auto62AD3C2F_ae) ) ; lv_unit_type_index_2 += auto62AD3C2F_ai ) {
                    if ((UnitTypeTestAttribute(lib1_gv_player[lv_player].lv_new_discard.lv_card[lv_discard_index].lv_unit_type[lv_unit_type_index_2], c_unitAttributeMechanical) == true)) {
                        lib1_gv_player[lv_player].lv_new_discard.lv_card[lv_discard_index].lv_unit_count[lv_unit_type_index_2] = (lib1_gv_player[lv_player].lv_new_discard.lv_card[lv_discard_index].lv_unit_count[lv_unit_type_index_2] + 1);
                    }

                }
                lib1_gf_ShuffleDiscardCardIntoDeck(lv_player, lv_discard_index);
                lv_return_count = (lv_return_count + 1);
                break;
            }

        }
    }
    if ((lv_return_count == 0)) {
        UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaChat, StringExternal("Param/Value/lib_1_3253A8EC"));
    }
    else if ((lv_return_count == 1)) {
        lib1_gf_ShuffleDeck(lv_player);
        UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaChat, StringExternal("Param/Value/lib_1_79074CF3"));
    }
    else if (true) {
        lib1_gf_ShuffleDeck(lv_player);
        UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaChat, (StringExternal("Param/Value/lib_1_18C563BE") + IntToText(lv_return_count) + StringExternal("Param/Value/lib_1_0C0BACBA")));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectKaraxsInvention_Init () {
    lib1_gt_EffectKaraxsInvention = TriggerCreate("lib1_gt_EffectKaraxsInvention_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Murderous Ascendance
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectMurderousAscendance_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_sacrificial_target;
    int lv_count;

    // Automatic Variable Declarations
    const int auto7B5BEECF_ae = 4;
    const int auto7B5BEECF_ai = 1;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lv_count = 1;
    for ( ; ( (auto7B5BEECF_ai >= 0 && lv_count <= auto7B5BEECF_ae) || (auto7B5BEECF_ai < 0 && lv_count >= auto7B5BEECF_ae) ) ; lv_count += auto7B5BEECF_ai ) {
        lv_sacrificial_target = null;
        lv_sacrificial_target = lib1_gf_WeakestTargetForHardRemoval(lv_player, UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32)) | (1 << (c_targetFilterSummoned - 32))));
        if ((lv_sacrificial_target != null)) {
            UnitKill(lv_sacrificial_target);
            UnitBehaviorAdd(lib1_gf_ToughestTargetForBuff(lv_player, UnitFilter((1 << c_targetFilterGround) | (1 << c_targetFilterVisible), 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32)) | (1 << (c_targetFilterSummoned - 32))), false), "MurderousAscendance", lib1_gf_ToughestTargetForBuff(lv_player, UnitFilter((1 << c_targetFilterGround) | (1 << c_targetFilterVisible), 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32)) | (1 << (c_targetFilterSummoned - 32))), false), 1);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectMurderousAscendance_Init () {
    lib1_gt_EffectMurderousAscendance = TriggerCreate("lib1_gt_EffectMurderousAscendance_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Hybrid Dominator
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectHybridDominator_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    bool lv_channel_enabled;
    unit lv_target;
    unitgroup lv_targets;
    unit lv_unit;
    int lv_count;
    fixed lv_life;
    fixed lv_shield;
    fixed lv_energy;

    // Automatic Variable Declarations
    const int autoA3E4A3CD_ae = 10;
    const int autoA3E4A3CD_ai = 1;
    unitgroup autoE2D1AC44_g;
    int autoE2D1AC44_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();
    lv_targets = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lv_channel_enabled = lib1_gv_current_channel_enabled;
    if ((lv_channel_enabled == true)) {
        lv_unit = UnitGroupRandomUnit(lv_units_created, c_unitCountAlive);
        if ((UnitHasBehavior2(lv_unit, "WaitingToMoveOut") == true)) {
            UnitBehaviorRemove(lv_unit, "WaitingToMoveOut", c_unitBehaviorCountAll);
            UnitBehaviorAdd(lv_unit, "CasterWaitingToMoveOut", lv_unit, 1);
        }

        lv_count = 1;
        for ( ; ( (autoA3E4A3CD_ai >= 0 && lv_count <= autoA3E4A3CD_ae) || (autoA3E4A3CD_ai < 0 && lv_count >= autoA3E4A3CD_ae) ) ; lv_count += autoA3E4A3CD_ai ) {
            lv_target = null;
            lv_target = lib1_gf_WeakestEnemyTargetForHardRemoval(lv_player, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterSummoned - 32))));
            if ((lv_target != null)) {
                UnitGroupAdd(lv_targets, lv_target);
                lv_life = UnitGetPropertyFixed(lv_target, c_unitPropLife, c_unitPropCurrent);
                lv_energy = UnitGetPropertyFixed(lv_target, c_unitPropEnergy, c_unitPropCurrent);
                lv_shield = UnitGetPropertyFixed(lv_target, c_unitPropShields, c_unitPropCurrent);
                UnitSetOwner(lv_target, lv_player, true);
                UnitSetPropertyFixed(lv_target, c_unitPropLife, lv_life);
                UnitSetPropertyFixed(lv_target, c_unitPropShields, lv_shield);
                UnitSetPropertyFixed(lv_target, c_unitPropEnergy, lv_energy);
                lib1_gf_RemoveAllStunsFromUnit(lv_target);
                if ((UnitHasBehavior2(lv_target, "MineralUpkeep") == true)) {
                    UnitBehaviorRemove(lv_target, "MineralUpkeep", c_unitBehaviorCountAll);
                    UnitBehaviorAdd(lv_target, "MineralUpkeep", lv_target, 1);
                }

                if ((UnitHasBehavior2(lv_target, "GasUpkeep") == true)) {
                    UnitBehaviorRemove(lv_target, "GasUpkeep", c_unitBehaviorCountAll);
                    UnitBehaviorAdd(lv_target, "GasUpkeep", lv_target, 1);
                }

                UnitIssueOrder(lv_unit, OrderTargetingUnit(AbilityCommand("SingleRecall", 0), lv_target), c_orderQueueAddToFront);
            }

        }
    }

    Wait(4.25, c_timeGame);
    autoE2D1AC44_g = lv_targets;
    autoE2D1AC44_u = UnitGroupCount(autoE2D1AC44_g, c_unitCountAll);
    for (;; autoE2D1AC44_u -= 1) {
        lv_target = UnitGroupUnitFromEnd(autoE2D1AC44_g, autoE2D1AC44_u);
        if (lv_target == null) { break; }
        lib1_gf_IssueDefaultOrders(lv_target);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectHybridDominator_Init () {
    lib1_gt_EffectHybridDominator = TriggerCreate("lib1_gt_EffectHybridDominator_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Ma'lash Initialization
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectMalashInitialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto6A3106DE_g;
    int auto6A3106DE_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto6A3106DE_g = lv_units_created;
    auto6A3106DE_u = UnitGroupCount(auto6A3106DE_g, c_unitCountAll);
    for (;; auto6A3106DE_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto6A3106DE_g, auto6A3106DE_u);
        if (lv_unit == null) { break; }
        UnitBehaviorAdd(lv_unit, "RakshirChampion", lv_unit, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectMalashInitialization_Init () {
    lib1_gt_EffectMalashInitialization = TriggerCreate("lib1_gt_EffectMalashInitialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Ma'lash Periodic Effect
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectMalashPeriodicEffect_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_sacrificial_target;
    int lv_count;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    if ((UnitHasBehavior2(UnitGroupRandomUnit(lv_units_created, c_unitCountAlive), "WaitingToMoveOut") == true)) {
        Wait(0.2, c_timeGame);
    }

    lv_sacrificial_target = null;
    lv_sacrificial_target = lib1_gf_WeakestTargetForHardRemovalNotCaster(lv_player, UnitGroupRandomUnit(lv_units_created, c_unitCountAlive), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32)) | (1 << (c_targetFilterSummoned - 32))));
    if ((lv_sacrificial_target != null)) {
        UnitKill(lv_sacrificial_target);
        UnitBehaviorAdd(UnitGroupRandomUnit(lv_units_created, c_unitCountAlive), "MurderousAscendance", UnitGroupRandomUnit(lv_units_created, c_unitCountAlive), 1);
        UnitSetPropertyFixed(UnitGroupRandomUnit(lv_units_created, c_unitCountAlive), c_unitPropEnergyPercent, 100.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectMalashPeriodicEffect_Init () {
    lib1_gt_EffectMalashPeriodicEffect = TriggerCreate("lib1_gt_EffectMalashPeriodicEffect_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Psionic Orb
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectPsionicOrb_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    UnitCreate(1, "HighTemplarTaldarim", 0, lv_player, PointWithOffset(RegionGetCenter(lib1_gv_player[lv_player].lv_spawn_region), 0.0, 4.0), libNtve_gf_RandomAngle());
    UnitBehaviorAdd(UnitLastCreated(), "Caster", UnitLastCreated(), 1);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("VoidHighTemplarPsiOrb", 0), PointWithOffset(RegionGetCenter(lib1_gv_player[lv_player].lv_attack_region), 0.0, 4.0)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderSetAutoCast(AbilityCommand("PsiStorm", 0), false), c_orderQueueAddToFront);
    UnitIssueOrder(UnitLastCreated(), OrderSetAutoCast(AbilityCommand("Feedback", 0), false), c_orderQueueAddToFront);
    lib1_gf_IssueLeaveOrders(UnitLastCreated(), c_orderQueueAddToEnd);
    UnitCreate(1, "HighTemplarTaldarim", 0, lv_player, PointWithOffset(RegionGetCenter(lib1_gv_player[lv_player].lv_spawn_region), 0.0, -4.0), libNtve_gf_RandomAngle());
    UnitBehaviorAdd(UnitLastCreated(), "Caster", UnitLastCreated(), 1);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("VoidHighTemplarPsiOrb", 0), PointWithOffset(RegionGetCenter(lib1_gv_player[lv_player].lv_attack_region), 0.0, -4.0)), c_orderQueueReplace);
    UnitIssueOrder(UnitLastCreated(), OrderSetAutoCast(AbilityCommand("PsiStorm", 0), false), c_orderQueueAddToFront);
    UnitIssueOrder(UnitLastCreated(), OrderSetAutoCast(AbilityCommand("Feedback", 0), false), c_orderQueueAddToFront);
    lib1_gf_IssueLeaveOrders(UnitLastCreated(), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectPsionicOrb_Init () {
    lib1_gt_EffectPsionicOrb = TriggerCreate("lib1_gt_EffectPsionicOrb_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Warp Stargate
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectWarpStargate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unitgroup lv_possible_stargates;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto7D9415E9_g;
    int auto7D9415E9_u;
    unitgroup auto5FFD4DD8_g;
    int auto5FFD4DD8_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();
    lv_possible_stargates = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    Wait(0.1, c_timeGame);
    auto7D9415E9_g = UnitGroup("Stargate", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7D9415E9_u = UnitGroupCount(auto7D9415E9_g, c_unitCountAll);
    for (;; auto7D9415E9_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto7D9415E9_g, auto7D9415E9_u);
        if (lv_unit == null) { break; }
        UnitGroupAdd(lv_possible_stargates, lv_unit);
    }
    auto5FFD4DD8_g = UnitGroup("StargateVoid", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5FFD4DD8_u = UnitGroupCount(auto5FFD4DD8_g, c_unitCountAll);
    for (;; auto5FFD4DD8_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto5FFD4DD8_g, auto5FFD4DD8_u);
        if (lv_unit == null) { break; }
        UnitGroupAdd(lv_possible_stargates, lv_unit);
    }
    if ((UnitGroupCount(lv_possible_stargates, c_unitCountAlive) >= 1)) {
        lv_unit = UnitGroupRandomUnit(lv_possible_stargates, c_unitCountAlive);
        UnitBehaviorRemove(lv_unit, "GasUpkeep", c_unitBehaviorCountAll);
        lib1_gf_RemoveAllStunsFromUnit(lv_unit);
        UnitIssueOrder(lv_unit, Order(AbilityCommand("que5", 0)), c_orderQueueReplace);
        UnitIssueOrder(lv_unit, Order(AbilityCommand("UpgradeToStargateWarp", 0)), c_orderQueueReplace);
        UnitSetCustomValue(lv_unit, 0, 9.0);
    }
    else {
        lib1_gf_GenerateStarWarpCardforHand(lv_player);
        lib1_gf_GenerateStarWarpCardforHand(lv_player);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectWarpStargate_Init () {
    lib1_gt_EffectWarpStargate = TriggerCreate("lib1_gt_EffectWarpStargate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Void Gate
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectVoidGate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_BuildStructure(lv_player, lv_card_id, "Probe", AbilityCommand("ProtossBuild", 8), "StargateVoid", false, -1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectVoidGate_Init () {
    lib1_gt_EffectVoidGate = TriggerCreate("lib1_gt_EffectVoidGate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Argus Crystal
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectArgusCrystal_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    int lv_opponent;
    int lv_hand_index;
    int lv_highest_cost;
    int[51] lv_possible_opponent;
    int[51] lv_possible_hand_index;
    int lv_possibility_count;
    int lv_choice;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_highest_cost = -1;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lib1_gf_BuildStructure(lv_player, lv_card_id, "Probe", AbilityCommand("ProtossBuild", 16), "PylonXelnaga", true, -1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectArgusCrystal_Init () {
    lib1_gt_EffectArgusCrystal = TriggerCreate("lib1_gt_EffectArgusCrystal_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Energy Crystal
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectEnergyCrystal_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_BuildStructure(lv_player, lv_card_id, "Probe", AbilityCommand("ProtossBuild", 17), "PylonEnergy", false, -1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectEnergyCrystal_Init () {
    lib1_gt_EffectEnergyCrystal = TriggerCreate("lib1_gt_EffectEnergyCrystal_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Energy Crystal Energy
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectEnergyCrystalEnergy_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_AddEnergytoKeystone(lib1_gv_player[lv_player].lv_team, 3);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectEnergyCrystalEnergy_Init () {
    lib1_gt_EffectEnergyCrystalEnergy = TriggerCreate("lib1_gt_EffectEnergyCrystalEnergy_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Amon Discard
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectAmonDiscard_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    bool lv_channel_enabled;
    int lv_hand_index;

    // Automatic Variable Declarations
    const int auto2E87D805_ae = 0;
    const int auto2E87D805_ai = -1;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lv_channel_enabled = lib1_gv_current_channel_enabled;
    lv_hand_index = lib1_gf_TopofHand(lv_player);
    for ( ; ( (auto2E87D805_ai >= 0 && lv_hand_index <= auto2E87D805_ae) || (auto2E87D805_ai < 0 && lv_hand_index >= auto2E87D805_ae) ) ; lv_hand_index += auto2E87D805_ai ) {
        lib1_gf_DiscardCardFromHandtoDiscard(lv_player, lv_hand_index);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectAmonDiscard_Init () {
    lib1_gt_EffectAmonDiscard = TriggerCreate("lib1_gt_EffectAmonDiscard_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Amon Draw
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectAmonDraw_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    bool lv_channel_enabled;
    int lv_count;

    // Automatic Variable Declarations
    const int auto5F4A6A09_ae = 6;
    const int auto5F4A6A09_ai = 1;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lv_channel_enabled = lib1_gv_current_channel_enabled;
    if ((lv_channel_enabled == true)) {
        lv_count = 1;
        for ( ; ( (auto5F4A6A09_ai >= 0 && lv_count <= auto5F4A6A09_ae) || (auto5F4A6A09_ai < 0 && lv_count >= auto5F4A6A09_ae) ) ; lv_count += auto5F4A6A09_ai ) {
            lib1_gf_GenerateVoidArmyCardforHand(lv_player);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectAmonDraw_Init () {
    lib1_gt_EffectAmonDraw = TriggerCreate("lib1_gt_EffectAmonDraw_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Void Army
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectVoidArmy_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    bool lv_channel_enabled;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto4F80DFB5_g;
    int auto4F80DFB5_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lv_channel_enabled = lib1_gv_current_channel_enabled;
    auto4F80DFB5_g = lv_units_created;
    auto4F80DFB5_u = UnitGroupCount(auto4F80DFB5_g, c_unitCountAll);
    for (;; auto4F80DFB5_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto4F80DFB5_g, auto4F80DFB5_u);
        if (lv_unit == null) { break; }
        UnitBehaviorAdd(lv_unit, "VoidShade", lv_unit, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectVoidArmy_Init () {
    lib1_gt_EffectVoidArmy = TriggerCreate("lib1_gt_EffectVoidArmy_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Argus Crystal Dies
//--------------------------------------------------------------------------------------------------
bool lib1_gt_ArgusCrystalDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggering_player;
    int lv_player;
    int lv_hand_index;

    // Automatic Variable Declarations
    const int auto2AC37926_ae = lib1_gv_mAX_PLAYERS;
    const int auto2AC37926_ai = 1;
    int auto098D1121_ae;
    const int auto098D1121_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "PylonXelnaga"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_triggering_player = EventPlayer();
    Wait(0.5, c_timeGame);
    if ((UnitGroupCount(UnitGroup("PylonXelnaga", lv_triggering_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        lv_player = 1;
        for ( ; ( (auto2AC37926_ai >= 0 && lv_player <= auto2AC37926_ae) || (auto2AC37926_ai < 0 && lv_player >= auto2AC37926_ae) ) ; lv_player += auto2AC37926_ai ) {
            auto098D1121_ae = lib1_gf_TopofHand(lv_player);
            lv_hand_index = 0;
            for ( ; ( (auto098D1121_ai >= 0 && lv_hand_index <= auto098D1121_ae) || (auto098D1121_ai < 0 && lv_hand_index >= auto098D1121_ae) ) ; lv_hand_index += auto098D1121_ai ) {
                if ((lib1_gv_player[lv_player].lv_hand.lv_card[lv_hand_index].lv_locked_by_player == lv_triggering_player)) {
                    lib1_gf_UnlockHandCardArgusCrystal(lv_player, lv_hand_index);
                }

            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_ArgusCrystalDies_Init () {
    lib1_gt_ArgusCrystalDies = TriggerCreate("lib1_gt_ArgusCrystalDies_Func");
    TriggerAddEventUnitDied(lib1_gt_ArgusCrystalDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Desperate Alliances Set
//--------------------------------------------------------------------------------------------------
bool lib1_gt_DesperateAlliancesSet_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_set;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_set = lib1_gv_dESPERATE_ALLIANCES;
    lib1_gv_set[lv_set].lv_name = "\xe7\xb4\xa7\xe6\x80\xa5\xe8\x81\x94\xe7\x9b\x9f";
    lib1_gv_set[lv_set].lv_description = "\xe5\x9c\xa8\xe5\xa4\xb4\xe8\x84\x91\xe6\xb7\xb7\xe4\xb9\xb1\xe7\x9a\x84\xe4\xba\xba\xe6\xad\xbb\xe5\x90\x8e\xef\xbc\x8c\xe8\xaf\xa5\xe9\x83\xa8\xe9\x97\xa8\xe5\xa4\x84\xe4\xba\x8e\xe6\xb7\xb7\xe4\xb9\xb1\xe7\x8a\xb6\xe6\x80\x81\xef\xbc\x8c\xe4\xbd\x9c\xe4\xb8\xba\xe5\x9b\x9e\xe5\xba\x94\xef\xbc\x8c\xe7\xa7\x8d\xe6\x97\x8f\xe4\xb9\x8b\xe9\x97\xb4\xe7\x9a\x84\xe5\xa5\x87\xe6\x80\xaa\xe8\x81\x94\xe7\x9b\x9f\xe5\xbc\x80\xe5\xa7\x8b\xe5\x87\xba\xe7\x8e\xb0\xe3\x80\x82\xe6\x9c\x89\xe4\xba\x9b\xe6\x98\xaf\xe5\xbb\xba\xe7\xab\x8b\xe5\x9c\xa8\xe4\xbf\xa1\xe4\xbb\xbb\xe4\xb9\x8b\xe4\xb8\x8a\xef\xbc\x8c\xe8\x80\x8c\xe5\x8f\xa6\xe4\xb8\x80\xe4\xba\x9b\xe5\x88\x99\xe6\x98\xaf\xe5\xbb\xba\xe7\xab\x8b\xe5\x9c\xa8\xe8\xb0\x8e\xe8\xa8\x80\xe5\x92\x8c\xe6\x93\x8d\xe7\xba\xb5\xe4\xb9\x8b\xe4\xb8\x8a\xe3\x80\x82\xe9\x80\x9a\xe8\xbf\x87\xe4\xb8\x80\xe7\xa7\x8d\xe6\x96\xb0\xe7\x9a\x84\xe5\x8d\xa1\xe7\xb1\xbb\xe5\x9e\x8b\xe6\x9d\xa5\xe4\xbd\x93\xe9\xaa\x8c\xe8\xbf\x99\xe4\xba\x9b\xe8\x81\x94\xe7\x9b\x9f\xef\xbc\x9a\xe5\x8f\x8c\xe7\xa7\x8d\xe6\x97\x8f\xe5\x8d\xa1\xe3\x80\x82";
    lib1_gv_set[lv_set].lv_icon = "Assets\\Textures\\DesperateAlliances.dds";
    lib1_gv_set[lv_set].lv_store_image = "Assets\\Textures\\DesperateAlliancesPack.dds";
    lib1_gv_set[lv_set].lv_start_id = 370;
    lib1_gv_set[lv_set].lv_end_id = 448;
    lib1_gv_set[lv_set].lv_state = lib1_gv_aVAILABLE;
    lib1_gv_set[lv_set].lv_price = 15;
    lib1_gv_set[lv_set].lv_common_cost = 40;
    lib1_gv_set[lv_set].lv_uncommon_cost = 75;
    lib1_gv_set[lv_set].lv_rare_cost = 300;
    lib1_gv_set[lv_set].lv_unique_cost = 900;
    lib1_gv_set[lv_set].lv_common_sell = 15;
    lib1_gv_set[lv_set].lv_uncommon_sell = 35;
    lib1_gv_set[lv_set].lv_rare_sell = 150;
    lib1_gv_set[lv_set].lv_unique_sell = 450;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_DesperateAlliancesSet_Init () {
    lib1_gt_DesperateAlliancesSet = TriggerCreate("lib1_gt_DesperateAlliancesSet_Func");
    TriggerAddEventMapInit(lib1_gt_DesperateAlliancesSet);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Desperate Alliances Promo
//--------------------------------------------------------------------------------------------------
bool lib1_gt_DesperateAlliancesPromo_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_id;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_id = 369;
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_tERRAN, "The Iron Fist", "\xE9\x93\x81\xE6\x8B\xB3", lib1_gv_aGGRESSIVE, "UED", lib1_gv_rARE, 8, 3, null, "\xE4\xBB\x96\xE4\xBB\xAC\xE5\xB0\x86\xE4\xBC\x9A\xE4\xBD\xBF\xE7\x94\xA8\xE6\x8A\x98\xE8\xB6\x8A\xE8\x83\xBD\xE5\x8A\x9B\xE8\xB7\x83\xE8\xBF\x81\xE5\x88\xB0\xE6\x95\x8C\xE5\xAF\xB9\xE9\x98\xB2\xE5\xAE\x88\xE5\x8C\xBA\xE4\xB8\x8A\xE7\xA9\xBA\xE3\x80\x82", "Assets\\Textures\\btn-ability-terran-warpjump.dds", SoundLink("IronFist", 0));
    lib1_gf_DefineCardUnit(lv_id, "Battlecruiser", 2);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DEFAULT, lib1_gt_EffectTheIronFist);
    lib1_gf_AddRushtoCardDefinition(lv_id);
    lib1_gf_MakeCardPromo(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_zERG, "Carapace Contagion", "\xE7\x94\xB2\xE5\xA3\xB3\xE8\x94\x93\xE5\xBB\xB6", lib1_gv_aCTION, "Evolution", lib1_gv_rARE, 6, 3, null, "\xE8\xAE\xA9\xE4\xBD\xA0\xE5\x85\xA8\xE9\x98\x9F\xE7\x9A\x84\xE7\x94\x9F\xE7\x89\xA9\xE5\x8D\x95\xE4\xBD\x8D\xE9\xA2\x9D\xE5\xA4\x96\xE8\x8E\xB7\xE5\xBE\x97 50% \xE7\x9A\x84\xE7\x94\x9F\xE5\x91\xBD\xE5\x80\xBC (\xE4\xB8\x8D\xE5\x8F\xA0\xE5\x8A\xA0)\xE3\x80\x82", "Assets\\Textures\\btn-upgrade-zerg-adaptivecarapace.dds", SoundLink("Egg_Birth", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_BUFF_UNITS, lib1_gt_EffectCarapaceContagion);
    lib1_gf_MakeCardPromo(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_pROTOSS, "A New Homeworld", "\xE6\x96\xB0\xE5\xAE\xB6\xE5\x9B\xAD", lib1_gv_aCTION, "", lib1_gv_rARE, 2, 1, null, "\xE6\xB7\xBB\xE5\x8A\xA0\xE4\xB8\x80\xE4\xB8\xAA\xE5\xA4\x8F\xE5\xBA\x93\xE6\x8B\x89\xE6\x96\xAF\xE5\xB7\xA1\xE9\x80\xBB\xE9\x98\x9F\xE7\x89\x8C\xE5\x88\xB0\xE4\xBD\xA0\xE6\x89\x8B\xE4\xB8\xAD\xE3\x80\x82 \xE6\xAF\x8F\xE6\x8E\xA7\xE5\x88\xB6\xE4\xB8\x80\xE4\xB8\xAA\xE5\x85\x85\xE8\x83\xBD\xE7\x9A\x84\xE5\xBB\xBA\xE7\xAD\x91 \xEF\xBC\x88\xE5\x8C\x85\xE6\x8B\xAC\xE6\xB0\xB4\xE6\x99\xB6\xEF\xBC\x89\xEF\xBC\x8C \xE5\x88\x99\xE9\x9A\x8F\xE6\x9C\xBA\xE5\x8F\xAC\xE5\x94\xA4\xE4\xB8\x80\xE4\xB8\xAA\xE9\xBE\x99\xE9\xAA\x91\xEF\xBC\x8C\xE6\x9A\x97\xE5\xA0\x82\xE6\xAD\xA6\xE5\xA3\xAB\xE6\x88\x96\xE4\xBE\xA6\xE5\xAF\x9F\xE6\x9C\xBA \xE3\x80\x82", "Assets\\Textures\\btn-a-new-homeworld.dds", SoundLink("ANewHomeworld", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DRAW, lib1_gt_EffectANewHomeworld);
    lib1_gf_MakeCardPromo(lv_id);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_DesperateAlliancesPromo_Init () {
    lib1_gt_DesperateAlliancesPromo = TriggerCreate("lib1_gt_DesperateAlliancesPromo_Func");
    TriggerAddEventMapInit(lib1_gt_DesperateAlliancesPromo);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Desperate Alliances Mixed
//--------------------------------------------------------------------------------------------------
bool lib1_gt_DesperateAlliancesMixed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_id;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_id = 372;
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_tERRAN_ZERG_UED, "Handler Squad", "\xE5\xA4\x84\xE7\x90\x86\xE8\x80\x85\xE5\xB0\x8F\xE9\x98\x9F", lib1_gv_aGGRESSIVE, "UED", lib1_gv_cOMMON, 3, 1, null, "", "Assets\\Textures\\btn-handler-squad.dds", SoundLink("Zergling_Yes", 0));
    lib1_gf_DefineCardUnit(lv_id, "Marine", 2);
    lib1_gf_DefineCardUnit(lv_id, "Medic", 4);
    lib1_gf_DefineCardUnit(lv_id, "Zergling", 6);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_zERG_PROTOSS_KERRIGAN, "Bladed Hunters", "\xE5\x88\x80\xE9\x94\x8B\xE7\x8C\x8E\xE6\x89\x8B", lib1_gv_aGGRESSIVE, "", lib1_gv_cOMMON, 4, 1, null, "", "Assets\\Textures\\btn-bladed-hunters.dds", SoundLink("Hydralisk_Attack", 5));
    lib1_gf_DefineCardUnit(lv_id, "Hydralisk", 2);
    lib1_gf_DefineCardUnit(lv_id, "ZealotNerazim", 3);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_pROTOSS_TERRAN_FENIX, "Aiur Survivors", "\xE8\x89\xBE\xE5\xB0\x94\xE5\xB9\xB8\xE5\xAD\x98\xE8\x80\x85", lib1_gv_aGGRESSIVE, "", lib1_gv_uNCOMMON, 2, 0, null, "\xE5\xAE\x83\xE4\xBB\xAC\xE5\x8F\xAA\xE6\x9C\x89 50% \xE7\x9A\x84\xE5\x88\x9D\xE5\xA7\x8B\xE7\x94\x9F\xE5\x91\xBD\xE5\x80\xBC\xE5\x92\x8C 0 \xE7\x9A\x84\xE5\x88\x9D\xE5\xA7\x8B\xE6\x8A\xA4\xE7\x9B\xBE\xE5\x80\xBC\xE3\x80\x82 \xE4\xBF\x9D\xE6\x9C\x89\xEF\xBC\x9A\xE4\xBF\x9D\xE6\x9C\x89\xE8\x8B\xB1\xE9\x9B\x84\xE7\x89\xB9\xE6\x80\xA7,\xE5\xA6\x82\xE6\x9E\x9C\xE4\xBD\xA0\xE6\x8E\xA7\xE5\x88\xB6\xE7\x9A\x84\xE5\x8D\x95\xE4\xBF\x9D\xE6\x8C\x81\xE5\x9C\xA8 10 \xE4\xB8\xAA\xE6\x88\x96\xE4\xBB\xA5\xE4\xB8\x8B\xE3\x80\x82", "Assets\\Textures\\btn-aiur-veterans.dds", SoundLink("AiurSurvivors", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_BUFF_UNITS, lib1_gt_CommonEffectDamagedSpawn);
    lib1_gf_DefineCardUnit(lv_id, "ZealotVeteran", 1);
    lib1_gf_DefineCardUnit(lv_id, "Marine", 4);
    lib1_gf_AddHeroictoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_tERRAN_ZERG_UED, "Dominant Psychics", "\xE7\x81\xB5\xE8\x83\xBD\xE6\xBB\xA1\xE6\xBA\xA2", lib1_gv_aGGRESSIVE, "UED", lib1_gv_uNCOMMON, 3, 2, null, "\xE5\x9B\x9E\xE5\x90\x88\xE5\xBC\x80\xE5\xA7\x8B\xE6\x97\xB6,\xE5\xA6\x82\xE6\x9E\x9C\xE4\xBD\xA0\xE6\x8E\xA7\xE5\x88\xB6\xE4\xBA\x86\xE8\xB6\x85\xE8\xBF\x87 6 \xE4\xB8\xAA\xE8\x83\xBD\xE9\x87\x8F\xE5\x8D\x95\xE4\xBD\x8D, \xE5\x88\x99\xE5\x8D\x87\xE7\xBA\xA7\xE8\xBF\x99\xE5\xBC\xA0\xE7\x89\x8C(\xE6\x9A\x82\xE6\x97\xB6\xE8\xBF\x99\xE6\xA0\xB7\xE7\xBF\xBB\xE8\xAF\x91)\xE3\x80\x82", "Assets\\Textures\\btn-ability-nova-domination.dds", SoundLink("Ghost_Attack", 5));
    lib1_gf_DefineCardUnit(lv_id, "Ghost", 2);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DEFAULT, lib1_gt_EffectGhostOperatives);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_zERG_PROTOSS_KERRIGAN, "From the Shadows", "\xE4\xBB\x8E\xE9\x98\xB4\xE5\xBD\xB1\xE4\xB8\xAD\xE9\x99\x8D\xE4\xB8\xB4", lib1_gv_aGGRESSIVE, "", lib1_gv_uNCOMMON, 4, 2, null, "\xE4\xBB\x8E\xE9\xAB\x98\xE5\x9C\xB0\xE8\xBF\x9B\xE6\x94\xBB\xE3\x80\x82 \xE5\x88\xBA\xE8\x9B\x87\xE8\x99\xAB\xE7\xBE\xA4\xE7\x89\x8C\xE5\x8F\xAC\xE5\x94\xA4\xE5\xBB\xB6\xE8\xBF\x9F\xE4\xB8\x80\xE5\x9B\x9E\xE5\x90\x88\xE3\x80\x82", "Assets\\Textures\\btn-ability-zeratul-hero-shadowcleave.dds", SoundLink("DarkTemplar_Ready", 0));
    lib1_gf_DefineCardUnit(lv_id, "DarkTemplar", 1);
    lib1_gf_DefineCardUnit(lv_id, "Hydralisk", 4);
    lib1_gf_AddRushtoCardDefinition(lv_id);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DEFAULT, lib1_gt_EffectFromtheShadows);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_pROTOSS_TERRAN_FENIX, "Wary Veterans", "\xE6\x9C\xBA\xE8\xAD\xA6\xE8\x80\x81\xE5\x85\xB5", lib1_gv_tACTICAL, "", lib1_gv_cOMMON, 3, 1, null, "", "Assets\\Textures\\ui_tipicon_campaign_defend.dds", SoundLink("Dragoon", 2));
    lib1_gf_DefineCardUnit(lv_id, "DragoonVeteran", 1);
    lib1_gf_DefineCardUnit(lv_id, "EliteMarine", 3);
    lib1_gf_AddHeroictoCardDefinition(lv_id);
    lib1_gf_AddDelaytoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_tERRAN_ZERG_UED, "Hive Experts", "\xE4\xB8\xBB\xE5\xB7\xA2\xE4\xB8\x93\xE5\xAE\xB6", lib1_gv_aGGRESSIVE, "UED", lib1_gv_rARE, 3, 2, null, "\xE6\xAF\x8F\xE5\x9B\x9E\xE5\x90\x88\xE4\xBD\xA0\xE6\xAF\x8F\xE6\x8E\xA7\xE5\x88\xB6\xE4\xB8\x80\xE4\xB8\xAA\xE8\x83\xBD\xE9\x87\x8F\xE5\x8D\x95\xE4\xBD\x8D\xE5\xB0\xB1\xE6\xB7\xBB\xE5\x8A\xA0\xE4\xB8\x80\xE6\x9D\xA1\xE5\xB0\x8F\xE7\x8B\x97\xE5\x88\xB0\xE8\xBF\x99\xE5\xBC\xA0\xE7\x89\x8C\xE4\xB8\x8A\xE3\x80\x82", "Assets\\Textures\\btn-tips-sellzergbiosamples.dds", SoundLink("ScienceVessel", 1));
    lib1_gf_DefineCardUnit(lv_id, "ScienceVessel", 2);
    lib1_gf_AddDetectiontoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_zERG_PROTOSS_KERRIGAN, "Deadly Saboteurs", "\xE8\x87\xB4\xE5\x91\xBD\xE7\xA0\xB4\xE5\x9D\x8F\xE8\x80\x85", lib1_gv_aGGRESSIVE, "", lib1_gv_rARE, 6, 3, null, "\xE5\xAE\x83\xE4\xBB\xAC\xE5\x87\xBA\xE7\x94\x9F\xE5\x9C\xA8\xE6\x95\x8C\xE5\xAF\xB9\xE6\x9C\x80\xE8\xB4\xB5\xE7\x9A\x84\xE5\xBB\xBA\xE7\xAD\x91\xE4\xB8\xAD\xE5\x87\xBA\xE7\x94\x9F\xE5\xB9\xB6\xE6\x91\xA7\xE6\xAF\x81\xE8\xAF\xA5\xE5\xBB\xBA\xE7\xAD\x91\xE3\x80\x82", "Assets\\Textures\\btn-ability-zerg-extinction.dds", SoundLink("Lurker_AttackLaunch", 0));
    lib1_gf_DefineCardUnit(lv_id, "LurkerMPBurrowed", 1);
    lib1_gf_DefineCardUnit(lv_id, "DarkTemplar", 1);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_REMOVE_UNIT, lib1_gt_EffectDeadlySaboteurs);
    lib1_gf_AddRushtoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_pROTOSS_TERRAN_FENIX, "Brothers in Arms", "\xE5\x85\xA8\xE5\x89\xAF\xE6\xAD\xA6\xE8\xA3\x85\xE7\x9A\x84\xE5\x85\x84\xE5\xBC\x9F", lib1_gv_tACTICAL, "", lib1_gv_uNIQUE, 6, 2, null, "\xE8\xAF\xA5\xE9\xBE\x99\xE9\xAA\x91\xE6\xAF\x8F\xE5\x9B\x9E\xE5\x90\x88\xE6\xB7\xBB\xE5\x8A\xA0\xE4\xB8\x80\xE5\xBC\xA0\xE8\x8B\xB1\xE9\x9B\x84\xE6\x8A\x98\xE8\xB6\x8A\xE7\x89\x8C\xE5\x88\xB0\xE4\xBD\xA0\xE6\x89\x8B\xE4\xB8\xAD\xE3\x80\x82 \xE8\xAF\xA5\xE6\x8C\x87\xE6\x8C\xA5\xE5\xAE\x98\xE8\xAE\xA9\xE4\xBD\xA0\xE5\x85\xA8\xE9\x98\x9F\xE7\x9A\x84\xE8\x8B\xB1\xE9\x9B\x84\xE5\x8D\x95\xE4\xBD\x8D +15% \xE4\xBC\xA4\xE5\xAE\xB3 +1 \xE6\x8A\xA4\xE7\x94\xB2\xE3\x80\x82", "Assets\\Textures\\btn-FenixRaynor.dds", SoundLink("BrothersInArms", 0));
    lib1_gf_DefineCardUnit(lv_id, "DragoonFenix", 1);
    lib1_gf_DefineCardUnit(lv_id, "Raynor", 1);
    lib1_gf_AddHeroictoCardDefinition(lv_id);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DEFAULT, lib1_gt_EffectFenixandRaynor);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_pROTOSS_TERRAN_FENIX, "Fearless Raiders", "\xE6\x97\xA0\xE7\x95\x8F\xE7\xAA\x81\xE5\x87\xBB\xE8\x80\x85", lib1_gv_tACTICAL, "", lib1_gv_uNCOMMON, 4, 2, null, "\xE6\x88\x98\xE5\x90\xBC\xEF\xBC\x9A\xE6\xB7\xBB\xE5\x8A\xA0\xE4\xB8\x80\xE5\xBC\xA0\xE4\xBF\xAE\xE7\x90\x86\xE7\xAB\x99\xE7\x89\x8C\xE5\x88\xB0\xE4\xBD\xA0\xE7\x9A\x84\xE6\x89\x8B\xE7\x89\x8C\xE3\x80\x82", "Assets\\Textures\\ui_tipicon_campaign_attack.dds", SoundLink("Vulture", 1));
    lib1_gf_DefineCardUnit(lv_id, "ScoutHeroic", 1);
    lib1_gf_DefineCardUnit(lv_id, "VultureHeroic", 3);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DRAW, lib1_gt_EffectFearlessRaiders);
    lib1_gf_AddHeroictoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_zERG_PROTOSS_KERRIGAN, "Queen and Pawn", "\xE7\x9A\x87\xE5\x90\x8E\xE5\x92\x8C\xE5\xB0\x8F\xE5\x8D\x92", lib1_gv_aGGRESSIVE, "", lib1_gv_uNIQUE, 5, 2, null, "\xE6\x88\x98\xE5\x90\xBC\xEF\xBC\x9A \xE6\xB8\x85\xE9\x99\xA4\xE6\x89\x80\xE6\x9C\x89\xE6\x95\x8C\xE6\x96\xB9\xE5\x8D\x95\xE4\xBD\x8D\xE5\x92\x8C\xE5\xBB\xBA\xE7\xAD\x91\xE7\x89\xA9\xE7\x9A\x84\xE4\xBE\xA6\xE6\xB5\x8B\xE8\x83\xBD\xE5\x8A\x9B (\xE5\x8D\xB3\xE4\xBE\xBF\xE5\xAE\x83\xE4\xBB\xAC\xE5\xA4\x84\xE4\xBA\x8E\xE9\x9A\x90\xE8\xBA\xAB\xE6\x88\x96\xE6\xBD\x9C\xE5\x9C\xB0\xE7\x8A\xB6\xE6\x80\x81)\xE3\x80\x82", "Assets\\Textures\\btn-KerriganRaszagal.dds", SoundLink("QueenandPawn", 0));
    lib1_gf_DefineCardUnit(lv_id, "KerriganVoid", 1);
    lib1_gf_DefineCardUnit(lv_id, "DarkTemplarRaszagal", 1);
    lib1_gf_AddHeroictoCardDefinition(lv_id);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_REVEAL_UNIT, lib1_gt_EffectKerriganandRaszagal);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_vOID, "Samir Duran", "\xE8\x90\xA8\xE7\xB1\xB3\xE5\xB0\x94\xE6\x9D\x9C\xE5\x85\xB0", lib1_gv_aGGRESSIVE, "Void", lib1_gv_uNIQUE, 2, 2, null, "\xE6\x88\x98\xE5\x90\xBC\xEF\xBC\x9A\xE5\xA6\x82\xE6\x9E\x9C\xE4\xBD\xA0\xE6\x9C\x89 t \xE5\x8D\x95\xE4\xBD\x8D,\xE6\x9D\x9C\xE5\x85\xB0 +40 \xE6\x94\xBB\xE5\x87\xBB,\xE5\xA6\x82\xE6\x9E\x9C\xE4\xBD\xA0\xE6\x9C\x89 z \xE5\x8D\x95\xE4\xBD\x8D,\xE5\x88\x99\xE8\x8E\xB7\xE5\xBE\x97\xE9\xAB\x98\xE9\x80\x9F\xE5\x86\x8D\xE7\x94\x9F buff \xE3\x80\x82\xE5\xA6\x82\xE6\x9E\x9C\xE6\x9C\x89 p \xE5\x8D\x95\xE4\xBD\x8D,\xE5\x88\x99\xE8\x83\xBD\xE6\xB0\xB8\xE4\xB9\x85\xE9\x9A\x90\xE8\xBA\xAB\xE3\x80\x82\xE3\x80\x82", "Assets\\Textures\\btn-Duran.dds", SoundLink("SamirDuran", 0));
    lib1_gf_DefineCardUnit(lv_id, "GhostDuran", 1);
    lib1_gf_AddHeroictoCardDefinition(lv_id);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_BUFF_UNITS, lib1_gt_EffectSamirDuran);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_tERRAN_ZERG_UED, "Project Black Flag", "\xE9\xBB\x91\xE6\x97\x97\xE8\xAE\xA1\xE5\x88\x92", lib1_gv_aCTION, "UED", lib1_gv_uNIQUE, 1, 2, null, "\xE4\xBD\xA0\xE6\xAF\x8F\xE6\x8E\xA7\xE5\x88\xB6\xE4\xB8\x80\xE4\xB8\xAA\xE8\x83\xBD\xE9\x87\x8F\xE5\x8D\x95\xE4\xBD\x8D\xE6\xB4\x97\xE4\xB8\x80\xE5\xBC\xA0\xE5\xA5\xB4\xE9\x9A\xB6\xE5\xB7\xA2\xE7\xBE\xA4\xE7\x89\x8C\xE5\x88\xB0\xE4\xBD\xA0\xE7\x89\x8C\xE5\xBA\x93\xE4\xB8\xAD\xE3\x80\x82", "Assets\\Textures\\decal_zerg_0063_01.dds", SoundLink("ProjectBlackFlag", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_BUFF_DECK, lib1_gt_EffectProjectBlackFlag);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_zERG_PROTOSS_KERRIGAN, "Psionic Blackout", "\xE7\x81\xB5\xE8\x83\xBD\xE5\xB1\x8F\xE8\x94\xBD", lib1_gv_aCTION, "", lib1_gv_uNCOMMON, 1, 1, null, "\xE9\x9A\x8F\xE6\x9C\xBA\xE6\xB8\x85\xE9\x99\xA4 3 \xE4\xB8\xAA\xE6\x95\x8C\xE5\xAF\xB9\xE4\xBE\xA6\xE6\xB5\x8B\xE5\x8D\x95\xE4\xBD\x8D\xE7\x9A\x84\xE4\xBE\xA6\xE6\xB5\x8B\xE8\x83\xBD\xE5\x8A\x9B (\xE5\x8D\xB3\xE4\xBE\xBF\xE5\xAE\x83\xE4\xBB\xAC\xE5\xA4\x84\xE4\xBA\x8E\xE9\x9A\x90\xE8\xBA\xAB\xE6\x88\x96\xE6\xBD\x9C\xE5\x9C\xB0\xE7\x8A\xB6\xE6\x80\x81)\xE3\x80\x82", "Assets\\Textures\\btn-upgrade-protoss-alarak-havoctargetlockbuffed.dds", SoundLink("CorsairMP_AttackImpact", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_REVEAL_UNIT, lib1_gt_EffectPsionicBlackout);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_tERRAN_ZERG_UED, "Korhal Garrison", "\xE5\x85\x8B\xE5\x93\x88\xE5\xA0\xA1\xE5\x9E\x92", lib1_gv_sTRUCTURE, "UED", lib1_gv_uNCOMMON, 4, 0, null, "\xE5\xBB\xBA\xE9\x80\xA0\xE4\xB8\x80\xE4\xB8\xAA\xE5\x9C\xB0\xE5\xA0\xA1\xE4\xB8\x80\xE4\xB8\xAA\xE5\xAF\xBC\xE5\xBC\xB9\xE5\xA1\x94\xE5\x92\x8C\xE4\xB8\xA4\xE4\xB8\xAA\xE6\xBD\x9C\xE9\x9A\x90\xE8\x8F\x8C\xE8\x90\xBD\xE3\x80\x82 \xE6\xAF\x8F\xE5\x9B\x9E\xE5\x90\x88\xE5\xA6\x82\xE6\x9E\x9C\xE4\xBD\xA0\xE6\x8E\xA7\xE5\x88\xB6\xE4\xBA\x86\xE4\xB8\x80\xE4\xB8\xAA\xE8\x83\xBD\xE9\x87\x8F\xE5\x8D\x95\xE4\xBD\x8D,\xE9\x82\xA3\xE4\xB9\x88\xE8\xBF\x99\xE5\xBC\xA0\xE7\x89\x8C\xE7\x9A\x84\xE7\x9F\xBF\xE7\x89\xA9\xE8\xB4\xB9\xE7\x94\xA8\xE5\x87\x8F 1 \xE3\x80\x82 ", "Assets\\Textures\\btn-upgrade-terran-buildingarmor.dds", SoundLink("Bunker_Ready", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DEFAULT, lib1_gt_EffectKorhalGarrison);
    lv_id = 448;
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_pROTOSS_TERRAN_FENIX, "Air Support", "\xE7\xA9\xBA\xE4\xB8\xAD\xE6\x94\xAF\xE6\x8F\xB4", lib1_gv_aGGRESSIVE, "", lib1_gv_rARE, 6, 3, null, "\xE8\xAF\xA5\xE5\xA4\xA7\xE6\xB2\xB3\xE5\x8F\xB7\xE5\xB0\x86\xE7\xA7\xBB\xE5\x8A\xA8\xE5\xB9\xB6\xE7\xA9\xBF\xE8\xBF\x87\xE6\x95\xB4\xE4\xB8\xAA\xE6\x88\x98\xE5\x9C\xBA,\xE5\xBD\x93\xE5\xAE\x83\xE6\x8A\xB5\xE8\xBE\xBE\xE6\x95\x8C\xE5\xAF\xB9\xE5\x9F\xBA\xE5\x9C\xB0\xE6\x97\xB6\xE7\xA6\xBB\xE5\xBC\x80\xE3\x80\x82", "Assets\\Textures\\btn-ability-hornerhan-battlecruiser-laser.dds", SoundLink("AirSupport", 0));
    lib1_gf_DefineCardUnit(lv_id, "Hyperion", 1);
    lib1_gf_DefineCardUnit(lv_id, "ScoutHeroic", 2);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_CREATE_UNIT, lib1_gt_EffectAirSupport);
    lib1_gf_AddRushtoCardDefinition(lv_id);
    lib1_gf_AddHeroictoCardDefinition(lv_id);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_DesperateAlliancesMixed_Init () {
    lib1_gt_DesperateAlliancesMixed = TriggerCreate("lib1_gt_DesperateAlliancesMixed_Func");
    TriggerAddEventMapInit(lib1_gt_DesperateAlliancesMixed);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Desperate Alliances Terran
//--------------------------------------------------------------------------------------------------
bool lib1_gt_DesperateAlliancesTerran_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_id;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_id = 387;
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_tERRAN, "Psi Emitter", "\xE7\x81\xB5\xE8\x83\xBD\xE5\x8F\x91\xE5\xB0\x84\xE5\x99\xA8", lib1_gv_dEFENSIVE, "", lib1_gv_rARE, -3, 2, null, "\xE7\x9B\xB4\xE5\x88\xB0\xE8\xA2\xAB\xE6\x91\xA7\xE6\xAF\x81, \xE6\xAF\x8F\xE4\xB8\xAA\xE7\x8E\xA9\xE5\xAE\xB6 +1 \xE7\x9F\xBF\xE7\x89\xA9\xE4\xBA\xA7\xE8\x83\xBD\xE3\x80\x82 \xE5\xBD\x93\xE8\xAF\xA5\xE7\x89\x8C\xE8\xA2\xAB\xE9\x80\x89\xE4\xB8\xAD ,+3 \xE7\x9F\xBF\xE7\x89\xA9\xE3\x80\x82", "Assets\\Textures\\btn-upgrade-tychus-reaper-explosivecharges.dds", SoundLink("PsiEmitter_Activate", 0));
    lib1_gf_DefineCardUnit(lv_id, "SCV", 1);
    lib1_gf_AddHeroictoCardDefinition(lv_id);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_CREATE_UNIT, lib1_gt_EffectPsiEmitter);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_tERRAN, "Valkyrie Fleet", "\xE7\x93\xA6\xE6\xA0\xBC\xE9\x9B\xB7\xE8\x88\xB0\xE9\x98\x9F", lib1_gv_aGGRESSIVE, "", lib1_gv_cOMMON, 5, 2, null, "", "Assets\\Textures\\btn-unit-terran-valkyrieclassic.dds", SoundLink("ClassicValkyrie", 1));
    lib1_gf_DefineCardUnit(lv_id, "Valkyrie", 3);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_tERRAN, "Medic Support", "\xE5\x8C\xBB\xE7\x96\x97\xE6\x94\xAF\xE6\x8F\xB4", lib1_gv_dEFENSIVE, "", lib1_gv_cOMMON, 1, 1, null, "", "Assets\\Textures\\btn-unit-terran-medic.dds", SoundLink("Medic", 1));
    lib1_gf_DefineCardUnit(lv_id, "Medic", 6);
    lib1_gf_AddRushtoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_tERRAN, "Raider's Cache", "\xE7\xAA\x81\xE5\x87\xBB\xE9\x98\x9F\xE8\xA1\xA5\xE7\xBB\x99\xE7\x82\xB9", lib1_gv_sTRUCTURE, "", lib1_gv_uNCOMMON, 3, 2, null, "\xE5\xBB\xBA\xE9\x80\xA0\xE5\xB7\xA5\xE7\xA8\x8B\xE7\xAB\x99\xE3\x80\x82 \xE7\x9B\xB4\xE5\x88\xB0\xE8\xA2\xAB\xE6\x91\xA7\xE6\xAF\x81, \xE4\xBD\xA0\xE5\x85\xA8\xE9\x98\x9F\xE7\x9A\x84\xE8\x8B\xB1\xE9\x9B\x84\xE5\x8D\x95\xE4\xBD\x8D +15% \xE4\xBC\xA4\xE5\xAE\xB3 +1 \xE6\x8A\xA4\xE7\x94\xB2\xE3\x80\x82", "Assets\\Textures\\btn-building-terran-tychusengineeringbay.dds", SoundLink("UI_Pickup_Equipment", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DEFAULT, lib1_gt_EffectRaidersCache);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_tERRAN, "Orbital Supply Drop", "\xE8\xBD\xA8\xE9\x81\x93\xE8\xA1\xA5\xE7\xBB\x99\xE7\xA9\xBA\xE6\x8A\x95", lib1_gv_aCTION, "", lib1_gv_cOMMON, 5, 0, null, "\xE4\xBD\xA0\xE9\x98\x9F\xE4\xBC\x8D\xE6\x89\x80\xE6\x9C\x89\xE7\x8E\xA9\xE5\xAE\xB6\xE9\x83\xBD\xE6\x8A\xBD\xE4\xB8\x80\xE5\xBC\xA0\xE7\x89\x8C\xE3\x80\x82 \xE7\x9B\xB4\xE5\x88\xB0\xE8\xBF\x99\xE4\xB8\xAA\xE6\x88\x98\xE6\x96\x97\xE9\x98\xB6\xE6\xAE\xB5\xE7\xBB\x93\xE6\x9D\x9F\xEF\xBC\x8C \xE9\x98\xB2\xE6\xAD\xA2\xE4\xBD\xA0\xE9\x98\x9F\xE4\xBC\x8D\xE9\x87\x8C\xE7\x9A\x84\xE7\x8E\xA9\xE5\xAE\xB6\xE5\x9B\xA0\xE4\xB8\xBA\xE6\x89\x8B\xE7\x89\x8C\xE4\xB8\x8A\xE9\x99\x90\xE8\x80\x8C\xE5\xBC\x83\xE7\x89\x8C\xE3\x80\x82", "Assets\\Textures\\talent-raynor-level12-orbitaldepots.dds", SoundLink("OrbitalCommand_CalldownMuleDrop", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_INCREASE_HAND_SIZE, lib1_gt_EffectOrbitalSupplyDropOverdrawPrevention);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DEFAULT, lib1_gt_EffectOrbitalSupplyDropDraw);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_tERRAN, "Atlas Wing", "\xE9\x98\xBF\xE7\x89\xB9\xE6\x8B\x89\xE6\x96\xAF\xE4\xB9\x8B\xE7\xBF\xBC", lib1_gv_aGGRESSIVE, "UED", lib1_gv_uNCOMMON, 4, 2, null, "\xE6\x88\x98\xE5\x90\xBC\xEF\xBC\x9A\xE4\xB8\xBA\xE4\xBD\xA0\xE6\x89\x8B\xE4\xB8\xAD\xE6\x89\x80\xE6\x9C\x89\xE7\x9A\x84 ued \xE7\x89\x8C\xE5\xA2\x9E\xE6\xB7\xBB\xE4\xB8\x80\xE4\xB8\xAA\xE6\xAD\x8C\xE8\x8E\x89\xE5\xA8\x85\xE3\x80\x82", "Assets\\Textures\\btn-upgrade-terran-vehicleweaponslevel3.dds", SoundLink("AtlasWing", 0));
    lib1_gf_DefineCardUnit(lv_id, "Goliath", 2);
    lib1_gf_DefineCardUnit(lv_id, "SiegeTank", 1);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_BUFF_ALL_HAND_CARDS, lib1_gt_EffectAtlasWing);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_tERRAN, "Cronus Wing", "\xE5\x85\x8B\xE5\x8A\xAA\xE8\xAF\xBA\xE6\x96\xAF\xE4\xB9\x8B\xE7\xBF\xBC", lib1_gv_aGGRESSIVE, "UED", lib1_gv_uNCOMMON, 5, 2, null, "\xE6\x88\x98\xE5\x90\xBC\xEF\xBC\x9A\xE4\xB8\xBA\xE4\xBD\xA0\xE6\x89\x8B\xE4\xB8\xAD\xE6\x89\x80\xE6\x9C\x89\xE7\x9A\x84 ued \xE7\x89\x8C\xE5\xA2\x9E\xE6\xB7\xBB\xE4\xB8\x80\xE5\xBC\xA0\xE9\x9A\x90\xE9\xA3\x9E\xE3\x80\x82", "Assets\\Textures\\btn-upgrade-terran-shipweaponslevel3.dds", SoundLink("CronusWing", 0));
    lib1_gf_DefineCardUnit(lv_id, "Wraith", 2);
    lib1_gf_DefineCardUnit(lv_id, "Valkyrie", 1);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_BUFF_ALL_HAND_CARDS, lib1_gt_EffectCronusWing);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_tERRAN, "Confederate Loyalists", "\xE8\x81\x94\xE9\x82\xA6\xE5\xBF\xA0\xE8\xAF\x9A\xE8\x80\x85", lib1_gv_aGGRESSIVE, lib1_gv_cONFEDERATE, lib1_gv_rARE, 3, 1, null, "Launch\xEF\xBC\x9A Discard 2 random non-Confederate cards\xE3\x80\x82 Then draw a card for each one discarded\xE3\x80\x82", "Assets\\Textures\\btn-ability-hornerhan-mechbioweaponupgrades-b.dds", SoundLink("ConfederateLoyalists", 0));
    lib1_gf_DefineCardUnit(lv_id, "Marine", 4);
    lib1_gf_DefineCardUnit(lv_id, "Firebat", 2);
    lib1_gf_DefineCardUnit(lv_id, "Goliath", 1);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DISCARD_FROM_HAND, lib1_gt_EffectConfederateLoyalists);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_tERRAN, "Fuel Raid", "\xE7\x87\x83\xE6\x96\x99\xE7\xAA\x81\xE5\x87\xBB", lib1_gv_aCTION, "", lib1_gv_cOMMON, 3, 1, null, "\xE5\xAF\xB9\xE6\x95\x8C\xE6\x96\xB9\xE4\xB8\xA4\xE4\xB8\xAA\xE8\xB4\xB9\xE7\x94\xA8 2 \xE6\x88\x96\xE4\xBB\xA5\xE4\xB8\x8B\xE7\x9A\x84\xE5\xBB\xBA\xE7\xAD\x91\xE5\x90\x84\xE9\x80\xA0\xE6\x88\x90 1500 \xE7\x82\xB9\xE4\xBC\xA4\xE5\xAE\xB3\xE3\x80\x82 \xE6\xB7\xBB\xE5\x8A\xA0\xE4\xB8\x80\xE5\xBC\xA0\xE7\x93\xA6\xE6\x96\xAF\xE7\xBD\x90\xE7\x89\x8C\xE5\x88\xB0\xE4\xBD\xA0\xE7\x9A\x84\xE6\x89\x8B\xE4\xB8\xAD\xE3\x80\x82", "Assets\\Textures\\btn-top-hornerhan-bombers.dds", SoundLink("FuelRaid", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_REMOVE_UNIT_1500_DAMAGE, lib1_gt_EffectFuelRaidRemoval);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DRAW, lib1_gt_EffectFuelRaidVespeneBarrel);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_tERRAN, "Commandeer", "\xE5\xBC\xBA\xE5\xBE\x81", lib1_gv_aCTION, "UED", lib1_gv_uNCOMMON, 2, 1, null, "\xE9\x9A\x8F\xE6\x9C\xBA\xE5\xAF\xB9\xE6\x95\x8C\xE6\x96\xB9\xE4\xB8\x80\xE4\xB8\xAA\xE8\xB4\xB9\xE7\x94\xA8\xE4\xBB\x8B\xE4\xBA\x8E 4 \xE5\x92\x8C 6 \xE4\xB9\x8B\xE9\x97\xB4\xE7\x9A\x84\xE5\xBB\xBA\xE7\xAD\x91\xE9\x80\xA0\xE6\x88\x90 1500 \xE7\x82\xB9\xE4\xBC\xA4\xE5\xAE\xB3\xE3\x80\x82 \xE9\x9A\x8F\xE5\x90\x8E\xE6\xB4\x97\xE4\xB8\xA4\xE5\xBC\xA0\xE5\xA4\xA7\xE6\xB2\xB3\xE7\x89\x8C\xE5\x88\xB0\xE4\xBD\xA0\xE7\x9A\x84\xE7\x89\x8C\xE5\xBA\x93\xE4\xB8\xAD\xE3\x80\x82", "Assets\\Textures\\btn-top-hornerhan-fleetcalldown.dds", SoundLink("Battlecruiser_AirAttackImpact", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_REMOVE_UNIT_1500_DAMAGE, lib1_gt_EffectCommandeerRemoval);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_BUFF_DECK, lib1_gt_EffectCommandeerDeckAdditions);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_tERRAN, "Aleksander", "\xE4\xBA\x9A\xE5\x8E\x86\xE5\xB1\xB1\xE5\xA4\xA7\xE5\x8F\xB7", lib1_gv_aGGRESSIVE, "UED", lib1_gv_uNIQUE, 7, 3, null, "\xE6\xAF\x8F\xE5\xBD\x93\xE4\xBD\xA0\xE6\x89\x93\xE5\x87\xBA\xE4\xB8\x80\xE5\xBC\xA0 ued \xE7\x89\x8C, \xE5\x8F\xAC\xE9\x9B\x86\xE4\xB8\xA4\xE4\xB8\xAA\xE5\xA5\xBD\xE5\x85\x84\xE5\xBC\x9F\xE5\x88\xB0\xE8\xBF\x99\xE5\xBC\xA0\xE7\x89\x8C\xE5\x86\x85\xE3\x80\x82", "Assets\\Textures\\btn-unit-terran-battlecruiserloki.dds", SoundLink("Aleksander", 0));
    lib1_gf_DefineCardUnit(lv_id, "BattlecruiserAleksander", 1);
    lib1_gf_AddHeroictoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_tERRAN, "Smith Squad", "\xE5\x8F\xB2\xE5\xAF\x86\xE6\x96\xAF\xE5\xB0\x8F\xE9\x98\x9F", lib1_gv_aGGRESSIVE, "UED", lib1_gv_cOMMON, 3, 0, null, "", "Assets\\Textures\\btn-upgrade-terran-infantryweaponslevel3.dds", SoundLink("Marine_What", 4));
    lib1_gf_DefineCardUnit(lv_id, "Marine", 8);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_tERRAN, "Neurostim Drugs", "\xE7\xA5\x9E\xE7\xBB\x8F\xE8\x8D\xAF\xE5\x89\x82", lib1_gv_aCTION, "UED", lib1_gv_rARE, 5, 3, null, "\xE6\xB7\xBB\xE5\x8A\xA0\xE4\xB8\xA4\xE5\xBC\xA0\xE5\xA5\xB4\xE9\x9A\xB6\xE5\xB7\xA2\xE7\xBE\xA4\xE7\x89\x8C\xE5\x88\xB0\xE4\xBD\xA0\xE7\x9A\x84\xE6\x89\x8B\xE4\xB8\xAD\xE3\x80\x82", "Assets\\Textures\\btn-ability-zerg-poisonnova.dds", SoundLink("Nova_StimInfusion", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DEFAULT, lib1_gt_EffectNeurostimDrugs);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_tERRAN, "Burning Outpost", "\xE7\x87\x83\xE7\x83\xA7\xE7\x9A\x84\xE5\x89\x8D\xE5\x93\xA8\xE7\xAB\x99", lib1_gv_sTRUCTURE, "", lib1_gv_cOMMON, 4, 0, null, "\xE5\xBB\xBA\xE9\x80\xA0\xE4\xB8\x80\xE4\xB8\xAA\xE5\x9C\xB0\xE5\xA0\xA1\xE5\x92\x8C\xE4\xB8\x80\xE4\xB8\xAA\xE5\x85\xB5\xE8\x90\xA5\xE3\x80\x82 \xE4\xBB\x96\xE4\xBB\xAC\xE5\x8F\xAA\xE6\x9C\x89 30% \xE7\x94\x9F\xE5\x91\xBD\xE5\x80\xBC\xE3\x80\x82", "Assets\\Textures\\btn-ability-terran-ignorearmor.dds", SoundLink("Uni_DeathFXFire", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DEFAULT, lib1_gt_EffectBurningOutpost);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_tERRAN, "Combat Drugs", "\xE6\x88\x98\xE6\x96\x97\xE8\x8D\xAF\xE5\x89\x82", lib1_gv_aCTION, "", lib1_gv_uNCOMMON, 1, 1, null, "\xE4\xBD\xA0\xE7\x9A\x84\xE7\x94\x9F\xE7\x89\xA9\xE5\x8D\x95\xE4\xBD\x8D\xE5\x9C\xA8\xE4\xB8\xA4\xE5\x9B\x9E\xE5\x90\x88\xE5\x86\x85\xE6\xAF\x8F\xE7\xA7\x92\xE6\x81\xA2\xE5\xA4\x8D 10 \xE7\x82\xB9\xE7\x94\x9F\xE5\x91\xBD\xE5\x80\xBC\xE3\x80\x82", "Assets\\Textures\\btn-upgrade-terran-reapercombatdrugs.dds", SoundLink("Spell_CombatDrugs_Launch", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DEFAULT, lib1_gt_EffectCombatDrugs);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_tERRAN, "Scrappy Raiders", "\xE6\x95\xA3\xE4\xB9\xB1\xE7\x9A\x84\xE7\xAA\x81\xE5\x87\xBB\xE9\x98\x9F", lib1_gv_tACTICAL, "", lib1_gv_cOMMON, 3, 0, null, "\xE4\xBF\x9D\xE6\x9C\x89\xEF\xBC\x9A\xE4\xBF\x9D\xE6\x9C\x89\xE8\x8B\xB1\xE9\x9B\x84\xE7\x89\xB9\xE6\x80\xA7,\xE5\xA6\x82\xE6\x9E\x9C\xE4\xBD\xA0\xE6\x8E\xA7\xE5\x88\xB6\xE7\x9A\x84\xE5\x8D\x95\xE4\xBF\x9D\xE6\x8C\x81\xE5\x9C\xA8 10 \xE4\xB8\xAA\xE6\x88\x96\xE4\xBB\xA5\xE4\xB8\x8B\xE3\x80\x82", "Assets\\Textures\\btn-unit-terran-merc-marine.dds", SoundLink("Marine_Attack", 1));
    lib1_gf_DefineCardUnit(lv_id, "EliteMarine", 6);
    lib1_gf_AddHeroictoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_tERRAN, "Ace Pilots", "\xE7\x8E\x8B\xE7\x89\x8C\xE9\xA3\x9E\xE8\xA1\x8C\xE5\x91\x98", lib1_gv_tACTICAL, "", lib1_gv_uNCOMMON, 5, 2, null, "\xE4\xBF\x9D\xE6\x9C\x89\xEF\xBC\x9A\xE4\xBF\x9D\xE6\x9C\x89\xE8\x8B\xB1\xE9\x9B\x84\xE5\x92\x8C rush \xE7\x89\xB9\xE6\x80\xA7,\xE5\xA6\x82\xE6\x9E\x9C\xE4\xBD\xA0\xE6\x8E\xA7\xE5\x88\xB6\xE7\x9A\x84\xE5\x8D\x95\xE4\xBF\x9D\xE6\x8C\x81\xE5\x9C\xA8 10 \xE4\xB8\xAA\xE6\x88\x96\xE4\xBB\xA5\xE4\xB8\x8B\xE3\x80\x82", "Assets\\Textures\\btn-unit-terran-wingednightmare.dds", SoundLink("Wraith", 1));
    lib1_gf_DefineCardUnit(lv_id, "WraithHeroic", 2);
    lib1_gf_AddHeroictoCardDefinition(lv_id);
    lib1_gf_AddRushtoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_tERRAN, "Lt. Morales", "\xE8\x8E\xAB\xE6\x8B\x89\xE6\x96\xAF\xE4\xB8\xAD\xE5\xB0\x89", lib1_gv_dEFENSIVE, "UED", lib1_gv_uNIQUE, 5, 2, null, "\xE6\x88\x98\xE5\x90\xBC\xEF\xBC\x9A \xE6\xB7\xBB\xE5\x8A\xA0\xE5\x85\xB4\xE5\xA5\x8B\xE5\x89\x82\xE7\x89\x8C, \xE6\x88\x98\xE6\x96\x97\xE8\x8D\xAF\xE7\x89\xA9\xE7\x89\x8C\xE5\x92\x8C\xE7\xA5\x9E\xE7\xBB\x8F\xE5\x88\xBA\xE6\xBF\x80\xE8\x8D\xAF\xE7\x89\xA9\xE7\x89\x8C \xE5\x88\xB0\xE4\xBD\xA0\xE6\x89\x8B\xE4\xB8\xAD\xE3\x80\x82", "Assets\\Textures\\btn-unit-terran-medicelite.dds", SoundLink("LtMorales", 0));
    lib1_gf_DefineCardUnit(lv_id, "MedicLtMorales", 1);
    lib1_gf_AddHeroictoCardDefinition(lv_id);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DRAW, lib1_gt_EffectLtMorales);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_tERRAN, "EMP", "EMP", lib1_gv_aCTION, "", lib1_gv_cOMMON, 1, 1, null, "\xE6\xB8\x85\xE7\xA9\xBA\xE6\x89\x80\xE6\x9C\x89\xE6\x95\x8C\xE5\xAF\xB9\xE5\x8D\x95\xE4\xBD\x8D\xE7\x9A\x84\xE8\x83\xBD\xE9\x87\x8F\xE3\x80\x82 \xE5\x8E\xBB\xE9\x99\xA4\xE6\x95\x8C\xE5\xAF\xB9\xE5\x8D\x95\xE4\xBD\x8D\xE7\x9A\x84\xE9\x9A\x90\xE8\xBA\xAB\xE6\x95\x88\xE6\x9E\x9C 10 \xE7\xA7\x92\xE3\x80\x82", "Assets\\Textures\\btn-ability-terran-emp-color.dds", SoundLink("Ghost_EMPAttackImpact", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_REMOVE_UNIT_AOE_DAMAGE, lib1_gt_EffectEMP);
    lib1_gf_AddDetectiontoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_tERRAN, "Regroup", "\xE9\x87\x8D\xE6\x95\xB4\xE6\x97\x97\xE9\xBC\x93", lib1_gv_aCTION, "", lib1_gv_rARE, 2, 0, null, "\xE5\x91\xBD\xE4\xBB\xA4\xE4\xBD\xA0\xE5\xB0\x9A\xE6\x9C\xAA\xE5\xA4\x84\xE4\xBA\x8E\xE6\x92\xA4\xE7\xA6\xBB\xE7\x8A\xB6\xE6\x80\x81\xE7\x9A\x84 9 \xE4\xB8\xAA\xE6\x9C\x80\xE8\x99\x9A\xE5\xBC\xB1\xE7\x9A\x84\xE5\x8D\x95\xE4\xBD\x8D\xE6\x92\xA4\xE7\xA6\xBB\xE6\x88\x98\xE5\x9C\xBA\xE3\x80\x82 \xE8\xBF\x99\xE4\xBA\x9B\xE5\x8D\x95\xE4\xBD\x8D\xE6\xAF\x8F\xE6\x88\x90\xE5\x8A\x9F\xE6\x92\xA4\xE7\xA6\xBB 3 \xE4\xB8\xAA,\xE6\x8A\xBD\xE4\xB8\x80\xE5\xBC\xA0\xE7\x89\x8C\xE3\x80\x82", "Assets\\Textures\\btn-tips-challengecounter.dds", SoundLink("Marine_Help", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DRAW, lib1_gt_EffectRegroup);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_DesperateAlliancesTerran_Init () {
    lib1_gt_DesperateAlliancesTerran = TriggerCreate("lib1_gt_DesperateAlliancesTerran_Func");
    TriggerAddEventMapInit(lib1_gt_DesperateAlliancesTerran);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Desperate Alliances Zerg
//--------------------------------------------------------------------------------------------------
bool lib1_gt_DesperateAlliancesZerg_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_id;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_id = 407;
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_zERG, "Corrosive Devourers", "\xE8\x85\x90\xE8\x9A\x80\xE5\x90\x9E\xE5\x99\xAC\xE8\x80\x85", lib1_gv_aGGRESSIVE, "", lib1_gv_cOMMON, 5, 3, null, "\xE6\x88\x98\xE5\x90\xBC\xEF\xBC\x9A\xE5\x87\x8F\xE5\xB0\x91\xE4\xBD\xA0\xE7\x9A\x84\xE7\x93\xA6\xE6\x96\xAF\xE4\xBA\xA7\xE8\x83\xBD 1 \xE7\x82\xB9\xE3\x80\x82", "Assets\\Textures\\btn-unit-zerg-devourerex3.dds", SoundLink("ClassicDevourer", 1));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DEFAULT, lib1_gt_CommonEffectRemove1GasIncome);
    lib1_gf_DefineCardUnit(lv_id, "DevourerMP", 4);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_zERG, "Savage Contagion", "\xE5\x87\xB6\xE6\xAE\x8B\xE6\x84\x9F\xE6\x9F\x93", lib1_gv_aCTION, "Evolution", lib1_gv_cOMMON, 3, 2, null, "\xE4\xBD\xA0\xE5\x85\xA8\xE9\x98\x9F\xE7\x9A\x84\xE7\x94\x9F\xE7\x89\xA9\xE5\x8D\x95\xE4\xBD\x8D\xE4\xBC\xA4\xE5\xAE\xB3 +3 (\xE4\xB8\x8D\xE5\x8F\xA0\xE5\x8A\xA0)\xE3\x80\x82", "Assets\\Textures\\btn-upgrade-zerg-adrenaloverload.dds", SoundLink("Hydralisk_Death", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_BUFF_UNITS, lib1_gt_EffectSavageContagion);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_zERG, "Feral Zerglings", "\xE9\x87\x8E\xE5\x8C\x96\xE8\xB7\xB3\xE8\x99\xAB", lib1_gv_aGGRESSIVE, "", lib1_gv_cOMMON, 3, 0, null, "\xE4\xBD\xA0\xE5\x8F\xAA\xE8\x83\xBD\xE5\x9C\xA8\xE4\xBD\xA0\xE6\x8E\xA7\xE5\x88\xB6\xE4\xB8\x80\xE4\xB8\xAA\xE8\x83\xBD\xE9\x87\x8F\xE5\x8D\x95\xE4\xBD\x8D\xE7\x9A\x84\xE6\x97\xB6\xE5\x80\x99\xE6\x89\x93\xE5\x87\xBA\xE8\xBF\x99\xE5\xBC\xA0\xE7\x89\x8C\xE3\x80\x82", "Assets\\Textures\\btn-upgrade-zerg-adrenalglands.dds", SoundLink("Zergling_Yes", 0));
    lib1_gf_DefineCardUnit(lv_id, "Zergling", 24);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_zERG, "Ensnaring Queen", "\xE5\xB8\x83\xE7\xBD\x91\xE5\xA5\xB3\xE7\x9A\x87", lib1_gv_tACTICAL, "", lib1_gv_uNCOMMON, 2, 1, null, "\xE6\x88\x98\xE5\x90\xBC\xEF\xBC\x9A\xE8\xAF\xB1\xE6\x8D\x95\xE6\x95\x8C\xE5\xAF\xB9\xE5\x85\xA8\xE9\x83\xA8\xE9\x9A\x90\xE8\xBA\xAB\xE5\x8F\x8A\xE6\xBD\x9C\xE5\x9C\xB0\xE5\x8D\x95\xE4\xBD\x8D 1 \xE5\x9B\x9E\xE5\x90\x88, \xE4\xBD\xBF\xE5\x85\xB6\xE8\xA2\xAB\xE6\x8F\xAD\xE7\xA4\xBA\xE5\xB9\xB6\xE5\x87\x8F\xE9\x80\x9F\xE3\x80\x82", "Assets\\Textures\\btn-ability-zerg-stukov-ensnare.dds", SoundLink("ClassicQueen", 0));
    lib1_gf_DefineCardUnit(lv_id, "QueenMP", 1);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_REVEAL_UNIT, lib1_gt_EffectEnsnaringQueen);
    lib1_gf_AddDetectiontoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_zERG, "Murderous Claws", "\xE7\x89\x99\xE5\xB0\x96\xE7\x88\xAA\xE5\x88\xA9", lib1_gv_aCTION, "Evolution", lib1_gv_uNCOMMON, 1, 1, null, "\xE4\xBD\xBF\xE4\xBD\xA0\xE7\x9A\x84\xE9\x9A\x90\xE8\xBA\xAB\xE6\x88\x96\xE6\xBD\x9C\xE5\x9C\xB0\xE5\x8D\x95\xE4\xBD\x8D\xE8\x8E\xB7\xE5\xBE\x97\xE6\x94\xBB\xE5\x87\xBB\xE7\xBF\xBB\xE5\x80\x8D buff (\xE4\xB8\x8D\xE5\x8F\xA0\xE5\x8A\xA0)\xE3\x80\x82\xE8\xAF\xA5 buff \xE4\xB8\x8D\xE4\xBC\x9A\xE5\x9B\xA0\xE4\xB8\xBA\xE5\x87\xBA\xE5\x9C\xB0\xE6\x88\x96\xE5\xA4\xB1\xE5\x8E\xBB\xE9\x9A\x90\xE8\xBA\xAB\xE6\x95\x88\xE6\x9E\x9C\xE8\x80\x8C\xE5\xA4\xB1\xE6\x95\x88\xE3\x80\x82", "Assets\\Textures\\btn-upgrade-zerg-dehaka-tenderize.dds", SoundLink("Hydralisk_AttackImpactMelee", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_BUFF_UNITS, lib1_gt_EffectMurderousClaws);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_zERG, "Feral Ultralisk", "\xE9\x87\x8E\xE5\x8C\x96\xE9\x9B\xB7\xE5\x85\xBD", lib1_gv_aGGRESSIVE, "", lib1_gv_uNCOMMON, 2, 1, null, "\xE4\xBD\xA0\xE5\x8F\xAA\xE8\x83\xBD\xE5\x9C\xA8\xE4\xBD\xA0\xE6\x8E\xA7\xE5\x88\xB6\xE4\xB8\x80\xE4\xB8\xAA\xE8\x83\xBD\xE9\x87\x8F\xE5\x8D\x95\xE4\xBD\x8D\xE7\x9A\x84\xE6\x97\xB6\xE5\x80\x99\xE6\x89\x93\xE5\x87\xBA\xE8\xBF\x99\xE5\xBC\xA0\xE7\x89\x8C\xE3\x80\x82", "Assets\\Textures\\btn-ability-zerg-frenzied-color.dds", SoundLink("Ultralisk_What", 0));
    lib1_gf_DefineCardUnit(lv_id, "Ultralisk", 1);
    lib1_gf_AddRushtoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_zERG, "Patient Killers", "\xE8\x80\x90\xE5\xBF\x83\xE7\x9A\x84\xE6\x9D\x80\xE6\x89\x8B", lib1_gv_aGGRESSIVE, "", lib1_gv_cOMMON, 4, 1, null, "\xE5\xAE\x83\xE4\xBB\xAC\xE5\xB0\x86\xE4\xBC\x9A\xE4\xBB\xA5\xE6\xBD\x9C\xE5\x9C\xB0\xE7\x9A\x84\xE7\x8A\xB6\xE6\x80\x81\xE5\x9C\xA8\xE4\xBD\xA0\xE9\x98\xB2\xE5\xAE\x88\xE5\x8C\xBA\xE5\x87\xBA\xE7\x94\x9F\xEF\xBC\x8C\xE4\xBD\x86\xE9\x9C\x80\xE8\xA6\x81\xE7\xAD\x89\xE4\xB8\x80\xE5\x9B\x9E\xE5\x90\x88\xE6\x89\x8D\xE4\xBC\x9A\xE5\x87\xBA\xE5\x9C\xB0\xE3\x80\x82", "Assets\\Textures\\btn-ability-zerg-uproot-color.dds", SoundLink("Zerg_BurrowSmall", 0));
    lib1_gf_DefineCardUnit(lv_id, "Hydralisk", 5);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DEFAULT, lib1_gt_EffectPatientKillers);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_zERG, "True Colors", "\xE7\x9C\x9F\xE5\xAE\x9E\xE9\x9D\xA2\xE7\x9B\xAE", lib1_gv_aCTION, "", lib1_gv_uNIQUE, 6, 3, null, "\xE6\x9D\x80\xE6\x8E\x89\xE6\x89\x80\xE6\x9C\x89\xE5\xB1\x9E\xE4\xBA\x8E\xE4\xBD\xA0\xE7\x9A\x84\xE4\xBD\x86\xE9\x9D\x9E Z \xE7\x9A\x84\xE5\x8D\x95\xE4\xBD\x8D\xE3\x80\x82 \xE6\xAF\x8F\xE6\x9D\x80\xE6\x8E\x89\xE4\xB8\x80\xE5\x8F\xAA\xEF\xBC\x8C\xE9\x9A\x8F\xE6\x9C\xBA\xE4\xBB\x8E\xEF\xBC\x9A \xE5\x8F\xAC\xE5\x94\xA4\xE4\xB8\x80\xE4\xB8\xAA\xE9\x9B\xB7\xE5\x85\xBD\xEF\xBC\x9B \xE4\xB8\x80\xE4\xB8\xAA\xE5\xAE\x88\xE6\x8A\xA4\xE8\x80\x85\xEF\xBC\x9B \xE4\xB8\x89\xE4\xB8\xAA\xE5\x88\xBA\xE8\x9B\x87\xEF\xBC\x9B \xE4\xBA\x94\xE4\xB8\xAA\xE9\xA3\x9E\xE9\xBE\x99\xEF\xBC\x9B \xE6\x88\x96\xE8\x80\x85 15 \xE6\x9D\xA1\xE7\x8B\x97\xE4\xB8\xAD\xE9\x80\x89\xE6\x8B\xA9\xE4\xB8\x80\xE7\xBB\x84\xE5\x8F\xAC\xE5\x94\xA4\xE3\x80\x82", "Assets\\Textures\\btn-ability-kerrigan-apocalypse.dds", SoundLink("TrueColors", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_REMOVE_UNIT, lib1_gt_EffectTrueColors);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_zERG, "Burrowed Swarm", "\xE5\x9F\x8B\xE5\x9C\xB0\xE8\x99\xAB\xE7\xBE\xA4", lib1_gv_aGGRESSIVE, "", lib1_gv_uNCOMMON, 8, 3, null, "\xE5\xAE\x83\xE4\xBB\xAC\xE5\xB0\x86\xE4\xBC\x9A\xE4\xBB\xA5\xE6\xBD\x9C\xE5\x9C\xB0\xE7\x9A\x84\xE7\x8A\xB6\xE6\x80\x81\xE5\x9C\xA8\xE5\x9C\xB0\xE5\x9B\xBE\xE4\xB8\xAD\xE9\x97\xB4\xE5\x87\xBA\xE7\x94\x9F\xEF\xBC\x8C\xE4\xBD\x86\xE9\x9C\x80\xE8\xA6\x81\xE7\xAD\x89\xE4\xB8\x80\xE5\x9B\x9E\xE5\x90\x88\xE6\x89\x8D\xE4\xBC\x9A\xE5\x87\xBA\xE5\x9C\xB0\xE3\x80\x82", "Assets\\Textures\\btn-upgrade-zerg-burrowcharge.dds", SoundLink("Zerg_BurrowLarge", 0));
    lib1_gf_DefineCardUnit(lv_id, "Ultralisk", 1);
    lib1_gf_DefineCardUnit(lv_id, "Hydralisk", 4);
    lib1_gf_DefineCardUnit(lv_id, "Zergling", 20);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DEFAULT, lib1_gt_EffectBurrowedSwarm);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_zERG, "Kukulza Flock", "\xE7\xB2\xBE\xE8\x8B\xB1\xE9\xA3\x9E\xE9\xBE\x99\xE5\xB0\x8F\xE9\x98\x9F", lib1_gv_tACTICAL, "", lib1_gv_cOMMON, 4, 2, null, "", "Assets\\Textures\\btn-unit-zerg-mutalisk-viper.dds", SoundLink("Mutalisk_Pissed", 0));
    lib1_gf_DefineCardUnit(lv_id, "MutaliskKukulza", 4);
    lib1_gf_AddRushtoCardDefinition(lv_id);
    lib1_gf_AddHeroictoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_zERG, "Merciless Finishers", "\xE6\x97\xA0\xE6\x83\x85\xE7\xBB\x88\xE7\xBB\x93\xE8\x80\x85", lib1_gv_aGGRESSIVE, "", lib1_gv_rARE, 3, 1, null, "\xE6\xAF\x8F\xE5\x9B\x9E\xE5\x90\x88\xE5\xB0\x86\xE6\x94\xB9\xE7\x89\x8C\xE5\x8F\xAC\xE5\x94\xA4\xE7\x9A\x84\xE5\x8D\x95\xE4\xBD\x8D\xE9\x87\x8D\xE7\xBD\xAE\xE4\xB8\xBA\xE7\x8E\xB0\xE5\x9C\xA8\xE4\xBD\xA0\xE6\x89\x80\xE6\x8E\xA7\xE5\x88\xB6\xE7\x9A\x84\xE6\x89\x80\xE6\x9C\x89\xE6\xBD\x9C\xE5\x9C\xB0\xE5\x8D\x95\xE4\xBD\x8D\xE3\x80\x82", "Assets\\Textures\\talent-zagara-level15-masterspawner.dds", SoundLink("AICommunication_ZergAICommand_267", 0));
    lib1_gf_AddRushtoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_zERG, "Lurker Advance", "\xE5\x9C\xB0\xE5\x88\xBA\xE6\x8E\xA8\xE8\xBF\x9B", lib1_gv_aGGRESSIVE, "", lib1_gv_uNCOMMON, 2, 2, null, "\xE6\x88\x98\xE5\x90\xBC\xEF\xBC\x9A \xE4\xBD\xA0\xE6\x89\x80\xE6\x9C\x89\xE5\x9C\xB0\xE5\x88\xBA\xE5\xB0\x86\xE5\x87\xBA\xE5\x9C\xB0\xE5\xB9\xB6\xE7\xBB\xA7\xE7\xBB\xAD\xE6\x8E\xA8\xE8\xBF\x9B (\xE8\xBF\x99\xE4\xBA\x9B\xE5\x9C\xB0\xE5\x88\xBA\xE5\x9C\xA8\xE6\x8E\xA5\xE6\x95\x8C\xE5\x90\x8E\xE9\x87\x8D\xE6\x96\xB0\xE6\xBD\x9C\xE5\x9C\xB0)\xE3\x80\x82", "Assets\\Textures\\talent-kerrigan-level05-unlocklurker.dds", SoundLink("Lurker_Pissed", 0));
    lib1_gf_DefineCardUnit(lv_id, "LurkerMP", 1);
    lib1_gf_AddRushtoCardDefinition(lv_id);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DEFAULT, lib1_gt_EffectLurkerAdvance);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_zERG, "Overseer Network", "\xE7\x9C\xBC\xE8\x99\xAB\xE7\xBD\x91\xE7\xBB\x9C", lib1_gv_tACTICAL, "", lib1_gv_cOMMON, 2, 1, null, "\xE5\xAE\x83\xE4\xBB\xAC\xE5\x90\x84\xE6\x8F\x90\xE5\x8D\x87\xE4\xBD\xA0\xE6\x89\x8B\xE7\x89\x8C\xE5\xAE\xB9\xE9\x87\x8F 1 \xE7\x82\xB9\xE3\x80\x82", "Assets\\Textures\\btn-ability-zerg-rapidregeneration-color.dds", SoundLink("Overseer_Ready", 0));
    lib1_gf_DefineCardUnit(lv_id, "Overseer", 4);
    lib1_gf_AddRushtoCardDefinition(lv_id);
    lib1_gf_AddDetectiontoCardDefinition(lv_id);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DEFAULT, lib1_gt_CommonEffectAddHandSizeBufftoAllCreatedUnits);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_zERG, "Devouring One", "\xE7\x8B\xBC\xE5\x90\x9E\xE8\x99\x8E\xE5\x92\xBD\xE8\x80\x85", lib1_gv_aGGRESSIVE, "", lib1_gv_uNIQUE, 2, 0, null, "\xE6\x88\x98\xE5\x90\xBC\xEF\xBC\x9A\xE4\xBB\x8E\xE4\xBD\xA0\xE6\x89\x8B\xE7\x89\x8C\xE4\xB8\xAD\xE9\x9A\x8F\xE6\x9C\xBA\xE4\xB8\xA2\xE5\xBC\x83 5 \xE5\xBC\xA0\xE6\x9C\x80\xE4\xBE\xBF\xE5\xAE\x9C\xE7\x9A\x84\xE5\x8D\x95\xE4\xBD\x8D\xE7\x89\x8C\xE3\x80\x82 \xE6\xAF\x8F\xE4\xB8\xA2\xE5\xBC\x83\xE4\xB8\x80\xE5\xBC\xA0\xEF\xBC\x8C\xE7\xBB\x99\xE4\xBA\x88\xE8\xAF\xA5\xE8\xB7\xB3\xE8\x99\xAB +300 \xE7\x94\x9F\xE5\x91\xBD\xE5\x80\xBC +1 \xE6\x8A\xA4\xE7\x94\xB2 +10 \xE6\x94\xBB\xE5\x87\xBB\xE3\x80\x82", "Assets\\Textures\\btn-unit-collection-webby-zergling.dds", SoundLink("Zergling_AttackDevouringOne", 2));
    lib1_gf_DefineCardUnit(lv_id, "ZerglingHero", 1);
    lib1_gf_AddHeroictoCardDefinition(lv_id);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DISCARD_FROM_HAND, lib1_gt_EffectDevouringOne);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_zERG, "Sudden Betrayal", "\xE7\xAA\x81\xE7\x84\xB6\xE8\x83\x8C\xE5\x8F\x9B", lib1_gv_aCTION, "", lib1_gv_rARE, 2, 1, null, "\xE9\x9A\x8F\xE6\x9C\xBA\xE4\xBB\x8E\xE4\xBD\xA0\xE5\xAF\xB9\xE6\x89\x8B\xE7\x89\x8C\xE5\xBA\x93\xE4\xB8\xAD\xE5\x81\xB7\xE5\x8F\x96\xE4\xB8\x80\xE5\xBC\xA0\xE8\x8B\xB1\xE9\x9B\x84\xE7\x89\x8C\xE5\x88\xB0\xE4\xBD\xA0\xE7\x9A\x84\xE6\x89\x8B\xE7\x89\x8C\xE4\xB8\xAD\xE3\x80\x82", "Assets\\Textures\\btn-ability-kerrigan-kineticblast.dds", SoundLink("SuddenBetrayal", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DRAW, lib1_gt_EffectSuddenBetrayal);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_zERG, "Plaguebringer", "\xE7\x98\x9F\xE7\x96\xAB\xE4\xBD\xBF\xE8\x80\x85", lib1_gv_aGGRESSIVE, "", lib1_gv_cOMMON, 4, 2, null, "\xE6\x88\x98\xE5\x90\xBC\xEF\xBC\x9A \xE7\x94\xA8\xE7\x98\x9F\xE7\x96\xAB\xE6\x84\x9F\xE6\x9F\x93\xE6\x95\x8C\xE4\xBA\xBA\xE6\x9C\x80\xE8\xB4\xB5\xE7\x9A\x84\xE5\xBB\xBA\xE7\xAD\x91\xEF\xBC\x8C\xE5\x9C\xA8 2 \xE5\x9B\x9E\xE5\x90\x88\xE5\x86\x85\xE9\x80\xA0\xE6\x88\x90 1500 \xE7\x82\xB9\xE4\xBC\xA4\xE5\xAE\xB3\xE3\x80\x82\xE5\x87\x8F\xE5\xB0\x91\xE4\xBD\xA0\xE7\x9A\x84\xE7\x93\xA6\xE6\x96\xAF\xE4\xBA\xA7\xE8\x83\xBD 1 \xE7\x82\xB9\xE3\x80\x82", "Assets\\Textures\\btn-ability-zerg-defilerplague.dds", SoundLink("DefilerMP_What", 0));
    lib1_gf_DefineCardUnit(lv_id, "DefilerMP", 1);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_REMOVE_UNIT_1000_DAMAGE, lib1_gt_EffectPlaguebringer);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DEFAULT, lib1_gt_CommonEffectRemove1GasIncome);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_zERG, "Consume", "\xE5\x90\x9E\xE5\x99\xAC", lib1_gv_aCTION, "", lib1_gv_rARE, 3, 1, null, "\xE4\xB8\xA2\xE5\xBC\x83\xE4\xBD\xA0\xE6\x89\x8B\xE4\xB8\xAD\xE6\x9C\x80\xE4\xBE\xBF\xE5\xAE\x9C\xE7\x9A\x84\xE5\x8D\x95\xE4\xBD\x8D\xE7\x89\x8C\xE3\x80\x82 \xE6\x9C\xAC\xE5\x9B\x9E\xE5\x90\x88\xE5\x86\x85\xEF\xBC\x8C\xE4\xBD\xA0\xE7\x9A\x84\xE7\x94\x9F\xE7\x89\xA9\xE8\x83\xBD\xE9\x87\x8F\xE5\x8D\x95\xE4\xBD\x8D\xE6\xAF\x8F\xE7\xA7\x92\xE6\x81\xA2\xE5\xA4\x8D 50 \xE7\x82\xB9\xE8\x83\xBD\xE9\x87\x8F (\xE4\xB8\x8D\xE5\x8F\xA0\xE5\x8A\xA0)\xE3\x80\x82", "Assets\\Textures\\btn-ability-zerg-consume.dds", SoundLink("DefilerMP_Consume", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DISCARD_FROM_HAND, lib1_gt_EffectConsumeDiscard);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_BUFF_UNITS, lib1_gt_EffectConsumeBuff);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_zERG, "Scourge Burst", "\xE7\x88\x86\xE8\x9A\x8A\xE7\x88\x86\xE8\xA3\x82", lib1_gv_aCTION, "", lib1_gv_cOMMON, 3, 2, null, "\xE6\x91\xA7\xE6\xAF\x81\xE6\x95\x8C\xE5\xAF\xB9\xE4\xB8\x80\xE4\xB8\xAA\xE5\x85\xB7\xE6\x9C\x89\xE4\xBE\xA6\xE6\xB5\x8B\xE8\x83\xBD\xE5\x8A\x9B\xE7\x9A\x84\xE7\xA9\xBA\xE4\xB8\xAD\xE5\x8D\x95\xE4\xBD\x8D\xE3\x80\x82 \xE5\x9C\xA8\xE5\x85\xB6\xE6\xAD\xBB\xE4\xBA\xA1\xE5\x90\x8E\xE7\x94\x9F\xE5\x87\xBA 15 \xE4\xB8\xAA\xE7\x88\x86\xE8\x9A\x8A\xE3\x80\x82", "Assets\\Textures\\btn-upgrade-zagara-scourgesplashdamage.dds", SoundLink("ScourgeMP_AttackImpact", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_REMOVE_UNIT, lib1_gt_EffectScourgeBurst);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_zERG, "Spawn Broodlings", "\xE5\xAD\xB5\xE5\x8C\x96\xE5\xB7\xA2\xE8\x99\xAB", lib1_gv_aCTION, "", lib1_gv_uNCOMMON, 4, 2, null, "\xE5\x87\xBB\xE6\x9D\x80\xE4\xB8\x80\xE4\xB8\xAA\xE6\x95\x8C\xE5\xAF\xB9\xE7\x94\x9F\xE5\x91\xBD\xE4\xBB\xA5\xE5\x8F\x8A\xE6\x8A\xA4\xE7\x9B\xBE\xE5\x90\x88\xE8\xAE\xA1 1000 \xE4\xBB\xA5\xE4\xB8\x8B\xE6\x9C\x80\xE8\x82\x89\xE7\x9A\x84\xE5\x8D\x95\xE4\xBD\x8D\xE3\x80\x82 \xE5\x9C\xA8\xE5\x85\xB6\xE6\xAD\xBB\xE4\xBA\xA1\xE5\x90\x8E\xE7\x94\x9F\xE5\x87\xBA 18 \xE4\xB8\xAA\xE5\x8F\xAA\xE8\x83\xBD\xE6\xB4\xBB\xE4\xB8\xA4\xE5\x9B\x9E\xE5\x90\x88\xE7\x9A\x84\xE5\xB7\xA2\xE8\x99\xAB\xE3\x80\x82", "Assets\\Textures\\btn-ability-kerrigan-broodlingnest.dds", SoundLink("QueenMP_SpawnBroodlingsImpact", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_REMOVE_UNIT, lib1_gt_EffectSpawnBroodlings);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_zERG, "Lurker Den", "\xE5\x9C\xB0\xE5\x88\xBA\xE5\xA1\x94", lib1_gv_sTRUCTURE, "", lib1_gv_rARE, 4, 2, null, "\xE5\xBB\xBA\xE9\x80\xA0\xE4\xB8\x80\xE4\xB8\xAA\xE5\x9C\xB0\xE5\x88\xBA\xE5\xB7\xA2\xE3\x80\x82 \xE6\xAF\x8F\xE5\x9B\x9E\xE5\x90\x88\xE6\xB4\x97\xE4\xB8\x80\xE5\xBC\xA0\xE5\x9C\xB0\xE5\x88\xBA\xE8\x99\xAB\xE5\x8D\xB5\xE7\x89\x8C\xE5\x88\xB0\xE4\xBD\xA0\xE7\x9A\x84\xE7\x89\x8C\xE5\xBA\x93\xE4\xB8\xAD\xE3\x80\x82 \xE6\xAF\x8F\xE5\xBD\x93\xE4\xBD\xA0\xE6\x8A\xBD\xE5\x88\xB0\xE4\xB8\x80\xE5\xBC\xA0\xE5\x90\xAB\xE5\x8F\xAC\xE5\x94\xA4\xE5\x9C\xB0\xE5\x88\xBA\xE7\x9A\x84\xE7\x89\x8C, \xE5\x88\x99\xE5\x86\x8D\xE5\xA4\x9A\xE6\x8A\xBD\xE4\xB8\x80\xE5\xBC\xA0\xE7\x89\x8C\xE3\x80\x82", "Assets\\Textures\\btn-building-zerg-lurkerden.dds", SoundLink("LurkerDen_What", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_REMOVE_UNIT, lib1_gt_EffectLurkerDen);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_DesperateAlliancesZerg_Init () {
    lib1_gt_DesperateAlliancesZerg = TriggerCreate("lib1_gt_DesperateAlliancesZerg_Func");
    TriggerAddEventMapInit(lib1_gt_DesperateAlliancesZerg);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Desperate Alliances Protoss
//--------------------------------------------------------------------------------------------------
bool lib1_gt_DesperateAlliancesProtoss_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_id;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_id = 427;
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_pROTOSS, "Darting Corsairs", "\xE6\xB5\xB7\xE7\x9B\x97\xE7\xAA\x81\xE5\x87\xBB\xE9\x98\x9F", lib1_gv_tACTICAL, "", lib1_gv_cOMMON, 3, 2, null, "", "Assets\\Textures\\btn-unit-protoss-corsair.dds", SoundLink("ClassicCorsair", 1));
    lib1_gf_DefineCardUnit(lv_id, "CorsairMP", 4);
    lib1_gf_AddRushtoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_pROTOSS, "Chrono Wave", "\xE6\x98\x9F\xE7\xA9\xBA\xE5\x8A\xA0\xE9\x80\x9F\xE6\xB3\xA2", lib1_gv_aCTION, "", lib1_gv_cOMMON, 1, 2, null, "\xE6\x8F\x90\xE5\x8D\x87\xE4\xBD\xA0\xE7\x9A\x84\xE7\x9F\xBF\xE7\x89\xA9\xE4\xBA\xA7\xE9\x87\x8F 1 \xE7\x82\xB9\xE3\x80\x82 \xE7\x84\xB6\xE5\x90\x8E\xE4\xB8\xBA\xE4\xBD\xA0\xE9\x98\x9F\xE4\xBC\x8D\xE9\x87\x8C\xE7\x9F\xBF\xE7\x89\xA9\xE4\xBA\xA7\xE9\x87\x8F\xE6\x9C\x80\xE4\xBD\x8E\xE7\x9A\x84\xE4\xB8\x80\xE4\xB8\xAA\xE7\x8E\xA9\xE5\xAE\xB6\xE6\x8F\x90\xE5\x8D\x87 1 \xE7\x9F\xBF\xE7\x89\xA9\xE4\xBA\xA7\xE9\x87\x8F\xE3\x80\x82", "Assets\\Textures\\btn-upgrade-karax-chronowave.dds", SoundLink("Obelisk_TimeWarpLaunch", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_INCREASE_INCOME, lib1_gt_EffectChronoWave);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_pROTOSS, "Talematros Grid", "\xE5\xA5\x88\xE6\x8B\x89\xE5\x85\xB6\xE5\xA7\x86\xE7\xBD\x91\xE7\xBB\x9C", lib1_gv_sTRUCTURE, "", lib1_gv_cOMMON, 2, 1, null, "\xE5\xBB\xBA\xE9\x80\xA0\xE4\xB8\xA4\xE4\xB8\xAA\xE6\xB0\xB4\xE6\x99\xB6\xE5\xA1\x94\xE3\x80\x82 \xE4\xBB\x8E\xE5\x8D\xA1\xE7\xBB\x84\xE6\x8A\xBD\xE5\x8F\x96\xE4\xB8\x80\xE5\xBC\xA0\xE5\x8F\xAC\xE5\x94\xA4\xE9\xBB\x91\xE6\x9A\x97\xE5\x9C\xA3\xE5\xA0\x82\xE6\xAD\xA6\xE5\xA3\xAB\xE7\x9A\x84\xE7\x89\x8C\xE3\x80\x82", "Assets\\Textures\\btn-upgrade-karax-pylonwarpininstantly.dds", SoundLink("Pylon_Ready", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_FETCH, lib1_gt_EffectTalematrosGridFetch);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DEFAULT, lib1_gt_EffectTalematrosGridBuild);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_pROTOSS, "Daelaam Architects", "\xE8\xBE\xBE\xE6\x8B\x89\xE5\xA7\x86\xE5\xBB\xBA\xE7\xAD\x91", lib1_gv_dEFENSIVE, "", lib1_gv_uNCOMMON, 2, 1, null, "\xE6\x8A\xBD\xE5\x8F\x96\xE4\xBD\xA0\xE6\x9C\x80\xE4\xBE\xBF\xE5\xAE\x9C\xE7\x9A\x84\xE5\xBB\xBA\xE7\xAD\x91\xE7\x89\x8C\xE3\x80\x82 \xE6\x8A\xBD\xE5\x8F\x96\xE6\x88\x90\xE5\x8A\x9F\xE6\x97\xB6\xEF\xBC\x8C\xE8\xB7\xB3\xE8\xBF\x87\xE4\xBD\xA0\xE7\x9A\x84\xE4\xB8\x8B\xE4\xB8\xAA\xE6\x8A\xBD\xE7\x89\x8C\xE9\x98\xB6\xE6\xAE\xB5\xE3\x80\x82", "Assets\\Textures\\btn-progression-protoss-fenix-4-twilightcouncilresearch.dds", SoundLink("DaelaamArchitects", 0));
    lib1_gf_DefineCardUnit(lv_id, "HighTemplar", 1);
    lib1_gf_DefineCardUnit(lv_id, "DarkTemplar", 1);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_FETCH, lib1_gt_EffectDaelaamArchitects);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_pROTOSS, "Loyal Legion", "\xE5\xBF\xA0\xE8\xAF\x9A\xE7\x9A\x84\xE5\x86\x9B\xE5\x9B\xA2", lib1_gv_aGGRESSIVE, "", lib1_gv_cOMMON, 4, 0, null, "\xE8\xAF\xA5\xE7\x89\x8C\xE5\x8F\xAC\xE5\x94\xA4\xE5\x8F\x89\xE7\x9A\x84\xE6\x95\xB0\xE9\x87\x8F\xE6\xAF\x8F\xE5\x9B\x9E\xE5\x90\x88\xE9\x87\x8D\xE7\xBD\xAE\xE4\xB8\xBA\xE4\xBD\xA0\xE8\x8B\xB1\xE9\x9B\x84\xE6\x95\xB0\xE9\x87\x8F\xE7\x9A\x84\xE4\xB8\xA4\xE5\x80\x8D\xEF\xBC\x88\xE6\x9C\x80\xE5\xB0\x91 1 \xE4\xB8\xAA\xEF\xBC\x89\xE3\x80\x82", "Assets\\Textures\\talent-artanis-level01-swiftretribution.dds", SoundLink("Zealot_Ready", 0));
    lib1_gf_DefineCardUnit(lv_id, "Zealot", 1);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_pROTOSS, "Perimeter Scouts", "\xE8\xBE\xB9\xE7\xBC\x98\xE4\xBE\xA6\xE5\xAF\x9F\xE5\x85\xB5", lib1_gv_tACTICAL, "", lib1_gv_cOMMON, 4, 2, null, "\xE4\xBB\x96\xE4\xBB\xAC\xE4\xBB\x8E\xE9\xAB\x98\xE5\x9C\xB0\xE5\x87\xBA\xE5\x87\xBB\xE3\x80\x82", "Assets\\Textures\\btn-upgrade-protoss-fenix-arbiterchampiondetectionpassive.dds", SoundLink("Scout", 2));
    lib1_gf_DefineCardUnit(lv_id, "ScoutMP", 2);
    lib1_gf_DefineCardUnit(lv_id, "Observer", 1);
    lib1_gf_AddRushtoCardDefinition(lv_id);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DEFAULT, lib1_gt_CommonEffectCliffAmbushSpawn);
    lib1_gf_AddDetectiontoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_pROTOSS, "Dragoon Shrine", "\xE9\xBE\x99\xE9\xAA\x91\xE7\xA5\x9E\xE6\xAE\xBF", lib1_gv_sTRUCTURE, "", lib1_gv_cOMMON, 3, 1, null, "\xE5\xBB\xBA\xE9\x80\xA0\xE4\xB8\x80\xE4\xB8\xAA\xE9\xBE\x99\xE9\xAA\x91\xE5\x88\xB6\xE9\x80\xA0\xE5\x8E\x82\xE3\x80\x82 \xE6\xAF\x8F\xE5\x9B\x9E\xE5\x90\x88\xE7\x94\x9F\xE4\xBA\xA7\xE4\xB8\x80\xE4\xB8\xAA\xE9\xBE\x99\xE9\xAA\x91\xE3\x80\x82 \xE7\xBB\xB4\xE6\x8A\xA4\xEF\xBC\x9A 1 \xE6\xB0\xB4\xE6\x99\xB6\xE6\xAF\x8F\xE5\x9B\x9E\xE5\x90\x88\xE3\x80\x82", "Assets\\Textures\\btn-building-protoss-obelisk.dds", SoundLink("Gateway_Ready", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DEFAULT, lib1_gt_EffectDragoonShrine);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_pROTOSS, "Nerazim Warband", "\xE5\xA5\x88\xE6\x8B\x89\xE5\x85\xB6\xE5\xA7\x86\xE6\x88\x98\xE6\x96\x97\xE5\xB0\x8F\xE9\x98\x9F", lib1_gv_aGGRESSIVE, "", lib1_gv_cOMMON, 3, 1, null, "", "Assets\\Textures\\talent-vorazun-level14-cloakedunitdamageboost.dds", SoundLink("DarkTemplar_What", 2));
    lib1_gf_DefineCardUnit(lv_id, "ZealotNerazim", 3);
    lib1_gf_DefineCardUnit(lv_id, "DarkTemplar", 1);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_pROTOSS, "Artanis, Founder", "\xE5\x88\x9B\xE5\xBB\xBA\xE8\x80\x85\xE9\x98\xBF\xE5\xA1\x94\xE5\xB0\xBC\xE6\x96\xAF", lib1_gv_dEFENSIVE, "", lib1_gv_uNIQUE, 3, 2, null, "\xE6\xAF\x8F\xE5\x9B\x9E\xE5\x90\x88\xE6\x8A\xBD\xE5\x8F\x96\xE6\x9C\x80\xE4\xBE\xBF\xE5\xAE\x9C\xE7\x9A\x84\xE5\xBB\xBA\xE7\xAD\x91\xE7\x89\x8C\xE3\x80\x82 \xE5\xA6\x82\xE6\x9E\x9C\xE6\x8A\xBD\xE5\x8F\x96\xE6\x88\x90\xE5\x8A\x9F\xEF\xBC\x8C\xE8\xB7\xB3\xE8\xBF\x87\xE4\xBD\xA0\xE4\xB8\x8B\xE4\xB8\xAA\xE6\x8A\xBD\xE7\x89\x8C\xE9\x98\xB6\xE6\xAE\xB5\xE3\x80\x82", "Assets\\Textures\\ui-heroicon-artanis.dds", SoundLink("ArtanisFounder", 0));
    lib1_gf_DefineCardUnit(lv_id, "ArtanisVoid", 1);
    lib1_gf_AddHeroictoCardDefinition(lv_id);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DEFAULT, lib1_gt_EffectArtanisFounder);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_pROTOSS, "Disruption Web", "\xE5\xB9\xB2\xE6\x89\xB0\xE7\xBD\x91", lib1_gv_aCTION, "", lib1_gv_uNCOMMON, 1, 1, null, "\xE5\x90\x91\xE6\x95\x8C\xE5\xAF\xB9\xE6\x89\x80\xE6\x9C\x89\xE9\x98\xB2\xE5\xBE\xA1\xE5\xBB\xBA\xE7\xAD\x91\xEF\xBC\x8C\xE6\xBD\x9C\xE5\x9C\xB0\xE7\x9A\x84\xE5\x9C\xB0\xE5\x88\xBA\xE5\x92\x8C\xE6\x94\xBB\xE5\x9F\x8E\xE6\xA8\xA1\xE5\xBC\x8F\xE7\x9A\x84\xE5\x9D\xA6\xE5\x85\x8B\xE6\x96\xBD\xE6\x94\xBE\xE5\xB9\xB2\xE6\x89\xB0\xE7\xBD\x91\xE3\x80\x82 1 \xE5\x9B\x9E\xE5\x90\x88\xE5\x86\x85\xEF\xBC\x8C\xE5\xB9\xB2\xE6\x89\xB0\xE7\xBD\x91\xE4\xBC\x9A\xE4\xBD\xBF\xE6\x95\x8C\xE5\xAF\xB9\xE5\x9C\xB0\xE9\x9D\xA2\xE5\x8D\x95\xE4\xBD\x8D\xE6\x88\x96\xE5\xBB\xBA\xE7\xAD\x91\xE7\x9A\x84\xE6\xAD\xA6\xE5\x99\xA8\xE5\xA4\xB1\xE6\x95\x88", "Assets\\Textures\\btn-ability-protoss-disruptionweb.dds", SoundLink("CorsairMP_DisruptionWebLaunch", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DEFAULT, lib1_gt_EffectDisruptionWeb);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_pROTOSS, "Maelstrom", "\xE5\xA4\xA7\xE6\xBC\xA9\xE6\xB6\xA1", lib1_gv_aCTION, "", lib1_gv_cOMMON, 1, 1, null, "\xE5\x90\x91\xE4\xB8\xA4\xE4\xB8\xAA\xE6\x95\x8C\xE5\xAF\xB9\xE7\x94\x9F\xE7\x89\xA9\xE5\x8D\x95\xE4\xBD\x8D\xE9\x9B\x86\xE7\xBE\xA4\xE6\x96\xBD\xE6\x94\xBE\xE6\xBC\xA9\xE6\xB6\xA1\xE5\xB9\xB6\xE5\x87\xBB\xE6\x99\x95\xE4\xBB\x96\xE4\xBB\xAC 1 \xE5\x9B\x9E\xE5\x90\x88\xE3\x80\x82", "Assets\\Textures\\btn-ability-zeratul-darkarchon-maelstrom.dds", SoundLink("Maelstrom", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_REMOVE_UNIT_AOE_DAMAGE, lib1_gt_EffectMaelstrom);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_pROTOSS, "Mind Control", "\xE7\xB2\xBE\xE7\xA5\x9E\xE6\x8E\xA7\xE5\x88\xB6", lib1_gv_aCTION, "", lib1_gv_rARE, 3, 2, null, "\xE6\xB0\xB8\xE4\xB9\x85\xE7\xB2\xBE\xE6\x8E\xA7\xE4\xB8\x80\xE4\xB8\xAA\xE7\x94\x9F\xE5\x91\xBD\xE5\x92\x8C\xE6\x8A\xA4\xE7\x9B\xBE\xE5\x80\xBC\xE5\x9C\xA8 600 \xE4\xBB\xA5\xE4\xB8\x8B\xE7\x9A\x84\xE6\x95\x8C\xE5\xAF\xB9\xE6\x9C\x80\xE8\x82\x89\xE7\x9A\x84\xE5\x8D\x95\xE4\xBD\x8D\xE3\x80\x82", "Assets\\Textures\\btn-ability-protoss-mindcontrol.dds", SoundLink("MindControl", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_REMOVE_UNIT, lib1_gt_EffectMindControl);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_pROTOSS, "Dark Archon", "\xE9\xBB\x91\xE6\x9A\x97\xE6\x89\xA7\xE6\x94\xBF\xE5\xAE\x98", lib1_gv_tACTICAL, "", lib1_gv_rARE, 2, 1, null, "Each turn this card's launch ability changes\xE3\x80\x82 Launch\xEF\xBC\x9A Add a Maelstrom card to your hand\xE3\x80\x82 ", "Assets\\Textures\\btn-unit-protoss-darkarchon.dds", SoundLink("DarkArchon", 0));
    lib1_gf_DefineCardUnit(lv_id, "ArchonDark", 1);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_pROTOSS, "Augmentation Recall", "\xE6\x89\xA9\xE5\xA4\xA7\xE5\x8F\xAC\xE5\x9B\x9E", lib1_gv_aCTION, "", lib1_gv_rARE, 2, 1, null, "\xE5\x8F\xAC\xE5\x9B\x9E 3 \xE4\xB8\xAA\xE9\xBE\x99\xE9\xAA\x91\xEF\xBC\x8C 3 \xE4\xB8\xAA\xE8\xBF\xBD\xE7\x8C\x8E\xEF\xBC\x8C 3 \xE4\xB8\xAA\xE4\xB8\x8D\xE6\x9C\xBD\xE5\xB9\xB6\xE9\x87\x8D\xE6\x96\xB0\xE7\xBB\x84\xE5\x90\x88\xE4\xB8\xBA\xE4\xB8\x80\xE5\xBC\xA0\xE5\xB8\xA6\xE6\x9C\x89 rush \xEF\xBC\x8C\xE8\x8B\xB1\xE9\x9B\x84\xE7\x89\xB9\xE6\x80\xA7\xE7\x9A\x84\xE6\x88\x98\xE6\x9C\xAF\xE5\x8D\x95\xE4\xBD\x8D\xE7\x89\x8C\xE5\x88\xB0\xE4\xBD\xA0\xE6\x89\x8B\xE4\xB8\xAD\xE3\x80\x82", "Assets\\Textures\\btn-progression-protoss-fenix-1-zealotsuit.dds", SoundLink("Mothership_RecallStart", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DRAW, lib1_gt_EffectAugmentationRecall);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_pROTOSS, "Tassadar's Disciples", "\xE5\xA1\x94\xE8\x90\xA8\xE8\xBE\xBE\xE7\x9A\x84\xE5\x8E\x9F\xE5\x88\x99", lib1_gv_dEFENSIVE, "", lib1_gv_uNCOMMON, 2, 2, null, "\xE6\x88\x98\xE5\x90\xBC\xEF\xBC\x9A \xE9\x9A\x8F\xE6\x9C\xBA\xE6\x89\x93\xE5\x87\xBA\xE4\xBD\xA0\xE6\x89\x8B\xE4\xB8\xAD\xE4\xB8\x80\xE5\xBC\xA0\xE5\x8A\xA8\xE4\xBD\x9C\xE7\x89\x8C\xE3\x80\x82 \xE5\xBD\x93\xE6\x89\x93\xE5\x87\xBA\xE6\x88\x90\xE5\x8A\x9F\xE6\x97\xB6\xEF\xBC\x8C\xE6\x8A\xBD\xE4\xB8\x80\xE5\xBC\xA0\xE7\x89\x8C\xE3\x80\x82", "Assets\\Textures\\btn-upgrade-protoss-khaydarinamulet.dds", SoundLink("HighTemplar_Yes", 0));
    lib1_gf_DefineCardUnit(lv_id, "HighTemplar", 4);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_PLAY_CARD, lib1_gt_EffectTassadarsDisciples);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_pROTOSS, "Powered Gates", "\xE5\x85\x85\xE8\x83\xBD\xE7\x9A\x84\xE4\xBC\xA0\xE9\x80\x81\xE9\x97\xA8", lib1_gv_sTRUCTURE, "", lib1_gv_uNCOMMON, 2, 1, null, "\xE9\x80\xA0\xE4\xB8\xA4\xE4\xB8\xAA\xE6\xB0\xB4\xE6\x99\xB6\xE3\x80\x82 \xE5\xA6\x82\xE6\x9E\x9C\xE4\xBD\xA0\xE6\x9C\x89\xE4\xB8\x80\xE4\xB8\xAA\xE5\xB7\xB2\xE7\xBB\x8F\xE5\x85\x85\xE8\x83\xBD\xE7\x9A\x84\xE4\xBC\xA0\xE9\x80\x81\xE9\x97\xA8\xE6\x88\x96\xE6\x8A\x98\xE8\xB6\x8A\xE9\x97\xA8\xEF\xBC\x8C\xE5\xBB\xBA\xE9\x80\xA0\xE4\xB8\x80\xE4\xB8\xAA\xE4\xBC\xA0\xE9\x80\x81\xE9\x97\xA8\xE3\x80\x82\xE5\xA6\x82\xE6\x9E\x9C\xE4\xBD\xA0\xE6\x9C\x89\xE4\xB8\x80\xE4\xB8\xAA\xE5\xB7\xB2\xE7\xBB\x8F\xE5\x85\x85\xE8\x83\xBD\xE7\x9A\x84\xE6\x98\x9F\xE9\x97\xA8\xE6\x88\x96\xE6\x8A\x98\xE8\xB6\x8A\xE6\x98\x9F\xE9\x97\xA8\xEF\xBC\x8C\xE5\x88\x99\xE5\xBB\xBA\xE9\x80\xA0\xE4\xB8\x80\xE4\xB8\xAA\xE6\x98\x9F\xE9\x97\xA8\xE3\x80\x82", "Assets\\Textures\\talent-artanis-level14-startingmaxsupply.dds", SoundLink("Pylon_Ready", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DEFAULT, lib1_gt_EffectPoweredGates);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_pROTOSS, "Honor Guard", "\xE8\x8D\xA3\xE8\xAA\x89\xE5\x8D\xAB\xE9\x98\x9F", lib1_gv_aGGRESSIVE, "", lib1_gv_uNCOMMON, 4, 1, null, "\xE5\xBD\x93\xE4\xBD\xA0\xE5\xA4\xB1\xE5\x8E\xBB 10 \xE4\xB8\xAA\xE5\x8D\x95\xE4\xBD\x8D\xE7\x9A\x84\xE6\x97\xB6\xE5\x80\x99\xEF\xBC\x8C\xE7\x94\xA8\xE8\x8B\xA6\xE6\xB6\xA9\xE5\xA4\x8D\xE4\xBB\x87\xE8\x80\x85\xE7\x89\x8C\xE6\x9B\xBF\xE6\x8D\xA2\xE8\xBF\x99\xE5\xBC\xA0\xE7\x89\x8C\xE3\x80\x82", "Assets\\Textures\\btn-upgrade-protoss-groundarmorlevel3.dds", SoundLink("HonorGuard", 0));
    lib1_gf_DefineCardUnit(lv_id, "Zealot", 4);
    lib1_gf_DefineCardUnit(lv_id, "HighTemplar", 2);
    lib1_gf_AddDelaytoCardDefinition(lv_id);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_pROTOSS, "Shadow Walk", "\xE6\x9A\x97\xE5\xBD\xB1\xE6\xAD\xA5", lib1_gv_aCTION, "", lib1_gv_uNCOMMON, 1, 2, null, "\xE6\x8A\xBD\xE5\x8F\x96\xE4\xB8\x80\xE5\xBC\xA0\xE5\x8F\xAC\xE5\x94\xA4\xE5\x8F\x89\xE7\x9A\x84\xE7\x89\x8C\xE3\x80\x82 \xE9\x9A\x8F\xE5\x90\x8E\xE5\xB0\x86\xE5\x85\xB6\xE4\xB8\xAD\xE7\x9A\x84\xE5\x8F\x89\xE8\xBD\xAC\xE5\x8C\x96\xE4\xB8\xBA\xE9\x9A\x90\xE5\x88\x80\xE3\x80\x82", "Assets\\Textures\\btn-ability-protoss-shadow-charge.dds", SoundLink("DarkTemplar_What", 0));
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DRAW, lib1_gt_EffectShadowWalk);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_pROTOSS, "Archon of Justice", "\xE5\xAE\xA1\xE5\x88\xA4\xE6\x89\xA7\xE6\x94\xBF\xE5\xAE\x98", lib1_gv_aGGRESSIVE, "", lib1_gv_rARE, 3, 2, null, "\xE4\xBA\xA1\xE8\xAF\xAD\xEF\xBC\x9A\xE5\xAE\x83\xE5\xB0\x86\xE6\x96\xBD\xE6\x94\xBE\xE7\xAD\x89\xE5\x90\x8C\xE4\xBA\x8E\xE6\x9C\xAC\xE5\x9C\xBA\xE6\xB8\xB8\xE6\x88\x8F\xE4\xB8\xAD\xE4\xBD\xA0\xE6\xAD\xBB\xE4\xBA\xA1\xE7\x9A\x84\xE8\x8B\xB1\xE9\x9B\x84\xE5\x8D\x95\xE4\xBD\x8D\xE6\x95\xB0\xE9\x87\x8F\xE7\x9A\x84\xE7\x81\xB5\xE8\x83\xBD\xE9\x97\xAA\xE7\x94\xB5\xE3\x80\x82", "Assets\\Textures\\btn-unit-protoss-archon-upgraded.dds", SoundLink("Archon_Yes", 4));
    lib1_gf_DefineCardUnit(lv_id, "ArchonHero", 1);
    lib1_gf_AddHeroictoCardDefinition(lv_id);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DEFAULT, lib1_gt_EffectArchonofJustice);
    lv_id = (lv_id + 1);
    lib1_gf_DefineCard(lv_id, lib1_gv_dESPERATE_ALLIANCES, lib1_gv_pROTOSS, "Aldaris, Insurgent", "\xE8\xB5\xB7\xE4\xB9\x89\xE5\x86\x9B\xE9\x98\xBF\xE5\xB0\x94\xE8\xBE\xBE\xE7\x91\x9E\xE6\x96\xAF", lib1_gv_aGGRESSIVE, "", lib1_gv_uNIQUE, 6, 3, null, "\xE4\xBB\x96\xE4\xBB\xAC\xE5\x87\xBA\xE7\x94\x9F\xE5\x9C\xA8\xE6\x95\x8C\xE5\xAF\xB9\xE5\x87\xBA\xE7\x94\x9F\xE5\x8C\xBA\xE3\x80\x82", "Assets\\Textures\\btn-unit-collection-zealot-judicator.dds", SoundLink("AldarisInsurgent", 0));
    lib1_gf_DefineCardUnit(lv_id, "ZealotAldaris", 1);
    lib1_gf_DefineCardUnit(lv_id, "DragoonVeteran", 2);
    lib1_gf_DefineCardUnit(lv_id, "ArchonHero", 1);
    lib1_gf_AddHeroictoCardDefinition(lv_id);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DEFAULT, lib1_gt_EffectAldarisInsurgent);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_DesperateAlliancesProtoss_Init () {
    lib1_gt_DesperateAlliancesProtoss = TriggerCreate("lib1_gt_DesperateAlliancesProtoss_Func");
    TriggerAddEventMapInit(lib1_gt_DesperateAlliancesProtoss);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Desperate Alliances Uncollectible
//--------------------------------------------------------------------------------------------------
bool lib1_gt_DesperateAlliancesUncollectible_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_id;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_id = 196;
    lib1_gf_DefineCard(lv_id, lib1_gv_uNCOLLECTIBLE, lib1_gv_pROTOSS, "Shakuras Patrol", "\xE5\xA4\x8F\xE5\xBA\x93\xE6\x8B\x89\xE6\x96\xAF\xE5\xB7\xA1\xE9\x80\xBB", lib1_gv_tACTICAL, "", lib1_gv_uNCOLLECTIBLE, 2, 1, null, "", "Assets\\Textures\\btn-ability-zeratul-topbar-directlegions.dds", SoundLink("ANewHomeworld", 1));
    lib1_gf_AddRushtoCardDefinition(lv_id);
    lv_id = 197;
    lib1_gf_DefineCard(lv_id, lib1_gv_uNCOLLECTIBLE, lib1_gv_tERRAN, "Repair Station", "\xE7\xBB\xB4\xE4\xBF\xAE\xE7\xAB\x99", lib1_gv_dEFENSIVE, "", lib1_gv_uNCOLLECTIBLE, 3, 0, null, "\xE5\xBB\xBA\xE9\x80\xA0\xE4\xB8\x80\xE4\xB8\xAA\xE6\x8A\xA4\xE7\x9B\xBE\xE7\x94\xB5\xE6\xB1\xA0\xE3\x80\x82", "Assets\\Textures\\btn-upgrade-swann-nanorepair.dds", SoundLink("SCV_Yes", 16));
    lib1_gf_DefineCardUnit(lv_id, "SCV", 2);
    lib1_gf_AddRushtoCardDefinition(lv_id);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DEFAULT, lib1_gt_EffectRepairStation);
    lv_id = 198;
    lib1_gf_DefineCard(lv_id, lib1_gv_uNCOLLECTIBLE, lib1_gv_pROTOSS, "Hero Warp", "\xE8\x8B\xB1\xE9\x9B\x84\xE6\x8A\x98\xE8\xB7\x83", lib1_gv_aGGRESSIVE, "", lib1_gv_uNCOLLECTIBLE, 2, 0, null, "", "Assets\\Textures\\sc2_ui_collection_warchest_purchasedialog_racebadge_icon_protoss.dds", SoundLink("WarpGate_TrainStart", 0));
    lib1_gf_AddHeroictoCardDefinition(lv_id);
    lib1_gf_AddRushtoCardDefinition(lv_id);
    lv_id = 199;
    lib1_gf_DefineCard(lv_id, lib1_gv_uNCOLLECTIBLE, lib1_gv_tERRAN, "Vespene Barrel", "\xE7\x93\xA6\xE6\x96\xAF\xE6\xA1\xB6", lib1_gv_aCTION, "", lib1_gv_uNCOLLECTIBLE, 0, -1, null, "\xE8\xA2\xAB\xE9\x80\x89\xE4\xB8\xAD\xE6\x97\xB6\xEF\xBC\x8C +1 \xE7\x93\xA6\xE6\x96\xAF\xE3\x80\x82", "Assets\\Textures\\icon-gas-terran-nobg.dds", SoundLink("Refinery_Ready", 0));
    lv_id = 303;
    lib1_gf_DefineCard(lv_id, lib1_gv_uNCOLLECTIBLE, lib1_gv_pROTOSS, "Augmented Warriors", "\xE8\xB6\x85\xE7\xBA\xA7\xE6\x88\x98\xE5\xA3\xAB", lib1_gv_tACTICAL, "", lib1_gv_uNCOLLECTIBLE, 2, 1, null, "", "Assets\\Textures\\btn-upgrade-protoss-fenix-dragoonsuit-platearmor.dds", SoundLink("Immortal_Attack", 3));
    lib1_gf_AddHeroictoCardDefinition(lv_id);
    lib1_gf_AddRushtoCardDefinition(lv_id);
    lv_id = 304;
    lib1_gf_DefineCard(lv_id, lib1_gv_uNCOLLECTIBLE, lib1_gv_tERRAN_ZERG_UED, "Slave Broods", "\xE5\xA5\xB4\xE9\x9A\xB6\xE5\xB7\xA2\xE7\xBE\xA4", lib1_gv_aGGRESSIVE, "UED", lib1_gv_rARE, 2, 0, null, "\xE6\x88\x98\xE5\x90\xBC\xEF\xBC\x9A\xE6\x8A\xBD\xE4\xB8\x80\xE5\xBC\xA0\xE7\x89\x8C\xE3\x80\x82", "Assets\\Textures\\wireframe-zerg-evolutionegg.dds", SoundLink("UI_MP_HydraliskVox", 0));
    lib1_gf_DefineCardUnit(lv_id, "Hydralisk", 2);
    lib1_gf_DefineCardUnit(lv_id, "Medic", 2);
    lib1_gf_DefineCardUnit(lv_id, "Zergling", 6);
    lib1_gf_AddRushtoCardDefinition(lv_id);
    lib1_gf_AddEffecttoCardDefinition(lv_id, lib1_gv_eF_DRAW, lib1_gt_CommonEffectDraw1);
    lv_id = 449;
    lib1_gf_DefineCard(lv_id, lib1_gv_uNCOLLECTIBLE, lib1_gv_pROTOSS, "Bitter Avengers", "\xE8\x8B\xA6\xE6\xB6\xA9\xE5\xA4\x8D\xE4\xBB\x87\xE8\x80\x85", lib1_gv_aGGRESSIVE, "", lib1_gv_uNCOMMON, 7, 3, null, "", "Assets\\Textures\\btn-ability-protoss-resurgence.dds", SoundLink("BitterAvengers", 0));
    lib1_gf_DefineCardUnit(lv_id, "DragoonVeteran", 4);
    lib1_gf_DefineCardUnit(lv_id, "ArchonHero", 1);
    lib1_gf_AddHeroictoCardDefinition(lv_id);
    lib1_gf_AddRushtoCardDefinition(lv_id);
    lv_id = 450;
    lib1_gf_DefineCard(lv_id, lib1_gv_uNCOLLECTIBLE, lib1_gv_zERG, "Lurker Spawn", "\xE5\x9C\xB0\xE5\x88\xBA\xE5\x8D\xB5", lib1_gv_aGGRESSIVE, lib1_gv_sPAWN, lib1_gv_uNCOLLECTIBLE, 1, 1, null, "", "Assets\\Textures\\wireframe-zerg-lurker.dds", SoundLink("Lurker_Ready", 0));
    lib1_gf_DefineCardUnit(lv_id, "LurkerMP", 1);
    lib1_gf_AddRushtoCardDefinition(lv_id);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_DesperateAlliancesUncollectible_Init () {
    lib1_gt_DesperateAlliancesUncollectible = TriggerCreate("lib1_gt_DesperateAlliancesUncollectible_Func");
    TriggerAddEventMapInit(lib1_gt_DesperateAlliancesUncollectible);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - From the Shadows
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectFromtheShadows_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto17A14D57_g;
    int auto17A14D57_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto17A14D57_g = lv_units_created;
    auto17A14D57_u = UnitGroupCount(auto17A14D57_g, c_unitCountAll);
    for (;; auto17A14D57_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto17A14D57_g, auto17A14D57_u);
        if (lv_unit == null) { break; }
        if ((UnitGetType(lv_unit) == "DarkTemplar")) {
            lib1_gf_IssueCliffAmbushOrders(lv_unit);
        }
        else if ((UnitGetType(lv_unit) == "Hydralisk")) {
            lib1_gf_IssueBurrowedAmbushOrders(lv_unit, RegionFromId(19));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectFromtheShadows_Init () {
    lib1_gt_EffectFromtheShadows = TriggerCreate("lib1_gt_EffectFromtheShadows_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Deadly Saboteurs
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectDeadlySaboteurs_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    bool lv_channel_enabled;
    unit lv_unit;
    unit lv_target_structure;
    point lv_target_structure_position;
    bool lv_no_structures_found;

    // Automatic Variable Declarations
    unitgroup auto83607742_g;
    int auto83607742_u;
    unitgroup auto1808ABAD_g;
    int auto1808ABAD_u;
    unitgroup auto853DDE87_g;
    int auto853DDE87_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lv_channel_enabled = lib1_gv_current_channel_enabled;
    lv_target_structure = lib1_gf_MostExpensiveStructureforRemoval(lv_player);
    if ((lv_target_structure != null)) {
        lv_target_structure_position = UnitGetPosition(lv_target_structure);
        UnitKill(lv_target_structure);
        auto83607742_g = lv_units_created;
        auto83607742_u = UnitGroupCount(auto83607742_g, c_unitCountAll);
        for (;; auto83607742_u -= 1) {
            lv_unit = UnitGroupUnitFromEnd(auto83607742_g, auto83607742_u);
            if (lv_unit == null) { break; }
            UnitSetPosition(lv_unit, lv_target_structure_position, false);
        }
    }
    else {
        lv_no_structures_found = true;
    }
    if ((lv_no_structures_found == true)) {
        auto1808ABAD_g = lv_units_created;
        auto1808ABAD_u = UnitGroupCount(auto1808ABAD_g, c_unitCountAll);
        for (;; auto1808ABAD_u -= 1) {
            lv_unit = UnitGroupUnitFromEnd(auto1808ABAD_g, auto1808ABAD_u);
            if (lv_unit == null) { break; }
            if ((UnitGetType(lv_unit) == "LurkerMPBurrowed")) {
                UnitIssueOrder(lv_unit, Order(AbilityCommand("BurrowLurkerMPUp", 0)), c_orderQueueReplace);
            }

        }
        Wait(1.1, c_timeGame);
        auto853DDE87_g = lv_units_created;
        auto853DDE87_u = UnitGroupCount(auto853DDE87_g, c_unitCountAll);
        for (;; auto853DDE87_u -= 1) {
            lv_unit = UnitGroupUnitFromEnd(auto853DDE87_g, auto853DDE87_u);
            if (lv_unit == null) { break; }
            if ((UnitGetType(lv_unit) == "LurkerMP")) {
                lib1_gf_IssueDefaultOrders(lv_unit);
            }

        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectDeadlySaboteurs_Init () {
    lib1_gt_EffectDeadlySaboteurs = TriggerCreate("lib1_gt_EffectDeadlySaboteurs_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Fenix and Raynor
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectFenixandRaynor_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto2559B785_g;
    int auto2559B785_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto2559B785_g = lv_units_created;
    auto2559B785_u = UnitGroupCount(auto2559B785_g, c_unitCountAll);
    for (;; auto2559B785_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto2559B785_g, auto2559B785_u);
        if (lv_unit == null) { break; }
        if ((UnitGetType(lv_unit) == "DragoonFenix")) {
            UnitBehaviorAdd(lv_unit, "FenixsLeadership", lv_unit, 1);
        }
        else if ((UnitGetType(lv_unit) == "Raynor")) {
            UnitBehaviorAdd(lv_unit, "RaynorsLeadership", lv_unit, 1);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectFenixandRaynor_Init () {
    lib1_gt_EffectFenixandRaynor = TriggerCreate("lib1_gt_EffectFenixandRaynor_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Fearless Raiders
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectFearlessRaiders_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_GenerateCardforHand(lv_player, lib1_gf_GetCardIDByName("Repair Station"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectFearlessRaiders_Init () {
    lib1_gt_EffectFearlessRaiders = TriggerCreate("lib1_gt_EffectFearlessRaiders_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Kerrigan and Raszagal
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectKerriganandRaszagal_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup autoABF77532_g;
    int autoABF77532_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    autoABF77532_g = UnitGroupAlliance(lv_player, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoABF77532_u = UnitGroupCount(autoABF77532_g, c_unitCountAll);
    for (;; autoABF77532_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoABF77532_g, autoABF77532_u);
        if (lv_unit == null) { break; }
        if (((UnitHasBehavior2(lv_unit, "Detector10") == true) || (UnitHasBehavior2(lv_unit, "Detector11") == true) || (UnitHasBehavior2(lv_unit, "Detector12") == true) || (UnitHasBehavior2(lv_unit, "Detector13p75") == true) || (UnitHasBehavior2(lv_unit, "Detector20") == true) || (UnitHasBehavior2(lv_unit, "Detector7") == true) || (UnitHasBehavior2(lv_unit, "Detector9") == true) || (UnitHasBehavior2(lv_unit, "SensorTowerRadar") == true))) {
            UnitBehaviorAdd(lv_unit, "Sabotage", lv_unit, 1);
            UnitBehaviorRemove(lv_unit, "Detector10", c_unitBehaviorCountAll);
            UnitBehaviorRemove(lv_unit, "Detector11", c_unitBehaviorCountAll);
            UnitBehaviorRemove(lv_unit, "Detector12", c_unitBehaviorCountAll);
            UnitBehaviorRemove(lv_unit, "Detector13p75", c_unitBehaviorCountAll);
            UnitBehaviorRemove(lv_unit, "Detector20", c_unitBehaviorCountAll);
            UnitBehaviorRemove(lv_unit, "Detector7", c_unitBehaviorCountAll);
            UnitBehaviorRemove(lv_unit, "Detector9", c_unitBehaviorCountAll);
            UnitBehaviorRemove(lv_unit, "SensorTowerRadar", c_unitBehaviorCountAll);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectKerriganandRaszagal_Init () {
    lib1_gt_EffectKerriganandRaszagal = TriggerCreate("lib1_gt_EffectKerriganandRaszagal_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Samir Duran
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectSamirDuran_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;
    unit lv_duran;

    // Automatic Variable Declarations
    unitgroup autoE0F6B7B0_g;
    int autoE0F6B7B0_u;
    unitgroup auto1A13B262_g;
    int auto1A13B262_u;
    unitgroup autoFF06FCF8_g;
    int autoFF06FCF8_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lv_duran = UnitGroupRandomUnit(lv_units_created, c_unitCountAlive);
    UnitIssueOrder(lv_duran, OrderSetAutoCast(AbilityCommand("ChannelSnipe", 0), true), c_orderQueueAddToFront);
    UnitIssueOrder(lv_duran, OrderSetAutoCast(AbilityCommand("EMP", 0), true), c_orderQueueAddToFront);
    autoE0F6B7B0_g = UnitGroup(null, lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE0F6B7B0_u = UnitGroupCount(autoE0F6B7B0_g, c_unitCountAll);
    for (;; autoE0F6B7B0_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoE0F6B7B0_g, autoE0F6B7B0_u);
        if (lv_unit == null) { break; }
        if ((lib1_gf_UnitIsPet(lv_unit) == false) && (CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lv_unit), "Race", c_playerAny) == "Terr")) {
            UnitBehaviorAdd(lv_duran, "SuspiciousTech", lv_duran, 1);
            break;
        }

    }
    auto1A13B262_g = UnitGroup(null, lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1A13B262_u = UnitGroupCount(auto1A13B262_g, c_unitCountAll);
    for (;; auto1A13B262_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto1A13B262_g, auto1A13B262_u);
        if (lv_unit == null) { break; }
        if ((lib1_gf_UnitIsPet(lv_unit) == false) && (CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lv_unit), "Race", c_playerAny) == "Zerg")) {
            UnitBehaviorAdd(lv_duran, "ExposedCarapace", lv_duran, 1);
            break;
        }

    }
    autoFF06FCF8_g = UnitGroup(null, lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoFF06FCF8_u = UnitGroupCount(autoFF06FCF8_g, c_unitCountAll);
    for (;; autoFF06FCF8_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoFF06FCF8_g, autoFF06FCF8_u);
        if (lv_unit == null) { break; }
        if ((lib1_gf_UnitIsPet(lv_unit) == false) && (CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lv_unit), "Race", c_playerAny) == "Prot")) {
            UnitBehaviorAdd(lv_duran, "MaskedNature", lv_duran, 1);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectSamirDuran_Init () {
    lib1_gt_EffectSamirDuran = TriggerCreate("lib1_gt_EffectSamirDuran_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Project Black Flag
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectProjectBlackFlag_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto25652380_g;
    int auto25652380_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto25652380_g = UnitGroup(null, lv_player, RegionEntireMap(), UnitFilter((1 << c_targetFilterCanHaveEnergy), 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto25652380_u = UnitGroupCount(auto25652380_g, c_unitCountAll);
    for (;; auto25652380_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto25652380_g, auto25652380_u);
        if (lv_unit == null) { break; }
        lib1_gf_GenerateCardtoTopofDeck(lv_player, lib1_gf_GetCardIDByName("Slave Broods"));
    }
    lib1_gf_ShuffleDeck(lv_player);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectProjectBlackFlag_Init () {
    lib1_gt_EffectProjectBlackFlag = TriggerCreate("lib1_gt_EffectProjectBlackFlag_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Psionic Blackout
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectPsionicBlackout_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unitgroup lv_enemy_detectors;
    unit lv_unit;
    int lv_count;

    // Automatic Variable Declarations
    unitgroup auto719D3B7D_g;
    int auto719D3B7D_u;
    const int auto5A81B88C_ae = 3;
    const int auto5A81B88C_ai = 1;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();
    lv_enemy_detectors = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto719D3B7D_g = UnitGroupAlliance(lv_player, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto719D3B7D_u = UnitGroupCount(auto719D3B7D_g, c_unitCountAll);
    for (;; auto719D3B7D_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto719D3B7D_g, auto719D3B7D_u);
        if (lv_unit == null) { break; }
        if (((UnitHasBehavior2(lv_unit, "Detector10") == true) || (UnitHasBehavior2(lv_unit, "Detector11") == true) || (UnitHasBehavior2(lv_unit, "Detector12") == true) || (UnitHasBehavior2(lv_unit, "Detector13p75") == true) || (UnitHasBehavior2(lv_unit, "Detector20") == true) || (UnitHasBehavior2(lv_unit, "Detector7") == true) || (UnitHasBehavior2(lv_unit, "Detector9") == true) || (UnitHasBehavior2(lv_unit, "SensorTowerRadar") == true))) {
            UnitGroupAdd(lv_enemy_detectors, lv_unit);
        }

    }
    lv_count = 1;
    for ( ; ( (auto5A81B88C_ai >= 0 && lv_count <= auto5A81B88C_ae) || (auto5A81B88C_ai < 0 && lv_count >= auto5A81B88C_ae) ) ; lv_count += auto5A81B88C_ai ) {
        if ((UnitGroupCount(lv_enemy_detectors, c_unitCountAlive) >= 1)) {
            lv_unit = UnitGroupRandomUnit(lv_enemy_detectors, c_unitCountAlive);
            UnitGroupRemove(lv_enemy_detectors, lv_unit);
            UnitBehaviorAdd(lv_unit, "Sabotage", lv_unit, 1);
            UnitBehaviorRemove(lv_unit, "Detector10", c_unitBehaviorCountAll);
            UnitBehaviorRemove(lv_unit, "Detector11", c_unitBehaviorCountAll);
            UnitBehaviorRemove(lv_unit, "Detector12", c_unitBehaviorCountAll);
            UnitBehaviorRemove(lv_unit, "Detector13p75", c_unitBehaviorCountAll);
            UnitBehaviorRemove(lv_unit, "Detector20", c_unitBehaviorCountAll);
            UnitBehaviorRemove(lv_unit, "Detector7", c_unitBehaviorCountAll);
            UnitBehaviorRemove(lv_unit, "Detector9", c_unitBehaviorCountAll);
            UnitBehaviorRemove(lv_unit, "SensorTowerRadar", c_unitBehaviorCountAll);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectPsionicBlackout_Init () {
    lib1_gt_EffectPsionicBlackout = TriggerCreate("lib1_gt_EffectPsionicBlackout_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Korhal Garrison
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectKorhalGarrison_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_BuildStructure(lv_player, lv_card_id, "SCV", AbilityCommand("TerranBuild", 6), "Bunker", true, 1.0);
    lib1_gf_BuildStructure(lv_player, lv_card_id, "SCV", AbilityCommand("TerranBuild", 5), "MissileTurret", true, 1.0);
    lib1_gf_BuildStructure(lv_player, lv_card_id, "Drone", AbilityCommand("ZergBuild", 16), "SunkenColony", true, 1.0);
    lib1_gf_BuildStructure(lv_player, lv_card_id, "Drone", AbilityCommand("ZergBuild", 16), "SunkenColony", true, 1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectKorhalGarrison_Init () {
    lib1_gt_EffectKorhalGarrison = TriggerCreate("lib1_gt_EffectKorhalGarrison_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Air Support
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectAirSupport_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto08B92663_g;
    int auto08B92663_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto08B92663_g = lv_units_created;
    auto08B92663_u = UnitGroupCount(auto08B92663_g, c_unitCountAll);
    for (;; auto08B92663_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto08B92663_g, auto08B92663_u);
        if (lv_unit == null) { break; }
        if ((UnitGetType(lv_unit) == "Hyperion")) {
            UnitGroupRemove(lib1_gv_aggressive_units, lv_unit);
            UnitGroupAdd(lib1_gv_leaving_units, lv_unit);
            UnitIssueOrder(lv_unit, OrderTargetingPoint(AbilityCommand("BattlecruiserMove", 0), RegionGetCenter(lib1_gv_player[lv_player].lv_attack_region)), c_orderQueueReplace);
            UnitIssueOrder(lv_unit, OrderSetAutoCast(AbilityCommand("Yamato", 0), false), c_orderQueueAddToFront);
            UnitIssueOrder(lv_unit, OrderTargetingPoint(AbilityCommand("Hyperjump", 0), RegionGetCenter(lib1_gv_player[lv_player].lv_cleanup_region)), c_orderQueueAddToEnd);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectAirSupport_Init () {
    lib1_gt_EffectAirSupport = TriggerCreate("lib1_gt_EffectAirSupport_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - The Iron Fist
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectTheIronFist_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto6A1913C5_g;
    int auto6A1913C5_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto6A1913C5_g = lv_units_created;
    auto6A1913C5_u = UnitGroupCount(auto6A1913C5_g, c_unitCountAll);
    for (;; auto6A1913C5_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto6A1913C5_g, auto6A1913C5_u);
        if (lv_unit == null) { break; }
        UnitIssueOrder(lv_unit, OrderTargetingPoint(AbilityCommand("Hyperjump", 0), RegionRandomPoint(lib1_gv_player[lv_player].lv_enemy_defense_region)), c_orderQueueAddToFront);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectTheIronFist_Init () {
    lib1_gt_EffectTheIronFist = TriggerCreate("lib1_gt_EffectTheIronFist_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Escape Shuttle
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectEscapeShuttle_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    int lv_count;

    // Automatic Variable Declarations
    const int autoE6EB8DCB_ae = 2;
    const int autoE6EB8DCB_ai = 1;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lv_count = 1;
    for ( ; ( (autoE6EB8DCB_ai >= 0 && lv_count <= autoE6EB8DCB_ae) || (autoE6EB8DCB_ai < 0 && lv_count >= autoE6EB8DCB_ae) ) ; lv_count += autoE6EB8DCB_ai ) {
        UnitCreate(1, "Medivac", 0, lv_player, RegionRandomPoint(lib1_gv_player[lv_player].lv_spawn_region), libNtve_gf_RandomAngle());
        UnitBehaviorAdd(UnitLastCreated(), "PermanentlyInvulnerable", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "PermanentlyUncommandable", UnitLastCreated(), 1);
        lib1_gf_IssuePickupOrder(UnitLastCreated(), UnitFilter((1 << c_targetFilterGround) | (1 << c_targetFilterBiological), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterInvulnerable - 32))), false);
        UnitGroupAdd(lib1_gv_units_from_card[lib1_gf_GetCardIDByName("Escape Shuttle")], UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("MedivacSpeedBoost", 0)), c_orderQueueAddToFront);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectEscapeShuttle_Init () {
    lib1_gt_EffectEscapeShuttle = TriggerCreate("lib1_gt_EffectEscapeShuttle_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Psi Emitter
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectPsiEmitter_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;
    int lv_other_player;

    // Automatic Variable Declarations
    unitgroup auto1F1D813D_g;
    int auto1F1D813D_u;
    const int auto334F6FDB_ae = lib1_gv_mAX_PLAYERS;
    const int auto334F6FDB_ai = 1;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto1F1D813D_g = lv_units_created;
    auto1F1D813D_u = UnitGroupCount(auto1F1D813D_g, c_unitCountAll);
    for (;; auto1F1D813D_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto1F1D813D_g, auto1F1D813D_u);
        if (lv_unit == null) { break; }
        if ((UnitGetType(lv_unit) == "SCV")) {
            UnitIssueOrder(lv_unit, OrderSetAutoCast(AbilityCommand("Repair", 0), true), c_orderQueueReplace);
            UnitBehaviorAdd(lv_unit, "PsiEmitter", lv_unit, 1);
            UnitGroupAdd(lib1_gv_psi_emitter_units, lv_unit);
            lv_other_player = 1;
            for ( ; ( (auto334F6FDB_ai >= 0 && lv_other_player <= auto334F6FDB_ae) || (auto334F6FDB_ai < 0 && lv_other_player >= auto334F6FDB_ae) ) ; lv_other_player += auto334F6FDB_ai ) {
                lib1_gv_player[lv_other_player].lv_resources.lv_mineral_income = (lib1_gv_player[lv_other_player].lv_resources.lv_mineral_income + 1);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectPsiEmitter_Init () {
    lib1_gt_EffectPsiEmitter = TriggerCreate("lib1_gt_EffectPsiEmitter_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Psi Emitter SCV Dies
//--------------------------------------------------------------------------------------------------
bool lib1_gt_PsiEmitterSCVDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_other_player;

    // Automatic Variable Declarations
    const int auto6BA0A024_ae = lib1_gv_mAX_PLAYERS;
    const int auto6BA0A024_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "SCV"))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "PsiEmitter") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_other_player = 1;
    for ( ; ( (auto6BA0A024_ai >= 0 && lv_other_player <= auto6BA0A024_ae) || (auto6BA0A024_ai < 0 && lv_other_player >= auto6BA0A024_ae) ) ; lv_other_player += auto6BA0A024_ai ) {
        lib1_gv_player[lv_other_player].lv_resources.lv_mineral_income = (lib1_gv_player[lv_other_player].lv_resources.lv_mineral_income - 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_PsiEmitterSCVDies_Init () {
    lib1_gt_PsiEmitterSCVDies = TriggerCreate("lib1_gt_PsiEmitterSCVDies_Func");
    TriggerAddEventUnitDied(lib1_gt_PsiEmitterSCVDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Orbital Supply Drop Overdraw Prevention
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectOrbitalSupplyDropOverdrawPrevention_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gv_player[lv_player].lv_prevent_overdraw_flag = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectOrbitalSupplyDropOverdrawPrevention_Init () {
    lib1_gt_EffectOrbitalSupplyDropOverdrawPrevention = TriggerCreate("lib1_gt_EffectOrbitalSupplyDropOverdrawPrevention_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Orbital Supply Drop Draw
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectOrbitalSupplyDropDraw_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_team;
    int lv_card_id;
    unitgroup lv_units_created;
    int lv_ally;

    // Automatic Variable Declarations
    playergroup auto4DBBAC00_g;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lv_team = lib1_gv_player[lv_player].lv_team;
    auto4DBBAC00_g = lib1_gv_team[lv_team];
    lv_ally = -1;
    while (true) {
        lv_ally = PlayerGroupNextPlayer(auto4DBBAC00_g, lv_ally);
        if (lv_ally < 0) { break; }
        lib1_gf_DrawCardFromDecktoHand(lv_ally);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectOrbitalSupplyDropDraw_Init () {
    lib1_gt_EffectOrbitalSupplyDropDraw = TriggerCreate("lib1_gt_EffectOrbitalSupplyDropDraw_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Raider's Cache
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectRaidersCache_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_BuildStructure(lv_player, lv_card_id, "SCV", AbilityCommand("TerranBuild", 18), "RaidersCache", false, -1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectRaidersCache_Init () {
    lib1_gt_EffectRaidersCache = TriggerCreate("lib1_gt_EffectRaidersCache_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Atlas Wing
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectAtlasWing_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    int lv_hand_index;
    int lv_top_of_hand;

    // Automatic Variable Declarations
    int autoF07FB5E0_ae;
    const int autoF07FB5E0_ai = 1;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lv_top_of_hand = lib1_gf_TopofHand(lv_player);
    autoF07FB5E0_ae = lv_top_of_hand;
    lv_hand_index = 0;
    for ( ; ( (autoF07FB5E0_ai >= 0 && lv_hand_index <= autoF07FB5E0_ae) || (autoF07FB5E0_ai < 0 && lv_hand_index >= autoF07FB5E0_ae) ) ; lv_hand_index += autoF07FB5E0_ai ) {
        if ((lib1_gv_player[lv_player].lv_hand.lv_card[lv_hand_index].lv_subtype == "UED") && ((lib1_gv_player[lv_player].lv_hand.lv_card[lv_hand_index].lv_type == lib1_gv_aGGRESSIVE) || (lib1_gv_player[lv_player].lv_hand.lv_card[lv_hand_index].lv_type == lib1_gv_dEFENSIVE) || (lib1_gv_player[lv_player].lv_hand.lv_card[lv_hand_index].lv_type == lib1_gv_tACTICAL))) {
            if ((lib1_gv_player[lv_player].lv_hand.lv_card[lv_hand_index].lv_heroic == true)) {
                lib1_gf_AddUnittoHandCard(lv_player, lv_hand_index, 1, "GoliathHeroic");
            }
            else {
                lib1_gf_AddUnittoHandCard(lv_player, lv_hand_index, 1, "Goliath");
            }
            lib1_gf_UpdateHandCardText(lv_player, lv_hand_index);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectAtlasWing_Init () {
    lib1_gt_EffectAtlasWing = TriggerCreate("lib1_gt_EffectAtlasWing_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Cronus Wing
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectCronusWing_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    int lv_hand_index;
    int lv_top_of_hand;

    // Automatic Variable Declarations
    int auto097D2C32_ae;
    const int auto097D2C32_ai = 1;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lv_top_of_hand = lib1_gf_TopofHand(lv_player);
    auto097D2C32_ae = lv_top_of_hand;
    lv_hand_index = 0;
    for ( ; ( (auto097D2C32_ai >= 0 && lv_hand_index <= auto097D2C32_ae) || (auto097D2C32_ai < 0 && lv_hand_index >= auto097D2C32_ae) ) ; lv_hand_index += auto097D2C32_ai ) {
        if ((lib1_gv_player[lv_player].lv_hand.lv_card[lv_hand_index].lv_subtype == "UED") && ((lib1_gv_player[lv_player].lv_hand.lv_card[lv_hand_index].lv_type == lib1_gv_aGGRESSIVE) || (lib1_gv_player[lv_player].lv_hand.lv_card[lv_hand_index].lv_type == lib1_gv_dEFENSIVE) || (lib1_gv_player[lv_player].lv_hand.lv_card[lv_hand_index].lv_type == lib1_gv_tACTICAL))) {
            if ((lib1_gv_player[lv_player].lv_hand.lv_card[lv_hand_index].lv_heroic == true)) {
                lib1_gf_AddUnittoHandCard(lv_player, lv_hand_index, 1, "WraithHeroic");
            }
            else {
                lib1_gf_AddUnittoHandCard(lv_player, lv_hand_index, 1, "Wraith");
            }
            lib1_gf_UpdateHandCardText(lv_player, lv_hand_index);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectCronusWing_Init () {
    lib1_gt_EffectCronusWing = TriggerCreate("lib1_gt_EffectCronusWing_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Confederate Loyalists
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectConfederateLoyalists_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    int lv_hand_index;
    int lv_count;

    // Automatic Variable Declarations
    const int auto0BD27B9A_ae = 2;
    const int auto0BD27B9A_ai = 1;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lv_count = 1;
    for ( ; ( (auto0BD27B9A_ai >= 0 && lv_count <= auto0BD27B9A_ae) || (auto0BD27B9A_ai < 0 && lv_count >= auto0BD27B9A_ae) ) ; lv_count += auto0BD27B9A_ai ) {
        lv_hand_index = lib1_gf_RandomHandCard(lv_player, "", "", -1, lib1_gv_cONFEDERATE);
        if ((lv_hand_index >= 0)) {
            lib1_gf_DiscardCardFromHandtoDiscard(lv_player, lv_hand_index);
            lib1_gf_AddEffecttoQueue(lv_player, lv_card_id, lib1_gv_eF_DRAW, lib1_gt_CommonEffectDraw1, lv_units_created, false);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectConfederateLoyalists_Init () {
    lib1_gt_EffectConfederateLoyalists = TriggerCreate("lib1_gt_EffectConfederateLoyalists_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Colonial Conscripts Hand Discard
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectColonialConscriptsHandDiscard_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    int lv_hand_index;
    int lv_top_of_hand;

    // Automatic Variable Declarations
    const int autoBA63FB36_ae = 0;
    const int autoBA63FB36_ai = -1;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lv_top_of_hand = lib1_gf_TopofHand(lv_player);
    if ((lv_top_of_hand >= 0)) {
        lv_hand_index = lv_top_of_hand;
        for ( ; ( (autoBA63FB36_ai >= 0 && lv_hand_index <= autoBA63FB36_ae) || (autoBA63FB36_ai < 0 && lv_hand_index >= autoBA63FB36_ae) ) ; lv_hand_index += autoBA63FB36_ai ) {
            if ((lib1_gv_player[lv_player].lv_hand.lv_card[lv_hand_index].lv_subtype == lib1_gv_cONFEDERATE)) {
                lib1_gf_DiscardCardFromHandtoDiscard(lv_player, lv_hand_index);
                lib1_gf_AddEffecttoQueue(lv_player, lv_card_id, lib1_gv_eF_DRAW, lib1_gt_EffectColonialConscriptsHandAdd, lv_units_created, false);
            }

        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectColonialConscriptsHandDiscard_Init () {
    lib1_gt_EffectColonialConscriptsHandDiscard = TriggerCreate("lib1_gt_EffectColonialConscriptsHandDiscard_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Colonial Conscripts Hand Add
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectColonialConscriptsHandAdd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_GenerateCardforHand(lv_player, lib1_gf_GetRandomCardIDWithSubtype("UED", false));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectColonialConscriptsHandAdd_Init () {
    lib1_gt_EffectColonialConscriptsHandAdd = TriggerCreate("lib1_gt_EffectColonialConscriptsHandAdd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Colonial Conscripts Deck
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectColonialConscriptsDeck_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    int lv_deck_index;
    int lv_top_of_deck;
    bool lv_shuffle_required;

    // Automatic Variable Declarations
    const int autoF6580437_ae = 0;
    const int autoF6580437_ai = -1;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lv_top_of_deck = lib1_gf_TopofDeck(lv_player);
    if ((lv_top_of_deck >= 0)) {
        lv_deck_index = lv_top_of_deck;
        for ( ; ( (autoF6580437_ai >= 0 && lv_deck_index <= autoF6580437_ae) || (autoF6580437_ai < 0 && lv_deck_index >= autoF6580437_ae) ) ; lv_deck_index += autoF6580437_ai ) {
            if ((lib1_gv_player[lv_player].lv_deck.lv_card[lv_deck_index].lv_subtype == lib1_gv_cONFEDERATE)) {
                lib1_gf_DiscardCardFromDecktoDiscard(lv_player, lv_deck_index);
                lib1_gf_GenerateCardtoTopofDeck(lv_player, lib1_gf_GetRandomCardIDWithSubtype("UED", false));
                lv_shuffle_required = true;
            }

        }
    }

    if ((lv_shuffle_required == true)) {
        lib1_gf_ShuffleDeck(lv_player);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectColonialConscriptsDeck_Init () {
    lib1_gt_EffectColonialConscriptsDeck = TriggerCreate("lib1_gt_EffectColonialConscriptsDeck_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Fuel Raid Removal
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectFuelRaidRemoval_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    UnitCreate(1, "Thor", 0, lv_player, RegionRandomPoint(lib1_gv_player[lv_player].lv_spawn_region), libNtve_gf_RandomAngle());
    UnitBehaviorAdd(UnitLastCreated(), "Caster", UnitLastCreated(), 1);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("250mmStrikeCannons", 0), lib1_gf_RandomStructureForHardRemovalWithCostRestrictions(lv_player, 0, 2)), c_orderQueueReplace);
    lib1_gf_IssueLeaveOrders(UnitLastCreated(), c_orderQueueAddToEnd);
    UnitCreate(1, "Thor", 0, lv_player, RegionRandomPoint(lib1_gv_player[lv_player].lv_spawn_region), libNtve_gf_RandomAngle());
    UnitBehaviorAdd(UnitLastCreated(), "Caster", UnitLastCreated(), 1);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("250mmStrikeCannons", 0), lib1_gf_RandomStructureForHardRemovalWithCostRestrictions(lv_player, 0, 2)), c_orderQueueReplace);
    lib1_gf_IssueLeaveOrders(UnitLastCreated(), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectFuelRaidRemoval_Init () {
    lib1_gt_EffectFuelRaidRemoval = TriggerCreate("lib1_gt_EffectFuelRaidRemoval_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Fuel Raid Vespene Barrel
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectFuelRaidVespeneBarrel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_GenerateCardforHand(lv_player, lib1_gf_GetCardIDByName("Vespene Barrel"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectFuelRaidVespeneBarrel_Init () {
    lib1_gt_EffectFuelRaidVespeneBarrel = TriggerCreate("lib1_gt_EffectFuelRaidVespeneBarrel_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Commandeer Removal
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectCommandeerRemoval_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;
    int lv_count;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    UnitCreate(1, "BattlecruiserAleksander", 0, lv_player, RegionRandomPoint(lib1_gv_player[lv_player].lv_spawn_region), libNtve_gf_RandomAngle());
    UnitBehaviorAdd(UnitLastCreated(), "Caster", UnitLastCreated(), 1);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("YamatoGunHyperion", 0), lib1_gf_RandomStructureForHardRemovalWithCostRestrictions(lv_player, 4, 6)), c_orderQueueReplace);
    lib1_gf_IssueLeaveOrders(UnitLastCreated(), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectCommandeerRemoval_Init () {
    lib1_gt_EffectCommandeerRemoval = TriggerCreate("lib1_gt_EffectCommandeerRemoval_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Commandeer Deck Additions
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectCommandeerDeckAdditions_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_GenerateCardtoTopofDeck(lv_player, lib1_gf_GetCardIDByName("Battlecruiser"));
    lib1_gf_GenerateCardtoTopofDeck(lv_player, lib1_gf_GetCardIDByName("Battlecruiser"));
    lib1_gf_ShuffleDeck(lv_player);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectCommandeerDeckAdditions_Init () {
    lib1_gt_EffectCommandeerDeckAdditions = TriggerCreate("lib1_gt_EffectCommandeerDeckAdditions_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Neurostim Drugs
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectNeurostimDrugs_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_GenerateCardforHand(lv_player, lib1_gf_GetCardIDByName("Slave Broods"));
    lib1_gf_GenerateCardforHand(lv_player, lib1_gf_GetCardIDByName("Slave Broods"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectNeurostimDrugs_Init () {
    lib1_gt_EffectNeurostimDrugs = TriggerCreate("lib1_gt_EffectNeurostimDrugs_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Burning Outpost
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectBurningOutpost_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_BuildStructure(lv_player, lv_card_id, "SCV", AbilityCommand("TerranBuild", 3), "Barracks", false, 3.0);
    lib1_gf_BuildStructure(lv_player, lv_card_id, "SCV", AbilityCommand("TerranBuild", 6), "Barracks", true, 1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectBurningOutpost_Init () {
    lib1_gt_EffectBurningOutpost = TriggerCreate("lib1_gt_EffectBurningOutpost_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Combat Drugs
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectCombatDrugs_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup autoBED26046_g;
    int autoBED26046_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    autoBED26046_g = UnitGroup(null, lv_player, RegionEntireMap(), UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBED26046_u = UnitGroupCount(autoBED26046_g, c_unitCountAll);
    for (;; autoBED26046_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoBED26046_g, autoBED26046_u);
        if (lv_unit == null) { break; }
        UnitBehaviorAdd(lv_unit, "CombatDrugs", lv_unit, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectCombatDrugs_Init () {
    lib1_gt_EffectCombatDrugs = TriggerCreate("lib1_gt_EffectCombatDrugs_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Lt. Morales
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectLtMorales_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_GenerateCardforHand(lv_player, lib1_gf_GetCardIDByName("Stimpack"));
    lib1_gf_GenerateCardforHand(lv_player, lib1_gf_GetCardIDByName("Combat Drugs"));
    lib1_gf_GenerateCardforHand(lv_player, lib1_gf_GetCardIDByName("Neurostim Drugs"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectLtMorales_Init () {
    lib1_gt_EffectLtMorales = TriggerCreate("lib1_gt_EffectLtMorales_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - EMP
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectEMP_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;
    unitgroup lv_targets;

    // Automatic Variable Declarations
    unitgroup autoC45E5D0D_g;
    int autoC45E5D0D_u;
    unitgroup auto63056EA4_g;
    int auto63056EA4_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();
    lv_targets = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    autoC45E5D0D_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterCanHaveEnergy), 0, (1 << c_targetFilterSelf) | (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC45E5D0D_u = UnitGroupCount(autoC45E5D0D_g, c_unitCountAll);
    for (;; autoC45E5D0D_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoC45E5D0D_g, autoC45E5D0D_u);
        if (lv_unit == null) { break; }
        UnitCreate(1, "ScienceVessel", 0, lv_player, RegionRandomPoint(lib1_gv_player[lv_player].lv_spawn_region), libNtve_gf_RandomAngle());
        UnitBehaviorAdd(UnitLastCreated(), "Caster", UnitLastCreated(), 1);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("EMPInstant", 0), UnitGetPosition(lv_unit)), c_orderQueueReplace);
        lib1_gf_IssueLeaveOrders(UnitLastCreated(), c_orderQueueAddToEnd);
        UnitGroupAdd(lv_targets, lv_unit);
    }
    auto63056EA4_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterCloaked), 0, (1 << c_targetFilterSelf) | (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto63056EA4_u = UnitGroupCount(auto63056EA4_g, c_unitCountAll);
    for (;; auto63056EA4_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto63056EA4_g, auto63056EA4_u);
        if (lv_unit == null) { break; }
        if ((UnitGroupHasUnit(lv_targets, lv_unit) == false)) {
            UnitCreate(1, "ScienceVessel", 0, lv_player, RegionRandomPoint(lib1_gv_player[lv_player].lv_spawn_region), libNtve_gf_RandomAngle());
            UnitBehaviorAdd(UnitLastCreated(), "Caster", UnitLastCreated(), 1);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("EMPInstant", 0), UnitGetPosition(lv_unit)), c_orderQueueReplace);
            lib1_gf_IssueLeaveOrders(UnitLastCreated(), c_orderQueueAddToEnd);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectEMP_Init () {
    lib1_gt_EffectEMP = TriggerCreate("lib1_gt_EffectEMP_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Regroup
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectRegroup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unitgroup lv_possible_retreat_units;
    unit lv_unit;
    unit lv_possible_target;
    unit lv_final_target;
    int lv_count;
    unitgroup lv_targets;

    // Automatic Variable Declarations
    unitgroup autoA7705A1F_g;
    int autoA7705A1F_u;
    unitgroup autoF6E6F9E6_g;
    int autoF6E6F9E6_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();
    lv_possible_retreat_units = UnitGroupEmpty();
    lv_targets = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lv_possible_retreat_units = UnitGroup(null, lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA7705A1F_g = lv_possible_retreat_units;
    autoA7705A1F_u = UnitGroupCount(autoA7705A1F_g, c_unitCountAll);
    for (;; autoA7705A1F_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoA7705A1F_g, autoA7705A1F_u);
        if (lv_unit == null) { break; }
        if ((UnitGroupHasUnit(lib1_gv_aggressive_units, lv_unit) == false) && (UnitGroupHasUnit(lib1_gv_defensive_units, lv_unit) == false) && (UnitGroupHasUnit(lib1_gv_tactical_units, lv_unit) == false)) {
            UnitGroupRemove(lv_possible_retreat_units, lv_unit);
        }

    }
    while ((UnitGroupCount(lv_possible_retreat_units, c_unitCountAlive) >= 1) && (lv_count < 9)) {
        lv_final_target = UnitGroupRandomUnit(lv_possible_retreat_units, c_unitCountAlive);
        autoF6E6F9E6_g = lv_possible_retreat_units;
        autoF6E6F9E6_u = UnitGroupCount(autoF6E6F9E6_g, c_unitCountAll);
        for (;; autoF6E6F9E6_u -= 1) {
            lv_possible_target = UnitGroupUnitFromEnd(autoF6E6F9E6_g, autoF6E6F9E6_u);
            if (lv_possible_target == null) { break; }
            if ((lib1_gf_AdjustedToughnessOfUnit(lv_possible_target) < lib1_gf_AdjustedToughnessOfUnit(lv_final_target))) {
                lv_final_target = lv_possible_target;
            }

        }
        lib1_gf_RemoveWaitingToMoveOutBuffs(lv_final_target);
        UnitGroupRemove(lib1_gv_aggressive_units, lv_final_target);
        UnitGroupRemove(lib1_gv_defensive_units, lv_final_target);
        UnitGroupRemove(lib1_gv_tactical_units, lv_final_target);
        UnitGroupRemove(lv_possible_retreat_units, lv_final_target);
        lib1_gf_IssueLeaveOrders(lv_final_target, c_orderQueueReplace);
        lv_count = (lv_count + 1);
    }
    if (((lv_count >= 3) && (lv_count <= 5))) {
        lib1_gf_DrawCardFromDecktoHand(lv_player);
    }
    else if (((lv_count >= 6) && (lv_count <= 8))) {
        lib1_gf_DrawCardFromDecktoHand(lv_player);
        lib1_gf_DrawCardFromDecktoHand(lv_player);
    }
    else if ((lv_count == 9)) {
        lib1_gf_DrawCardFromDecktoHand(lv_player);
        lib1_gf_DrawCardFromDecktoHand(lv_player);
        lib1_gf_DrawCardFromDecktoHand(lv_player);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectRegroup_Init () {
    lib1_gt_EffectRegroup = TriggerCreate("lib1_gt_EffectRegroup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Carapace Contagion
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectCarapaceContagion_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;
    fixed lv_life_increase;
    fixed lv_current_life;

    // Automatic Variable Declarations
    unitgroup auto7381A249_g;
    int auto7381A249_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto7381A249_g = UnitGroupAlliance(lv_player, c_unitAllianceAlly, RegionEntireMap(), UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7381A249_u = UnitGroupCount(auto7381A249_g, c_unitCountAll);
    for (;; auto7381A249_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto7381A249_g, auto7381A249_u);
        if (lv_unit == null) { break; }
        if ((UnitHasBehavior2(lv_unit, "CarapaceContagion") == false)) {
            UnitBehaviorAdd(lv_unit, "CarapaceContagion", lv_unit, 1);
            UnitBehaviorAdd(lv_unit, "AggressiveMutation", lv_unit, 1);
            lv_life_increase = (UnitGetPropertyFixed(lv_unit, c_unitPropLifeMax, c_unitPropCurrent) * 0.5);
            lv_current_life = UnitGetPropertyFixed(lv_unit, c_unitPropLife, c_unitPropCurrent);
            UnitSetPropertyFixed(lv_unit, c_unitPropLifeMax, (UnitGetPropertyFixed(lv_unit, c_unitPropLifeMax, c_unitPropCurrent) + lv_life_increase));
            UnitSetPropertyFixed(lv_unit, c_unitPropLife, (lv_current_life + lv_life_increase));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectCarapaceContagion_Init () {
    lib1_gt_EffectCarapaceContagion = TriggerCreate("lib1_gt_EffectCarapaceContagion_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Savage Contagion
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectSavageContagion_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;
    fixed lv_life_increase;
    fixed lv_current_life;

    // Automatic Variable Declarations
    unitgroup auto12B47C81_g;
    int auto12B47C81_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto12B47C81_g = UnitGroupAlliance(lv_player, c_unitAllianceAlly, RegionEntireMap(), UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto12B47C81_u = UnitGroupCount(auto12B47C81_g, c_unitCountAll);
    for (;; auto12B47C81_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto12B47C81_g, auto12B47C81_u);
        if (lv_unit == null) { break; }
        if ((lib1_gf_UnitTypeIsCaster(UnitGetType(lv_unit)) == false)) {
            UnitBehaviorAdd(lv_unit, "SavageContagion", lv_unit, 1);
            UnitBehaviorAdd(lv_unit, "AggressiveMutation", lv_unit, 1);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectSavageContagion_Init () {
    lib1_gt_EffectSavageContagion = TriggerCreate("lib1_gt_EffectSavageContagion_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Ensnaring Queen
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectEnsnaringQueen_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;
    fixed lv_life_increase;
    fixed lv_current_life;

    // Automatic Variable Declarations
    unitgroup auto335DC771_g;
    int auto335DC771_u;
    unitgroup autoB4800933_g;
    int autoB4800933_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto335DC771_g = UnitGroupAlliance(lv_player, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter((1 << c_targetFilterCloaked), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto335DC771_u = UnitGroupCount(auto335DC771_g, c_unitCountAll);
    for (;; auto335DC771_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto335DC771_g, auto335DC771_u);
        if (lv_unit == null) { break; }
        UnitBehaviorAdd(lv_unit, "QueenMPEnsnare", lv_unit, 1);
    }
    autoB4800933_g = UnitGroupAlliance(lv_player, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter((1 << c_targetFilterBuried), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB4800933_u = UnitGroupCount(autoB4800933_g, c_unitCountAll);
    for (;; autoB4800933_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoB4800933_g, autoB4800933_u);
        if (lv_unit == null) { break; }
        UnitBehaviorAdd(lv_unit, "QueenMPEnsnare", lv_unit, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectEnsnaringQueen_Init () {
    lib1_gt_EffectEnsnaringQueen = TriggerCreate("lib1_gt_EffectEnsnaringQueen_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Murderous Claws
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectMurderousClaws_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;
    fixed lv_life_increase;
    fixed lv_current_life;

    // Automatic Variable Declarations
    unitgroup autoCCAE282C_g;
    int autoCCAE282C_u;
    unitgroup auto7D604BC2_g;
    int auto7D604BC2_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    autoCCAE282C_g = UnitGroup(null, lv_player, RegionEntireMap(), UnitFilter((1 << c_targetFilterCloaked), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoCCAE282C_u = UnitGroupCount(autoCCAE282C_g, c_unitCountAll);
    for (;; autoCCAE282C_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoCCAE282C_g, autoCCAE282C_u);
        if (lv_unit == null) { break; }
        UnitBehaviorAdd(lv_unit, "MurderousClaws", lv_unit, 1);
        UnitBehaviorAdd(lv_unit, "AggressiveMutation", lv_unit, 1);
    }
    auto7D604BC2_g = UnitGroup(null, lv_player, RegionEntireMap(), UnitFilter((1 << c_targetFilterCloaked), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7D604BC2_u = UnitGroupCount(auto7D604BC2_g, c_unitCountAll);
    for (;; auto7D604BC2_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto7D604BC2_g, auto7D604BC2_u);
        if (lv_unit == null) { break; }
        UnitBehaviorAdd(lv_unit, "MurderousClaws", lv_unit, 1);
        UnitBehaviorAdd(lv_unit, "AggressiveMutation", lv_unit, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectMurderousClaws_Init () {
    lib1_gt_EffectMurderousClaws = TriggerCreate("lib1_gt_EffectMurderousClaws_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Patient Killers
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectPatientKillers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto1CBA886E_g;
    int auto1CBA886E_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto1CBA886E_g = lv_units_created;
    auto1CBA886E_u = UnitGroupCount(auto1CBA886E_g, c_unitCountAll);
    for (;; auto1CBA886E_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto1CBA886E_g, auto1CBA886E_u);
        if (lv_unit == null) { break; }
        lib1_gf_IssueBurrowedAmbushOrders(lv_unit, lib1_gv_player[lv_player].lv_defense_region);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectPatientKillers_Init () {
    lib1_gt_EffectPatientKillers = TriggerCreate("lib1_gt_EffectPatientKillers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Burrowed Swarm
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectBurrowedSwarm_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto81A1E9CD_g;
    int auto81A1E9CD_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto81A1E9CD_g = lv_units_created;
    auto81A1E9CD_u = UnitGroupCount(auto81A1E9CD_g, c_unitCountAll);
    for (;; auto81A1E9CD_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto81A1E9CD_g, auto81A1E9CD_u);
        if (lv_unit == null) { break; }
        lib1_gf_IssueBurrowedAmbushOrders(lv_unit, RegionFromId(15));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectBurrowedSwarm_Init () {
    lib1_gt_EffectBurrowedSwarm = TriggerCreate("lib1_gt_EffectBurrowedSwarm_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - True Colors
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectTrueColors_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;
    int lv_random;
    int lv_count;
    int lv_ultralisk_count;
    int lv_guardian_count;
    int lv_hydralisk_count;
    int lv_mutalisk_count;
    int lv_zergling_count;

    // Automatic Variable Declarations
    unitgroup auto3F264735_g;
    int auto3F264735_u;
    int autoBD00C16A_ae;
    const int autoBD00C16A_ai = 1;
    int auto5E9C2348_ae;
    const int auto5E9C2348_ai = 1;
    int auto3D869F86_ae;
    const int auto3D869F86_ai = 1;
    int auto71BC572B_ae;
    const int auto71BC572B_ai = 1;
    int auto4406A53E_ae;
    const int auto4406A53E_ai = 1;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto3F264735_g = UnitGroup(null, lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3F264735_u = UnitGroupCount(auto3F264735_g, c_unitCountAll);
    for (;; auto3F264735_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto3F264735_g, auto3F264735_u);
        if (lv_unit == null) { break; }
        if ((CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lv_unit), "Race", c_playerAny) != "Zerg")) {
            UnitKill(lv_unit);
            lv_random = RandomInt(1, 4);
            if ((lv_random == 1)) {
                lv_ultralisk_count = (lv_ultralisk_count + 1);
            }
            else if ((lv_random == 2)) {
                lv_guardian_count = (lv_guardian_count + 1);
            }
            else if ((lv_random == 3)) {
                lv_hydralisk_count = (lv_hydralisk_count + 3);
            }
            else if ((lv_random == 4)) {
                lv_mutalisk_count = (lv_mutalisk_count + 5);
            }
            else if ((lv_random == 5)) {
                lv_zergling_count = (lv_zergling_count + 15);
            }
        }

    }
    if ((lv_ultralisk_count > 0)) {
        autoBD00C16A_ae = lv_ultralisk_count;
        lv_count = 1;
        for ( ; ( (autoBD00C16A_ai >= 0 && lv_count <= autoBD00C16A_ae) || (autoBD00C16A_ai < 0 && lv_count >= autoBD00C16A_ae) ) ; lv_count += autoBD00C16A_ai ) {
            UnitCreate(1, "Ultralisk", 0, lv_player, RegionRandomPoint(lib1_gv_player[lv_player].lv_spawn_region), libNtve_gf_RandomAngle());
            UnitGroupAdd(lib1_gv_aggressive_units, UnitLastCreated());
            lib1_gf_IssueDefaultOrders(UnitLastCreated());
        }
    }

    if ((lv_guardian_count > 0)) {
        auto5E9C2348_ae = lv_guardian_count;
        lv_count = 1;
        for ( ; ( (auto5E9C2348_ai >= 0 && lv_count <= auto5E9C2348_ae) || (auto5E9C2348_ai < 0 && lv_count >= auto5E9C2348_ae) ) ; lv_count += auto5E9C2348_ai ) {
            UnitCreate(1, "Guardian", 0, lv_player, RegionRandomPoint(lib1_gv_player[lv_player].lv_spawn_region), libNtve_gf_RandomAngle());
            UnitGroupAdd(lib1_gv_aggressive_units, UnitLastCreated());
            lib1_gf_IssueDefaultOrders(UnitLastCreated());
        }
    }

    if ((lv_hydralisk_count > 0)) {
        auto3D869F86_ae = lv_hydralisk_count;
        lv_count = 1;
        for ( ; ( (auto3D869F86_ai >= 0 && lv_count <= auto3D869F86_ae) || (auto3D869F86_ai < 0 && lv_count >= auto3D869F86_ae) ) ; lv_count += auto3D869F86_ai ) {
            UnitCreate(1, "Hydralisk", 0, lv_player, RegionRandomPoint(lib1_gv_player[lv_player].lv_spawn_region), libNtve_gf_RandomAngle());
            UnitGroupAdd(lib1_gv_aggressive_units, UnitLastCreated());
            lib1_gf_IssueDefaultOrders(UnitLastCreated());
        }
    }

    if ((lv_mutalisk_count > 0)) {
        auto71BC572B_ae = lv_mutalisk_count;
        lv_count = 1;
        for ( ; ( (auto71BC572B_ai >= 0 && lv_count <= auto71BC572B_ae) || (auto71BC572B_ai < 0 && lv_count >= auto71BC572B_ae) ) ; lv_count += auto71BC572B_ai ) {
            UnitCreate(1, "Mutalisk", 0, lv_player, RegionRandomPoint(lib1_gv_player[lv_player].lv_spawn_region), libNtve_gf_RandomAngle());
            UnitGroupAdd(lib1_gv_aggressive_units, UnitLastCreated());
            lib1_gf_IssueDefaultOrders(UnitLastCreated());
        }
    }

    if ((lv_zergling_count > 0)) {
        auto4406A53E_ae = lv_zergling_count;
        lv_count = 1;
        for ( ; ( (auto4406A53E_ai >= 0 && lv_count <= auto4406A53E_ae) || (auto4406A53E_ai < 0 && lv_count >= auto4406A53E_ae) ) ; lv_count += auto4406A53E_ai ) {
            UnitCreate(1, "Zergling", 0, lv_player, RegionRandomPoint(lib1_gv_player[lv_player].lv_spawn_region), libNtve_gf_RandomAngle());
            UnitGroupAdd(lib1_gv_aggressive_units, UnitLastCreated());
            lib1_gf_IssueDefaultOrders(UnitLastCreated());
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectTrueColors_Init () {
    lib1_gt_EffectTrueColors = TriggerCreate("lib1_gt_EffectTrueColors_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Overlord Network
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectOverlordNetwork_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;
    fixed lv_life_increase;
    fixed lv_current_life;

    // Automatic Variable Declarations
    unitgroup auto74C8A128_g;
    int auto74C8A128_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto74C8A128_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto74C8A128_u = UnitGroupCount(auto74C8A128_g, c_unitCountAll);
    for (;; auto74C8A128_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto74C8A128_g, auto74C8A128_u);
        if (lv_unit == null) { break; }
        if (((UnitGetType(lv_unit) == "Overlord") || (UnitGetType(lv_unit) == "OverlordOvermind") || (UnitGetType(lv_unit) == "OverlordTransport"))) {
            UnitBehaviorAdd(lv_unit, "Detector11", lv_unit, 1);
            UnitSetPropertyFixed(lv_unit, c_unitPropEnergyMax, 100.0);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectOverlordNetwork_Init () {
    lib1_gt_EffectOverlordNetwork = TriggerCreate("lib1_gt_EffectOverlordNetwork_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Lurker Advance
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectLurkerAdvance_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unitgroup lv_lurkers;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto5E282C68_g;
    int auto5E282C68_u;
    unitgroup auto32FCF6C1_g;
    int auto32FCF6C1_u;
    unitgroup auto03B7CD8F_g;
    int auto03B7CD8F_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();
    lv_lurkers = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto5E282C68_g = UnitGroup("LurkerMPBurrowed", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto5E282C68_u = UnitGroupCount(auto5E282C68_g, c_unitCountAll);
    for (;; auto5E282C68_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto5E282C68_g, auto5E282C68_u);
        if (lv_unit == null) { break; }
        UnitIssueOrder(lv_unit, Order(AbilityCommand("BurrowLurkerMPUp", 0)), c_orderQueueReplace);
        UnitGroupAdd(lv_lurkers, lv_unit);
    }
    auto32FCF6C1_g = UnitGroup("LurkerHunterKillerBurrowed", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto32FCF6C1_u = UnitGroupCount(auto32FCF6C1_g, c_unitCountAll);
    for (;; auto32FCF6C1_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto32FCF6C1_g, auto32FCF6C1_u);
        if (lv_unit == null) { break; }
        UnitIssueOrder(lv_unit, Order(AbilityCommand("BurrowLurkerHunterKillerUp", 0)), c_orderQueueReplace);
        UnitGroupAdd(lv_lurkers, lv_unit);
    }
    Wait(2.8, c_timeGame);
    auto03B7CD8F_g = lv_lurkers;
    auto03B7CD8F_u = UnitGroupCount(auto03B7CD8F_g, c_unitCountAll);
    for (;; auto03B7CD8F_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto03B7CD8F_g, auto03B7CD8F_u);
        if (lv_unit == null) { break; }
        UnitGroupRemove(lib1_gv_defensive_units, lv_unit);
        UnitGroupRemove(lib1_gv_tactical_units, lv_unit);
        UnitGroupAdd(lib1_gv_aggressive_units, lv_unit);
        lib1_gf_IssueDefaultOrders(lv_unit);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectLurkerAdvance_Init () {
    lib1_gt_EffectLurkerAdvance = TriggerCreate("lib1_gt_EffectLurkerAdvance_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Devouring One
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectDevouringOne_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    int lv_count;
    int lv_hand_index;
    unit lv_zergling;

    // Automatic Variable Declarations
    const int auto6698E63C_ae = 5;
    const int auto6698E63C_ai = 1;
    unitgroup auto02E6DC9F_g;
    int auto02E6DC9F_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lv_count = 1;
    for ( ; ( (auto6698E63C_ai >= 0 && lv_count <= auto6698E63C_ae) || (auto6698E63C_ai < 0 && lv_count >= auto6698E63C_ae) ) ; lv_count += auto6698E63C_ai ) {
        lv_hand_index = lib1_gf_CheapestHandCard(lv_player, lib1_gv_uNIT, false, -1);
        if ((lv_hand_index >= 0)) {
            lib1_gf_DiscardCardFromHandtoDiscard(lv_player, lv_hand_index);
            auto02E6DC9F_g = lv_units_created;
            auto02E6DC9F_u = UnitGroupCount(auto02E6DC9F_g, c_unitCountAll);
            for (;; auto02E6DC9F_u -= 1) {
                lv_zergling = UnitGroupUnitFromEnd(auto02E6DC9F_g, auto02E6DC9F_u);
                if (lv_zergling == null) { break; }
                UnitSetScale(lv_zergling, (100.0 + (lv_count * 20.0)), (100.0 + (lv_count * 20.0)), (100.0 + (lv_count * 20.0)));
                UnitBehaviorAdd(lv_zergling, "Hungry", lv_zergling, 1);
            }
        }
        else {
            break;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectDevouringOne_Init () {
    lib1_gt_EffectDevouringOne = TriggerCreate("lib1_gt_EffectDevouringOne_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Sudden Betrayal
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectSuddenBetrayal_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    int[3000] lv_possible_player;
    int[3000] lv_possible_deck_index;
    int lv_opponent;
    int lv_deck_index;
    int lv_possible_target_count;
    int lv_random_choice;
    int lv_first_empty_hand_slot;

    // Automatic Variable Declarations
    playergroup autoFBF386C3_g;
    const int auto9DD8D43B_ae = lib1_gv_dECK_LIMIT;
    const int auto9DD8D43B_ai = 1;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lv_first_empty_hand_slot = lib1_gf_FirstEmptyHandSlot(lv_player);
    if ((lv_first_empty_hand_slot <= lib1_gf_HandLimit(lv_player))) {
        autoFBF386C3_g = lib1_gf_OpposingTeamofPlayer(lv_player);
        lv_opponent = -1;
        while (true) {
            lv_opponent = PlayerGroupNextPlayer(autoFBF386C3_g, lv_opponent);
            if (lv_opponent < 0) { break; }
            lv_deck_index = 0;
            for ( ; ( (auto9DD8D43B_ai >= 0 && lv_deck_index <= auto9DD8D43B_ae) || (auto9DD8D43B_ai < 0 && lv_deck_index >= auto9DD8D43B_ae) ) ; lv_deck_index += auto9DD8D43B_ai ) {
                if ((lib1_gv_player[lv_opponent].lv_deck.lv_card[lv_deck_index].lv_heroic == true)) {
                    lv_possible_player[lv_possible_target_count] = lv_opponent;
                    lv_possible_deck_index[lv_possible_target_count] = lv_deck_index;
                    lv_possible_target_count = (lv_possible_target_count + 1);
                }
                else if ((lib1_gf_PlayerHasCardAtDeckIndex(lv_opponent, lv_deck_index) == false)) {
                    break;
                }
            }
        }
        if ((lv_possible_target_count > 0)) {
            lv_random_choice = RandomInt(0, (lv_possible_target_count - 1));
            UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaChat, (StringExternal("Param/Value/lib_1_04677BCB") + StringToText(lib1_gv_player[lv_possible_player[lv_random_choice]].lv_deck.lv_card[lv_possible_deck_index[lv_random_choice]].lv_name) + StringExternal("Param/Value/lib_1_2E2D0BF9") + PlayerName(lv_possible_player[lv_random_choice]) + StringExternal("Param/Value/lib_1_51C86F91")));
            UIDisplayMessage(PlayerGroupSingle(lv_possible_player[lv_random_choice]), c_messageAreaChat, (PlayerName(lv_player) + StringExternal("Param/Value/lib_1_D41C75A2") + StringToText(lib1_gv_player[lv_possible_player[lv_random_choice]].lv_deck.lv_card[lv_possible_deck_index[lv_random_choice]].lv_name) + StringExternal("Param/Value/lib_1_41B4CD2C")));
            lib1_gf_StealCardFromDecktoHand(lv_player, lv_possible_player[lv_random_choice], lv_possible_deck_index[lv_random_choice]);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectSuddenBetrayal_Init () {
    lib1_gt_EffectSuddenBetrayal = TriggerCreate("lib1_gt_EffectSuddenBetrayal_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Plaguebringer
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectPlaguebringer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    UnitBehaviorAdd(lib1_gf_MostExpensiveStructureforRemoval(lv_player), "PlagueAction", UnitGroupRandomUnit(lv_units_created, c_unitCountAlive), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectPlaguebringer_Init () {
    lib1_gt_EffectPlaguebringer = TriggerCreate("lib1_gt_EffectPlaguebringer_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Consume Discard
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectConsumeDiscard_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    int lv_count;
    int lv_hand_index;
    unit lv_zergling;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lv_hand_index = lib1_gf_CheapestHandCard(lv_player, lib1_gv_uNIT, false, -1);
    if ((lv_hand_index >= 0)) {
        lib1_gf_DiscardCardFromHandtoDiscard(lv_player, lv_hand_index);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectConsumeDiscard_Init () {
    lib1_gt_EffectConsumeDiscard = TriggerCreate("lib1_gt_EffectConsumeDiscard_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Consume Buff
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectConsumeBuff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unitgroup lv_energy_units;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup autoBE3F1557_g;
    int autoBE3F1557_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();
    lv_energy_units = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    autoBE3F1557_g = UnitGroup(null, lv_player, RegionEntireMap(), UnitFilter((1 << c_targetFilterBiological) | (1 << c_targetFilterCanHaveEnergy), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBE3F1557_u = UnitGroupCount(autoBE3F1557_g, c_unitCountAll);
    for (;; autoBE3F1557_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoBE3F1557_g, autoBE3F1557_u);
        if (lv_unit == null) { break; }
        UnitBehaviorAdd(lv_unit, "ConsumedEnergy", lv_unit, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectConsumeBuff_Init () {
    lib1_gt_EffectConsumeBuff = TriggerCreate("lib1_gt_EffectConsumeBuff_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Scourge Burst
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectScourgeBurst_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_target;
    unit lv_scourge;

    // Automatic Variable Declarations
    unitgroup autoDD85ADE6_g;
    int autoDD85ADE6_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lv_target = lib1_gf_RandomTargetForHardRemoval(lv_player, UnitFilter((1 << c_targetFilterAir), (1 << (c_targetFilterDetector - 32)), (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))));
    if ((lv_target != null)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(15, "Scourge", c_unitCreateIgnorePlacement, lv_player, UnitGetPosition(lv_target));
        UnitGroupAddUnitGroup(lib1_gv_aggressive_units, UnitLastCreatedGroup());
        autoDD85ADE6_g = UnitLastCreatedGroup();
        autoDD85ADE6_u = UnitGroupCount(autoDD85ADE6_g, c_unitCountAll);
        for (;; autoDD85ADE6_u -= 1) {
            lv_scourge = UnitGroupUnitFromEnd(autoDD85ADE6_g, autoDD85ADE6_u);
            if (lv_scourge == null) { break; }
            lib1_gf_IssueDefaultOrders(lv_scourge);
        }
        UnitKill(lv_target);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectScourgeBurst_Init () {
    lib1_gt_EffectScourgeBurst = TriggerCreate("lib1_gt_EffectScourgeBurst_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Spawn Broodlings
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectSpawnBroodlings_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_target;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lv_target = lib1_gf_ToughestEnemyTargetForHardRemovalmaxvitalityrestriction(lv_player, UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 1000);
    UnitCreate(1, "QueenMP", 0, lv_player, RegionRandomPoint(lib1_gv_player[lv_player].lv_spawn_region), libNtve_gf_RandomAngle());
    UnitBehaviorAdd(UnitLastCreated(), "Caster", UnitLastCreated(), 1);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("QueenSpawnBroodlingsAction", 0), lv_target), c_orderQueueReplace);
    lib1_gf_IssueLeaveOrders(UnitLastCreated(), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectSpawnBroodlings_Init () {
    lib1_gt_EffectSpawnBroodlings = TriggerCreate("lib1_gt_EffectSpawnBroodlings_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Lurker Den
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectLurkerDen_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_BuildStructure(lv_player, lv_card_id, "Drone", AbilityCommand("ZergBuild", 11), "LurkerDenMP", false, -1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectLurkerDen_Init () {
    lib1_gt_EffectLurkerDen = TriggerCreate("lib1_gt_EffectLurkerDen_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - A New Homeworld
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectANewHomeworld_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    int lv_powered_structure_count;
    int lv_count;
    int lv_hand_index;
    int lv_random_int;

    // Automatic Variable Declarations
    int auto120EBA47_ae;
    const int auto120EBA47_ai = 1;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    if ((lib1_gf_TopofHand(lv_player) < lib1_gf_HandLimit(lv_player))) {
        lib1_gf_GenerateCardforHand(lv_player, lib1_gf_GetCardIDByName("Shakuras Patrol"));
        lv_powered_structure_count = lib1_gf_GetPoweredProtossStructureCount(lv_player);
        lv_powered_structure_count = MaxI(lv_powered_structure_count, 1);
        lv_hand_index = lib1_gf_TopofHand(lv_player);
        auto120EBA47_ae = lv_powered_structure_count;
        lv_count = 1;
        for ( ; ( (auto120EBA47_ai >= 0 && lv_count <= auto120EBA47_ae) || (auto120EBA47_ai < 0 && lv_count >= auto120EBA47_ae) ) ; lv_count += auto120EBA47_ai ) {
            lv_random_int = RandomInt(1, 3);
            if ((lv_random_int == 1)) {
                lib1_gf_AddUnittoHandCard(lv_player, lv_hand_index, 1, "DarkTemplar");
            }
            else if ((lv_random_int == 2)) {
                lib1_gf_AddUnittoHandCard(lv_player, lv_hand_index, 1, "Dragoon");
            }
            else if (true) {
                lib1_gf_AddUnittoHandCard(lv_player, lv_hand_index, 1, "ScoutMP");
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectANewHomeworld_Init () {
    lib1_gt_EffectANewHomeworld = TriggerCreate("lib1_gt_EffectANewHomeworld_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Chrono Wave
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectChronoWave_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_teammate;
    playergroup lv_possible_teammates;
    int lv_lowest_mineral_income;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    playergroup auto281F09A4_g;

    // Variable Initialization
    lv_possible_teammates = PlayerGroupEmpty();
    lv_lowest_mineral_income = 999999;
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gv_player[lv_player].lv_resources.lv_mineral_income = MinI(lib1_gv_mINERAL_LIMIT, (lib1_gv_player[lv_player].lv_resources.lv_mineral_income + 1));
    auto281F09A4_g = lib1_gv_team[lib1_gv_player[lv_player].lv_team];
    lv_teammate = -1;
    while (true) {
        lv_teammate = PlayerGroupNextPlayer(auto281F09A4_g, lv_teammate);
        if (lv_teammate < 0) { break; }
        if ((lib1_gf_MineralIncome(lv_teammate) < lv_lowest_mineral_income)) {
            lv_lowest_mineral_income = lib1_gf_MineralIncome(lv_teammate);
            lv_possible_teammates = PlayerGroupEmpty();
            PlayerGroupAdd(lv_possible_teammates, lv_teammate);
        }
        else if ((lib1_gf_MineralIncome(lv_teammate) == lv_lowest_mineral_income)) {
            PlayerGroupAdd(lv_possible_teammates, lv_teammate);
        }
    }
    lv_teammate = PlayerGroupPlayer(lv_possible_teammates, RandomInt(1, PlayerGroupCount(lv_possible_teammates)));
    lib1_gv_player[lv_teammate].lv_resources.lv_mineral_income = MinI(lib1_gv_mINERAL_LIMIT, (lib1_gv_player[lv_teammate].lv_resources.lv_mineral_income + 1));
    if ((lv_teammate == lv_player)) {
        UIDisplayMessage(PlayerGroupSingle(lv_teammate), c_messageAreaChat, StringExternal("Param/Value/lib_1_EBA36F3F"));
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_teammate), c_messageAreaChat, (PlayerName(lv_player) + StringExternal("Param/Value/lib_1_8635DF8F")));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectChronoWave_Init () {
    lib1_gt_EffectChronoWave = TriggerCreate("lib1_gt_EffectChronoWave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Talematros Grid Fetch
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectTalematrosGridFetch_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    bool lv_fetch;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lv_fetch = lib1_gf_FetchCardWithUnitTypes(lv_player, "DarkTemplar", "DarkTemplarHero", "Zeratul", "DarkTemplarRaszagal", "InvisibleTargetDummy", "InvisibleTargetDummy");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectTalematrosGridFetch_Init () {
    lib1_gt_EffectTalematrosGridFetch = TriggerCreate("lib1_gt_EffectTalematrosGridFetch_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Talematros Grid Build
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectTalematrosGridBuild_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_BuildStructure(lv_player, lv_card_id, "Probe", AbilityCommand("ProtossBuild", 1), "Pylon", false, 1.5);
    lib1_gf_BuildStructure(lv_player, lv_card_id, "Probe", AbilityCommand("ProtossBuild", 1), "Pylon", false, 1.5);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectTalematrosGridBuild_Init () {
    lib1_gt_EffectTalematrosGridBuild = TriggerCreate("lib1_gt_EffectTalematrosGridBuild_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Daelaam Architects
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectDaelaamArchitects_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    bool lv_fetch;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lv_fetch = lib1_gf_FetchLeastExpensiveCardWithType(lv_player, lib1_gv_sTRUCTURE);
    if ((lv_fetch == true)) {
        lib1_gv_player[lv_player].lv_skip_next_draw_step = true;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectDaelaamArchitects_Init () {
    lib1_gt_EffectDaelaamArchitects = TriggerCreate("lib1_gt_EffectDaelaamArchitects_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Dragoon Shrine
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectDragoonShrine_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_BuildStructure(lv_player, lv_card_id, "Probe", AbilityCommand("ProtossBuild", 18), "DragoonShrine", false, -1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectDragoonShrine_Init () {
    lib1_gt_EffectDragoonShrine = TriggerCreate("lib1_gt_EffectDragoonShrine_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Artanis, Founder
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectArtanisFounder_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto74AD4126_g;
    int auto74AD4126_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto74AD4126_g = lv_units_created;
    auto74AD4126_u = UnitGroupCount(auto74AD4126_g, c_unitCountAll);
    for (;; auto74AD4126_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto74AD4126_g, auto74AD4126_u);
        if (lv_unit == null) { break; }
        UnitBehaviorAdd(lv_unit, "DaelaamFounder", lv_unit, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectArtanisFounder_Init () {
    lib1_gt_EffectArtanisFounder = TriggerCreate("lib1_gt_EffectArtanisFounder_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Disruption Web
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectDisruptionWeb_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup autoA576DF39_g;
    int autoA576DF39_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    autoA576DF39_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterSelf) | (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoA576DF39_u = UnitGroupCount(autoA576DF39_g, c_unitCountAll);
    for (;; autoA576DF39_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoA576DF39_g, autoA576DF39_u);
        if (lv_unit == null) { break; }
        if ((libNtve_gf_PlayerIsEnemy(lv_player, UnitGetOwner(lv_unit), libNtve_ge_PlayerRelation_Enemy) == true) && ((UnitGetType(lv_unit) == "Bunker") || (UnitGetType(lv_unit) == "MissileTurret") || (UnitGetType(lv_unit) == "PhotonCannon") || (UnitGetType(lv_unit) == "SpineCrawler") || (UnitGetType(lv_unit) == "SporeCrawler") || (UnitGetType(lv_unit) == "SunkenColony") || (UnitGetType(lv_unit) == "SiegeTankSieged") || (UnitGetType(lv_unit) == "SiegeTankMercSieged") || (UnitGetType(lv_unit) == "LurkerHunterKillerBurrowed") || (UnitGetType(lv_unit) == "LurkerMPBurrowed"))) {
            UnitCreate(1, "CorsairMP", 0, lv_player, RegionRandomPoint(lib1_gv_player[lv_player].lv_spawn_region), libNtve_gf_RandomAngle());
            UnitBehaviorAdd(UnitLastCreated(), "Caster", UnitLastCreated(), 1);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("CorsairMPDisruptionWeb1Turn", 0), UnitGetPosition(lv_unit)), c_orderQueueReplace);
            lib1_gf_IssueLeaveOrders(UnitLastCreated(), c_orderQueueAddToEnd);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectDisruptionWeb_Init () {
    lib1_gt_EffectDisruptionWeb = TriggerCreate("lib1_gt_EffectDisruptionWeb_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Maelstrom
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectMaelstrom_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    int lv_count;

    // Automatic Variable Declarations
    const int autoEBE24B3C_ae = 2;
    const int autoEBE24B3C_ai = 1;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lv_count = 1;
    for ( ; ( (autoEBE24B3C_ai >= 0 && lv_count <= autoEBE24B3C_ae) || (autoEBE24B3C_ai < 0 && lv_count >= autoEBE24B3C_ae) ) ; lv_count += autoEBE24B3C_ai ) {
        UnitCreate(1, "ArchonDark", 0, lv_player, RegionRandomPoint(lib1_gv_player[lv_player].lv_spawn_region), libNtve_gf_RandomAngle());
        UnitBehaviorAdd(UnitLastCreated(), "Caster", UnitLastCreated(), 1);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("ZeratulDarkArchonMaelstrom2", 0), UnitGetPosition(lib1_gf_BestTargetforSplash(lv_player, UnitFilter((1 << c_targetFilterBiological) | (1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 5.0, false))), c_orderQueueReplace);
        lib1_gf_IssueLeaveOrders(UnitLastCreated(), c_orderQueueAddToEnd);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectMaelstrom_Init () {
    lib1_gt_EffectMaelstrom = TriggerCreate("lib1_gt_EffectMaelstrom_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Mind Control
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectMindControl_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_target;
    int lv_count;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    UnitCreate(1, "ArchonDark", 0, lv_player, RegionRandomPoint(lib1_gv_player[lv_player].lv_spawn_region), libNtve_gf_RandomAngle());
    UnitBehaviorAdd(UnitLastCreated(), "Caster", UnitLastCreated(), 1);
    lv_target = lib1_gf_ToughestEnemyTargetForHardRemovalmaxvitalityrestriction(lv_player, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 600);
    if ((lv_target != null)) {
        UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("DarkArchonMindControl", 0), lv_target), c_orderQueueReplace);
        Wait(0.2, c_timeGame);
        UnitSetOwner(lv_target, lv_player, true);
    }

    lib1_gf_IssueLeaveOrders(UnitLastCreated(), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectMindControl_Init () {
    lib1_gt_EffectMindControl = TriggerCreate("lib1_gt_EffectMindControl_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Dark Archon (Maelstrom)
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectDarkArchonMaelstrom_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_GenerateCardforHand(lv_player, lib1_gf_GetCardIDByName("Maelstrom"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectDarkArchonMaelstrom_Init () {
    lib1_gt_EffectDarkArchonMaelstrom = TriggerCreate("lib1_gt_EffectDarkArchonMaelstrom_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Dark Archon (Feedback)
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectDarkArchonFeedback_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_GenerateCardforHand(lv_player, lib1_gf_GetCardIDByName("Feedback"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectDarkArchonFeedback_Init () {
    lib1_gt_EffectDarkArchonFeedback = TriggerCreate("lib1_gt_EffectDarkArchonFeedback_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Dark Archon (Mind Control)
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectDarkArchonMindControl_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_GenerateCardforHand(lv_player, lib1_gf_GetCardIDByName("Mind Control"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectDarkArchonMindControl_Init () {
    lib1_gt_EffectDarkArchonMindControl = TriggerCreate("lib1_gt_EffectDarkArchonMindControl_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Augmentation Recall
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectAugmentationRecall_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unitgroup lv_recall_targets;
    int lv_draw_slot;
    unit lv_unit;
    int lv_dragoon_count;
    int lv_stalker_count;
    int lv_immortal_count;

    // Automatic Variable Declarations
    unitgroup autoB04D00E1_g;
    int autoB04D00E1_u;
    unitgroup autoA09F6E61_g;
    int autoA09F6E61_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();
    lv_recall_targets = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lv_draw_slot = lib1_gf_FirstEmptyHandSlot(lv_player);
    if ((lv_draw_slot <= lib1_gf_HandLimit(lv_player))) {
        autoB04D00E1_g = UnitGroup(null, lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoB04D00E1_u = UnitGroupCount(autoB04D00E1_g, c_unitCountAll);
        for (;; autoB04D00E1_u -= 1) {
            lv_unit = UnitGroupUnitFromEnd(autoB04D00E1_g, autoB04D00E1_u);
            if (lv_unit == null) { break; }
            if ((StringContains(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lv_unit), "Name", c_playerAny), "Dragoon", c_stringAnywhere, c_stringCase) == true) && (lv_dragoon_count < 3) && (UnitHasBehavior2(lv_unit, "Heroic") == false)) {
                lv_dragoon_count = (lv_dragoon_count + 1);
                lib1_gf_CleanupUnit(lv_unit);
            }
            else if ((StringContains(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lv_unit), "Name", c_playerAny), "Stalker", c_stringAnywhere, c_stringCase) == true) && (lv_stalker_count < 3) && (UnitHasBehavior2(lv_unit, "Heroic") == false)) {
                lv_stalker_count = (lv_stalker_count + 1);
                lib1_gf_CleanupUnit(lv_unit);
            }
            else if ((StringContains(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lv_unit), "Name", c_playerAny), "Immortal", c_stringAnywhere, c_stringCase) == true) && (lv_immortal_count < 3) && (UnitHasBehavior2(lv_unit, "Heroic") == false)) {
                lv_immortal_count = (lv_immortal_count + 1);
                lib1_gf_CleanupUnit(lv_unit);
            }
        }
        autoA09F6E61_g = UnitGroup(null, lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoA09F6E61_u = UnitGroupCount(autoA09F6E61_g, c_unitCountAll);
        for (;; autoA09F6E61_u -= 1) {
            lv_unit = UnitGroupUnitFromEnd(autoA09F6E61_g, autoA09F6E61_u);
            if (lv_unit == null) { break; }
            if ((StringContains(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lv_unit), "Name", c_playerAny), "Dragoon", c_stringAnywhere, c_stringCase) == true) && (lv_dragoon_count < 3) && (UnitHasBehavior2(lv_unit, "Heroic") == true)) {
                lv_dragoon_count = (lv_dragoon_count + 1);
                lib1_gf_CleanupUnit(lv_unit);
            }
            else if ((StringContains(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lv_unit), "Name", c_playerAny), "Stalker", c_stringAnywhere, c_stringCase) == true) && (lv_stalker_count < 3) && (UnitHasBehavior2(lv_unit, "Heroic") == true)) {
                lv_stalker_count = (lv_stalker_count + 1);
                lib1_gf_CleanupUnit(lv_unit);
            }
            else if ((StringContains(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lv_unit), "Name", c_playerAny), "Immortal", c_stringAnywhere, c_stringCase) == true) && (lv_immortal_count < 3) && (UnitHasBehavior2(lv_unit, "Heroic") == true)) {
                lv_immortal_count = (lv_immortal_count + 1);
                lib1_gf_CleanupUnit(lv_unit);
            }
        }
        if (((lv_dragoon_count > 0) || (lv_stalker_count > 0) || (lv_immortal_count > 0))) {
            lib1_gf_GenerateCardforHand(lv_player, lib1_gf_GetCardIDByName("Augmented Warriors"));
            lib1_gf_AddUnittoHandCard(lv_player, lv_draw_slot, lv_dragoon_count, "DragoonHero");
            lib1_gf_AddUnittoHandCard(lv_player, lv_draw_slot, lv_stalker_count, "StalkerHeroic");
            lib1_gf_AddUnittoHandCard(lv_player, lv_draw_slot, lv_immortal_count, "ImmortalHero");
            lib1_gf_UpdateHandCardText(lv_player, lv_draw_slot);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectAugmentationRecall_Init () {
    lib1_gt_EffectAugmentationRecall = TriggerCreate("lib1_gt_EffectAugmentationRecall_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Tassadar's Disciples
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectTassadarsDisciples_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    int lv_hand_index;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lv_hand_index = lib1_gf_RandomHandCard(lv_player, lib1_gv_aCTION, "", -1, "");
    if ((lv_hand_index >= 0)) {
        lib1_gf_PlayHandCardFromEffect(lv_player, lv_hand_index, true);
        lib1_gf_AddEffecttoQueue(lv_player, lv_card_id, lib1_gv_eF_DRAW, lib1_gt_CommonEffectDraw1, UnitGroupEmpty(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectTassadarsDisciples_Init () {
    lib1_gt_EffectTassadarsDisciples = TriggerCreate("lib1_gt_EffectTassadarsDisciples_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Powered Gates
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectPoweredGates_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_structure;
    bool lv_have_gateway;
    bool lv_have_stargate;

    // Automatic Variable Declarations
    unitgroup auto988F3DCD_g;
    int auto988F3DCD_u;
    unitgroup auto6C8F3402_g;
    int auto6C8F3402_u;
    unitgroup autoB259B06A_g;
    int autoB259B06A_u;
    unitgroup auto893025F5_g;
    int auto893025F5_u;
    unitgroup auto38EE8E6F_g;
    int auto38EE8E6F_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto988F3DCD_g = UnitGroup("Gateway", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto988F3DCD_u = UnitGroupCount(auto988F3DCD_g, c_unitCountAll);
    for (;; auto988F3DCD_u -= 1) {
        lv_structure = UnitGroupUnitFromEnd(auto988F3DCD_g, auto988F3DCD_u);
        if (lv_structure == null) { break; }
        if ((PowerLevel(lv_player, UnitGetPosition(lv_structure), "PowerSource") >= 1)) {
            lv_have_gateway = true;
            break;
        }

    }
    auto6C8F3402_g = UnitGroup("WarpGate", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6C8F3402_u = UnitGroupCount(auto6C8F3402_g, c_unitCountAll);
    for (;; auto6C8F3402_u -= 1) {
        lv_structure = UnitGroupUnitFromEnd(auto6C8F3402_g, auto6C8F3402_u);
        if (lv_structure == null) { break; }
        if ((PowerLevel(lv_player, UnitGetPosition(lv_structure), "PowerSource") >= 1)) {
            lv_have_gateway = true;
            break;
        }

    }
    autoB259B06A_g = UnitGroup("Stargate", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB259B06A_u = UnitGroupCount(autoB259B06A_g, c_unitCountAll);
    for (;; autoB259B06A_u -= 1) {
        lv_structure = UnitGroupUnitFromEnd(autoB259B06A_g, autoB259B06A_u);
        if (lv_structure == null) { break; }
        if ((PowerLevel(lv_player, UnitGetPosition(lv_structure), "PowerSource") >= 1)) {
            lv_have_stargate = true;
            break;
        }

    }
    auto893025F5_g = UnitGroup("StargateVoid", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto893025F5_u = UnitGroupCount(auto893025F5_g, c_unitCountAll);
    for (;; auto893025F5_u -= 1) {
        lv_structure = UnitGroupUnitFromEnd(auto893025F5_g, auto893025F5_u);
        if (lv_structure == null) { break; }
        if ((PowerLevel(lv_player, UnitGetPosition(lv_structure), "PowerSource") >= 1)) {
            lv_have_stargate = true;
            break;
        }

    }
    auto38EE8E6F_g = UnitGroup("StargateWarp", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto38EE8E6F_u = UnitGroupCount(auto38EE8E6F_g, c_unitCountAll);
    for (;; auto38EE8E6F_u -= 1) {
        lv_structure = UnitGroupUnitFromEnd(auto38EE8E6F_g, auto38EE8E6F_u);
        if (lv_structure == null) { break; }
        if ((PowerLevel(lv_player, UnitGetPosition(lv_structure), "PowerSource") >= 1)) {
            lv_have_stargate = true;
            break;
        }

    }
    if ((lv_have_stargate == false) && (lv_have_gateway == false)) {
        lib1_gf_BuildStructure(lv_player, lv_card_id, "Probe", AbilityCommand("ProtossBuild", 1), "Pylon", false, 1.5);
        lib1_gf_BuildStructure(lv_player, lv_card_id, "Probe", AbilityCommand("ProtossBuild", 1), "Pylon", false, 1.5);
    }
    else if ((lv_have_stargate == false)) {
        lib1_gf_BuildStructure(lv_player, lv_card_id, "Probe", AbilityCommand("ProtossBuild", 1), "Pylon", false, 0.5);
        lib1_gf_BuildStructure(lv_player, lv_card_id, "Probe", AbilityCommand("ProtossBuild", 1), "Pylon", false, 0.5);
        lib1_gf_BuildStructure(lv_player, lv_card_id, "Probe", AbilityCommand("ProtossBuild", 3), "Gateway", false, 2.0);
    }
    else if ((lv_have_gateway == false)) {
        lib1_gf_BuildStructure(lv_player, lv_card_id, "Probe", AbilityCommand("ProtossBuild", 1), "Pylon", false, 0.5);
        lib1_gf_BuildStructure(lv_player, lv_card_id, "Probe", AbilityCommand("ProtossBuild", 1), "Pylon", false, 0.5);
        lib1_gf_BuildStructure(lv_player, lv_card_id, "Probe", AbilityCommand("ProtossBuild", 9), "Stargate", false, 2.0);
    }
    else if (true) {
        lib1_gf_BuildStructure(lv_player, lv_card_id, "Probe", AbilityCommand("ProtossBuild", 1), "Pylon", false, 0.5);
        lib1_gf_BuildStructure(lv_player, lv_card_id, "Probe", AbilityCommand("ProtossBuild", 1), "Pylon", false, 0.5);
        lib1_gf_BuildStructure(lv_player, lv_card_id, "Probe", AbilityCommand("ProtossBuild", 3), "Gateway", false, 1.0);
        lib1_gf_BuildStructure(lv_player, lv_card_id, "Probe", AbilityCommand("ProtossBuild", 9), "Stargate", false, 1.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectPoweredGates_Init () {
    lib1_gt_EffectPoweredGates = TriggerCreate("lib1_gt_EffectPoweredGates_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Shadow Walk
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectShadowWalk_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    bool lv_fetch;
    int lv_unit_type_index;
    int lv_top_of_hand;

    // Automatic Variable Declarations
    const int autoF347FC28_ae = lib1_gv_mAX_UNIT_TYPE_PER_CARD;
    const int autoF347FC28_ai = 1;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lv_fetch = lib1_gf_FetchCardWithUnitTypes(lv_player, "Zealot", "ZealotFexix", "ZealotHero", "ZealotNerazim", "ZealotTaldarim", "ZealotVeteran");
    if ((lv_fetch == true)) {
        lv_top_of_hand = lib1_gf_TopofHand(lv_player);
        lv_unit_type_index = 0;
        for ( ; ( (autoF347FC28_ai >= 0 && lv_unit_type_index <= autoF347FC28_ae) || (autoF347FC28_ai < 0 && lv_unit_type_index >= autoF347FC28_ae) ) ; lv_unit_type_index += autoF347FC28_ai ) {
            if (((lib1_gv_player[lv_player].lv_hand.lv_card[lv_top_of_hand].lv_unit_type[lv_unit_type_index] == "Zealot") || (lib1_gv_player[lv_player].lv_hand.lv_card[lv_top_of_hand].lv_unit_type[lv_unit_type_index] == "ZealotFexix") || (lib1_gv_player[lv_player].lv_hand.lv_card[lv_top_of_hand].lv_unit_type[lv_unit_type_index] == "ZealotHero") || (lib1_gv_player[lv_player].lv_hand.lv_card[lv_top_of_hand].lv_unit_type[lv_unit_type_index] == "ZealotNerazim") || (lib1_gv_player[lv_player].lv_hand.lv_card[lv_top_of_hand].lv_unit_type[lv_unit_type_index] == "ZealotTaldarim") || (lib1_gv_player[lv_player].lv_hand.lv_card[lv_top_of_hand].lv_unit_type[lv_unit_type_index] == "ZealotVeteran"))) {
                if ((lib1_gv_player[lv_player].lv_hand.lv_card[lv_top_of_hand].lv_heroic == true)) {
                    lib1_gv_player[lv_player].lv_hand.lv_card[lv_top_of_hand].lv_unit_type[lv_unit_type_index] = "DarkTemplarHero";
                }
                else {
                    lib1_gv_player[lv_player].lv_hand.lv_card[lv_top_of_hand].lv_unit_type[lv_unit_type_index] = "DarkTemplar";
                }
            }

        }
        lib1_gf_UpdateHandCardText(lv_player, lv_top_of_hand);
        lib1_gf_FixDuplicateUnitTypesOnHandCard(lv_player, lv_top_of_hand);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectShadowWalk_Init () {
    lib1_gt_EffectShadowWalk = TriggerCreate("lib1_gt_EffectShadowWalk_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Archon of Justice
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectArchonofJustice_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup autoB1EB3B02_g;
    int autoB1EB3B02_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    autoB1EB3B02_g = lv_units_created;
    autoB1EB3B02_u = UnitGroupCount(autoB1EB3B02_g, c_unitCountAll);
    for (;; autoB1EB3B02_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoB1EB3B02_g, autoB1EB3B02_u);
        if (lv_unit == null) { break; }
        UnitBehaviorAdd(lv_unit, "Justice", lv_unit, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectArchonofJustice_Init () {
    lib1_gt_EffectArchonofJustice = TriggerCreate("lib1_gt_EffectArchonofJustice_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Aldaris, Insurgent
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectAldarisInsurgent_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto1B8CBB62_g;
    int auto1B8CBB62_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    auto1B8CBB62_g = lv_units_created;
    auto1B8CBB62_u = UnitGroupCount(auto1B8CBB62_g, c_unitCountAll);
    for (;; auto1B8CBB62_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto1B8CBB62_g, auto1B8CBB62_u);
        if (lv_unit == null) { break; }
        UnitSetPosition(lv_unit, RegionRandomPoint(lib1_gv_player[lv_player].lv_enemy_spawn_region), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectAldarisInsurgent_Init () {
    lib1_gt_EffectAldarisInsurgent = TriggerCreate("lib1_gt_EffectAldarisInsurgent_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect - Repair Station
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectRepairStation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_card_id;
    unitgroup lv_units_created;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup autoEE264518_g;
    int autoEE264518_u;

    // Variable Initialization
    lv_units_created = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lv_card_id = lib1_gv_current_card_id;
    lv_units_created = lib1_gv_current_units_created;
    lib1_gf_BuildStructure(lv_player, lv_card_id, "Probe", AbilityCommand("ProtossBuild", 15), "ShieldBattery", true, -1.0);
    autoEE264518_g = lv_units_created;
    autoEE264518_u = UnitGroupCount(autoEE264518_g, c_unitCountAll);
    for (;; autoEE264518_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoEE264518_g, autoEE264518_u);
        if (lv_unit == null) { break; }
        UnitIssueOrder(lv_unit, OrderSetAutoCast(AbilityCommand("Repair", 0), true), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectRepairStation_Init () {
    lib1_gt_EffectRepairStation = TriggerCreate("lib1_gt_EffectRepairStation_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Cosmetic Trophies
//--------------------------------------------------------------------------------------------------
bool lib1_gt_InitializeCosmeticTrophies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_id;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_id = -1;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_id = (lv_id + 1);
    lib1_gf_DefineTrophyCosmetic(lv_id, "Mining Operation", "Assets\\Textures\\trophy-MiningOperation.tga", 500, true, false);
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "Blast_Craters");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "JarbanMinor_Floodlight");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "JarbanMinor_SandDrifts");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "StarshipIceWorldMinerals");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "TheVoid_RubblePile");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "JarbanMinor_CranePart");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "JarbanMinor_Crate");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "JarbanMinor_MiningSupplies");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "MoebiusLabBrokenMule");
    lv_id = (lv_id + 1);
    lib1_gf_DefineTrophyCosmetic(lv_id, "Spawning Pit", "Assets\\Textures\\trophy-SpawningPit.tga", 2000, true, false);
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "Aiur_Zerg_Horn");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "Fog_Hazy");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "Zerg_EggSackOneEggs");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "Zerg_EggSackThreeEggs");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "Zerg_EggSackTwoEggs");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "ZergCurbs");
    lv_id = (lv_id + 1);
    lib1_gf_DefineTrophyCosmetic(lv_id, "Ancient Relics", "Assets\\Textures\\trophy-AncientRelics.tga", 6000, true, false);
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "ProtossCratesDoodad");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "Protoss_Base_Console_Small");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "Protoss_Base_Force_Field_Pillar");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "Protoss_Base_GroundTrim");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "Protoss_Base_RoadEntry");
    lv_id = (lv_id + 1);
    lib1_gf_DefineTrophyCosmetic(lv_id, "Illegal Shipment", "Assets\\Textures\\trophy-ue-IllegalShipment.tga", 500, true, false);
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "Aiur_PowerCrystal");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "BattleStation_MissileStorage");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "DOM_Crate");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "Fog_Ulnar");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "MilitarySupplies");
    lv_id = (lv_id + 1);
    lib1_gf_DefineTrophyCosmetic(lv_id, "Forbidden Experiment", "Assets\\Textures\\trophy-ue-ForbiddenExperiment.tga", 2000, true, false);
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "Korhal_SpacePort_Hose");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "MoebiusLab_MonitorLabDestructible_Destructed");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "MoebiusLab_StasisTubeLarge");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "MoebiusLabWallCap");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "Tarsonis_Debris_Splat");
    lv_id = (lv_id + 1);
    lib1_gf_DefineTrophyCosmetic(lv_id, "Unstable Void Crystal", "Assets\\Textures\\trophy-ue-UnstableVoidCrystal.tga", 6000, true, false);
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "LightOmniRedLarge");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "MoebiusLabPylonContainmentUnitDoodad");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "SmokeStack_Fire_Constant_Lg");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "XelNaga_GiantCrystalFloating");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "Slayn_Brazier_Fire");
    lv_id = (lv_id + 1);
    lib1_gf_DefineTrophyCosmetic(lv_id, "Slice of Mar Sara", "Assets\\Textures\\trophy-fc-SliceOfMarSara.tga", 500, true, false);
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "BillboardTall");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "MarSaraCactus");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "MarSaraFoliage");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "PurificationDesert_SandDrift");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "PurificationDesert_Small_Rock_Group");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "SpacePlatformWallLight");
    lv_id = (lv_id + 1);
    lib1_gf_DefineTrophyCosmetic(lv_id, "Indiscriminate Purification", "Assets\\Textures\\trophy-fc-IndescriminatePurification.tga", 2000, true, false);
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "Blast_Craters2");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "Blast_Craters_Big");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "BloodSplats");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "Fog_Hazy2");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "GenericProtossFire_Medium_Long");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "GhostCorpses");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "Korhal_SiegeTank_Destroyed");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "ProtossFireMedium");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "TheVoid_RubblePile2");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "ZergCarcasses");
    lv_id = (lv_id + 1);
    lib1_gf_DefineTrophyCosmetic(lv_id, "Xenomorph Research", "Assets\\Textures\\trophy-fc-XenomorphResearch.tga", 6000, true, false);
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "CastanarMonitorFloor");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "CastanarUltraliskShackled");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "Elsecaro_Barricade");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "Purifier_GroundTrim");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "SpacePlatform_Lantern_Red_Blink");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "Tarsonis_GroundTrims");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "UmojanLabDissectionArm");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "UmojanLabFloodLights");
    lv_id = (lv_id + 1);
    lib1_gf_DefineTrophyCosmetic(lv_id, "Forgotten Knowledge", "Assets\\Textures\\ForgottenKnowledge.tga", 10000, false, false);
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "FogMist2");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "XelNaga_LargeCrates_Flat");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "XelNaga_Techno_Holo_Planet_DNA_Sculpture");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "XelNaga_Temple_Small");
    lv_id = (lv_id + 1);
    lib1_gf_DefineTrophyCosmetic(lv_id, "Slave Broods", "Assets\\Textures\\SlaveBroods.tga", 10000, true, false);
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "CastanarCage");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "HydraliskDoodad");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "Korhal_EMP_Structures");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "Korhal_Platform_CommandCenter");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "Korhal_SpacePort_Hose2");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "LightOmniOrange");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "SnowRefinery_Terran_BaseSplats");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "SnowRefinery_Terran_WireConduits");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "SpacePlatform_Lantern_Red");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "SpacePlatform_Lantern_Red_Blink2");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "SpacePlatform_Lantern_White_Blink");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "SupplyTanks");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "Tarsonis_Debris_Splat2");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "Tarsonis_Store_Front_Props");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "MoebiusLabWallCap2");
    lv_id = (lv_id + 1);
    lib1_gf_DefineTrophyCosmetic(lv_id, "Survivors of Aiur", "Assets\\Textures\\SurvivorsOfAiur.tga", 10000, true, false);
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "JarbanMinor_Antenne");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "JarbanMinor_Crate2");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "JarbanMinor_Sandbags");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "MilitarySupplies2");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "PortCity_PowerLines");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "ProtossWarpInPad");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "ProtossWarpInPadFlat");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "ShipDisplays");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "SpaceGunRack");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "Tarsonis_Debris_Splat22");
    lv_id = (lv_id + 1);
    lib1_gf_DefineTrophyCosmetic(lv_id, "Queen of Deception", "Assets\\Textures\\QueenOfDeception.tga", 10000, true, false);
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "CliffClaw");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "CreepPods");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "CreepWeb");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "Fog_Hazy3");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "LightOmniGreenLarge");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "Shakuras_CityBuilding_HighRise_Destroyed");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "Shakuras_CityBuilding_Tower");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "Shakuras_PowerCrystal");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "ZergCurbs2");
    lv_id = (lv_id + 1);
    lib1_gf_DefineTrophyCosmetic(lv_id, "Lost Temple", "Assets\\Textures\\LostTemple.tga", 20000, true, false);
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "Aiur_Fireflies");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "Aiur_Plantlife");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "Elsecaro_Foliage");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "FogMist");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "PlantsAlien");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "PlantsWasteland");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "XelNaga_Cavern_Vision_Temple");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "XelNaga_EnergyStreaks");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "XelNaga_Tall_Pillar");
    lv_id = (lv_id + 1);
    lib1_gf_DefineTrophyCosmetic(lv_id, "Shrine of Forgotten Heroes", "Assets\\Textures\\ShrineOfForgottenHeroes.tga", 20000, true, false);
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "Slayn_Braziers");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "ShakurasArchonStatue");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "Shakuras_SandDriftsLarge");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "Shakuras_Stone_Temple_Rubble2");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "Aiur_Fireflies2");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "Aiur_Plantlife2");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "Fog_Hazy32");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "Slayn_Brazier_Fire2");
    lv_id = (lv_id + 1);
    lib1_gf_DefineTrophyCosmetic(lv_id, "Industry of War", "Assets\\Textures\\IndustryOfWar.tga", 20000, true, false);
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "JarbanMinor_CliffElevator");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "Korhal_ConstructionCranes");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "DOM_WallCap");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "SpacePlatformGenerator");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "DOM_GroundTrims");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "GenericSpacePipes");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "SpacePlatformHose");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "JarbanMinor_Tank");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "SpaceDockMonitorFloor");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "LavaPillars");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "DOM_LabVehicleFacility");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "SpacePlatform_Lantern_White");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "SpacePlatform_Lantern_Blue");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "SpacePlatform_Lantern_Red2");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "MilitarySupplies3");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "Tarsonis_Debris_Splat3");
    lv_id = (lv_id + 1);
    lib1_gf_DefineTrophyCosmetic(lv_id, "Forsaken Temple", "Assets\\Textures\\ForsakenTemple.tga", 20000, true, false);
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "MarSaraCrack");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "Void_Mist");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "Void_Rift_Static");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "Slayn_Temple_Rubble");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "Slayn_StoneDoodads_Temple");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "Slayn_Statues");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "Void_Temple");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "Void_Temple_Small");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "Slayn_StoneDoodads");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "LightOmniRedLarge2");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "Fog_Hazy22");
    lv_id = (lv_id + 1);
    lib1_gf_DefineTrophyCosmetic(lv_id, "Billium Refinery", "Assets\\Textures\\JoriumRefinery.tga", 20000, true, false);
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "JoriumStockpileDoodad");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "HighYieldStorage");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "HighYieldConveyorBelt");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "HighYieldMineralCart");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "SpaceTurbine");
    lib1_gf_AddDoodadTypetoTrophyCosmetic(lv_id, "JarbanMinor_MiningBot_Broken");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_InitializeCosmeticTrophies_Init () {
    lib1_gt_InitializeCosmeticTrophies = TriggerCreate("lib1_gt_InitializeCosmeticTrophies_Func");
    TriggerAddEventMapInit(lib1_gt_InitializeCosmeticTrophies);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Cosmetic Pets
//--------------------------------------------------------------------------------------------------
bool lib1_gt_InitializeCosmeticPets_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_id;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_id = -1;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_id = (lv_id + 1);
    lib1_gf_DefinePetCosmetic(lv_id, "Lab Bot", "Assets\\Textures\\pet-LabBot.tga", 2000, "LabBot", true, false);
    lv_id = (lv_id + 1);
    lib1_gf_DefinePetCosmetic(lv_id, "Faithful Hound", "Assets\\Textures\\pet-FaithfulHound.tga", 2000, "Dog", true, false);
    lv_id = (lv_id + 1);
    lib1_gf_DefinePetCosmetic(lv_id, "Ursadon", "Assets\\Textures\\pet-Ursadon.tga", 2000, "Ursadon", true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_InitializeCosmeticPets_Init () {
    lib1_gt_InitializeCosmeticPets = TriggerCreate("lib1_gt_InitializeCosmeticPets_Func");
    TriggerAddEventMapInit(lib1_gt_InitializeCosmeticPets);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Cosmetic Decorations
//--------------------------------------------------------------------------------------------------
bool lib1_gt_InitializeCosmeticDecorations_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_id;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_id = -1;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_id = (lv_id + 1);
    lib1_gf_DefineDecorationCosmetic(lv_id, "Xel'naga Foundation", "Assets\\Textures\\decoration-XelNagaFoundation.tga", 20000, true, false);
    lv_id = (lv_id + 1);
    lib1_gf_DefineDecorationCosmetic(lv_id, "Xel'naga Crystals", "Assets\\Textures\\decoration-XelNagaCrystals.tga", 20000, true, false);
    lv_id = (lv_id + 1);
    lib1_gf_DefineDecorationCosmetic(lv_id, "Light of the Xel'naga", "Assets\\Textures\\decoration-LightOfTheXelNaga.tga", 20000, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_InitializeCosmeticDecorations_Init () {
    lib1_gt_InitializeCosmeticDecorations = TriggerCreate("lib1_gt_InitializeCosmeticDecorations_Func");
    TriggerAddEventMapInit(lib1_gt_InitializeCosmeticDecorations);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Cosmetic Store
//--------------------------------------------------------------------------------------------------
bool lib1_gt_InitializeCosmeticStore_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_id;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_id = -1;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_id = -1;
    lv_id = (lv_id + 1);
    lib1_gv_trophy_store[lv_id] = lib1_gf_GetTrophyIDByName("Slave Broods");
    lv_id = (lv_id + 1);
    lib1_gv_trophy_store[lv_id] = lib1_gf_GetTrophyIDByName("Survivors of Aiur");
    lv_id = (lv_id + 1);
    lib1_gv_trophy_store[lv_id] = lib1_gf_GetTrophyIDByName("Queen of Deception");
    lv_id = (lv_id + 1);
    lib1_gv_trophy_store[lv_id] = lib1_gf_GetTrophyIDByName("Illegal Shipment");
    lv_id = (lv_id + 1);
    lib1_gv_trophy_store[lv_id] = lib1_gf_GetTrophyIDByName("Forbidden Experiment");
    lv_id = (lv_id + 1);
    lib1_gv_trophy_store[lv_id] = lib1_gf_GetTrophyIDByName("Unstable Void Crystal");
    lv_id = (lv_id + 1);
    lib1_gv_trophy_store[lv_id] = lib1_gf_GetTrophyIDByName("Slice of Mar Sara");
    lv_id = (lv_id + 1);
    lib1_gv_trophy_store[lv_id] = lib1_gf_GetTrophyIDByName("Indiscriminate Purification");
    lv_id = (lv_id + 1);
    lib1_gv_trophy_store[lv_id] = lib1_gf_GetTrophyIDByName("Xenomorph Research");
    lv_id = (lv_id + 1);
    lib1_gv_trophy_store[lv_id] = lib1_gf_GetTrophyIDByName("Mining Operation");
    lv_id = (lv_id + 1);
    lib1_gv_trophy_store[lv_id] = lib1_gf_GetTrophyIDByName("Spawning Pit");
    lv_id = (lv_id + 1);
    lib1_gv_trophy_store[lv_id] = lib1_gf_GetTrophyIDByName("Ancient Relics");
    lv_id = (lv_id + 1);
    lib1_gv_trophy_store[lv_id] = lib1_gf_GetTrophyIDByName("Lost Temple");
    lv_id = (lv_id + 1);
    lib1_gv_trophy_store[lv_id] = lib1_gf_GetTrophyIDByName("Shrine of Forgotten Heroes");
    lv_id = (lv_id + 1);
    lib1_gv_trophy_store[lv_id] = lib1_gf_GetTrophyIDByName("Industry of War");
    lv_id = (lv_id + 1);
    lib1_gv_trophy_store[lv_id] = lib1_gf_GetTrophyIDByName("Forsaken Temple");
    lv_id = (lv_id + 1);
    lib1_gv_trophy_store[lv_id] = lib1_gf_GetTrophyIDByName("Billium Refinery");
    lv_id = -1;
    lv_id = (lv_id + 1);
    lib1_gv_pet_store[lv_id] = lib1_gf_GetPetIDByName("Ursadon");
    lv_id = (lv_id + 1);
    lib1_gv_pet_store[lv_id] = lib1_gf_GetPetIDByName("Lab Bot");
    lv_id = (lv_id + 1);
    lib1_gv_pet_store[lv_id] = lib1_gf_GetPetIDByName("Faithful Hound");
    lv_id = -1;
    lv_id = (lv_id + 1);
    lib1_gv_decoration_store[lv_id] = lib1_gf_GetDecorationIDByName("Light of the Xel'naga");
    lv_id = (lv_id + 1);
    lib1_gv_decoration_store[lv_id] = lib1_gf_GetDecorationIDByName("Xel'naga Crystals");
    lv_id = (lv_id + 1);
    lib1_gv_decoration_store[lv_id] = lib1_gf_GetDecorationIDByName("Xel'naga Foundation");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_InitializeCosmeticStore_Init () {
    lib1_gt_InitializeCosmeticStore = TriggerCreate("lib1_gt_InitializeCosmeticStore_Func");
    TriggerAddEventMapInit(lib1_gt_InitializeCosmeticStore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool lib1_gt_Initialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_team;
    int lv_player;
    bool lv_fetch;

    // Automatic Variable Declarations
    const int autoF91D429C_ae = 6;
    const int autoF91D429C_ai = 1;
    const int auto922AF584_ae = 6;
    const int auto922AF584_ai = 1;
    const int auto47A1AC4C_ae = 6;
    const int auto47A1AC4C_ai = 1;
    const int auto054A6059_ae = 1;
    const int auto054A6059_ai = 1;
    playergroup auto527F356A_g;
    const int auto3ACBE979_ae = 1;
    const int auto3ACBE979_ai = 1;
    playergroup autoF91913A5_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gv_keystone[0] = UnitFromId(657494806);
    lib1_gv_keystone[1] = UnitFromId(685072410);
    lib1_gf_InitializeBanks();
    lv_player = 1;
    for ( ; ( (autoF91D429C_ai >= 0 && lv_player <= autoF91D429C_ae) || (autoF91D429C_ai < 0 && lv_player >= autoF91D429C_ae) ) ; lv_player += autoF91D429C_ai ) {
        if ((PlayerStatus(lv_player) == c_playerStatusActive) && (PlayerType(lv_player) == c_playerTypeUser)) {
            lib1_gf_LoadPlayerVariables(lv_player);
            if ((lib1_gv_player[lv_player].lv_forced_reset_id < lib1_gv_mAX_PLAYERS2)) {
                lib1_gf_ResetStats(lv_player, lib1_gv_tERRAN);
                lib1_gf_ResetStats(lv_player, lib1_gv_zERG);
                lib1_gf_ResetStats(lv_player, lib1_gv_pROTOSS);
            }

            lib1_gf_LoadCollection(lv_player);
            if ((lib1_gv_test_mode == true)) {
                lib1_gf_GivePlayerFullCollection(lv_player);
            }

            lib1_gf_CheckforSpecialCredits(lv_player);
            lib1_gf_AddBonusEssenceforLegacyPlayer(lv_player);
            lib1_gf_SaveMetadatatoBank(lv_player);
            lib1_gf_InitializeBackerRewards(lv_player);
        }

    }
    lib1_gf_InitializeGameModeTeams();
    lv_player = 1;
    for ( ; ( (auto922AF584_ai >= 0 && lv_player <= auto922AF584_ae) || (auto922AF584_ai < 0 && lv_player >= auto922AF584_ae) ) ; lv_player += auto922AF584_ai ) {
        if ((PlayerStatus(lv_player) == c_playerStatusActive) && (PlayerType(lv_player) == c_playerTypeUser)) {
            lib1_gf_LoadCosmetics(lv_player);
        }

    }
    if ((lib1_gv_test_mode == true)) {
        lib1_gf_InitializeTestCosmeticForPlayer1();
    }

    lib1_gf_InitializeTrophyRegions();
    if ((lib1_gv_game_mode != lib1_gv_dECKEDITOR)) {
        lib1_gf_CreateUnitPanelAdditions();
        lib1_gf_CreateResourceChooserDialog();
        lib1_gf_CreateTurnTimerUI();
        lib1_gf_CreateDeckUI();
        if ((lib1_gv_tutorial_flag == false)) {
            lib1_gf_StartPlanningPhase();
        }

        lib1_gf_CreateEndPhaseButton();
    }

    lv_player = 1;
    for ( ; ( (auto47A1AC4C_ai >= 0 && lv_player <= auto47A1AC4C_ae) || (auto47A1AC4C_ai < 0 && lv_player >= auto47A1AC4C_ae) ) ; lv_player += auto47A1AC4C_ai ) {
        if ((PlayerStatus(lv_player) == c_playerStatusActive) && (PlayerType(lv_player) == c_playerTypeUser)) {
            lib1_gf_LoadDecks(lv_player);
            if ((lib1_gv_test_mode == false)) {
                if ((lib1_gf_CollectionValid(lv_player) == false)) {
                    lib1_gf_HandleCorruptedCollection(lv_player);
                }

                lib1_gf_CheckIfDecksValid(lv_player);
            }

            lib1_gf_InitializeDeck(lv_player);
        }
        else if ((PlayerStatus(lv_player) == c_playerStatusActive) && (PlayerType(lv_player) == c_playerTypeComputer) && (lib1_gv_tutorial_flag == false)) {
            lib1_gf_InitializeRandomDeck(lv_player);
        }
        else if ((lib1_gv_tutorial_flag == true) && (lv_player == 2)) {
            lib1_gv_player[2].lv_use_ai = true;
            lib1_gf_InitializeEnemyTutorialDeck(lv_player);
        }
    }
    lv_team = 0;
    for ( ; ( (auto054A6059_ai >= 0 && lv_team <= auto054A6059_ae) || (auto054A6059_ai < 0 && lv_team >= auto054A6059_ae) ) ; lv_team += auto054A6059_ai ) {
        lib1_gf_InitializeDecorationCosmeticsforTeam(lv_team);
        auto527F356A_g = lib1_gv_team[lv_team];
        lv_player = -1;
        while (true) {
            lv_player = PlayerGroupNextPlayer(auto527F356A_g, lv_player);
            if (lv_player < 0) { break; }
            lib1_gf_InitializePetandTrophyCosmeticsforPlayer(lv_player);
        }
    }
    lv_team = 0;
    for ( ; ( (auto3ACBE979_ai >= 0 && lv_team <= auto3ACBE979_ae) || (auto3ACBE979_ai < 0 && lv_team >= auto3ACBE979_ae) ) ; lv_team += auto3ACBE979_ai ) {
        autoF91913A5_g = lib1_gv_team[lv_team];
        lv_player = -1;
        while (true) {
            lv_player = PlayerGroupNextPlayer(autoF91913A5_g, lv_player);
            if (lv_player < 0) { break; }
            if ((lib1_gv_game_mode != lib1_gv_dECKEDITOR)) {
                VisRevealerCreate(lv_player, RegionEntireMap());
                lib1_gf_DisableSkins(lv_player);
                lib1_gf_ShuffleDeck(lv_player);
                lib1_gf_CreateHandOverlay(lv_player);
                lib1_gf_CreateResourceUI(lv_player);
                lib1_gf_UpdateResourceIcons(lv_player);
                lib1_gf_UpdateDeckUI(lv_player);
            }

            lib1_gf_InitializeCollectionFilters(lv_player);
            if ((lib1_gv_game_mode != lib1_gv_dECKEDITOR)) {
                lib1_gf_InitializeStartingHand(lv_player);
            }

        }
    }
    lib1_gf_CalculateDefaultText();
    lib1_gf_CalculateCardOrder();
    lib1_gf_CreateRewardScreen();
    lib1_gf_CreateMainMenu();
    lib1_gf_CreateStatsPage();
    lib1_gf_CreateCollectionWindow();
    lib1_gf_CreateDeckWindow();
    lib1_gf_CreateCraftingWindow();
    lib1_gf_CreateFilterWindow();
    lib1_gf_CreateCollectionInteractionLayer();
    lib1_gf_CreateDeckManager();
    lib1_gf_CreateStore();
    lib1_gf_CreateCosmeticMenu();
    if (((lib1_gv_game_mode == lib1_gv_dECKEDITOR) || (lib1_gv_straight_to_decks == true))) {
        lib1_gf_SkiptoEditor();
    }

    if ((lib1_gv_tutorial_flag == true)) {
        lib1_gf_StartPlayPhase();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_Initialization_Init () {
    lib1_gt_Initialization = TriggerCreate("lib1_gt_Initialization_Func");
    TriggerAddEventMapInit(lib1_gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Leaves
//--------------------------------------------------------------------------------------------------
bool lib1_gt_PlayerLeaves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib1_gv_current_phase != "Menu") && (lib1_gv_game_mode >= 0)) {
        if ((lib1_gv_uneven_teams == false)) {
            lib1_gv_player[EventPlayer()].lv_quits[lib1_gf_GetPlayerRaceID(EventPlayer())][lib1_gv_game_mode] = (lib1_gv_player[EventPlayer()].lv_quits[lib1_gf_GetPlayerRaceID(EventPlayer())][lib1_gv_game_mode] + 1);
            lib1_gf_SaveWinsLossestoBank(EventPlayer());
            lib1_gf_SaveStatstoBank(EventPlayer());
        }

        lib1_gv_player[EventPlayer()].lv_use_ai = true;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_PlayerLeaves_Init () {
    lib1_gt_PlayerLeaves = TriggerCreate("lib1_gt_PlayerLeaves_Func");
    TriggerAddEventPlayerLeft(lib1_gt_PlayerLeaves, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fix Default GUI
//--------------------------------------------------------------------------------------------------
bool lib1_gt_FixDefaultGUI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAchievementMenuButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAlertPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAllianceButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeArmyButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeCashPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeCharacterSheetButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeCommandPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeConsolePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeControlGroupPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeCreditsPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeErrorDisplayPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeHelpMenuButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeHeroPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeIdleWorkerButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeInfoPanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeInventoryPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeLeaderPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMenuBar, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMercenaryPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMinimapPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeBattleReportPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMissionTimePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeObjectivePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypePlanetPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypePurchasePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypePylonButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResearchPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeRoomPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTeamResourceButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTechGlossaryPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTechTreePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTipAlertPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeVictoryPanel, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_FixDefaultGUI_Init () {
    lib1_gt_FixDefaultGUI = TriggerCreate("lib1_gt_FixDefaultGUI_Func");
    TriggerAddEventMapInit(lib1_gt_FixDefaultGUI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show Damage Text
//--------------------------------------------------------------------------------------------------
bool lib1_gt_ShowDamageText_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourcePoint() != UnitGetPosition(EventUnit())))) {
            return false;
        }

        if (!((EventUnitDamageAbsorbed() > 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextTagCreate(FixedToText(EventUnitDamageAmount(), 0), (20 + (FixedToInt(EventUnitDamageAbsorbed()) / 4)), PointWithOffsetPolar(UnitGetPosition(EventUnit()), RandomFixed(0.0, UnitGetPropertyFixed(EventUnit(), c_unitPropRadius, c_unitPropCurrent)), libNtve_gf_RandomAngle()), 1.0, true, false, PlayerGroupAll());
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.0);
    TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventUnitDamageSourcePlayer(), false)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_ShowDamageText_Init () {
    lib1_gt_ShowDamageText = TriggerCreate("lib1_gt_ShowDamageText_Func");
    TriggerAddEventUnitDamaged(lib1_gt_ShowDamageText, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hover Timer Expires
//--------------------------------------------------------------------------------------------------
bool lib1_gt_HoverTimerExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    const int auto348337EA_ae = lib1_gv_mAX_PLAYERS;
    const int auto348337EA_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = 1;
    for ( ; ( (auto348337EA_ai >= 0 && lv_player <= auto348337EA_ae) || (auto348337EA_ai < 0 && lv_player >= auto348337EA_ae) ) ; lv_player += auto348337EA_ai ) {
        if ((lib1_gv_current_phase != "Menu") && (EventTimer() == lib1_gv_hover_timer[lv_player])) {
            lib1_gf_CreateCardHoverDialog(lv_player, lib1_gv_last_hovered_hand_index[lv_player], false);
        }
        else if ((lib1_gv_current_phase == "Menu") && (EventTimer() == lib1_gv_hover_timer[lv_player])) {
            lib1_gf_CreateCardHoverDialog(lv_player, lib1_gv_last_hovered_hand_index[lv_player], true);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_HoverTimerExpires_Init () {
    lib1_gt_HoverTimerExpires = TriggerCreate("lib1_gt_HoverTimerExpires_Func");
    TriggerAddEventTimer(lib1_gt_HoverTimerExpires, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shift Key Up
//--------------------------------------------------------------------------------------------------
bool lib1_gt_ShiftKeyUp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_page_slot_index;

    // Automatic Variable Declarations
    const int autoE21D4897_ae = 7;
    const int autoE21D4897_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gv_shift[EventPlayer()] = false;
    if ((lib1_gv_current_phase == "Menu")) {
        lv_page_slot_index = 0;
        for ( ; ( (autoE21D4897_ai >= 0 && lv_page_slot_index <= autoE21D4897_ae) || (autoE21D4897_ai < 0 && lv_page_slot_index >= autoE21D4897_ae) ) ; lv_page_slot_index += autoE21D4897_ai ) {
            if ((lib1_gv_player_collection[EventPlayer()].lv_collection_card_ui[lv_page_slot_index].lv_dialog != c_invalidDialogId)) {
                lib1_gf_SetCollectionCardEnabledDisabled(EventPlayer(), lv_page_slot_index);
            }

        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_ShiftKeyUp_Init () {
    lib1_gt_ShiftKeyUp = TriggerCreate("lib1_gt_ShiftKeyUp_Func");
    TriggerAddEventKeyPressed(lib1_gt_ShiftKeyUp, c_playerAny, c_keyShift, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shift Key Down
//--------------------------------------------------------------------------------------------------
bool lib1_gt_ShiftKeyDown_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gv_shift[EventPlayer()] = true;
    if ((lib1_gv_current_phase == "Menu")) {
        lib1_gf_EnableCollectionShiftClick(EventPlayer());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_ShiftKeyDown_Init () {
    lib1_gt_ShiftKeyDown = TriggerCreate("lib1_gt_ShiftKeyDown_Func");
    TriggerAddEventKeyPressed(lib1_gt_ShiftKeyDown, c_playerAny, c_keyShift, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Select Card (Planning Phase)
//--------------------------------------------------------------------------------------------------
bool lib1_gt_SelectCardPlanningPhase_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_hand_index;

    // Automatic Variable Declarations
    int autoAC72A35E_ae;
    const int autoAC72A35E_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib1_gv_current_phase == "Planning"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoAC72A35E_ae = lib1_gf_TopofHand(EventPlayer());
    lv_hand_index = 0;
    for ( ; ( (autoAC72A35E_ai >= 0 && lv_hand_index <= autoAC72A35E_ae) || (autoAC72A35E_ai < 0 && lv_hand_index >= autoAC72A35E_ae) ) ; lv_hand_index += autoAC72A35E_ai ) {
        if ((EventDialogControl() == lib1_gv_player[EventPlayer()].lv_hand.lv_card_button[lv_hand_index])) {
            lib1_gf_ToggleSelectedPlanningPhase(EventPlayer(), lv_hand_index);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_SelectCardPlanningPhase_Init () {
    lib1_gt_SelectCardPlanningPhase = TriggerCreate("lib1_gt_SelectCardPlanningPhase_Func");
    TriggerAddEventDialogControl(lib1_gt_SelectCardPlanningPhase, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Select Card (Play Phase)
//--------------------------------------------------------------------------------------------------
bool lib1_gt_SelectCardPlayPhase_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_hand_index;

    // Automatic Variable Declarations
    int autoFA50FAB9_ae;
    const int autoFA50FAB9_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib1_gv_current_phase == "Play"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoFA50FAB9_ae = lib1_gf_TopofHand(EventPlayer());
    lv_hand_index = 0;
    for ( ; ( (autoFA50FAB9_ai >= 0 && lv_hand_index <= autoFA50FAB9_ae) || (autoFA50FAB9_ai < 0 && lv_hand_index >= autoFA50FAB9_ae) ) ; lv_hand_index += autoFA50FAB9_ai ) {
        if ((EventDialogControl() == lib1_gv_player[EventPlayer()].lv_hand.lv_card_button[lv_hand_index])) {
            if ((lib1_gv_player[EventPlayer()].lv_hand.lv_card[lv_hand_index].lv_locked_by_player >= 1)) {
                lib1_gf_DisplayLockedWarningArgusCrystal(EventPlayer(), lv_hand_index);
            }
            else {
                if ((lib1_gv_shift[EventPlayer()] == true) && (lib1_gv_player[EventPlayer()].lv_hand.lv_card[lv_hand_index].lv_transform >= 0)) {
                    lib1_gf_TransformHandCard(EventPlayer(), lv_hand_index);
                    lib1_gv_player[EventPlayer()].lv_resources.lv_minerals_used = lib1_gf_CurrentSelectionMineralCost(EventPlayer());
                    lib1_gv_player[EventPlayer()].lv_resources.lv_gas_used = lib1_gf_CurrentSelectionGasCost(EventPlayer());
                    lib1_gf_CheckSelectedCardsAreLegal(EventPlayer());
                }
                else {
                    if (((lib1_gv_player[EventPlayer()].lv_hand.lv_selected[lv_hand_index] == true) || (lib1_gf_CardLegaltoPlay(EventPlayer(), lib1_gf_HandCardMineralCost(EventPlayer(), lv_hand_index), lib1_gf_HandCardGasCost(EventPlayer(), lv_hand_index), lib1_gv_player[EventPlayer()].lv_hand.lv_card[lv_hand_index].lv_id) == true))) {
                        lib1_gf_ToggleSelectedPlayPhase(EventPlayer(), lv_hand_index);
                        lib1_gv_player[EventPlayer()].lv_resources.lv_minerals_used = lib1_gf_CurrentSelectionMineralCost(EventPlayer());
                        lib1_gv_player[EventPlayer()].lv_resources.lv_gas_used = lib1_gf_CurrentSelectionGasCost(EventPlayer());
                        lib1_gf_MakeKeystoneEnergyRequestsLegal(lib1_gv_player[EventPlayer()].lv_team);
                        lib1_gf_CheckSelectedCardsAreLegal(EventPlayer());
                        lib1_gf_UpdateCardPropertiesBasedonGameState(EventPlayer(), false);
                        lib1_gf_UpdateKeystoneChannelText(lib1_gv_player[EventPlayer()].lv_team);
                        break;
                    }
                    else {
                        if ((lib1_gf_CardAffordabletoPlay(EventPlayer(), lib1_gf_HandCardMineralCost(EventPlayer(), lv_hand_index), lib1_gf_HandCardGasCost(EventPlayer(), lv_hand_index), lib1_gv_player[EventPlayer()].lv_hand.lv_card[lv_hand_index].lv_id) == true) && ((lib1_gv_player[EventPlayer()].lv_hand.lv_card[lv_hand_index].lv_id == lib1_gf_GetCardIDByName("Feral Zerglings")) || (lib1_gv_player[EventPlayer()].lv_hand.lv_card[lv_hand_index].lv_id == lib1_gf_GetCardIDByName("Feral Ultralisk")))) {
                            SoundPlayForPlayer(SoundLink("e_cmdNotEnoughEnergy_Zerg", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                        }
                        else if ((lib1_gf_CardAffordabletoPlay(EventPlayer(), lib1_gf_HandCardMineralCost(EventPlayer(), lv_hand_index), lib1_gf_HandCardGasCost(EventPlayer(), lv_hand_index), lib1_gv_player[EventPlayer()].lv_hand.lv_card[lv_hand_index].lv_id) == true) && (lib1_gv_player[EventPlayer()].lv_hand.lv_card[lv_hand_index].lv_id == lib1_gf_GetCardIDByName("Exiled Ones"))) {
                            SoundPlayForPlayer(SoundLink("Alert_ProtossBuildError", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                        }
                        else if (true) {
                            lib1_gf_NotEnoughResources(EventPlayer(), lib1_gf_HandCardMineralCost(EventPlayer(), lv_hand_index), lib1_gf_HandCardGasCost(EventPlayer(), lv_hand_index));
                        }
                        break;
                    }
                }
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_SelectCardPlayPhase_Init () {
    lib1_gt_SelectCardPlayPhase = TriggerCreate("lib1_gt_SelectCardPlayPhase_Func");
    TriggerAddEventDialogControl(lib1_gt_SelectCardPlayPhase, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mouse Enter Card
//--------------------------------------------------------------------------------------------------
bool lib1_gt_MouseEnterCard_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int autoE061BC31_ae;
    const int autoE061BC31_ai = 1;
    int autoFEBEAB99_ae;
    const int autoFEBEAB99_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoE061BC31_ae = lib1_gf_TopofHand(EventPlayer());
    lv_index = 0;
    for ( ; ( (autoE061BC31_ai >= 0 && lv_index <= autoE061BC31_ae) || (autoE061BC31_ai < 0 && lv_index >= autoE061BC31_ae) ) ; lv_index += autoE061BC31_ai ) {
        if ((EventDialogControl() == lib1_gv_player[EventPlayer()].lv_hand.lv_card_button[lv_index])) {
            lib1_gf_HideUnitPanel(EventPlayer());
            lib1_gf_StartHoverTimer(EventPlayer(), lv_index, false);
            lib1_gf_ResizeHandCard(EventPlayer(), lv_index, lib1_gv_hOVER_OVER_PERCENT);
            DialogSetRenderPriority(lib1_gv_player[EventPlayer()].lv_hand.lv_card[lv_index].lv_ui.lv_dialog, lib1_gf_HoveredCardRenderPriority());
            lib1_gf_RefreshUIRenderPriority();
            if ((lib1_gv_player[EventPlayer()].lv_hand.lv_card[lv_index].lv_locked_by_player >= 1)) {
                libNtve_gf_SetDialogItemTooltip(lib1_gv_player[EventPlayer()].lv_hand.lv_card_button[lv_index], StringExternal("Param/Value/lib_1_84119F97"), PlayerGroupAll());
            }
            else {
                libNtve_gf_SetDialogItemTooltip(lib1_gv_player[EventPlayer()].lv_hand.lv_card_button[lv_index], StringToText(""), PlayerGroupAll());
            }
            break;
        }

    }
    autoFEBEAB99_ae = ((lib1_gv_cOLLECTION_CARD_ROWS * lib1_gv_cOLLECTION_CARD_COLUMNS) - 1);
    lv_index = 0;
    for ( ; ( (autoFEBEAB99_ai >= 0 && lv_index <= autoFEBEAB99_ae) || (autoFEBEAB99_ai < 0 && lv_index >= autoFEBEAB99_ae) ) ; lv_index += autoFEBEAB99_ai ) {
        if ((lib1_gv_player_collection[EventPlayer()].lv_collection_card_ui[lv_index].lv_dialog != c_invalidDialogId) && (EventDialogControl() == lib1_gv_collection_card_button[lv_index])) {
            lib1_gf_StartHoverTimer(EventPlayer(), lv_index, true);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_MouseEnterCard_Init () {
    lib1_gt_MouseEnterCard = TriggerCreate("lib1_gt_MouseEnterCard_Func");
    TriggerAddEventDialogControl(lib1_gt_MouseEnterCard, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseEnter);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mouse Exit Card
//--------------------------------------------------------------------------------------------------
bool lib1_gt_MouseExitCard_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto5A3DD533_ae;
    const int auto5A3DD533_ai = 1;
    int auto98464762_ae;
    const int auto98464762_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto5A3DD533_ae = lib1_gf_TopofHand(EventPlayer());
    lv_index = 0;
    for ( ; ( (auto5A3DD533_ai >= 0 && lv_index <= auto5A3DD533_ae) || (auto5A3DD533_ai < 0 && lv_index >= auto5A3DD533_ae) ) ; lv_index += auto5A3DD533_ai ) {
        if ((EventDialogControl() == lib1_gv_player[EventPlayer()].lv_hand.lv_card_button[lv_index])) {
            lib1_gf_CancelHover(EventPlayer());
            lib1_gf_ResizeHandCard(EventPlayer(), lv_index, 100);
            DialogSetRenderPriority(lib1_gv_player[EventPlayer()].lv_hand.lv_card[lv_index].lv_ui.lv_dialog, lib1_gf_HandCardRenderPriority(lv_index, false));
            lib1_gf_RefreshUIRenderPriority();
            break;
        }

    }
    auto98464762_ae = ((lib1_gv_cOLLECTION_CARD_ROWS * lib1_gv_cOLLECTION_CARD_COLUMNS) - 1);
    lv_index = 0;
    for ( ; ( (auto98464762_ai >= 0 && lv_index <= auto98464762_ae) || (auto98464762_ai < 0 && lv_index >= auto98464762_ae) ) ; lv_index += auto98464762_ai ) {
        if ((lib1_gv_player_collection[EventPlayer()].lv_collection_card_ui[lv_index].lv_dialog != c_invalidDialogId) && (EventDialogControl() == lib1_gv_collection_card_button[lv_index])) {
            lib1_gf_CancelHover(EventPlayer());
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_MouseExitCard_Init () {
    lib1_gt_MouseExitCard = TriggerCreate("lib1_gt_MouseExitCard_Func");
    TriggerAddEventDialogControl(lib1_gt_MouseExitCard, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseExit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Select Resource
//--------------------------------------------------------------------------------------------------
bool lib1_gt_SelectResource_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == lib1_gv_resource_chooser_mineral_button)) {
        lib1_gv_player[EventPlayer()].lv_resources.lv_resource_chosen = "mineral";
        lib1_gv_player[EventPlayer()].lv_button_click_time = GameGetMissionTime();
        DialogSetVisible(lib1_gv_resource_chooser_dialog, PlayerGroupSingle(EventPlayer()), false);
    }
    else {
        if ((EventDialogControl() == lib1_gv_resource_chooser_gas_button)) {
            if ((lib1_gv_tutorial_flag == true) && (lib1_gv_current_turn == 1)) {
                SoundPlayForPlayer(SoundLink("UI_GenericError", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/lib_1_26E64F6F"));
            }
            else {
                lib1_gv_player[EventPlayer()].lv_resources.lv_resource_chosen = "gas";
                lib1_gv_player[EventPlayer()].lv_button_click_time = GameGetMissionTime();
                DialogSetVisible(lib1_gv_resource_chooser_dialog, PlayerGroupSingle(EventPlayer()), false);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_SelectResource_Init () {
    lib1_gt_SelectResource = TriggerCreate("lib1_gt_SelectResource_Func");
    TriggerAddEventDialogControl(lib1_gt_SelectResource, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: End Phase Button Response
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EndPhaseButtonResponse_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1_gv_end_phase_button))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib1_gv_tutorial_flag == true) && (lib1_gv_current_turn == 1) && (lib1_gv_player[1].lv_hand.lv_selected[0] == false)) {
        SoundPlayForPlayer(SoundLink("UI_GenericError", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/lib_1_EC374186"));
    }
    else if (true) {
        DialogSetVisible(lib1_gv_planning_instructions, PlayerGroupSingle(EventPlayer()), false);
        lib1_gf_DisableAllCardButtons(EventPlayer());
        DialogSetVisible(lib1_gv_end_phase_dialog, PlayerGroupSingle(EventPlayer()), false);
        PlayerGroupAdd(lib1_gv_ready_players, EventPlayer());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EndPhaseButtonResponse_Init () {
    lib1_gt_EndPhaseButtonResponse = TriggerCreate("lib1_gt_EndPhaseButtonResponse_Func");
    TriggerAddEventDialogControl(lib1_gt_EndPhaseButtonResponse, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mouse Enter Choose Resource
//--------------------------------------------------------------------------------------------------
bool lib1_gt_MouseEnterChooseResource_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == lib1_gv_resource_chooser_mineral_button)) {
        lib1_gf_SetMineralIconSizeandPosition(EventPlayer(), 1.1);
    }
    else {
        if ((EventDialogControl() == lib1_gv_resource_chooser_gas_button)) {
            lib1_gf_SetGasIconSizeandPosition(EventPlayer(), 1.1);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_MouseEnterChooseResource_Init () {
    lib1_gt_MouseEnterChooseResource = TriggerCreate("lib1_gt_MouseEnterChooseResource_Func");
    TriggerAddEventDialogControl(lib1_gt_MouseEnterChooseResource, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseEnter);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mouse Exit Choose Resource
//--------------------------------------------------------------------------------------------------
bool lib1_gt_MouseExitChooseResource_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == lib1_gv_resource_chooser_mineral_button)) {
        lib1_gf_SetMineralIconSizeandPosition(EventPlayer(), 1.0);
    }
    else {
        if ((EventDialogControl() == lib1_gv_resource_chooser_gas_button)) {
            lib1_gf_SetGasIconSizeandPosition(EventPlayer(), 1.0);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_MouseExitChooseResource_Init () {
    lib1_gt_MouseExitChooseResource = TriggerCreate("lib1_gt_MouseExitChooseResource_Func");
    TriggerAddEventDialogControl(lib1_gt_MouseExitChooseResource, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseExit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Click Unit
//--------------------------------------------------------------------------------------------------
bool lib1_gt_ClickUnit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gf_HideTrophyName(EventPlayer());
    if ((UnitGroupCount(UnitGroupSelected(EventPlayer()), c_unitCountAlive) == 1) && (UnitGroupCount(UnitGroupFilter("Trophy", c_playerAny, UnitGroupSelected(EventPlayer()), UnitFilter(0, 0, 0, 0), 0), c_unitCountAlive) == 0)) {
        UISetFrameVisible(PlayerGroupSingle(EventPlayer()), c_syncFrameTypeInfoPanel, true);
        if ((UnitGroupCount(UnitGroupFilter(null, c_playerAny, UnitGroupSelected(EventPlayer()), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0), c_unitCountAlive) == 1) && (UnitGroupCount(UnitGroupFilter("Reactor", c_playerAny, UnitGroupSelected(EventPlayer()), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroupFilter("TechLab", c_playerAny, UnitGroupSelected(EventPlayer()), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroupFilter("MachineShop", c_playerAny, UnitGroupSelected(EventPlayer()), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroupFilter("PhysicsLab", c_playerAny, UnitGroupSelected(EventPlayer()), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0), c_unitCountAlive) == 0)) {
            DialogSetVisible(lib1_gv_unit_panel_additions, PlayerGroupSingle(EventPlayer()), true);
            libNtve_gf_SetDialogItemText(lib1_gv_unit_panel_structure_cost, (StringExternal("Param/Value/lib_1_B52661DC") + FixedToText(UnitGetCustomValue(UnitGroupRandomUnit(UnitGroupSelected(EventPlayer()), c_unitCountAlive), 0), c_fixedPrecisionAny)), PlayerGroupAll());
        }
        else {
            DialogSetVisible(lib1_gv_unit_panel_additions, PlayerGroupSingle(EventPlayer()), false);
        }
    }
    else {
        UISetFrameVisible(PlayerGroupSingle(EventPlayer()), c_syncFrameTypeInfoPanel, false);
        DialogSetVisible(lib1_gv_unit_panel_additions, PlayerGroupSingle(EventPlayer()), false);
        if ((UnitGroupCount(UnitGroupSelected(EventPlayer()), c_unitCountAlive) == 1) && (UnitGroupCount(UnitGroupFilter("Trophy", c_playerAny, UnitGroupSelected(EventPlayer()), UnitFilter(0, 0, 0, 0), 0), c_unitCountAlive) == 1)) {
            lib1_gf_ShowTrophyName(EventPlayer(), UnitGetOwner(UnitGroupRandomUnit(UnitGroupSelected(EventPlayer()), c_unitCountAlive)));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_ClickUnit_Init () {
    lib1_gt_ClickUnit = TriggerCreate("lib1_gt_ClickUnit_Func");
    TriggerAddEventUnitSelected(lib1_gt_ClickUnit, null, c_playerAny, true);
    TriggerAddEventUnitSelected(lib1_gt_ClickUnit, null, c_playerAny, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fatigue
//--------------------------------------------------------------------------------------------------
bool lib1_gt_Fatigue_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_current_player;
    lib1_gf_FatigueDamage(lv_player);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_Fatigue_Init () {
    lib1_gt_Fatigue = TriggerCreate("lib1_gt_Fatigue_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Phase Ends
//--------------------------------------------------------------------------------------------------
bool lib1_gt_PhaseEnds_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib1_gv_current_phase == "Planning")) {
        lib1_gf_EndPlanningPhase();
        Wait(0.5, c_timeGame);
        lib1_gf_StartPlayPhase();
    }
    else if ((lib1_gv_current_phase == "Play")) {
        lib1_gf_StartBattlePhase();
    }
    else if ((lib1_gv_current_phase == "Battle")) {
        lib1_gf_StartPlayPhase();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_PhaseEnds_Init () {
    lib1_gt_PhaseEnds = TriggerCreate("lib1_gt_PhaseEnds_Func");
    TriggerAddEventTimer(lib1_gt_PhaseEnds, lib1_gv_turn_timer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Play Phase Loop
//--------------------------------------------------------------------------------------------------
bool lib1_gt_PlayPhaseLoop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_team;
    int lv_hand_index;

    // Automatic Variable Declarations
    const int auto058D3A25_ae = lib1_gv_mAX_PLAYERS;
    const int auto058D3A25_ai = 1;
    int autoB3D988D7_ae;
    const int autoB3D988D7_ai = 1;
    const int auto2EBA3565_ae = 1;
    const int auto2EBA3565_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = 1;
    for ( ; ( (auto058D3A25_ai >= 0 && lv_player <= auto058D3A25_ae) || (auto058D3A25_ai < 0 && lv_player >= auto058D3A25_ae) ) ; lv_player += auto058D3A25_ai ) {
        if ((PlayerStatus(lv_player) == c_playerStatusActive)) {
            lib1_gf_CheckForResourceChoice(lv_player);
            lib1_gf_UpdateResourceIcons(lv_player);
            autoB3D988D7_ae = lib1_gf_HandLimit(lv_player);
            lv_hand_index = 0;
            for ( ; ( (autoB3D988D7_ai >= 0 && lv_hand_index <= autoB3D988D7_ae) || (autoB3D988D7_ai < 0 && lv_hand_index >= autoB3D988D7_ae) ) ; lv_hand_index += autoB3D988D7_ai ) {
                if ((lib1_gf_PlayerHasCardAtHandIndex(lv_player, lv_hand_index) == true)) {
                    lib1_gf_MoveCardTowardsPosition(lib1_gv_player[lv_player].lv_hand.lv_card[lv_hand_index].lv_ui.lv_dialog, lib1_gf_HandPositionX(lv_player, lv_hand_index), lib1_gf_HandPositionY(lv_player, lv_hand_index));
                }

            }
            if ((lib1_gv_player[lv_player].lv_cards_to_draw >= 1) && (GameGetMissionTime() > (0.25 + lib1_gv_player[lv_player].lv_last_draw_time))) {
                lib1_gf_DrawCardFromDecktoHand(lv_player);
                lib1_gv_player[lv_player].lv_cards_to_draw = (lib1_gv_player[lv_player].lv_cards_to_draw - 1);
            }

        }

    }
    lv_team = 0;
    for ( ; ( (auto2EBA3565_ai >= 0 && lv_team <= auto2EBA3565_ae) || (auto2EBA3565_ai < 0 && lv_team >= auto2EBA3565_ae) ) ; lv_team += auto2EBA3565_ai ) {
        if ((lib1_gv_current_phase == "Play")) {
            lib1_gf_MakeKeystoneEnergyRequestsLegal(lv_team);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_PlayPhaseLoop_Init () {
    lib1_gt_PlayPhaseLoop = TriggerCreate("lib1_gt_PlayPhaseLoop_Func");
    TriggerAddEventTimePeriodic(lib1_gt_PlayPhaseLoop, 0.05, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Timer
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UpdateTimer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_active_player_count;

    // Automatic Variable Declarations
    const int autoA40F2CDB_ae = lib1_gv_mAX_PLAYERS;
    const int autoA40F2CDB_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib1_gv_current_phase == "Play")) {
        lib1_gf_PauseMissiles();
    }

    lib1_gf_UpdateTurnTimer();
    lv_player = 1;
    for ( ; ( (autoA40F2CDB_ai >= 0 && lv_player <= autoA40F2CDB_ae) || (autoA40F2CDB_ai < 0 && lv_player >= autoA40F2CDB_ae) ) ; lv_player += autoA40F2CDB_ai ) {
        if ((PlayerStatus(lv_player) == c_playerStatusActive) && (PlayerType(lv_player) == c_playerTypeUser)) {
            lv_active_player_count = (lv_active_player_count + 1);
        }
        else {
            PlayerGroupRemove(lib1_gv_ready_players, lv_player);
        }
    }
    if ((PlayerGroupCount(lib1_gv_ready_players) >= lv_active_player_count)) {
        TimerStart(lib1_gv_turn_timer, 0.1, false, c_timeGame);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UpdateTimer_Init () {
    lib1_gt_UpdateTimer = TriggerCreate("lib1_gt_UpdateTimer_Func");
    TriggerAddEventTimePeriodic(lib1_gt_UpdateTimer, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gas Producer Dies
//--------------------------------------------------------------------------------------------------
bool lib1_gt_GasProducerDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "Refinery") || (UnitGetType(EventUnit()) == "Extractor") || (UnitGetType(EventUnit()) == "Assimilator")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib1_gv_player[EventPlayer()].lv_resources.lv_gas_income > lib1_gf_MaxGasIncome(EventPlayer()))) {
        lib1_gv_player[EventPlayer()].lv_resources.lv_gas_income = (lib1_gv_player[EventPlayer()].lv_resources.lv_gas_income - 1);
    }

    lib1_gf_UpdateResourceIcons(EventPlayer());
    lib1_gf_ResizeResourceUI(EventPlayer(), 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_GasProducerDies_Init () {
    lib1_gt_GasProducerDies = TriggerCreate("lib1_gt_GasProducerDies_Func");
    TriggerAddEventUnitDied(lib1_gt_GasProducerDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tutorial Button Response
//--------------------------------------------------------------------------------------------------
bool lib1_gt_TutorialButtonResponse_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_team;
    int lv_player;
    bool lv_fetch;

    // Automatic Variable Declarations
    const int autoE85BCF23_ae = 1;
    const int autoE85BCF23_ai = 1;
    playergroup autoF2614EDA_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1_gv_tutorial_tip_button))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib1_gv_tutorial_tip_id == 1)) {
        lv_fetch = lib1_gf_FetchCardWithName(1, "Battlecruiser", "");
    }

    if (((lib1_gv_tutorial_tip_id == 1) || (lib1_gv_tutorial_tip_id == 2) || (lib1_gv_tutorial_tip_id == 3) || (lib1_gv_tutorial_tip_id == 4))) {
        lv_team = 0;
        for ( ; ( (autoE85BCF23_ai >= 0 && lv_team <= autoE85BCF23_ae) || (autoE85BCF23_ai < 0 && lv_team >= autoE85BCF23_ae) ) ; lv_team += autoE85BCF23_ai ) {
            autoF2614EDA_g = lib1_gv_team[lv_team];
            lv_player = -1;
            while (true) {
                lv_player = PlayerGroupNextPlayer(autoF2614EDA_g, lv_player);
                if (lv_player < 0) { break; }
                lib1_gf_ProcessResources(lv_player);
                lib1_gf_UpdateCardPropertiesBasedonGameState(lv_player, true);
                if ((lib1_gv_player[lv_player].lv_use_ai == true)) {
                    lib1_gf_AISelectCards(lv_player);
                }

            }
        }
    }

    DialogDestroy(lib1_gv_tutorial_tip_dialog);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_TutorialButtonResponse_Init () {
    lib1_gt_TutorialButtonResponse = TriggerCreate("lib1_gt_TutorialButtonResponse_Func");
    TriggerAddEventDialogControl(lib1_gt_TutorialButtonResponse, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Dies
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UnitDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_count;

    // Automatic Variable Declarations
    int auto33A51C23_ae;
    const int auto33A51C23_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) != "Scarab"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "AdeptPhaseShift"))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "Pet") == false))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gv_player[EventPlayer()].lv_units_lost = (lib1_gv_player[EventPlayer()].lv_units_lost + 1);
    if ((UnitHasBehavior2(EventUnit(), "Heroic") == true)) {
        lib1_gv_player[EventPlayer()].lv_heroes_lost = (lib1_gv_player[EventPlayer()].lv_heroes_lost + 1);
    }

    if ((UnitHasBehavior2(EventUnit(), "Justice") == true)) {
        auto33A51C23_ae = lib1_gv_player[EventPlayer()].lv_heroes_lost;
        lv_count = 1;
        for ( ; ( (auto33A51C23_ai >= 0 && lv_count <= auto33A51C23_ae) || (auto33A51C23_ai < 0 && lv_count >= auto33A51C23_ae) ) ; lv_count += auto33A51C23_ai ) {
            UnitCreate(1, "HighTemplar", 0, EventPlayer(), RegionRandomPoint(lib1_gv_player[EventPlayer()].lv_spawn_region), libNtve_gf_RandomAngle());
            UnitBehaviorAdd(UnitLastCreated(), "Caster", UnitLastCreated(), 1);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("PsiStorm", 0), UnitGetPosition(lib1_gf_BestTargetforSplash(EventPlayer(), UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 1.5, false))), c_orderQueueReplace);
            UnitIssueOrder(UnitLastCreated(), OrderSetAutoCast(AbilityCommand("PsiStorm", 0), false), c_orderQueueAddToFront);
            UnitIssueOrder(UnitLastCreated(), OrderSetAutoCast(AbilityCommand("Feedback", 0), false), c_orderQueueAddToFront);
            lib1_gf_IssueLeaveOrders(UnitLastCreated(), c_orderQueueAddToEnd);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UnitDies_Init () {
    lib1_gt_UnitDies = TriggerCreate("lib1_gt_UnitDies_Func");
    TriggerAddEventUnitDied(lib1_gt_UnitDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Enters Defensive Area
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UnitEntersDefensiveArea_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitRegion() == lib1_gv_player[EventPlayer()].lv_defense_region))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "Viper") && (UnitGroupHasUnit(lib1_gv_units_from_card[lib1_gf_GetCardIDByName("Parasitic Vipers")], EventUnit()) == true)) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("Yoink", 0), true), c_orderQueueAddToFront);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UnitEntersDefensiveArea_Init () {
    lib1_gt_UnitEntersDefensiveArea = TriggerCreate("lib1_gt_UnitEntersDefensiveArea_Func");
    TriggerAddEventUnitRegion(lib1_gt_UnitEntersDefensiveArea, null, RegionFromId(11), true);
    TriggerAddEventUnitRegion(lib1_gt_UnitEntersDefensiveArea, null, RegionFromId(12), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Damage Response
//--------------------------------------------------------------------------------------------------
bool lib1_gt_DamageResponse_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventUnitDamageAmount() >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "Banshee") && (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) >= 45.0)) {
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("BansheeCloak", 0)), c_orderQueueAddToFront);
    }
    else if ((UnitGetType(EventUnit()) == "Wraith") && (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) >= 45.0)) {
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("WraithCloak", 0)), c_orderQueueAddToFront);
    }
    else if ((UnitGetType(EventUnit()) == "WraithHeroic") && (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) >= 45.0)) {
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("WraithCloak", 0)), c_orderQueueAddToFront);
    }
    else if ((UnitGetType(EventUnit()) == "KerriganGhostLab")) {
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("GhostCloak", 0)), c_orderQueueAddToFront);
    }
    else if ((UnitGetType(EventUnit()) == "Spectre") && (UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) < 50.0) && (UnitGroupHasUnit(lib1_gv_defensive_units, EventUnit()) == false)) {
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("RogueGhostCloak", 0)), c_orderQueueAddToFront);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_DamageResponse_Init () {
    lib1_gt_DamageResponse = TriggerCreate("lib1_gt_DamageResponse_Func");
    TriggerAddEventUnitDamaged(lib1_gt_DamageResponse, null, c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Response
//--------------------------------------------------------------------------------------------------
bool lib1_gt_AttackResponse_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_weapon_index;
    unit lv_unit;
    unit lv_caster;
    bool lv_attack_is_ranged;

    // Automatic Variable Declarations
    int auto28CCB931_ae;
    const int auto28CCB931_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UnitTypeIsCaster(UnitGetType(EventUnitTarget())) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto28CCB931_ae = UnitWeaponCount(EventUnitTarget());
    lv_weapon_index = 1;
    for ( ; ( (auto28CCB931_ai >= 0 && lv_weapon_index <= auto28CCB931_ae) || (auto28CCB931_ai < 0 && lv_weapon_index >= auto28CCB931_ae) ) ; lv_weapon_index += auto28CCB931_ai ) {
        if ((CatalogFieldValueGet(c_gameCatalogWeapon, UnitWeaponGet(EventUnitTarget(), lv_weapon_index), "Options[" + IntToString(2) + "]", c_playerAny) == "0") && (UnitWeaponDamage(EventUnitTarget(), lv_weapon_index, c_unitAttributeNone, false) > 0.0)) {
            lv_attack_is_ranged = true;
        }

    }
    if ((UnitHasBehavior2(EventUnit(), "DefensiveMatrixNew") == false) && ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifeMax, c_unitPropCurrent) + UnitGetPropertyFixed(EventUnit(), c_unitPropShieldsMax, c_unitPropCurrent)) >= 125.0) && ((lv_attack_is_ranged == false) || (UnitFilterMatch(EventUnit(), EventPlayer(), UnitFilter(0, 0, (1 << c_targetFilterGround) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true) || (UnitHasBehavior2(EventUnit(), "DefilerMPDarkSwarm") == false))) {
        lv_caster = UnitGroupRandomUnit(UnitGroupFilterAlliance(UnitGroup("ScienceVessel", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 9.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), EventPlayer(), c_unitAllianceAlly, 0), c_unitCountAlive);
        if ((lv_caster != null)) {
            UnitIssueOrder(lv_caster, OrderTargetingUnit(AbilityCommand("DefensiveMatrixTarget", 0), EventUnit()), c_orderQueueAddToFront);
        }

    }

    if ((UnitFilterMatch(EventUnit(), EventPlayer(), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true) && (UnitHasBehavior2(EventUnit(), "DefilerMPDarkSwarm") == false) && (lv_attack_is_ranged == true)) {
        lv_caster = UnitGroupRandomUnit(UnitGroupFilterAlliance(UnitGroup("DefilerMP", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), EventPlayer(), c_unitAllianceAlly, 0), c_unitCountAlive);
        if ((lv_caster != null)) {
            UnitIssueOrder(lv_caster, OrderTargetingPoint(AbilityCommand("DefilerMPDarkSwarm", 0), UnitGetPosition(EventUnit())), c_orderQueueAddToFront);
        }

    }

    if ((libNtve_gf_UnitInRegion(EventUnit(), lib1_gv_player[EventPlayer()].lv_spawn_region) == false) && ((UnitHasBehavior2(EventUnit(), "RavenScramblerMissile") == true) || (UnitHasBehavior2(EventUnit(), "RavenScramblerMissile2") == true) || (UnitGetType(EventUnit()) == "Raven") || (UnitGetType(EventUnit()) == "Overseer") || (UnitGetType(EventUnit()) == "Infestor") || (UnitGetType(EventUnit()) == "InfestorBurrowed") || (UnitGetType(EventUnit()) == "Viper") || (UnitGetType(EventUnit()) == "Observer") || (UnitGetType(EventUnit()) == "ScienceVessel") || (UnitGetType(EventUnit()) == "QueenMP") || (UnitGetType(EventUnit()) == "DefilerMP") || ((UnitGroupHasUnit(lib1_gv_aggressive_units, EventUnit()) == true) && (UnitGetType(EventUnit()) == "SwarmHostMP")))) {
        lib1_gf_IssueDefaultOrders(EventUnit());
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(EventUnit()), 3.0, RegionRandomPoint(lib1_gv_player[EventPlayer()].lv_spawn_region))), c_orderQueueAddToFront);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_AttackResponse_Init () {
    lib1_gt_AttackResponse = TriggerCreate("lib1_gt_AttackResponse_Func");
    TriggerAddEventUnitAttacked2(lib1_gt_AttackResponse, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit is Created
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UnitisCreated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gf_UnitIsPet(EventUnitCreatedUnit()) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnitCreatedUnit(), "PermanentlyUncommandable", EventUnitCreatedUnit(), 1);
    if ((UnitHasBehavior2(EventUnitCreatedUnit(), "Hallucination") == true)) {
        lib1_gf_IssueAttackOrders(EventUnitCreatedUnit());
    }

    if ((EventUnitCreatedAbil() == "CalldownMarine")) {
        UnitGroupAdd(lib1_gv_aggressive_units, EventUnitCreatedUnit());
        Wait(4.1, c_timeGame);
        lib1_gf_IssueAttackOrders(EventUnitCreatedUnit());
    }

    if (((EventUnitCreatedAbil() == "MorphToInfestedTerran") || (EventUnitCreatedAbil() == "QueenMPSpawnBroodlings") || (EventUnitCreatedAbil() == "QueenSpawnBroodlingsAction") || (UnitGetOriginalEffect(EventUnitCreatedUnit()) == "BroodlingGestation"))) {
        UnitGroupAdd(lib1_gv_aggressive_units, EventUnitCreatedUnit());
        lib1_gf_IssueAttackOrders(EventUnitCreatedUnit());
    }

    lib1_gf_ApplyWaitingTint(EventUnitCreatedUnit(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UnitisCreated_Init () {
    lib1_gt_UnitisCreated = TriggerCreate("lib1_gt_UnitisCreated_Func");
    TriggerAddEventUnitCreated(lib1_gt_UnitisCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Finishes Training
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UnitFinishesTraining_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnitProgressUnit()) == "Banshee")) {
        UnitSetPropertyFixed(EventUnitProgressUnit(), c_unitPropEnergy, 40.0);
        UnitIssueOrder(EventUnitProgressUnit(), Order(AbilityCommand("BansheeCloak", 0)), c_orderQueueAddToFront);
    }
    else if ((UnitGetType(EventUnitProgressUnit()) == "Wraith")) {
        UnitSetPropertyFixed(EventUnitProgressUnit(), c_unitPropEnergy, 40.0);
        UnitIssueOrder(EventUnitProgressUnit(), Order(AbilityCommand("WraithCloak", 0)), c_orderQueueAddToFront);
    }
    else if (((UnitGetType(EventUnitProgressUnit()) == "ThorAP") || (UnitGetType(EventUnitProgressUnit()) == "Thor") || (UnitGetType(EventUnitProgressUnit()) == "Battlecruiser"))) {
        if ((lib1_gf_TopofHand(UnitGetOwner(EventUnitProgressUnit())) >= 1)) {
            lib1_gf_DiscardCardFromHandtoDiscard(UnitGetOwner(EventUnitProgressUnit()), RandomInt(0, lib1_gf_TopofHand(UnitGetOwner(EventUnitProgressUnit()))));
            lib1_gf_DiscardCardFromHandtoDiscard(UnitGetOwner(EventUnitProgressUnit()), RandomInt(0, lib1_gf_TopofHand(UnitGetOwner(EventUnitProgressUnit()))));
        }
        else {
            UnitKill(UnitAddOnChild(EventUnit(), 0));
        }
    }
    UnitGroupAdd(lib1_gv_aggressive_units, EventUnitProgressUnit());
    UnitBehaviorAdd(EventUnitProgressUnit(), "PermanentlyUncommandable", EventUnitProgressUnit(), 1);
    lib1_gf_IssueAttackOrders(EventUnitProgressUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UnitFinishesTraining_Init () {
    lib1_gt_UnitFinishesTraining = TriggerCreate("lib1_gt_UnitFinishesTraining_Func");
    TriggerAddEventUnitTrainProgress(lib1_gt_UnitFinishesTraining, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Finishes Construction
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UnitFinishesConstruction_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitGetType(EventUnitProgressUnit()) == "Archon") || (UnitGetType(EventUnitProgressUnit()) == "ArchonHero"))) {
        UnitGroupRemove(lib1_gv_tactical_units, EventUnitProgressUnit());
        UnitGroupRemove(lib1_gv_defensive_units, EventUnitProgressUnit());
        UnitGroupAdd(lib1_gv_aggressive_units, EventUnitProgressUnit());
        lib1_gf_IssueDefaultOrders(EventUnitProgressUnit());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UnitFinishesConstruction_Init () {
    lib1_gt_UnitFinishesConstruction = TriggerCreate("lib1_gt_UnitFinishesConstruction_Func");
    TriggerAddEventUnitConstructProgress(lib1_gt_UnitFinishesConstruction, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mothership Starts Upgrading
//--------------------------------------------------------------------------------------------------
bool lib1_gt_MothershipStartsUpgrading_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(EventUnit(), c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(EventUnit(), c_unitPropShieldsPercent, 100.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_MothershipStartsUpgrading_Init () {
    lib1_gt_MothershipStartsUpgrading = TriggerCreate("lib1_gt_MothershipStartsUpgrading_Func");
    TriggerAddEventUnitAbility(lib1_gt_MothershipStartsUpgrading, null, AbilityCommand("MorphToMothership", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mothership Finishes Upgrading
//--------------------------------------------------------------------------------------------------
bool lib1_gt_MothershipFinishesUpgrading_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemove(lib1_gv_ready_to_morph, EventUnit());
    UnitBehaviorAdd(EventUnit(), "PermanentlyUncommandable", EventUnit(), 1);
    UnitGroupRemove(lib1_gv_aggressive_units, EventUnit());
    UnitGroupRemove(lib1_gv_defensive_units, EventUnit());
    UnitGroupAdd(lib1_gv_tactical_units, EventUnit());
    lib1_gf_IssueDefaultOrders(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_MothershipFinishesUpgrading_Init () {
    lib1_gt_MothershipFinishesUpgrading = TriggerCreate("lib1_gt_MothershipFinishesUpgrading_Func");
    TriggerAddEventUnitAbility(lib1_gt_MothershipFinishesUpgrading, null, AbilityCommand("MorphToMothership", 0), c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Adept Finishes Transferring
//--------------------------------------------------------------------------------------------------
bool lib1_gt_AdeptFinishesTransferring_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gf_IssueDefaultOrders(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_AdeptFinishesTransferring_Init () {
    lib1_gt_AdeptFinishesTransferring = TriggerCreate("lib1_gt_AdeptFinishesTransferring_Func");
    TriggerAddEventUnitBehaviorChange(lib1_gt_AdeptFinishesTransferring, null, "AdeptPhaseShiftCaster", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tactical Retreat
//--------------------------------------------------------------------------------------------------
bool lib1_gt_TacticalRetreat_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_medivac;
    unitgroup lv_defensivearbiters;

    // Automatic Variable Declarations
    unitgroup auto0905E30C_g;
    int auto0905E30C_u;

    // Variable Initialization
    lv_defensivearbiters = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((EventUnitDamageAmount() >= 1))) {
            return false;
        }

        if (!((UnitGroupHasUnit(lib1_gv_tactical_units, EventUnit()) == true))) {
            return false;
        }

        if (!((UnitGroupHasUnit(lib1_gv_retreating_units, EventUnit()) == false))) {
            return false;
        }

        if (!(((((UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) + UnitGetPropertyFixed(EventUnit(), c_unitPropShields, c_unitPropCurrent)) / (UnitGetPropertyFixed(EventUnit(), c_unitPropLifeMax, c_unitPropCurrent) + UnitGetPropertyFixed(EventUnit(), c_unitPropShieldsMax, c_unitPropCurrent))) <= 0.5) || (UnitGetType(EventUnit()) == "Adept") || ((UnitGetType(EventUnit()) == "Carrier") && (UnitMagazineCount(EventUnit(), "CarrierHangar") == 0)) || ((UnitGetType(EventUnit()) == "CarrierGantrithor") && (UnitMagazineCount(EventUnit(), "CarrierHangarGantrithor") == 0))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_defensivearbiters = UnitGroupFilter("ArbiterMP", EventPlayer(), lib1_gv_defensive_units, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lib1_gf_IssueTacticalRetreatOrders(EventUnit());
    if ((UnitGroupCount(lv_defensivearbiters, c_unitCountAlive) >= 1)) {
        UnitIssueOrder(UnitGroupRandomUnit(lv_defensivearbiters, c_unitCountAlive), OrderTargetingPoint(AbilityCommand("ArbiterMPRecall", 0), UnitGetPosition(EventUnit())), c_orderQueueAddToFront);
    }
    else if ((UnitGetType(EventUnit()) != "NovaCoop") && (UnitFilterMatch(EventUnit(), EventPlayer(), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true)) {
        auto0905E30C_g = UnitGroup("Medivac", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto0905E30C_u = UnitGroupCount(auto0905E30C_g, c_unitCountAll);
        for (;; auto0905E30C_u -= 1) {
            lv_medivac = UnitGroupUnitFromEnd(auto0905E30C_g, auto0905E30C_u);
            if (lv_medivac == null) { break; }
            if ((UnitGroupHasUnit(lib1_gv_units_from_card[lib1_gf_GetCardIDByName("Medivac Runners")], lv_medivac) == true) && (UnitGroupHasUnit(lib1_gv_defensive_units, lv_medivac) == true) && (UnitGroupHasUnit(lib1_gv_loading_units, lv_medivac) == false) && (UnitGroupHasUnit(lib1_gv_ready_units, lv_medivac) == false) && (UnitGroupHasUnit(lib1_gv_one_turn_wait_units, lv_medivac) == false) && (UnitGroupHasUnit(lib1_gv_two_turn_wait_units, lv_medivac) == false)) {
                UnitGroupAdd(lib1_gv_loading_units, lv_medivac);
                UnitIssueOrder(lv_medivac, OrderTargetingUnit(AbilityCommand("MedivacTransport", 0), EventUnit()), c_orderQueueReplace);
                UnitIssueOrder(lv_medivac, Order(AbilityCommand("MedivacSpeedBoost", 0)), c_orderQueueAddToFront);
                break;
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_TacticalRetreat_Init () {
    lib1_gt_TacticalRetreat = TriggerCreate("lib1_gt_TacticalRetreat_Func");
    TriggerAddEventUnitDamaged(lib1_gt_TacticalRetreat, null, c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defensive Retreat
//--------------------------------------------------------------------------------------------------
bool lib1_gt_DefensiveRetreat_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_retreat;
    int lv_card_id;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(lib1_gv_defensive_units, EventUnit()) == true))) {
            return false;
        }

        if (!((DistanceBetweenPoints(UnitGetPosition(EventUnit()), RegionGetCenter(lib1_gv_player[EventPlayer()].lv_defense_region)) > DistanceBetweenPoints(UnitGetPosition(EventUnit()), RegionGetCenter(lib1_gv_player[EventPlayer()].lv_enemy_defense_region))))) {
            return false;
        }

        if (!((UnitGroupHasUnit(lib1_gv_units_from_card[lib1_gf_GetCardIDByName("Perched Artillery")], EventUnit()) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gf_IssueDefensiveRetreatOrders(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_DefensiveRetreat_Init () {
    lib1_gt_DefensiveRetreat = TriggerCreate("lib1_gt_DefensiveRetreat_Func");
    TriggerAddEventUnitRegion(lib1_gt_DefensiveRetreat, null, RegionFromId(26), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cleanup
//--------------------------------------------------------------------------------------------------
bool lib1_gt_Cleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_cargo;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(lib1_gv_leaving_units, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupHasUnit(lib1_gv_units_from_card[lib1_gf_GetCardIDByName("Expedition Scout")], EventUnit()) == true)) {
        lib1_gf_GenerateCardforHand(EventPlayer(), lib1_gf_GetCardIDByName("Expedition Scout"));
    }

    lib1_gf_CleanupUnit(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_Cleanup_Init () {
    lib1_gt_Cleanup = TriggerCreate("lib1_gt_Cleanup_Func");
    TriggerAddEventUnitRegion(lib1_gt_Cleanup, null, RegionFromId(10), true);
    TriggerAddEventUnitRegion(lib1_gt_Cleanup, null, RegionFromId(9), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Waiting Unit Finishes Casting
//--------------------------------------------------------------------------------------------------
bool lib1_gt_WaitingUnitFinishesCasting_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "CasterWaitingToMoveOut") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnit(), "CasterWaitingToMoveOut", c_unitBehaviorCountAll);
    UnitBehaviorAdd(EventUnit(), "WaitingToMoveOut", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_WaitingUnitFinishesCasting_Init () {
    lib1_gt_WaitingUnitFinishesCasting = TriggerCreate("lib1_gt_WaitingUnitFinishesCasting_Func");
    TriggerAddEventUnitAbility(lib1_gt_WaitingUnitFinishesCasting, null, null, c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unload Cargo
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UnloadCargo_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnitCargo(), "PermanentlyUncommandable", EventUnitCargo(), 1);
    if ((UnitGroupHasUnit(lib1_gv_units_from_card[lib1_gf_GetCardIDByName("Perched Artillery")], EventUnitCargo()) == true)) {
        Wait(0.5, c_timeGame);
        UnitIssueOrder(EventUnitCargo(), Order(AbilityCommand("SiegeMode", 0)), c_orderQueueReplace);
    }
    else if ((UnitGroupHasUnit(lib1_gv_units_from_card[lib1_gf_GetCardIDByName("Norad II")], EventUnitCargo()) == true)) {
        Wait(0.5, c_timeGame);
        UnitIssueOrder(EventUnitCargo(), Order(AbilityCommand("SiegeModeMerc", 0)), c_orderQueueReplace);
    }
    else if (true) {
        lib1_gf_IssueDefaultOrders(EventUnitCargo());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UnloadCargo_Init () {
    lib1_gt_UnloadCargo = TriggerCreate("lib1_gt_UnloadCargo_Func");
    TriggerAddEventUnitCargo(lib1_gt_UnloadCargo, null, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Load Cargo
//--------------------------------------------------------------------------------------------------
bool lib1_gt_LoadCargo_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupHasUnit(lib1_gv_loading_units, EventUnit()) == true)) {
        UnitGroupRemove(lib1_gv_loading_units, EventUnit());
        lib1_gf_IssueDefaultOrders(EventUnit());
    }

    if ((UnitGroupHasUnit(lib1_gv_units_from_card[lib1_gf_GetCardIDByName("Escape Shuttle")], EventUnit()) == true)) {
        if ((UnitCargoValue(EventUnit(), c_unitCargoSpaceFree) == 0)) {
            lib1_gf_IssueLeaveOrders(EventUnit(), c_orderQueueReplace);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_LoadCargo_Init () {
    lib1_gt_LoadCargo = TriggerCreate("lib1_gt_LoadCargo_Func");
    TriggerAddEventUnitCargo(lib1_gt_LoadCargo, null, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cleanup Air Support BC
//--------------------------------------------------------------------------------------------------
bool lib1_gt_CleanupAirSupportBC_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Hyperion"))) {
            return false;
        }

        if (!((UnitGroupHasUnit(lib1_gv_units_from_card[lib1_gf_GetCardIDByName("Air Support")], EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeGame);
    lib1_gf_CleanupUnit(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_CleanupAirSupportBC_Init () {
    lib1_gt_CleanupAirSupportBC = TriggerCreate("lib1_gt_CleanupAirSupportBC_Func");
    TriggerAddEventUnitAbility(lib1_gt_CleanupAirSupportBC, null, AbilityCommand("Hyperjump", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Structure Dies
//--------------------------------------------------------------------------------------------------
bool lib1_gt_StructureDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_addon;

    // Automatic Variable Declarations
    unitgroup auto7CB19A80_g;
    int auto7CB19A80_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto7CB19A80_g = UnitGroup(null, UnitGetOwner(EventUnit()), RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32))), 0);
    auto7CB19A80_u = UnitGroupCount(auto7CB19A80_g, c_unitCountAll);
    for (;; auto7CB19A80_u -= 1) {
        lv_addon = UnitGroupUnitFromEnd(auto7CB19A80_g, auto7CB19A80_u);
        if (lv_addon == null) { break; }
        if (((UnitGetType(lv_addon) == "Reactor") || (UnitGetType(lv_addon) == "TechLab") || (UnitGetType(lv_addon) == "MachineShop") || (UnitGetType(lv_addon) == "PhysicsLab")) && (UnitAddOnParent(lv_addon) == null)) {
            UnitKill(lv_addon);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_StructureDies_Init () {
    lib1_gt_StructureDies = TriggerCreate("lib1_gt_StructureDies_Func");
    TriggerAddEventUnitDied(lib1_gt_StructureDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Structure Unit Push Fail
//--------------------------------------------------------------------------------------------------
bool lib1_gt_StructureUnitPushFail_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gf_ReorderBuilder(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_StructureUnitPushFail_Init () {
    lib1_gt_StructureUnitPushFail = TriggerCreate("lib1_gt_StructureUnitPushFail_Func");
    TriggerAddEventUnitAbility(lib1_gt_StructureUnitPushFail, null, AbilityCommand("InvisibleForceField", 0), c_unitAbilStageCancel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Structure Build Fail Any
//--------------------------------------------------------------------------------------------------
bool lib1_gt_StructureBuildFailAny_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_target;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(lib1_gv_leaving_units, EventUnit()) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gf_RemoveStructurePointFromPlanAfterTime(PointGetX(EventUnitTargetPoint()), PointGetY(EventUnitTargetPoint()), 0.0);
    lib1_gf_ReorderBuilder(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_StructureBuildFailAny_Init () {
    lib1_gt_StructureBuildFailAny = TriggerCreate("lib1_gt_StructureBuildFailAny_Func");
    TriggerAddEventUnitAbility(lib1_gt_StructureBuildFailAny, null, null, c_abilBuildStageCollide, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Structure Build Finish
//--------------------------------------------------------------------------------------------------
bool lib1_gt_StructureBuildFinish_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_card_id;
    int lv_source_card_id;

    // Automatic Variable Declarations
    const int auto8EC18EEE_ae = lib1_gv_mAX_CARD_ID;
    const int auto8EC18EEE_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_card_id = 0;
    for ( ; ( (auto8EC18EEE_ai >= 0 && lv_card_id <= auto8EC18EEE_ae) || (auto8EC18EEE_ai < 0 && lv_card_id >= auto8EC18EEE_ae) ) ; lv_card_id += auto8EC18EEE_ai ) {
        if ((UnitGroupHasUnit(lib1_gv_units_from_card[lv_card_id], EventUnit()) == true)) {
            lv_source_card_id = lv_card_id;
            break;
        }

    }
    if ((UnitGetType(EventUnitProgressUnit()) == "Bunker")) {
        lib1_gf_CreateCargoUnitsWithStatTracking(4, "Marine", EventUnitProgressUnit());
        UnitGroupAddUnitGroup(lib1_gv_units_from_card[lv_source_card_id], UnitCargoLastCreatedGroup());
        UnitGroupAddUnitGroup(lib1_gv_defensive_units, UnitCargoLastCreatedGroup());
    }
    else if ((UnitGetType(EventUnitProgressUnit()) == "ScourgeSpire")) {
        UnitBehaviorAdd(EventUnitProgressUnit(), "ScourgeSpire", EventUnitProgressUnit(), 1);
    }
    if ((UnitGroupHasUnit(lib1_gv_units_from_card[lib1_gf_GetCardIDByName("Burning Outpost")], EventUnit()) == true)) {
        UnitSetPropertyFixed(EventUnitProgressUnit(), c_unitPropLifePercent, 30.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_StructureBuildFinish_Init () {
    lib1_gt_StructureBuildFinish = TriggerCreate("lib1_gt_StructureBuildFinish_Func");
    TriggerAddEventUnitConstructProgress(lib1_gt_StructureBuildFinish, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Structure Build Start
//--------------------------------------------------------------------------------------------------
bool lib1_gt_StructureBuildStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_card_id;
    unit lv_builder;
    unit lv_structure;

    // Automatic Variable Declarations
    const int autoA5C59BB7_ae = lib1_gv_mAX_CARD_ID;
    const int autoA5C59BB7_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "SCV") || (UnitGetType(EventUnit()) == "Drone") || (UnitGetType(EventUnit()) == "Probe")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_builder = EventUnit();
    lv_structure = EventUnitProgressUnit();
    UnitGroupRemove(lib1_gv_builder_units, lv_builder);
    UnitGroupRemove(lib1_gv_failed_builder_units, lv_builder);
    lib1_gf_RemoveBuilderFromQueue(lv_builder);
    UnitSetCustomValue(lv_structure, 0, UnitGetCustomValue(lv_builder, 0));
    lv_card_id = 0;
    for ( ; ( (autoA5C59BB7_ai >= 0 && lv_card_id <= autoA5C59BB7_ae) || (autoA5C59BB7_ai < 0 && lv_card_id >= autoA5C59BB7_ae) ) ; lv_card_id += autoA5C59BB7_ai ) {
        if ((UnitGroupHasUnit(lib1_gv_units_from_card[lv_card_id], lv_builder) == true)) {
            UnitGroupAdd(lib1_gv_units_from_card[lv_card_id], lv_structure);
        }

    }
    UnitBehaviorAdd(lv_structure, "PermanentlyUncommandable", lv_structure, 1);
    lib1_gf_IssueLeaveOrders(lv_builder, c_orderQueueReplace);
    if (((UnitGetType(lv_structure) == "RoboticsFacility") || (UnitGetType(lv_structure) == "DragoonShrine"))) {
        UnitBehaviorAdd(lv_structure, "MineralUpkeep", lv_structure, 1);
    }
    else if ((UnitGetType(lv_structure) == "PylonXelnaga")) {
        lib1_gf_ArgusCrystalBuildStart(lv_structure);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_StructureBuildStart_Init () {
    lib1_gt_StructureBuildStart = TriggerCreate("lib1_gt_StructureBuildStart_Func");
    TriggerAddEventUnitConstructProgress(lib1_gt_StructureBuildStart, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Supply Depot Dies
//--------------------------------------------------------------------------------------------------
bool lib1_gt_SupplyDepotDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "SupplyDepot") || (UnitGetType(EventUnit()) == "SupplyDepotLoweredLab") || (UnitGetType(EventUnit()) == "SupplyDepotLowered") || (UnitGetType(EventUnit()) == "SupplyDepotLab")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib1_gf_TopofHand(EventPlayer()) >= 0)) {
        lib1_gf_DiscardCardFromHandtoDiscard(EventPlayer(), RandomInt(0, lib1_gf_TopofHand(EventPlayer())));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_SupplyDepotDies_Init () {
    lib1_gt_SupplyDepotDies = TriggerCreate("lib1_gt_SupplyDepotDies_Func");
    TriggerAddEventUnitDied(lib1_gt_SupplyDepotDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Track Damage
//--------------------------------------------------------------------------------------------------
bool lib1_gt_TrackDamage_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gv_uneven_teams == false))) {
            return false;
        }

        if (!((PlayerGetAlliance(EventPlayer(), c_allianceIdPassive, EventUnitDamageSourcePlayer()) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitDamageSourceUnit() != UnitFromId(657494806)) && (EventUnitDamageSourceUnit() != UnitFromId(685072410))) {
        lib1_gv_player[EventUnitDamageSourcePlayer()].lv_damage_dealt[lib1_gf_GetPlayerRaceID(EventUnitDamageSourcePlayer())] = (lib1_gv_player[EventUnitDamageSourcePlayer()].lv_damage_dealt[lib1_gf_GetPlayerRaceID(EventUnitDamageSourcePlayer())] + EventUnitDamageAmount());
    }

    if ((EventUnit() != UnitFromId(657494806)) && (EventUnit() != UnitFromId(685072410))) {
        lib1_gv_player[EventPlayer()].lv_damage_received[lib1_gf_GetPlayerRaceID(EventPlayer())] = (lib1_gv_player[EventPlayer()].lv_damage_received[lib1_gf_GetPlayerRaceID(EventPlayer())] + EventUnitDamageAmount());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_TrackDamage_Init () {
    lib1_gt_TrackDamage = TriggerCreate("lib1_gt_TrackDamage_Func");
    TriggerAddEventUnitDamaged(lib1_gt_TrackDamage, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Track Kills
//--------------------------------------------------------------------------------------------------
bool lib1_gt_TrackKills_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gv_uneven_teams == false))) {
            return false;
        }

        if (!((libNtve_gf_KillingUnit() != UnitFromId(657494806)))) {
            return false;
        }

        if (!((libNtve_gf_KillingUnit() != UnitFromId(685072410)))) {
            return false;
        }

        if (!((PlayerGetAlliance(EventPlayer(), c_allianceIdPassive, libNtve_gf_KillingPlayer()) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(EventUnit(), "Heroic") == true)) {
        lib1_gv_player[libNtve_gf_KillingPlayer()].lv_heroes_killed[lib1_gf_GetPlayerRaceID(libNtve_gf_KillingPlayer())] = (lib1_gv_player[libNtve_gf_KillingPlayer()].lv_heroes_killed[lib1_gf_GetPlayerRaceID(libNtve_gf_KillingPlayer())] + 1);
        lib1_gv_player[libNtve_gf_KillingPlayer()].lv_heroes_killed_total[lib1_gf_GetPlayerRaceID(libNtve_gf_KillingPlayer())] = (lib1_gv_player[libNtve_gf_KillingPlayer()].lv_heroes_killed_total[lib1_gf_GetPlayerRaceID(libNtve_gf_KillingPlayer())] + 1);
    }
    else if ((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == true)) {
        lib1_gv_player[libNtve_gf_KillingPlayer()].lv_structures_killed[lib1_gf_GetPlayerRaceID(libNtve_gf_KillingPlayer())] = (lib1_gv_player[libNtve_gf_KillingPlayer()].lv_structures_killed[lib1_gf_GetPlayerRaceID(libNtve_gf_KillingPlayer())] + 1);
        lib1_gv_player[libNtve_gf_KillingPlayer()].lv_structures_killed_total[lib1_gf_GetPlayerRaceID(libNtve_gf_KillingPlayer())] = (lib1_gv_player[libNtve_gf_KillingPlayer()].lv_structures_killed_total[lib1_gf_GetPlayerRaceID(libNtve_gf_KillingPlayer())] + 1);
    }
    else if (true) {
        lib1_gv_player[libNtve_gf_KillingPlayer()].lv_units_killed[lib1_gf_GetPlayerRaceID(libNtve_gf_KillingPlayer())] = (lib1_gv_player[libNtve_gf_KillingPlayer()].lv_units_killed[lib1_gf_GetPlayerRaceID(libNtve_gf_KillingPlayer())] + 1);
        lib1_gv_player[libNtve_gf_KillingPlayer()].lv_units_killed_total[lib1_gf_GetPlayerRaceID(libNtve_gf_KillingPlayer())] = (lib1_gv_player[libNtve_gf_KillingPlayer()].lv_units_killed_total[lib1_gf_GetPlayerRaceID(libNtve_gf_KillingPlayer())] + 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_TrackKills_Init () {
    lib1_gt_TrackKills = TriggerCreate("lib1_gt_TrackKills_Func");
    TriggerAddEventUnitDied(lib1_gt_TrackKills, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Track Created
//--------------------------------------------------------------------------------------------------
bool lib1_gt_TrackCreated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gv_uneven_teams == false))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnitCreatedUnit(), "Builder") == false))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnitCreatedUnit(), UnitGetOwner(EventUnitCreatedUnit()), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32)))) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitCreatedUnit()) >= 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitCreatedUnit()) <= 6))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(EventUnitCreatedUnit(), "Heroic") == true)) {
        lib1_gv_player[UnitGetOwner(EventUnitCreatedUnit())].lv_heroes_created[lib1_gf_GetPlayerRaceID(UnitGetOwner(EventUnitCreatedUnit()))] = (lib1_gv_player[UnitGetOwner(EventUnitCreatedUnit())].lv_heroes_created[lib1_gf_GetPlayerRaceID(UnitGetOwner(EventUnitCreatedUnit()))] + 1);
        lib1_gv_player[UnitGetOwner(EventUnitCreatedUnit())].lv_heroes_created_total[lib1_gf_GetPlayerRaceID(UnitGetOwner(EventUnitCreatedUnit()))] = (lib1_gv_player[UnitGetOwner(EventUnitCreatedUnit())].lv_heroes_created_total[lib1_gf_GetPlayerRaceID(UnitGetOwner(EventUnitCreatedUnit()))] + 1);
    }
    else if ((UnitTypeTestAttribute(UnitGetType(EventUnitCreatedUnit()), c_unitAttributeStructure) == true)) {
        lib1_gv_player[UnitGetOwner(EventUnitCreatedUnit())].lv_structures_created[lib1_gf_GetPlayerRaceID(UnitGetOwner(EventUnitCreatedUnit()))] = (lib1_gv_player[UnitGetOwner(EventUnitCreatedUnit())].lv_structures_created[lib1_gf_GetPlayerRaceID(UnitGetOwner(EventUnitCreatedUnit()))] + 1);
        lib1_gv_player[UnitGetOwner(EventUnitCreatedUnit())].lv_structures_created_total[lib1_gf_GetPlayerRaceID(UnitGetOwner(EventUnitCreatedUnit()))] = (lib1_gv_player[UnitGetOwner(EventUnitCreatedUnit())].lv_structures_created_total[lib1_gf_GetPlayerRaceID(UnitGetOwner(EventUnitCreatedUnit()))] + 1);
    }
    else if (true) {
        lib1_gv_player[UnitGetOwner(EventUnitCreatedUnit())].lv_units_created[lib1_gf_GetPlayerRaceID(UnitGetOwner(EventUnitCreatedUnit()))] = (lib1_gv_player[UnitGetOwner(EventUnitCreatedUnit())].lv_units_created[lib1_gf_GetPlayerRaceID(UnitGetOwner(EventUnitCreatedUnit()))] + 1);
        lib1_gv_player[UnitGetOwner(EventUnitCreatedUnit())].lv_units_created_total[lib1_gf_GetPlayerRaceID(UnitGetOwner(EventUnitCreatedUnit()))] = (lib1_gv_player[UnitGetOwner(EventUnitCreatedUnit())].lv_units_created_total[lib1_gf_GetPlayerRaceID(UnitGetOwner(EventUnitCreatedUnit()))] + 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_TrackCreated_Init () {
    lib1_gt_TrackCreated = TriggerCreate("lib1_gt_TrackCreated_Func");
    TriggerAddEventUnitCreated(lib1_gt_TrackCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Prevent Link Editing
//--------------------------------------------------------------------------------------------------
bool lib1_gt_PreventLinkEditing_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == lib1_gv_discord) || (EventDialogControl() == lib1_gv_blog) || (EventDialogControl() == lib1_gv_reddit)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemEditorValue(lib1_gv_discord, "discord.gg/Q6jMh6c", PlayerGroupAll());
    libNtve_gf_SetDialogItemEditorValue(lib1_gv_blog, "submapdesign.wordpress.com", PlayerGroupAll());
    libNtve_gf_SetDialogItemEditorValue(lib1_gv_reddit, "reddit.com/r/keystonesc", PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_PreventLinkEditing_Init () {
    lib1_gt_PreventLinkEditing = TriggerCreate("lib1_gt_PreventLinkEditing_Func");
    TriggerAddEventDialogControl(lib1_gt_PreventLinkEditing, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeTextChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Collection Page Update Loop
//--------------------------------------------------------------------------------------------------
bool lib1_gt_CollectionPageUpdateLoop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_team;
    int lv_player;

    // Automatic Variable Declarations
    const int autoBD660F1F_ae = 1;
    const int autoBD660F1F_ai = 1;
    playergroup auto093EA38A_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_team = 0;
    for ( ; ( (autoBD660F1F_ai >= 0 && lv_team <= autoBD660F1F_ae) || (autoBD660F1F_ai < 0 && lv_team >= autoBD660F1F_ae) ) ; lv_team += autoBD660F1F_ai ) {
        auto093EA38A_g = lib1_gv_team[lv_team];
        lv_player = -1;
        while (true) {
            lv_player = PlayerGroupNextPlayer(auto093EA38A_g, lv_player);
            if (lv_player < 0) { break; }
            if ((lib1_gv_player_collection[lv_player].lv_card_to_add >= 0)) {
                lib1_gf_AddCardtoCurrentDeck(lv_player, lib1_gv_player_collection[lv_player].lv_card_to_add);
                lib1_gv_player_collection[lv_player].lv_card_to_add = -1;
            }

            if ((lib1_gv_player_collection[lv_player].lv_card_to_remove >= 0)) {
                lib1_gf_RemoveCardfromCurrentDeck(lv_player, lib1_gv_player_collection[lv_player].lv_card_to_remove);
                lib1_gv_player_collection[lv_player].lv_card_to_remove = -1;
            }

            if ((lib1_gv_player_collection[lv_player].lv_page_change == true)) {
                lib1_gv_player_collection[lv_player].lv_page_change = false;
                lib1_gf_CloseCurrentCollectionPage(lv_player);
                lib1_gf_OpenCollectionPage(lv_player, lib1_gv_player_collection[lv_player].lv_page);
            }

            if (((GameGetMissionTime() - lib1_gv_player[lv_player].lv_button_click_time) > lib1_gv_rESPONSE_TIME) && (lib1_gv_player_collection[lv_player].lv_craft == true) && (DialogControlIsEnabled(lib1_gv_craft_button, lv_player) == false)) {
                lib1_gv_player_collection[lv_player].lv_craft = false;
                lib1_gf_CraftCard(lv_player, lib1_gv_player_collection[lv_player].lv_selected_page_slot_index);
            }

            if (((GameGetMissionTime() - lib1_gv_player[lv_player].lv_button_click_time) > lib1_gv_rESPONSE_TIME) && (lib1_gv_player_collection[lv_player].lv_destroy == true) && (DialogControlIsEnabled(lib1_gv_destroy_button, lv_player) == false)) {
                lib1_gv_player_collection[lv_player].lv_destroy = false;
                lib1_gf_DestroyCard(lv_player, lib1_gv_player_collection[lv_player].lv_selected_page_slot_index);
            }

            if ((lib1_gv_player_collection[lv_player].lv_pack_to_purchase >= 0) && ((GameGetMissionTime() - lib1_gv_player[lv_player].lv_button_click_time) > lib1_gv_rESPONSE_TIME) && (DialogControlIsEnabled(lib1_gv_store_dialog_even_button[0], lv_player) == false) && (DialogControlIsEnabled(lib1_gv_store_dialog_even_button[1], lv_player) == false) && (DialogControlIsEnabled(lib1_gv_store_dialog_odd_button[0], lv_player) == false) && (DialogControlIsEnabled(lib1_gv_store_dialog_odd_button[1], lv_player) == false) && (DialogControlIsEnabled(lib1_gv_store_dialog_odd_button[2], lv_player) == false)) {
                lib1_gf_BuyPack(lv_player, lib1_gv_player_collection[lv_player].lv_pack_to_purchase);
                lib1_gv_player_collection[lv_player].lv_pack_to_purchase = -1;
            }

            if ((lib1_gv_player_collection[lv_player].lv_deck_number_to_delete >= 0) && (lib1_gv_player_collection[lv_player].lv_deck_race_to_delete >= 0) && ((GameGetMissionTime() - lib1_gv_player[lv_player].lv_button_click_time) > lib1_gv_rESPONSE_TIME) && (lib1_gf_DecklistButtonsAreDisabled(lv_player) == true)) {
                lib1_gf_RemoveDecklistinManager(lv_player, lib1_gv_player_collection[lv_player].lv_deck_race_to_delete, lib1_gv_player_collection[lv_player].lv_deck_number_to_delete);
                lib1_gv_player_collection[lv_player].lv_deck_number_to_delete = -1;
                lib1_gv_player_collection[lv_player].lv_deck_race_to_delete = -1;
                lib1_gf_EnableAllDecklistButtons(lv_player);
            }

            if ((lib1_gv_player_collection[lv_player].lv_trophy_to_buy >= 0) && ((GameGetMissionTime() - lib1_gv_player[lv_player].lv_button_click_time) > lib1_gv_rESPONSE_TIME) && (lib1_gf_CosmeticStoreButtonsAreDisabled(lv_player) == true)) {
                lib1_gv_player_cosmetics[lv_player].lv_trophy_owned[lib1_gv_player_collection[lv_player].lv_trophy_to_buy] = true;
                lib1_gv_player_collection[lv_player].lv_trophy_to_buy = -1;
                lib1_gf_OpenTrophyPage(lv_player, lib1_gv_player_collection[lv_player].lv_trophy_page);
                lib1_gf_OpenPetPage(lv_player, lib1_gv_player_collection[lv_player].lv_pet_page);
                lib1_gf_OpenDecorationPage(lv_player, lib1_gv_player_collection[lv_player].lv_decoration_page);
                lib1_gf_UpdateCosmeticStoreCredits(lv_player);
                DialogControlSetEnabled(lib1_gv_back_to_main_menu_button, PlayerGroupSingle(lv_player), true);
                lib1_gf_SaveCosmeticstoBank(lv_player);
            }

            if ((lib1_gv_player_collection[lv_player].lv_pet_to_buy >= 0) && ((GameGetMissionTime() - lib1_gv_player[lv_player].lv_button_click_time) > lib1_gv_rESPONSE_TIME) && (lib1_gf_CosmeticStoreButtonsAreDisabled(lv_player) == true)) {
                lib1_gv_player_cosmetics[lv_player].lv_pet_owned[lib1_gv_player_collection[lv_player].lv_pet_to_buy] = true;
                lib1_gv_player_collection[lv_player].lv_pet_to_buy = -1;
                lib1_gf_OpenTrophyPage(lv_player, lib1_gv_player_collection[lv_player].lv_trophy_page);
                lib1_gf_OpenPetPage(lv_player, lib1_gv_player_collection[lv_player].lv_pet_page);
                lib1_gf_OpenDecorationPage(lv_player, lib1_gv_player_collection[lv_player].lv_decoration_page);
                lib1_gf_UpdateCosmeticStoreCredits(lv_player);
                DialogControlSetEnabled(lib1_gv_back_to_main_menu_button, PlayerGroupSingle(lv_player), true);
                lib1_gf_SaveCosmeticstoBank(lv_player);
            }

            if ((lib1_gv_player_collection[lv_player].lv_decoration_to_buy >= 0) && ((GameGetMissionTime() - lib1_gv_player[lv_player].lv_button_click_time) > lib1_gv_rESPONSE_TIME) && (lib1_gf_CosmeticStoreButtonsAreDisabled(lv_player) == true)) {
                lib1_gv_player_cosmetics[lv_player].lv_decoration_owned[lib1_gv_player_collection[lv_player].lv_decoration_to_buy] = true;
                lib1_gv_player_collection[lv_player].lv_decoration_to_buy = -1;
                lib1_gf_OpenTrophyPage(lv_player, lib1_gv_player_collection[lv_player].lv_trophy_page);
                lib1_gf_OpenPetPage(lv_player, lib1_gv_player_collection[lv_player].lv_pet_page);
                lib1_gf_OpenDecorationPage(lv_player, lib1_gv_player_collection[lv_player].lv_decoration_page);
                lib1_gf_UpdateCosmeticStoreCredits(lv_player);
                DialogControlSetEnabled(lib1_gv_back_to_main_menu_button, PlayerGroupSingle(lv_player), true);
                lib1_gf_SaveCosmeticstoBank(lv_player);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_CollectionPageUpdateLoop_Init () {
    lib1_gt_CollectionPageUpdateLoop = TriggerCreate("lib1_gt_CollectionPageUpdateLoop_Func");
    TriggerEnable(lib1_gt_CollectionPageUpdateLoop, false);
    TriggerAddEventTimePeriodic(lib1_gt_CollectionPageUpdateLoop, 0.05, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Exit Reward Screen Button Response
//--------------------------------------------------------------------------------------------------
bool lib1_gt_ExitRewardScreenButtonResponse_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1_gv_reward_dialog_exit_button))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(lib1_gv_reward_dialog, PlayerGroupSingle(EventPlayer()), false);
    if ((lib1_gv_uneven_teams == false) && (lib1_gf_CompletedGames(EventPlayer(), false) <= lib1_gf_MaxNewPlayerBonusGames(EventPlayer()))) {
        DialogSetVisible(lib1_gv_reward_dialog_new_player_bonus, PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemText(lib1_gv_reward_dialog_message_new_player_bonus, (StringExternal("Param/Value/lib_1_12619415") + IntToText((lib1_gf_MaxNewPlayerBonusGames(EventPlayer()) - lib1_gf_CompletedGames(EventPlayer(), false))) + StringExternal("Param/Value/lib_1_7AA338BA")), PlayerGroupAll());
    }
    else {
        lib1_gf_OpenMainMenu(EventPlayer());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_ExitRewardScreenButtonResponse_Init () {
    lib1_gt_ExitRewardScreenButtonResponse = TriggerCreate("lib1_gt_ExitRewardScreenButtonResponse_Func");
    TriggerAddEventDialogControl(lib1_gt_ExitRewardScreenButtonResponse, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Exit New Player Reward Screen Button Response
//--------------------------------------------------------------------------------------------------
bool lib1_gt_ExitNewPlayerRewardScreenButtonResponse_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1_gv_reward_dialog_exit_button_new_player_bonus))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(lib1_gv_reward_dialog_new_player_bonus, PlayerGroupSingle(EventPlayer()), false);
    lib1_gf_OpenMainMenu(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_ExitNewPlayerRewardScreenButtonResponse_Init () {
    lib1_gt_ExitNewPlayerRewardScreenButtonResponse = TriggerCreate("lib1_gt_ExitNewPlayerRewardScreenButtonResponse_Func");
    TriggerAddEventDialogControl(lib1_gt_ExitNewPlayerRewardScreenButtonResponse, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Main Menu Collection Button Response
//--------------------------------------------------------------------------------------------------
bool lib1_gt_MainMenuCollectionButtonResponse_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1_gv_main_menu_collection_button))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib1_gv_player_collection[EventPlayer()].lv_filter.lv_race == -1) && (PlayerRace(EventPlayer()) == "Terr")) {
        lib1_gv_player_collection[EventPlayer()].lv_filter.lv_race = lib1_gv_tERRAN;
    }
    else if ((lib1_gv_player_collection[EventPlayer()].lv_filter.lv_race == -1) && (PlayerRace(EventPlayer()) == "Zerg")) {
        lib1_gv_player_collection[EventPlayer()].lv_filter.lv_race = lib1_gv_zERG;
    }
    else if ((lib1_gv_player_collection[EventPlayer()].lv_filter.lv_race == -1) && (PlayerRace(EventPlayer()) == "Prot")) {
        lib1_gv_player_collection[EventPlayer()].lv_filter.lv_race = lib1_gv_pROTOSS;
    }
    DialogSetVisible(lib1_gv_main_menu_dialog, PlayerGroupSingle(EventPlayer()), false);
    DialogSetVisible(lib1_gv_main_menu_fullscreen_dialog, PlayerGroupSingle(EventPlayer()), false);
    lib1_gf_OpenCollectionEditor(EventPlayer());
    lib1_gf_OpenCollectionPage(EventPlayer(), 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_MainMenuCollectionButtonResponse_Init () {
    lib1_gt_MainMenuCollectionButtonResponse = TriggerCreate("lib1_gt_MainMenuCollectionButtonResponse_Func");
    TriggerAddEventDialogControl(lib1_gt_MainMenuCollectionButtonResponse, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Main Menu Store Button Response
//--------------------------------------------------------------------------------------------------
bool lib1_gt_MainMenuStoreButtonResponse_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1_gv_main_menu_store_button))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(lib1_gv_main_menu_dialog, PlayerGroupSingle(EventPlayer()), false);
    DialogSetVisible(lib1_gv_main_menu_fullscreen_dialog, PlayerGroupSingle(EventPlayer()), false);
    lib1_gf_OpenStore(EventPlayer(), 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_MainMenuStoreButtonResponse_Init () {
    lib1_gt_MainMenuStoreButtonResponse = TriggerCreate("lib1_gt_MainMenuStoreButtonResponse_Func");
    TriggerAddEventDialogControl(lib1_gt_MainMenuStoreButtonResponse, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Main Menu Stats Page Button Response
//--------------------------------------------------------------------------------------------------
bool lib1_gt_MainMenuStatsPageButtonResponse_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1_gv_main_menu_stats_button))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(lib1_gv_main_menu_dialog, PlayerGroupSingle(EventPlayer()), false);
    DialogSetVisible(lib1_gv_main_menu_fullscreen_dialog, PlayerGroupSingle(EventPlayer()), false);
    lib1_gf_OpenStatsPage(EventPlayer(), lib1_gf_GetPlayerRaceID(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_MainMenuStatsPageButtonResponse_Init () {
    lib1_gt_MainMenuStatsPageButtonResponse = TriggerCreate("lib1_gt_MainMenuStatsPageButtonResponse_Func");
    TriggerAddEventDialogControl(lib1_gt_MainMenuStatsPageButtonResponse, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Main Menu Cosmetics Page Button Response
//--------------------------------------------------------------------------------------------------
bool lib1_gt_MainMenuCosmeticsPageButtonResponse_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1_gv_main_menu_cosmetics_button))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(lib1_gv_main_menu_dialog, PlayerGroupSingle(EventPlayer()), false);
    DialogSetVisible(lib1_gv_main_menu_fullscreen_dialog, PlayerGroupSingle(EventPlayer()), false);
    lib1_gf_OpenCosmeticMenu(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_MainMenuCosmeticsPageButtonResponse_Init () {
    lib1_gt_MainMenuCosmeticsPageButtonResponse = TriggerCreate("lib1_gt_MainMenuCosmeticsPageButtonResponse_Func");
    TriggerAddEventDialogControl(lib1_gt_MainMenuCosmeticsPageButtonResponse, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Back to Main Menu Clicked
//--------------------------------------------------------------------------------------------------
bool lib1_gt_BacktoMainMenuClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gf_WaitingForResponse(EventPlayer()) == false))) {
            return false;
        }

        if (!((EventDialogControl() == lib1_gv_back_to_main_menu_button))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gf_CancelHover(EventPlayer());
    lib1_gf_CloseStore(EventPlayer());
    lib1_gf_CloseCollectionEditor(EventPlayer());
    lib1_gf_CloseDeckManager(EventPlayer());
    lib1_gf_CloseStatsPage(EventPlayer());
    lib1_gf_CloseCosmeticMenu(EventPlayer());
    lib1_gf_OpenMainMenu(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_BacktoMainMenuClicked_Init () {
    lib1_gt_BacktoMainMenuClicked = TriggerCreate("lib1_gt_BacktoMainMenuClicked_Func");
    TriggerAddEventDialogControl(lib1_gt_BacktoMainMenuClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Left Arrow Key Pressed
//--------------------------------------------------------------------------------------------------
bool lib1_gt_LeftArrowKeyPressed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gf_WaitingForResponse(EventPlayer()) == false))) {
            return false;
        }

        if (!((DialogIsVisible(lib1_gv_collection_dialog, EventPlayer()) == true))) {
            return false;
        }

        if (!((DialogControlIsEnabled(lib1_gv_collection_arrow_left_button, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gf_CancelHover(EventPlayer());
    lib1_gv_player_collection[EventPlayer()].lv_page = MaxI((lib1_gv_player_collection[EventPlayer()].lv_page - 1), 0);
    lib1_gv_player_collection[EventPlayer()].lv_page_change = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_LeftArrowKeyPressed_Init () {
    lib1_gt_LeftArrowKeyPressed = TriggerCreate("lib1_gt_LeftArrowKeyPressed_Func");
    TriggerAddEventKeyPressed(lib1_gt_LeftArrowKeyPressed, c_playerAny, c_keyLeft, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Right Arrow Key Pressed
//--------------------------------------------------------------------------------------------------
bool lib1_gt_RightArrowKeyPressed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gf_WaitingForResponse(EventPlayer()) == false))) {
            return false;
        }

        if (!((DialogIsVisible(lib1_gv_collection_dialog, EventPlayer()) == true))) {
            return false;
        }

        if (!((DialogControlIsEnabled(lib1_gv_collection_arrow_right_button, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gf_CancelHover(EventPlayer());
    lib1_gv_player_collection[EventPlayer()].lv_page = MinI((lib1_gv_player_collection[EventPlayer()].lv_page + 1), lib1_gf_MaxCollectionPage(EventPlayer()));
    lib1_gv_player_collection[EventPlayer()].lv_page_change = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_RightArrowKeyPressed_Init () {
    lib1_gt_RightArrowKeyPressed = TriggerCreate("lib1_gt_RightArrowKeyPressed_Func");
    TriggerAddEventKeyPressed(lib1_gt_RightArrowKeyPressed, c_playerAny, c_keyRight, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Up Arrow Key Pressed
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UpArrowKeyPressed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gf_WaitingForResponse(EventPlayer()) == false))) {
            return false;
        }

        if (!((DialogIsVisible(lib1_gv_deck_dialog, EventPlayer()) == true))) {
            return false;
        }

        if (!((DialogControlIsEnabled(lib1_gv_decklist_arrow_up_button, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gf_ScrollDecklistUp(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UpArrowKeyPressed_Init () {
    lib1_gt_UpArrowKeyPressed = TriggerCreate("lib1_gt_UpArrowKeyPressed_Func");
    TriggerAddEventKeyPressed(lib1_gt_UpArrowKeyPressed, c_playerAny, c_keyUp, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Down Arrow Key Pressed
//--------------------------------------------------------------------------------------------------
bool lib1_gt_DownArrowKeyPressed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gf_WaitingForResponse(EventPlayer()) == false))) {
            return false;
        }

        if (!((DialogIsVisible(lib1_gv_deck_dialog, EventPlayer()) == true))) {
            return false;
        }

        if (!((DialogControlIsEnabled(lib1_gv_decklist_arrow_down_button, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gf_ScrollDecklistDown(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_DownArrowKeyPressed_Init () {
    lib1_gt_DownArrowKeyPressed = TriggerCreate("lib1_gt_DownArrowKeyPressed_Func");
    TriggerAddEventKeyPressed(lib1_gt_DownArrowKeyPressed, c_playerAny, c_keyDown, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Left Collection Arrow Mouse Enter
//--------------------------------------------------------------------------------------------------
bool lib1_gt_LeftCollectionArrowMouseEnter_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1_gv_collection_arrow_left_button))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemImage(lib1_gv_collection_arrow_left, "Assets\\Textures\\ui_glues_icons_smallpagearrow_left_hover.dds", PlayerGroupSingle(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_LeftCollectionArrowMouseEnter_Init () {
    lib1_gt_LeftCollectionArrowMouseEnter = TriggerCreate("lib1_gt_LeftCollectionArrowMouseEnter_Func");
    TriggerAddEventDialogControl(lib1_gt_LeftCollectionArrowMouseEnter, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseEnter);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Right Collection Arrow Mouse Enter
//--------------------------------------------------------------------------------------------------
bool lib1_gt_RightCollectionArrowMouseEnter_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1_gv_collection_arrow_right_button))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemImage(lib1_gv_collection_arrow_right, "Assets\\Textures\\ui_glues_icons_smallpagearrow_right_hover.dds", PlayerGroupSingle(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_RightCollectionArrowMouseEnter_Init () {
    lib1_gt_RightCollectionArrowMouseEnter = TriggerCreate("lib1_gt_RightCollectionArrowMouseEnter_Func");
    TriggerAddEventDialogControl(lib1_gt_RightCollectionArrowMouseEnter, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseEnter);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Left Collection Arrow Mouse Exit
//--------------------------------------------------------------------------------------------------
bool lib1_gt_LeftCollectionArrowMouseExit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1_gv_collection_arrow_left_button))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemImage(lib1_gv_collection_arrow_left, "Assets\\Textures\\ui_glues_icons_smallpagearrow_left_normal.dds", PlayerGroupSingle(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_LeftCollectionArrowMouseExit_Init () {
    lib1_gt_LeftCollectionArrowMouseExit = TriggerCreate("lib1_gt_LeftCollectionArrowMouseExit_Func");
    TriggerAddEventDialogControl(lib1_gt_LeftCollectionArrowMouseExit, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseExit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Right Collection Arrow Mouse Exit
//--------------------------------------------------------------------------------------------------
bool lib1_gt_RightCollectionArrowMouseExit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1_gv_collection_arrow_right_button))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemImage(lib1_gv_collection_arrow_right, "Assets\\Textures\\ui_glues_icons_smallpagearrow_right_normal.dds", PlayerGroupSingle(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_RightCollectionArrowMouseExit_Init () {
    lib1_gt_RightCollectionArrowMouseExit = TriggerCreate("lib1_gt_RightCollectionArrowMouseExit_Func");
    TriggerAddEventDialogControl(lib1_gt_RightCollectionArrowMouseExit, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseExit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Left Collection Arrow Click
//--------------------------------------------------------------------------------------------------
bool lib1_gt_LeftCollectionArrowClick_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gf_WaitingForResponse(EventPlayer()) == false))) {
            return false;
        }

        if (!((EventDialogControl() == lib1_gv_collection_arrow_left_button))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gf_CancelHover(EventPlayer());
    lib1_gv_player_collection[EventPlayer()].lv_page = MaxI((lib1_gv_player_collection[EventPlayer()].lv_page - 1), 0);
    lib1_gv_player_collection[EventPlayer()].lv_page_change = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_LeftCollectionArrowClick_Init () {
    lib1_gt_LeftCollectionArrowClick = TriggerCreate("lib1_gt_LeftCollectionArrowClick_Func");
    TriggerAddEventDialogControl(lib1_gt_LeftCollectionArrowClick, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Right Collection Arrow Click
//--------------------------------------------------------------------------------------------------
bool lib1_gt_RightCollectionArrowClick_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gf_WaitingForResponse(EventPlayer()) == false))) {
            return false;
        }

        if (!((EventDialogControl() == lib1_gv_collection_arrow_right_button))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gf_CancelHover(EventPlayer());
    lib1_gv_player_collection[EventPlayer()].lv_page = MinI((lib1_gv_player_collection[EventPlayer()].lv_page + 1), lib1_gf_MaxCollectionPage(EventPlayer()));
    lib1_gv_player_collection[EventPlayer()].lv_page_change = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_RightCollectionArrowClick_Init () {
    lib1_gt_RightCollectionArrowClick = TriggerCreate("lib1_gt_RightCollectionArrowClick_Func");
    TriggerAddEventDialogControl(lib1_gt_RightCollectionArrowClick, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Up Deck Arrow Mouse Enter
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UpDeckArrowMouseEnter_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1_gv_decklist_arrow_up_button))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemImage(lib1_gv_decklist_arrow_up, "Assets\\Textures\\ui_glues_icons_smallpagearrow_left_hover.dds", PlayerGroupSingle(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UpDeckArrowMouseEnter_Init () {
    lib1_gt_UpDeckArrowMouseEnter = TriggerCreate("lib1_gt_UpDeckArrowMouseEnter_Func");
    TriggerAddEventDialogControl(lib1_gt_UpDeckArrowMouseEnter, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseEnter);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Down Deck Arrow Mouse Enter
//--------------------------------------------------------------------------------------------------
bool lib1_gt_DownDeckArrowMouseEnter_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1_gv_decklist_arrow_down_button))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemImage(lib1_gv_decklist_arrow_down, "Assets\\Textures\\ui_glues_icons_smallpagearrow_right_hover.dds", PlayerGroupSingle(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_DownDeckArrowMouseEnter_Init () {
    lib1_gt_DownDeckArrowMouseEnter = TriggerCreate("lib1_gt_DownDeckArrowMouseEnter_Func");
    TriggerAddEventDialogControl(lib1_gt_DownDeckArrowMouseEnter, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseEnter);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Up Deck Arrow Mouse Exit
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UpDeckArrowMouseExit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1_gv_decklist_arrow_up_button))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemImage(lib1_gv_decklist_arrow_up, "Assets\\Textures\\ui_glues_icons_smallpagearrow_left_normal.dds", PlayerGroupSingle(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UpDeckArrowMouseExit_Init () {
    lib1_gt_UpDeckArrowMouseExit = TriggerCreate("lib1_gt_UpDeckArrowMouseExit_Func");
    TriggerAddEventDialogControl(lib1_gt_UpDeckArrowMouseExit, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseExit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Down Deck Arrow Mouse Exit
//--------------------------------------------------------------------------------------------------
bool lib1_gt_DownDeckArrowMouseExit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1_gv_decklist_arrow_down_button))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemImage(lib1_gv_decklist_arrow_down, "Assets\\Textures\\ui_glues_icons_smallpagearrow_right_normal.dds", PlayerGroupSingle(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_DownDeckArrowMouseExit_Init () {
    lib1_gt_DownDeckArrowMouseExit = TriggerCreate("lib1_gt_DownDeckArrowMouseExit_Func");
    TriggerAddEventDialogControl(lib1_gt_DownDeckArrowMouseExit, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseExit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Up Deck Arrow Click
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UpDeckArrowClick_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gf_WaitingForResponse(EventPlayer()) == false))) {
            return false;
        }

        if (!((EventDialogControl() == lib1_gv_decklist_arrow_up_button))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gf_CancelHover(EventPlayer());
    lib1_gf_ScrollDecklistUp(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UpDeckArrowClick_Init () {
    lib1_gt_UpDeckArrowClick = TriggerCreate("lib1_gt_UpDeckArrowClick_Func");
    TriggerAddEventDialogControl(lib1_gt_UpDeckArrowClick, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Down Deck Arrow Click
//--------------------------------------------------------------------------------------------------
bool lib1_gt_DownDeckArrowClick_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gf_WaitingForResponse(EventPlayer()) == false))) {
            return false;
        }

        if (!((EventDialogControl() == lib1_gv_decklist_arrow_down_button))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gf_CancelHover(EventPlayer());
    lib1_gf_ScrollDecklistDown(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_DownDeckArrowClick_Init () {
    lib1_gt_DownDeckArrowClick = TriggerCreate("lib1_gt_DownDeckArrowClick_Func");
    TriggerAddEventDialogControl(lib1_gt_DownDeckArrowClick, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Total Cost Filter Click
//--------------------------------------------------------------------------------------------------
bool lib1_gt_TotalCostFilterClick_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_filter_index;

    // Automatic Variable Declarations
    const int autoA96DBF62_ae = lib1_gv_mAX_COST_FILTER_INDEX;
    const int autoA96DBF62_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib1_gf_WaitingForResponse(EventPlayer()) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_filter_index = 0;
    for ( ; ( (autoA96DBF62_ai >= 0 && lv_filter_index <= autoA96DBF62_ae) || (autoA96DBF62_ai < 0 && lv_filter_index >= autoA96DBF62_ae) ) ; lv_filter_index += autoA96DBF62_ai ) {
        if ((EventDialogControl() == lib1_gv_filter_total_cost_button[lv_filter_index])) {
            lib1_gf_CancelHover(EventPlayer());
            if ((lib1_gv_player_collection[EventPlayer()].lv_filter.lv_total_cost[lv_filter_index] == false) && (lib1_gv_shift[EventPlayer()] == true)) {
                lib1_gf_EnableTotalCost(EventPlayer(), lv_filter_index);
            }
            else if ((lib1_gf_AllCostsEnabled(EventPlayer()) == false) && (lib1_gv_player_collection[EventPlayer()].lv_filter.lv_total_cost[lv_filter_index] == true)) {
                lib1_gf_EnableAllTotalCosts(EventPlayer());
            }
            else if (true) {
                lib1_gf_DisableAllTotalCostsExcept(EventPlayer(), lv_filter_index);
            }
            lib1_gf_CloseCurrentCollectionPage(EventPlayer());
            lib1_gf_OpenCollectionPage(EventPlayer(), 0);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_TotalCostFilterClick_Init () {
    lib1_gt_TotalCostFilterClick = TriggerCreate("lib1_gt_TotalCostFilterClick_Func");
    TriggerAddEventDialogControl(lib1_gt_TotalCostFilterClick, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Text Filter Input
//--------------------------------------------------------------------------------------------------
bool lib1_gt_TextFilterInput_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1_gv_search_filter))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gv_player_collection[EventPlayer()].lv_filter.lv_search_ready = true;
    DialogControlFadeTransparency(lib1_gv_search_button_image, PlayerGroupSingle(EventPlayer()), 0.1, 0.0);
    DialogControlSetEnabled(lib1_gv_search_button, PlayerGroupSingle(EventPlayer()), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_TextFilterInput_Init () {
    lib1_gt_TextFilterInput = TriggerCreate("lib1_gt_TextFilterInput_Func");
    TriggerAddEventDialogControl(lib1_gt_TextFilterInput, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeTextChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Search Button Mouse Enter
//--------------------------------------------------------------------------------------------------
bool lib1_gt_SearchButtonMouseEnter_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1_gv_search_button))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemImage(lib1_gv_search_button_image, "Assets\\Textures\\ui_battlenet_glues_standardbuttons_small_icon_search_selected.dds", PlayerGroupSingle(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_SearchButtonMouseEnter_Init () {
    lib1_gt_SearchButtonMouseEnter = TriggerCreate("lib1_gt_SearchButtonMouseEnter_Func");
    TriggerAddEventDialogControl(lib1_gt_SearchButtonMouseEnter, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseEnter);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Search Button Mouse Exit
//--------------------------------------------------------------------------------------------------
bool lib1_gt_SearchButtonMouseExit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1_gv_search_button))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemImage(lib1_gv_search_button_image, "Assets\\Textures\\ui_battlenet_glues_standardbuttons_small_icon_search_normal.dds", PlayerGroupSingle(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_SearchButtonMouseExit_Init () {
    lib1_gt_SearchButtonMouseExit = TriggerCreate("lib1_gt_SearchButtonMouseExit_Func");
    TriggerAddEventDialogControl(lib1_gt_SearchButtonMouseExit, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseExit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Search Button Mouse Click
//--------------------------------------------------------------------------------------------------
bool lib1_gt_SearchButtonMouseClick_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gf_WaitingForResponse(EventPlayer()) == false))) {
            return false;
        }

        if (!((EventDialogControl() == lib1_gv_search_button))) {
            return false;
        }

        if (!((lib1_gv_player_collection[EventPlayer()].lv_filter.lv_search_ready == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gf_CancelHover(EventPlayer());
    lib1_gv_player_collection[EventPlayer()].lv_filter.lv_text_search = libNtve_gf_DialogItemEditValue(lib1_gv_search_filter, EventPlayer());
    lib1_gv_player_collection[EventPlayer()].lv_filter.lv_search_ready = false;
    lib1_gf_CloseCurrentCollectionPage(EventPlayer());
    lib1_gf_OpenCollectionPage(EventPlayer(), 0);
    libNtve_gf_SetDialogItemImage(lib1_gv_search_button_image, "Assets\\Textures\\ui_battlenet_glues_standardbuttons_small_icon_search_normal.dds", PlayerGroupSingle(EventPlayer()));
    DialogControlFadeTransparency(lib1_gv_search_button_image, PlayerGroupSingle(EventPlayer()), 0.1, 100.0);
    DialogControlSetEnabled(lib1_gv_search_button, PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_SearchButtonMouseClick_Init () {
    lib1_gt_SearchButtonMouseClick = TriggerCreate("lib1_gt_SearchButtonMouseClick_Func");
    TriggerAddEventDialogControl(lib1_gt_SearchButtonMouseClick, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Crafting Button Mouse Click
//--------------------------------------------------------------------------------------------------
bool lib1_gt_CraftingButtonMouseClick_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gf_WaitingForResponse(EventPlayer()) == false))) {
            return false;
        }

        if (!((EventDialogControl() == lib1_gv_include_craftable_button))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gf_CancelHover(EventPlayer());
    if ((lib1_gv_player_collection[EventPlayer()].lv_filter.lv_crafting_mode == false)) {
        lib1_gv_player_collection[EventPlayer()].lv_filter.lv_crafting_mode = true;
        DialogControlSetEnabled(lib1_gv_include_craftable_button_image, PlayerGroupSingle(EventPlayer()), true);
        lib1_gf_CloseCurrentCollectionPage(EventPlayer());
        lib1_gf_OpenCollectionPage(EventPlayer(), 0);
        lib1_gf_OpenCraftingWindow(EventPlayer());
    }
    else {
        lib1_gv_player_collection[EventPlayer()].lv_filter.lv_crafting_mode = false;
        DialogControlSetEnabled(lib1_gv_include_craftable_button_image, PlayerGroupSingle(EventPlayer()), false);
        lib1_gf_CloseCurrentCollectionPage(EventPlayer());
        lib1_gf_OpenCollectionPage(EventPlayer(), 0);
        lib1_gf_OpenDeckWindow(EventPlayer());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_CraftingButtonMouseClick_Init () {
    lib1_gt_CraftingButtonMouseClick = TriggerCreate("lib1_gt_CraftingButtonMouseClick_Func");
    TriggerAddEventDialogControl(lib1_gt_CraftingButtonMouseClick, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Collection Card Clicked
//--------------------------------------------------------------------------------------------------
bool lib1_gt_CollectionCardClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto4A1A64BE_ae;
    const int auto4A1A64BE_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib1_gf_WaitingForResponse(EventPlayer()) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto4A1A64BE_ae = ((lib1_gv_cOLLECTION_CARD_ROWS * lib1_gv_cOLLECTION_CARD_COLUMNS) - 1);
    lv_index = 0;
    for ( ; ( (auto4A1A64BE_ai >= 0 && lv_index <= auto4A1A64BE_ae) || (auto4A1A64BE_ai < 0 && lv_index >= auto4A1A64BE_ae) ) ; lv_index += auto4A1A64BE_ai ) {
        if ((lib1_gv_player_collection[EventPlayer()].lv_collection_card_ui[lv_index].lv_dialog != c_invalidDialogId) && (EventDialogControl() == lib1_gv_collection_card_button[lv_index])) {
            if ((lib1_gv_shift[EventPlayer()] == true) && (lib1_gv_card[lib1_gv_player_collection[EventPlayer()].lv_collection_card_id[lv_index]].lv_transform >= 0)) {
                lib1_gf_TransformCollectionCard(EventPlayer(), lv_index);
            }
            else {
                if ((lib1_gv_player_collection[EventPlayer()].lv_filter.lv_crafting_mode == true)) {
                    lib1_gf_ResetCraftingWindow(EventPlayer());
                    lib1_gf_SelectCardforCrafting(EventPlayer(), lv_index);
                }
                else {
                    if ((lib1_gv_player_collection[EventPlayer()].lv_collection_card_enabled[lv_index] == true)) {
                        lib1_gv_player_collection[EventPlayer()].lv_card_to_add = lv_index;
                    }

                }
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_CollectionCardClicked_Init () {
    lib1_gt_CollectionCardClicked = TriggerCreate("lib1_gt_CollectionCardClicked_Func");
    TriggerAddEventDialogControl(lib1_gt_CollectionCardClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Collection Card Start Hover
//--------------------------------------------------------------------------------------------------
bool lib1_gt_CollectionCardStartHover_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto079439AA_ae;
    const int auto079439AA_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto079439AA_ae = ((lib1_gv_cOLLECTION_CARD_ROWS * lib1_gv_cOLLECTION_CARD_COLUMNS) - 1);
    lv_index = 0;
    for ( ; ( (auto079439AA_ai >= 0 && lv_index <= auto079439AA_ae) || (auto079439AA_ai < 0 && lv_index >= auto079439AA_ae) ) ; lv_index += auto079439AA_ai ) {
        if ((lib1_gv_player_collection[EventPlayer()].lv_collection_card_ui[lv_index].lv_dialog != c_invalidDialogId) && (EventDialogControl() == lib1_gv_collection_card_button[lv_index]) && (DialogControlIsEnabled(EventDialogControl(), EventPlayer()) == true)) {
            if ((lib1_gf_CardOwnedCountCapped(EventPlayer(), lib1_gv_player_collection[EventPlayer()].lv_collection_card_id[lv_index]) == 0)) {
                DialogControlFadeTransparency(EventDialogControl(), PlayerGroupSingle(EventPlayer()), 0.0, 95.0);
            }
            else {
                DialogControlFadeTransparency(EventDialogControl(), PlayerGroupSingle(EventPlayer()), 0.0, 85.0);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_CollectionCardStartHover_Init () {
    lib1_gt_CollectionCardStartHover = TriggerCreate("lib1_gt_CollectionCardStartHover_Func");
    TriggerAddEventDialogControl(lib1_gt_CollectionCardStartHover, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseEnter);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Collection Card Stop Hover
//--------------------------------------------------------------------------------------------------
bool lib1_gt_CollectionCardStopHover_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int autoC865357C_ae;
    const int autoC865357C_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoC865357C_ae = ((lib1_gv_cOLLECTION_CARD_ROWS * lib1_gv_cOLLECTION_CARD_COLUMNS) - 1);
    lv_index = 0;
    for ( ; ( (autoC865357C_ai >= 0 && lv_index <= autoC865357C_ae) || (autoC865357C_ai < 0 && lv_index >= autoC865357C_ae) ) ; lv_index += autoC865357C_ai ) {
        if ((EventDialogControl() == lib1_gv_collection_card_button[lv_index])) {
            DialogControlFadeTransparency(EventDialogControl(), PlayerGroupSingle(EventPlayer()), 0.0, 100.0);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_CollectionCardStopHover_Init () {
    lib1_gt_CollectionCardStopHover = TriggerCreate("lib1_gt_CollectionCardStopHover_Func");
    TriggerAddEventDialogControl(lib1_gt_CollectionCardStopHover, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseExit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Craft Card
//--------------------------------------------------------------------------------------------------
bool lib1_gt_CraftCard_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gf_WaitingForResponse(EventPlayer()) == false))) {
            return false;
        }

        if (!((EventDialogControl() == lib1_gv_craft_button))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetEnabled(lib1_gv_craft_button, PlayerGroupSingle(EventPlayer()), false);
    lib1_gv_player[EventPlayer()].lv_button_click_time = GameGetMissionTime();
    lib1_gv_player_collection[EventPlayer()].lv_craft = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_CraftCard_Init () {
    lib1_gt_CraftCard = TriggerCreate("lib1_gt_CraftCard_Func");
    TriggerAddEventDialogControl(lib1_gt_CraftCard, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Destroy Card
//--------------------------------------------------------------------------------------------------
bool lib1_gt_DestroyCard_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gf_WaitingForResponse(EventPlayer()) == false))) {
            return false;
        }

        if (!((EventDialogControl() == lib1_gv_destroy_button))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((lib1_gf_MaxCountinAnyDecklist(EventPlayer(), lib1_gv_player_collection[EventPlayer()].lv_filter.lv_race, lib1_gv_player_collection[EventPlayer()].lv_collection_card_id[lib1_gv_player_collection[EventPlayer()].lv_selected_page_slot_index]) == lib1_gf_CardOwnedCountCapped(EventPlayer(), lib1_gv_player_collection[EventPlayer()].lv_collection_card_id[lib1_gv_player_collection[EventPlayer()].lv_selected_page_slot_index])) || (lib1_gf_MaxCountinAnySavedDecklist(EventPlayer(), lib1_gv_player_collection[EventPlayer()].lv_filter.lv_race, lib1_gv_player_collection[EventPlayer()].lv_collection_card_id[lib1_gv_player_collection[EventPlayer()].lv_selected_page_slot_index]) == lib1_gf_CardOwnedCountCapped(EventPlayer(), lib1_gv_player_collection[EventPlayer()].lv_collection_card_id[lib1_gv_player_collection[EventPlayer()].lv_selected_page_slot_index])))) {
        SoundPlayForPlayer(SoundLink("UI_GenericError", 0), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        libNtve_gf_CreateDialogItemLabel(lib1_gv_crafting_dialog, (lib1_gf_DeckWidth() - (lib1_gv_dECK_PADDING * 2)), 1000, c_anchorCenter, 0, 330, StringExternal("Param/Value/lib_1_35051399"), Color(100.00, 0.00, 0.00), false, 2.0);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CardGameError", PlayerGroupAll());
        Wait(2.0, c_timeGame);
        lib1_gf_FadeandDestroyDialogItem(DialogControlLastCreated(), 2.0);
    }
    else {
        DialogControlSetEnabled(lib1_gv_destroy_button, PlayerGroupSingle(EventPlayer()), false);
        lib1_gv_player[EventPlayer()].lv_button_click_time = GameGetMissionTime();
        lib1_gv_player_collection[EventPlayer()].lv_destroy = true;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_DestroyCard_Init () {
    lib1_gt_DestroyCard = TriggerCreate("lib1_gt_DestroyCard_Func");
    TriggerAddEventDialogControl(lib1_gt_DestroyCard, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Decklist Card Clicked
//--------------------------------------------------------------------------------------------------
bool lib1_gt_DecklistCardClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int autoD43A1117_ae = lib1_gv_dECKLIST_LIMIT;
    const int autoD43A1117_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = 0;
    for ( ; ( (autoD43A1117_ai >= 0 && lv_index <= autoD43A1117_ae) || (autoD43A1117_ai < 0 && lv_index >= autoD43A1117_ae) ) ; lv_index += autoD43A1117_ai ) {
        if ((lib1_gv_player_collection[EventPlayer()].lv_decklist_button[lv_index] != c_invalidDialogId) && (EventDialogControl() == lib1_gv_player_collection[EventPlayer()].lv_decklist_button[lv_index])) {
            lib1_gf_CancelHover(EventPlayer());
            lib1_gv_player_collection[EventPlayer()].lv_card_to_remove = lv_index;
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_DecklistCardClicked_Init () {
    lib1_gt_DecklistCardClicked = TriggerCreate("lib1_gt_DecklistCardClicked_Func");
    TriggerAddEventDialogControl(lib1_gt_DecklistCardClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Change Decks Clicked
//--------------------------------------------------------------------------------------------------
bool lib1_gt_ChangeDecksClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1_gv_change_decks_button))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gf_CloseCollectionEditor(EventPlayer());
    lib1_gf_OpenDeckManager(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_ChangeDecksClicked_Init () {
    lib1_gt_ChangeDecksClicked = TriggerCreate("lib1_gt_ChangeDecksClicked_Func");
    TriggerAddEventDialogControl(lib1_gt_ChangeDecksClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Save Deck
//--------------------------------------------------------------------------------------------------
bool lib1_gt_SaveDeck_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1_gv_save_deck_button))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gv_player_collection[EventPlayer()].lv_decklist[lib1_gv_player_collection[EventPlayer()].lv_filter.lv_race][lib1_gv_player_collection[EventPlayer()].lv_current_decklist].lv_unsaved_changes = false;
    lib1_gf_SaveDecktoBank(EventPlayer(), lib1_gv_player_collection[EventPlayer()].lv_filter.lv_race, lib1_gv_player_collection[EventPlayer()].lv_current_decklist);
    lib1_gf_UpdateDecklistUI(EventPlayer());
    lib1_gf_SetDecklistasMainDecklist(EventPlayer(), lib1_gv_player_collection[EventPlayer()].lv_filter.lv_race, lib1_gv_player_collection[EventPlayer()].lv_current_decklist);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_SaveDeck_Init () {
    lib1_gt_SaveDeck = TriggerCreate("lib1_gt_SaveDeck_Func");
    TriggerAddEventDialogControl(lib1_gt_SaveDeck, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Edit Deck Name Mouse Enter
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EditDeckNameMouseEnter_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1_gv_change_deck_name_button))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemImage(lib1_gv_change_deck_name_icon, lib1_gv_eDIT_ICON_HIGHLIGHTED, PlayerGroupSingle(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EditDeckNameMouseEnter_Init () {
    lib1_gt_EditDeckNameMouseEnter = TriggerCreate("lib1_gt_EditDeckNameMouseEnter_Func");
    TriggerAddEventDialogControl(lib1_gt_EditDeckNameMouseEnter, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseEnter);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Edit Deck Name Mouse Exit
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EditDeckNameMouseExit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1_gv_change_deck_name_button))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemImage(lib1_gv_change_deck_name_icon, lib1_gv_eDIT_ICON, PlayerGroupSingle(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EditDeckNameMouseExit_Init () {
    lib1_gt_EditDeckNameMouseExit = TriggerCreate("lib1_gt_EditDeckNameMouseExit_Func");
    TriggerAddEventDialogControl(lib1_gt_EditDeckNameMouseExit, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseExit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Edit Deck Name Click
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EditDeckNameClick_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1_gv_change_deck_name_button))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gf_ShowDeckRenamingInterface(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EditDeckNameClick_Init () {
    lib1_gt_EditDeckNameClick = TriggerCreate("lib1_gt_EditDeckNameClick_Func");
    TriggerAddEventDialogControl(lib1_gt_EditDeckNameClick, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Save Deck Name Mouse Enter
//--------------------------------------------------------------------------------------------------
bool lib1_gt_SaveDeckNameMouseEnter_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1_gv_save_deck_name_button))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemImage(lib1_gv_save_deck_name_icon, lib1_gv_cHECK_ICON_HIGHLIGHTED, PlayerGroupSingle(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_SaveDeckNameMouseEnter_Init () {
    lib1_gt_SaveDeckNameMouseEnter = TriggerCreate("lib1_gt_SaveDeckNameMouseEnter_Func");
    TriggerAddEventDialogControl(lib1_gt_SaveDeckNameMouseEnter, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseEnter);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Save Deck Name Mouse Exit
//--------------------------------------------------------------------------------------------------
bool lib1_gt_SaveDeckNameMouseExit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1_gv_save_deck_name_button))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemImage(lib1_gv_save_deck_name_icon, lib1_gv_cHECK_ICON, PlayerGroupSingle(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_SaveDeckNameMouseExit_Init () {
    lib1_gt_SaveDeckNameMouseExit = TriggerCreate("lib1_gt_SaveDeckNameMouseExit_Func");
    TriggerAddEventDialogControl(lib1_gt_SaveDeckNameMouseExit, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseExit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Save Deck Name Click
//--------------------------------------------------------------------------------------------------
bool lib1_gt_SaveDeckNameClick_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1_gv_save_deck_name_button))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gf_SetNewDeckName(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_SaveDeckNameClick_Init () {
    lib1_gt_SaveDeckNameClick = TriggerCreate("lib1_gt_SaveDeckNameClick_Func");
    TriggerAddEventDialogControl(lib1_gt_SaveDeckNameClick, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Types Deck Name
//--------------------------------------------------------------------------------------------------
bool lib1_gt_PlayerTypesDeckName_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1_gv_change_deck_name_edit_box))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringLength(libNtve_gf_DialogItemEditValue(lib1_gv_change_deck_name_edit_box, EventPlayer())) == 0)) {
        DialogControlSetEnabled(lib1_gv_save_deck_name_button, PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetEnabled(lib1_gv_save_deck_name_icon, PlayerGroupSingle(EventPlayer()), false);
        libNtve_gf_SetDialogItemAcceptMouse(lib1_gv_save_deck_name_button, false, PlayerGroupSingle(EventPlayer()));
    }
    else {
        DialogControlSetEnabled(lib1_gv_save_deck_name_button, PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(lib1_gv_save_deck_name_icon, PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemAcceptMouse(lib1_gv_save_deck_name_button, true, PlayerGroupSingle(EventPlayer()));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_PlayerTypesDeckName_Init () {
    lib1_gt_PlayerTypesDeckName = TriggerCreate("lib1_gt_PlayerTypesDeckName_Func");
    TriggerAddEventDialogControl(lib1_gt_PlayerTypesDeckName, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeTextChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Decklist Clicked
//--------------------------------------------------------------------------------------------------
bool lib1_gt_DecklistClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_decklist;
    int lv_race;

    // Automatic Variable Declarations
    const int auto87D0F8C5_ae = 2;
    const int auto87D0F8C5_ai = 1;
    const int auto51158ADC_ae = lib1_gv_dECKLIST_PER_RACE_LIMIT;
    const int auto51158ADC_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_race = 0;
    for ( ; ( (auto87D0F8C5_ai >= 0 && lv_race <= auto87D0F8C5_ae) || (auto87D0F8C5_ai < 0 && lv_race >= auto87D0F8C5_ae) ) ; lv_race += auto87D0F8C5_ai ) {
        lv_decklist = 0;
        for ( ; ( (auto51158ADC_ai >= 0 && lv_decklist <= auto51158ADC_ae) || (auto51158ADC_ai < 0 && lv_decklist >= auto51158ADC_ae) ) ; lv_decklist += auto51158ADC_ai ) {
            if ((lib1_gv_player_collection[EventPlayer()].lv_decklist[lv_race][lv_decklist].lv_button != c_invalidDialogControlId) && (EventDialogControl() == lib1_gv_player_collection[EventPlayer()].lv_decklist[lv_race][lv_decklist].lv_button)) {
                lib1_gf_SelectDecklistInManager(EventPlayer(), lv_race, lv_decklist);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_DecklistClicked_Init () {
    lib1_gt_DecklistClicked = TriggerCreate("lib1_gt_DecklistClicked_Func");
    TriggerAddEventDialogControl(lib1_gt_DecklistClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mouse Enter Decklist
//--------------------------------------------------------------------------------------------------
bool lib1_gt_MouseEnterDecklist_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_race;
    int lv_decklist;

    // Automatic Variable Declarations
    const int auto33A3BDC7_ae = 2;
    const int auto33A3BDC7_ai = 1;
    const int auto7E63C392_ae = lib1_gv_dECKLIST_PER_RACE_LIMIT;
    const int auto7E63C392_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_race = 0;
    for ( ; ( (auto33A3BDC7_ai >= 0 && lv_race <= auto33A3BDC7_ae) || (auto33A3BDC7_ai < 0 && lv_race >= auto33A3BDC7_ae) ) ; lv_race += auto33A3BDC7_ai ) {
        lv_decklist = 0;
        for ( ; ( (auto7E63C392_ai >= 0 && lv_decklist <= auto7E63C392_ae) || (auto7E63C392_ai < 0 && lv_decklist >= auto7E63C392_ae) ) ; lv_decklist += auto7E63C392_ai ) {
            if ((lib1_gv_player_collection[EventPlayer()].lv_decklist[lv_race][lv_decklist].lv_button == c_invalidDialogControlId)) {
                break;
            }
            else if ((EventDialogControl() == lib1_gv_player_collection[EventPlayer()].lv_decklist[lv_race][lv_decklist].lv_button)) {
                lib1_gf_MouseEnterDecklist(EventPlayer(), lv_race, lv_decklist);
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_MouseEnterDecklist_Init () {
    lib1_gt_MouseEnterDecklist = TriggerCreate("lib1_gt_MouseEnterDecklist_Func");
    TriggerAddEventDialogControl(lib1_gt_MouseEnterDecklist, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseEnter);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mouse Exit Decklist
//--------------------------------------------------------------------------------------------------
bool lib1_gt_MouseExitDecklist_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_race;
    int lv_decklist;

    // Automatic Variable Declarations
    const int autoC6ACE9D6_ae = 2;
    const int autoC6ACE9D6_ai = 1;
    const int autoEC64DC3D_ae = lib1_gv_dECKLIST_PER_RACE_LIMIT;
    const int autoEC64DC3D_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_race = 0;
    for ( ; ( (autoC6ACE9D6_ai >= 0 && lv_race <= autoC6ACE9D6_ae) || (autoC6ACE9D6_ai < 0 && lv_race >= autoC6ACE9D6_ae) ) ; lv_race += autoC6ACE9D6_ai ) {
        lv_decklist = 0;
        for ( ; ( (autoEC64DC3D_ai >= 0 && lv_decklist <= autoEC64DC3D_ae) || (autoEC64DC3D_ai < 0 && lv_decklist >= autoEC64DC3D_ae) ) ; lv_decklist += autoEC64DC3D_ai ) {
            if ((lib1_gv_player_collection[EventPlayer()].lv_decklist[lv_race][lv_decklist].lv_button == c_invalidDialogControlId)) {
                break;
            }
            else if ((EventDialogControl() == lib1_gv_player_collection[EventPlayer()].lv_decklist[lv_race][lv_decklist].lv_button)) {
                lib1_gf_MouseExitDecklist(EventPlayer(), lv_race, lv_decklist);
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_MouseExitDecklist_Init () {
    lib1_gt_MouseExitDecklist = TriggerCreate("lib1_gt_MouseExitDecklist_Func");
    TriggerAddEventDialogControl(lib1_gt_MouseExitDecklist, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseExit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mouse Enter Decklist Delete
//--------------------------------------------------------------------------------------------------
bool lib1_gt_MouseEnterDecklistDelete_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_race;
    int lv_decklist;

    // Automatic Variable Declarations
    const int auto7A5F885D_ae = 2;
    const int auto7A5F885D_ai = 1;
    const int autoF885EA84_ae = lib1_gv_dECKLIST_PER_RACE_LIMIT;
    const int autoF885EA84_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_race = 0;
    for ( ; ( (auto7A5F885D_ai >= 0 && lv_race <= auto7A5F885D_ae) || (auto7A5F885D_ai < 0 && lv_race >= auto7A5F885D_ae) ) ; lv_race += auto7A5F885D_ai ) {
        lv_decklist = 0;
        for ( ; ( (autoF885EA84_ai >= 0 && lv_decklist <= autoF885EA84_ae) || (autoF885EA84_ai < 0 && lv_decklist >= autoF885EA84_ae) ) ; lv_decklist += autoF885EA84_ai ) {
            if ((lib1_gv_player_collection[EventPlayer()].lv_decklist[lv_race][lv_decklist].lv_delete_button == c_invalidDialogControlId)) {
                break;
            }
            else if ((EventDialogControl() == lib1_gv_player_collection[EventPlayer()].lv_decklist[lv_race][lv_decklist].lv_delete_button)) {
                lib1_gf_MouseEnterDecklistDelete(EventPlayer(), lv_race, lv_decklist);
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_MouseEnterDecklistDelete_Init () {
    lib1_gt_MouseEnterDecklistDelete = TriggerCreate("lib1_gt_MouseEnterDecklistDelete_Func");
    TriggerAddEventDialogControl(lib1_gt_MouseEnterDecklistDelete, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseEnter);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mouse Exit Decklist Delete
//--------------------------------------------------------------------------------------------------
bool lib1_gt_MouseExitDecklistDelete_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_race;
    int lv_decklist;

    // Automatic Variable Declarations
    const int auto5A0CD7CE_ae = 2;
    const int auto5A0CD7CE_ai = 1;
    const int auto600A3C76_ae = lib1_gv_dECKLIST_PER_RACE_LIMIT;
    const int auto600A3C76_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_race = 0;
    for ( ; ( (auto5A0CD7CE_ai >= 0 && lv_race <= auto5A0CD7CE_ae) || (auto5A0CD7CE_ai < 0 && lv_race >= auto5A0CD7CE_ae) ) ; lv_race += auto5A0CD7CE_ai ) {
        lv_decklist = 0;
        for ( ; ( (auto600A3C76_ai >= 0 && lv_decklist <= auto600A3C76_ae) || (auto600A3C76_ai < 0 && lv_decklist >= auto600A3C76_ae) ) ; lv_decklist += auto600A3C76_ai ) {
            if ((lib1_gv_player_collection[EventPlayer()].lv_decklist[lv_race][lv_decklist].lv_delete_button == c_invalidDialogControlId)) {
                break;
            }
            else if ((EventDialogControl() == lib1_gv_player_collection[EventPlayer()].lv_decklist[lv_race][lv_decklist].lv_delete_button)) {
                lib1_gf_MouseExitDecklist(EventPlayer(), lv_race, lv_decklist);
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_MouseExitDecklistDelete_Init () {
    lib1_gt_MouseExitDecklistDelete = TriggerCreate("lib1_gt_MouseExitDecklistDelete_Func");
    TriggerAddEventDialogControl(lib1_gt_MouseExitDecklistDelete, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseExit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mouse Click Decklist Delete
//--------------------------------------------------------------------------------------------------
bool lib1_gt_MouseClickDecklistDelete_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_race;
    int lv_decklist;

    // Automatic Variable Declarations
    const int auto64CED44C_ae = 2;
    const int auto64CED44C_ai = 1;
    const int auto4069B3C8_ae = lib1_gv_dECKLIST_PER_RACE_LIMIT;
    const int auto4069B3C8_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_race = 0;
    for ( ; ( (auto64CED44C_ai >= 0 && lv_race <= auto64CED44C_ae) || (auto64CED44C_ai < 0 && lv_race >= auto64CED44C_ae) ) ; lv_race += auto64CED44C_ai ) {
        lv_decklist = 0;
        for ( ; ( (auto4069B3C8_ai >= 0 && lv_decklist <= auto4069B3C8_ae) || (auto4069B3C8_ai < 0 && lv_decklist >= auto4069B3C8_ae) ) ; lv_decklist += auto4069B3C8_ai ) {
            if ((lib1_gv_player_collection[EventPlayer()].lv_decklist[lv_race][lv_decklist].lv_delete_button == c_invalidDialogControlId)) {
                break;
            }
            else if ((lib1_gv_player_collection[EventPlayer()].lv_default_decklist[lv_race] != lv_decklist) && (EventDialogControl() == lib1_gv_player_collection[EventPlayer()].lv_decklist[lv_race][lv_decklist].lv_delete_button)) {
                lib1_gf_DisableAllDecklistButtons(EventPlayer());
                lib1_gv_player_collection[EventPlayer()].lv_deck_race_to_delete = lv_race;
                lib1_gv_player_collection[EventPlayer()].lv_deck_number_to_delete = lv_decklist;
                lib1_gv_player[EventPlayer()].lv_button_click_time = GameGetMissionTime();
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_MouseClickDecklistDelete_Init () {
    lib1_gt_MouseClickDecklistDelete = TriggerCreate("lib1_gt_MouseClickDecklistDelete_Func");
    TriggerAddEventDialogControl(lib1_gt_MouseClickDecklistDelete, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mouse Enter Ribbon
//--------------------------------------------------------------------------------------------------
bool lib1_gt_MouseEnterRibbon_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_race;
    int lv_decklist;

    // Automatic Variable Declarations
    const int autoFAE55CFD_ae = 2;
    const int autoFAE55CFD_ai = 1;
    const int auto2150E490_ae = lib1_gv_dECKLIST_PER_RACE_LIMIT;
    const int auto2150E490_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_race = 0;
    for ( ; ( (autoFAE55CFD_ai >= 0 && lv_race <= autoFAE55CFD_ae) || (autoFAE55CFD_ai < 0 && lv_race >= autoFAE55CFD_ae) ) ; lv_race += autoFAE55CFD_ai ) {
        lv_decklist = 0;
        for ( ; ( (auto2150E490_ai >= 0 && lv_decklist <= auto2150E490_ae) || (auto2150E490_ai < 0 && lv_decklist >= auto2150E490_ae) ) ; lv_decklist += auto2150E490_ai ) {
            if ((lib1_gv_player_collection[EventPlayer()].lv_decklist[lv_race][lv_decklist].lv_main_deck_ribbon_button == c_invalidDialogControlId)) {
                break;
            }
            else if ((EventDialogControl() == lib1_gv_player_collection[EventPlayer()].lv_decklist[lv_race][lv_decklist].lv_main_deck_ribbon_button)) {
                lib1_gf_MouseEnterMainDeckRibbon(EventPlayer(), lv_race, lv_decklist);
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_MouseEnterRibbon_Init () {
    lib1_gt_MouseEnterRibbon = TriggerCreate("lib1_gt_MouseEnterRibbon_Func");
    TriggerAddEventDialogControl(lib1_gt_MouseEnterRibbon, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseEnter);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mouse Exit Ribbon
//--------------------------------------------------------------------------------------------------
bool lib1_gt_MouseExitRibbon_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_race;
    int lv_decklist;

    // Automatic Variable Declarations
    const int autoA305C1D3_ae = 2;
    const int autoA305C1D3_ai = 1;
    const int auto9489E4E4_ae = lib1_gv_dECKLIST_PER_RACE_LIMIT;
    const int auto9489E4E4_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_race = 0;
    for ( ; ( (autoA305C1D3_ai >= 0 && lv_race <= autoA305C1D3_ae) || (autoA305C1D3_ai < 0 && lv_race >= autoA305C1D3_ae) ) ; lv_race += autoA305C1D3_ai ) {
        lv_decklist = 0;
        for ( ; ( (auto9489E4E4_ai >= 0 && lv_decklist <= auto9489E4E4_ae) || (auto9489E4E4_ai < 0 && lv_decklist >= auto9489E4E4_ae) ) ; lv_decklist += auto9489E4E4_ai ) {
            if ((lib1_gv_player_collection[EventPlayer()].lv_decklist[lv_race][lv_decklist].lv_main_deck_ribbon_button == c_invalidDialogControlId)) {
                break;
            }
            else if ((EventDialogControl() == lib1_gv_player_collection[EventPlayer()].lv_decklist[lv_race][lv_decklist].lv_main_deck_ribbon_button)) {
                lib1_gf_MouseExitDecklist(EventPlayer(), lv_race, lv_decklist);
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_MouseExitRibbon_Init () {
    lib1_gt_MouseExitRibbon = TriggerCreate("lib1_gt_MouseExitRibbon_Func");
    TriggerAddEventDialogControl(lib1_gt_MouseExitRibbon, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseExit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mouse Click Ribbon
//--------------------------------------------------------------------------------------------------
bool lib1_gt_MouseClickRibbon_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_race;
    int lv_decklist;

    // Automatic Variable Declarations
    const int auto70718ACA_ae = 2;
    const int auto70718ACA_ai = 1;
    const int auto63BEE2E4_ae = lib1_gv_dECKLIST_PER_RACE_LIMIT;
    const int auto63BEE2E4_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_race = 0;
    for ( ; ( (auto70718ACA_ai >= 0 && lv_race <= auto70718ACA_ae) || (auto70718ACA_ai < 0 && lv_race >= auto70718ACA_ae) ) ; lv_race += auto70718ACA_ai ) {
        lv_decklist = 0;
        for ( ; ( (auto63BEE2E4_ai >= 0 && lv_decklist <= auto63BEE2E4_ae) || (auto63BEE2E4_ai < 0 && lv_decklist >= auto63BEE2E4_ae) ) ; lv_decklist += auto63BEE2E4_ai ) {
            if ((lib1_gv_player_collection[EventPlayer()].lv_decklist[lv_race][lv_decklist].lv_main_deck_ribbon_button == c_invalidDialogControlId)) {
                break;
            }
            else if ((EventDialogControl() == lib1_gv_player_collection[EventPlayer()].lv_decklist[lv_race][lv_decklist].lv_main_deck_ribbon_button)) {
                lib1_gf_SetDecklistasMainDecklist(EventPlayer(), lv_race, lv_decklist);
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_MouseClickRibbon_Init () {
    lib1_gt_MouseClickRibbon = TriggerCreate("lib1_gt_MouseClickRibbon_Func");
    TriggerAddEventDialogControl(lib1_gt_MouseClickRibbon, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mouse Enter Add Deck
//--------------------------------------------------------------------------------------------------
bool lib1_gt_MouseEnterAddDeck_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_race;
    int lv_decklist;

    // Automatic Variable Declarations
    const int auto82FB32D0_ae = 2;
    const int auto82FB32D0_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_race = 0;
    for ( ; ( (auto82FB32D0_ai >= 0 && lv_race <= auto82FB32D0_ae) || (auto82FB32D0_ai < 0 && lv_race >= auto82FB32D0_ae) ) ; lv_race += auto82FB32D0_ai ) {
        if ((lib1_gv_player_collection[EventPlayer()].lv_add_deck_button[lv_race] != c_invalidDialogControlId) && (EventDialogControl() == lib1_gv_player_collection[EventPlayer()].lv_add_deck_button[lv_race])) {
            lib1_gf_MouseEnterAddDeckButton(EventPlayer(), lv_race);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_MouseEnterAddDeck_Init () {
    lib1_gt_MouseEnterAddDeck = TriggerCreate("lib1_gt_MouseEnterAddDeck_Func");
    TriggerAddEventDialogControl(lib1_gt_MouseEnterAddDeck, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseEnter);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mouse Exit Add Deck
//--------------------------------------------------------------------------------------------------
bool lib1_gt_MouseExitAddDeck_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_race;
    int lv_decklist;

    // Automatic Variable Declarations
    const int auto3B67CF4A_ae = 2;
    const int auto3B67CF4A_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_race = 0;
    for ( ; ( (auto3B67CF4A_ai >= 0 && lv_race <= auto3B67CF4A_ae) || (auto3B67CF4A_ai < 0 && lv_race >= auto3B67CF4A_ae) ) ; lv_race += auto3B67CF4A_ai ) {
        if ((lib1_gv_player_collection[EventPlayer()].lv_add_deck_button[lv_race] != c_invalidDialogControlId) && (EventDialogControl() == lib1_gv_player_collection[EventPlayer()].lv_add_deck_button[lv_race])) {
            lib1_gf_MouseExitAddDeckButton(EventPlayer(), lv_race);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_MouseExitAddDeck_Init () {
    lib1_gt_MouseExitAddDeck = TriggerCreate("lib1_gt_MouseExitAddDeck_Func");
    TriggerAddEventDialogControl(lib1_gt_MouseExitAddDeck, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseExit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mouse Click Add Deck
//--------------------------------------------------------------------------------------------------
bool lib1_gt_MouseClickAddDeck_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_race;
    int lv_decklist;

    // Automatic Variable Declarations
    const int autoA690F1C0_ae = 2;
    const int autoA690F1C0_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_race = 0;
    for ( ; ( (autoA690F1C0_ai >= 0 && lv_race <= autoA690F1C0_ae) || (autoA690F1C0_ai < 0 && lv_race >= autoA690F1C0_ae) ) ; lv_race += autoA690F1C0_ai ) {
        if ((lib1_gv_player_collection[EventPlayer()].lv_add_deck_button[lv_race] != c_invalidDialogControlId) && (EventDialogControl() == lib1_gv_player_collection[EventPlayer()].lv_add_deck_button[lv_race])) {
            lib1_gf_AddNewDecklistInManager(EventPlayer(), lv_race);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_MouseClickAddDeck_Init () {
    lib1_gt_MouseClickAddDeck = TriggerCreate("lib1_gt_MouseClickAddDeck_Func");
    TriggerAddEventDialogControl(lib1_gt_MouseClickAddDeck, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Buy Pack Button Click
//--------------------------------------------------------------------------------------------------
bool lib1_gt_BuyPackButtonClick_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_slot_index;
    bool lv_done;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == lib1_gv_store_dialog_even_button[0]) || (EventDialogControl() == lib1_gv_store_dialog_even_button[1]) || (EventDialogControl() == lib1_gv_store_dialog_odd_button[0]) || (EventDialogControl() == lib1_gv_store_dialog_odd_button[1]) || (EventDialogControl() == lib1_gv_store_dialog_odd_button[2])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetEnabled(lib1_gv_store_dialog_even_button[0], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetEnabled(lib1_gv_store_dialog_even_button[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetEnabled(lib1_gv_store_dialog_odd_button[0], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetEnabled(lib1_gv_store_dialog_odd_button[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetEnabled(lib1_gv_store_dialog_odd_button[2], PlayerGroupSingle(EventPlayer()), false);
    lib1_gv_player_collection[EventPlayer()].lv_pack_to_purchase = FixedToInt(libNtve_gf_DialogItemValue(EventDialogControl(), EventPlayer()));
    lib1_gv_player[EventPlayer()].lv_button_click_time = GameGetMissionTime();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_BuyPackButtonClick_Init () {
    lib1_gt_BuyPackButtonClick = TriggerCreate("lib1_gt_BuyPackButtonClick_Func");
    TriggerAddEventDialogControl(lib1_gt_BuyPackButtonClick, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Back to Store Clicked
//--------------------------------------------------------------------------------------------------
bool lib1_gt_BacktoStoreClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1_gv_pack_finish_button))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gf_ClosePack(EventPlayer());
    lib1_gf_OpenStore(EventPlayer(), lib1_gv_player_collection[EventPlayer()].lv_page);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_BacktoStoreClicked_Init () {
    lib1_gt_BacktoStoreClicked = TriggerCreate("lib1_gt_BacktoStoreClicked_Func");
    TriggerAddEventDialogControl(lib1_gt_BacktoStoreClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Left Pack Arrow
//--------------------------------------------------------------------------------------------------
bool lib1_gt_LeftPackArrow_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1_gv_store_left_arrow_button))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gf_OpenStore(EventPlayer(), MaxI((lib1_gv_player_collection[EventPlayer()].lv_page - 1), 0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_LeftPackArrow_Init () {
    lib1_gt_LeftPackArrow = TriggerCreate("lib1_gt_LeftPackArrow_Func");
    TriggerAddEventDialogControl(lib1_gt_LeftPackArrow, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Right Pack Arrow
//--------------------------------------------------------------------------------------------------
bool lib1_gt_RightPackArrow_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1_gv_store_right_arrow_button))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gf_OpenStore(EventPlayer(), MinI((lib1_gv_player_collection[EventPlayer()].lv_page + 1), lib1_gv_mAX_STORE_PAGE));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_RightPackArrow_Init () {
    lib1_gt_RightPackArrow = TriggerCreate("lib1_gt_RightPackArrow_Func");
    TriggerAddEventDialogControl(lib1_gt_RightPackArrow, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Left Pack Arrow Mouse Enter
//--------------------------------------------------------------------------------------------------
bool lib1_gt_LeftPackArrowMouseEnter_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1_gv_store_left_arrow_button))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemImage(lib1_gv_store_left_arrow_image, "Assets\\Textures\\ui_glues_icons_smallpagearrow_left_hover.dds", PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_LeftPackArrowMouseEnter_Init () {
    lib1_gt_LeftPackArrowMouseEnter = TriggerCreate("lib1_gt_LeftPackArrowMouseEnter_Func");
    TriggerAddEventDialogControl(lib1_gt_LeftPackArrowMouseEnter, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseEnter);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Left Pack Arrow Mouse Exit
//--------------------------------------------------------------------------------------------------
bool lib1_gt_LeftPackArrowMouseExit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1_gv_store_left_arrow_button))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemImage(lib1_gv_store_left_arrow_image, "Assets\\Textures\\ui_glues_icons_smallpagearrow_left_normal.dds", PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_LeftPackArrowMouseExit_Init () {
    lib1_gt_LeftPackArrowMouseExit = TriggerCreate("lib1_gt_LeftPackArrowMouseExit_Func");
    TriggerAddEventDialogControl(lib1_gt_LeftPackArrowMouseExit, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseExit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Right Pack Arrow Mouse Enter
//--------------------------------------------------------------------------------------------------
bool lib1_gt_RightPackArrowMouseEnter_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1_gv_store_right_arrow_button))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemImage(lib1_gv_store_right_arrow_image, "Assets\\Textures\\ui_glues_icons_smallpagearrow_right_hover.dds", PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_RightPackArrowMouseEnter_Init () {
    lib1_gt_RightPackArrowMouseEnter = TriggerCreate("lib1_gt_RightPackArrowMouseEnter_Func");
    TriggerAddEventDialogControl(lib1_gt_RightPackArrowMouseEnter, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseEnter);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Right Pack Arrow Mouse Exit
//--------------------------------------------------------------------------------------------------
bool lib1_gt_RightPackArrowMouseExit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1_gv_store_right_arrow_button))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemImage(lib1_gv_store_right_arrow_image, "Assets\\Textures\\ui_glues_icons_smallpagearrow_right_normal.dds", PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_RightPackArrowMouseExit_Init () {
    lib1_gt_RightPackArrowMouseExit = TriggerCreate("lib1_gt_RightPackArrowMouseExit_Func");
    TriggerAddEventDialogControl(lib1_gt_RightPackArrowMouseExit, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseExit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Open Terran Stats
//--------------------------------------------------------------------------------------------------
bool lib1_gt_OpenTerranStats_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1_gv_stats_terran_button))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gf_OpenStatsPage(EventPlayer(), 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_OpenTerranStats_Init () {
    lib1_gt_OpenTerranStats = TriggerCreate("lib1_gt_OpenTerranStats_Func");
    TriggerAddEventDialogControl(lib1_gt_OpenTerranStats, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Open Zerg Stats
//--------------------------------------------------------------------------------------------------
bool lib1_gt_OpenZergStats_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1_gv_stats_zerg_button))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gf_OpenStatsPage(EventPlayer(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_OpenZergStats_Init () {
    lib1_gt_OpenZergStats = TriggerCreate("lib1_gt_OpenZergStats_Func");
    TriggerAddEventDialogControl(lib1_gt_OpenZergStats, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Open Protoss Stats
//--------------------------------------------------------------------------------------------------
bool lib1_gt_OpenProtossStats_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1_gv_stats_protoss_button))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gf_OpenStatsPage(EventPlayer(), 2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_OpenProtossStats_Init () {
    lib1_gt_OpenProtossStats = TriggerCreate("lib1_gt_OpenProtossStats_Func");
    TriggerAddEventDialogControl(lib1_gt_OpenProtossStats, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reset Stats
//--------------------------------------------------------------------------------------------------
bool lib1_gt_ResetStats_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1_gv_stats_reset_button))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetEnabled(EventDialogControl(), PlayerGroupSingle(EventPlayer()), false);
    lib1_gf_ResetStats(EventPlayer(), lib1_gv_player_collection[EventPlayer()].lv_current_stats_race);
    lib1_gf_OpenStatsPage(EventPlayer(), lib1_gv_player_collection[EventPlayer()].lv_current_stats_race);
    DialogControlSetEnabled(EventDialogControl(), PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_ResetStats_Init () {
    lib1_gt_ResetStats = TriggerCreate("lib1_gt_ResetStats_Func");
    TriggerAddEventDialogControl(lib1_gt_ResetStats, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Press Cosmetic Button
//--------------------------------------------------------------------------------------------------
bool lib1_gt_PressCosmeticButton_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_cosmetic_slot;

    // Automatic Variable Declarations
    const int auto24BC622A_ae = 2;
    const int auto24BC622A_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_cosmetic_slot = 0;
    for ( ; ( (auto24BC622A_ai >= 0 && lv_cosmetic_slot <= auto24BC622A_ae) || (auto24BC622A_ai < 0 && lv_cosmetic_slot >= auto24BC622A_ae) ) ; lv_cosmetic_slot += auto24BC622A_ai ) {
        if ((EventDialogControl() == lib1_gv_trophy_button[lv_cosmetic_slot])) {
            lib1_gf_PressTrophyButton(EventPlayer(), lv_cosmetic_slot);
        }
        else if ((EventDialogControl() == lib1_gv_pet_button[lv_cosmetic_slot])) {
            lib1_gf_PressPetButton(EventPlayer(), lv_cosmetic_slot);
        }
        else if ((EventDialogControl() == lib1_gv_decoration_button[lv_cosmetic_slot])) {
            lib1_gf_PressDecorationButton(EventPlayer(), lv_cosmetic_slot);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_PressCosmeticButton_Init () {
    lib1_gt_PressCosmeticButton = TriggerCreate("lib1_gt_PressCosmeticButton_Func");
    TriggerAddEventDialogControl(lib1_gt_PressCosmeticButton, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Left Trophy Arrow
//--------------------------------------------------------------------------------------------------
bool lib1_gt_LeftTrophyArrow_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1_gv_trophy_left_arrow_button))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gf_OpenTrophyPage(EventPlayer(), MaxI((lib1_gv_player_collection[EventPlayer()].lv_trophy_page - 1), 0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_LeftTrophyArrow_Init () {
    lib1_gt_LeftTrophyArrow = TriggerCreate("lib1_gt_LeftTrophyArrow_Func");
    TriggerAddEventDialogControl(lib1_gt_LeftTrophyArrow, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Right Trophy Arrow
//--------------------------------------------------------------------------------------------------
bool lib1_gt_RightTrophyArrow_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_max_trophy_page;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1_gv_trophy_right_arrow_button))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_max_trophy_page = CeilingI((lib1_gf_VisibleTrophyCount(EventPlayer()) / 3.0));
    lib1_gf_OpenTrophyPage(EventPlayer(), MinI((lib1_gv_player_collection[EventPlayer()].lv_trophy_page + 1), lv_max_trophy_page));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_RightTrophyArrow_Init () {
    lib1_gt_RightTrophyArrow = TriggerCreate("lib1_gt_RightTrophyArrow_Func");
    TriggerAddEventDialogControl(lib1_gt_RightTrophyArrow, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Left Trophy Arrow Mouse Enter
//--------------------------------------------------------------------------------------------------
bool lib1_gt_LeftTrophyArrowMouseEnter_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1_gv_trophy_left_arrow_button))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemImage(lib1_gv_trophy_left_arrow, "Assets\\Textures\\ui_glues_icons_smallpagearrow_left_hover.dds", PlayerGroupSingle(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_LeftTrophyArrowMouseEnter_Init () {
    lib1_gt_LeftTrophyArrowMouseEnter = TriggerCreate("lib1_gt_LeftTrophyArrowMouseEnter_Func");
    TriggerAddEventDialogControl(lib1_gt_LeftTrophyArrowMouseEnter, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseEnter);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Left Pet Arrow Mouse Enter
//--------------------------------------------------------------------------------------------------
bool lib1_gt_LeftPetArrowMouseEnter_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1_gv_pet_left_arrow_button))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemImage(lib1_gv_pet_left_arrow, "Assets\\Textures\\ui_glues_icons_smallpagearrow_left_hover.dds", PlayerGroupSingle(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_LeftPetArrowMouseEnter_Init () {
    lib1_gt_LeftPetArrowMouseEnter = TriggerCreate("lib1_gt_LeftPetArrowMouseEnter_Func");
    TriggerAddEventDialogControl(lib1_gt_LeftPetArrowMouseEnter, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseEnter);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Left Decoration Arrow Mouse Enter
//--------------------------------------------------------------------------------------------------
bool lib1_gt_LeftDecorationArrowMouseEnter_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1_gv_decoration_left_arrow_button))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemImage(lib1_gv_decoration_left_arrow, "Assets\\Textures\\ui_glues_icons_smallpagearrow_left_hover.dds", PlayerGroupSingle(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_LeftDecorationArrowMouseEnter_Init () {
    lib1_gt_LeftDecorationArrowMouseEnter = TriggerCreate("lib1_gt_LeftDecorationArrowMouseEnter_Func");
    TriggerAddEventDialogControl(lib1_gt_LeftDecorationArrowMouseEnter, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseEnter);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Left Trophy Arrow Mouse Exit
//--------------------------------------------------------------------------------------------------
bool lib1_gt_LeftTrophyArrowMouseExit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1_gv_trophy_left_arrow_button))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemImage(lib1_gv_trophy_left_arrow, "Assets\\Textures\\ui_glues_icons_smallpagearrow_left_normal.dds", PlayerGroupSingle(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_LeftTrophyArrowMouseExit_Init () {
    lib1_gt_LeftTrophyArrowMouseExit = TriggerCreate("lib1_gt_LeftTrophyArrowMouseExit_Func");
    TriggerAddEventDialogControl(lib1_gt_LeftTrophyArrowMouseExit, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseExit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Left Pet Arrow Mouse Exit
//--------------------------------------------------------------------------------------------------
bool lib1_gt_LeftPetArrowMouseExit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1_gv_pet_left_arrow_button))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemImage(lib1_gv_pet_left_arrow, "Assets\\Textures\\ui_glues_icons_smallpagearrow_left_normal.dds", PlayerGroupSingle(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_LeftPetArrowMouseExit_Init () {
    lib1_gt_LeftPetArrowMouseExit = TriggerCreate("lib1_gt_LeftPetArrowMouseExit_Func");
    TriggerAddEventDialogControl(lib1_gt_LeftPetArrowMouseExit, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseExit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Left Decoration Arrow Mouse Exit
//--------------------------------------------------------------------------------------------------
bool lib1_gt_LeftDecorationArrowMouseExit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1_gv_decoration_left_arrow_button))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemImage(lib1_gv_decoration_left_arrow, "Assets\\Textures\\ui_glues_icons_smallpagearrow_left_normal.dds", PlayerGroupSingle(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_LeftDecorationArrowMouseExit_Init () {
    lib1_gt_LeftDecorationArrowMouseExit = TriggerCreate("lib1_gt_LeftDecorationArrowMouseExit_Func");
    TriggerAddEventDialogControl(lib1_gt_LeftDecorationArrowMouseExit, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseExit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Right Trophy Arrow Mouse Enter
//--------------------------------------------------------------------------------------------------
bool lib1_gt_RightTrophyArrowMouseEnter_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1_gv_trophy_right_arrow_button))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemImage(lib1_gv_trophy_right_arrow, "Assets\\Textures\\ui_glues_icons_smallpagearrow_right_hover.dds", PlayerGroupSingle(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_RightTrophyArrowMouseEnter_Init () {
    lib1_gt_RightTrophyArrowMouseEnter = TriggerCreate("lib1_gt_RightTrophyArrowMouseEnter_Func");
    TriggerAddEventDialogControl(lib1_gt_RightTrophyArrowMouseEnter, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseEnter);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Right Pet Arrow Mouse Enter
//--------------------------------------------------------------------------------------------------
bool lib1_gt_RightPetArrowMouseEnter_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1_gv_pet_right_arrow_button))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemImage(lib1_gv_pet_right_arrow, "Assets\\Textures\\ui_glues_icons_smallpagearrow_right_hover.dds", PlayerGroupSingle(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_RightPetArrowMouseEnter_Init () {
    lib1_gt_RightPetArrowMouseEnter = TriggerCreate("lib1_gt_RightPetArrowMouseEnter_Func");
    TriggerAddEventDialogControl(lib1_gt_RightPetArrowMouseEnter, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseEnter);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Right Decoration Arrow Mouse Enter
//--------------------------------------------------------------------------------------------------
bool lib1_gt_RightDecorationArrowMouseEnter_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1_gv_decoration_right_arrow_button))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemImage(lib1_gv_decoration_right_arrow, "Assets\\Textures\\ui_glues_icons_smallpagearrow_right_hover.dds", PlayerGroupSingle(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_RightDecorationArrowMouseEnter_Init () {
    lib1_gt_RightDecorationArrowMouseEnter = TriggerCreate("lib1_gt_RightDecorationArrowMouseEnter_Func");
    TriggerAddEventDialogControl(lib1_gt_RightDecorationArrowMouseEnter, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseEnter);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Right Trophy Arrow Mouse Exit
//--------------------------------------------------------------------------------------------------
bool lib1_gt_RightTrophyArrowMouseExit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1_gv_trophy_right_arrow_button))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemImage(lib1_gv_trophy_right_arrow, "Assets\\Textures\\ui_glues_icons_smallpagearrow_right_normal.dds", PlayerGroupSingle(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_RightTrophyArrowMouseExit_Init () {
    lib1_gt_RightTrophyArrowMouseExit = TriggerCreate("lib1_gt_RightTrophyArrowMouseExit_Func");
    TriggerAddEventDialogControl(lib1_gt_RightTrophyArrowMouseExit, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseExit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Right Pet Arrow Mouse Exit
//--------------------------------------------------------------------------------------------------
bool lib1_gt_RightPetArrowMouseExit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1_gv_pet_right_arrow_button))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemImage(lib1_gv_pet_right_arrow, "Assets\\Textures\\ui_glues_icons_smallpagearrow_right_normal.dds", PlayerGroupSingle(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_RightPetArrowMouseExit_Init () {
    lib1_gt_RightPetArrowMouseExit = TriggerCreate("lib1_gt_RightPetArrowMouseExit_Func");
    TriggerAddEventDialogControl(lib1_gt_RightPetArrowMouseExit, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseExit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Right Decoration Arrow Mouse Exit
//--------------------------------------------------------------------------------------------------
bool lib1_gt_RightDecorationArrowMouseExit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1_gv_decoration_right_arrow_button))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemImage(lib1_gv_decoration_right_arrow, "Assets\\Textures\\ui_glues_icons_smallpagearrow_right_normal.dds", PlayerGroupSingle(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_RightDecorationArrowMouseExit_Init () {
    lib1_gt_RightDecorationArrowMouseExit = TriggerCreate("lib1_gt_RightDecorationArrowMouseExit_Func");
    TriggerAddEventDialogControl(lib1_gt_RightDecorationArrowMouseExit, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseExit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Game End
//--------------------------------------------------------------------------------------------------
bool lib1_gt_GameEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_team;
    int lv_player;
    int lv_hand_index;
    int lv_top_of_hand;
    int lv_model;

    // Automatic Variable Declarations
    const int auto266B9B2B_ae = 6;
    const int auto266B9B2B_ai = 1;
    const int auto44B52FC6_ae = 1;
    const int auto44B52FC6_ai = 1;
    playergroup auto19F44FA0_g;
    int auto6E667A71_ae;
    const int auto6E667A71_ai = 1;
    const int auto8B3F5C53_ae = 1;
    const int auto8B3F5C53_ai = 1;
    playergroup auto40B4D36A_g;
    unitgroup autoC46B9006_g;
    int autoC46B9006_u;
    unit autoC46B9006_var;
    unitgroup auto652F9DAB_g;
    int auto652F9DAB_u;
    unit auto652F9DAB_var;
    unitgroup autoCC38DD3A_g;
    int autoCC38DD3A_u;
    unit autoCC38DD3A_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "OvermindHive")) {
        lib1_gf_GameEndOvermindAnimation(UnitGroupRandomUnit(UnitGroup("Overmind", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
    }

    lib1_gv_current_phase = "Menu";
    if ((UnitIsAlive(lib1_gv_keystone[0]) == true)) {
        libNtve_gf_MakeUnitInvulnerable(lib1_gv_keystone[0], true);
    }
    else {
        libNtve_gf_MakeUnitInvulnerable(lib1_gv_keystone[1], true);
    }
    lv_player = 1;
    for ( ; ( (auto266B9B2B_ai >= 0 && lv_player <= auto266B9B2B_ae) || (auto266B9B2B_ai < 0 && lv_player >= auto266B9B2B_ae) ) ; lv_player += auto266B9B2B_ai ) {
        CameraLockInput(lv_player, true);
        CameraPan(lv_player, UnitGetPosition(EventUnit()), 1.0, -1, 10.0, false);
    }
    TriggerEnable(lib1_gt_PlayPhaseLoop, false);
    TriggerEnable(lib1_gt_UpdateTimer, false);
    TimerPause(lib1_gv_turn_timer, true);
    if ((lib1_gv_resource_chooser_dialog != c_invalidDialogId)) {
        lib1_gf_FadeandDestroyDialog(lib1_gv_resource_chooser_dialog, lib1_gv_fADE_OUT_BATTLE_UI_TIME);
    }

    if ((lib1_gv_deck_tracker_dialog != c_invalidDialogId)) {
        lib1_gf_FadeandDestroyDialog(lib1_gv_deck_tracker_dialog, lib1_gv_fADE_OUT_BATTLE_UI_TIME);
    }

    if ((lib1_gv_turn_timer_dialog != c_invalidDialogId)) {
        lib1_gf_FadeandDestroyDialog(lib1_gv_turn_timer_dialog, lib1_gv_fADE_OUT_BATTLE_UI_TIME);
    }

    if ((lib1_gv_end_phase_dialog != c_invalidDialogId)) {
        lib1_gf_FadeandDestroyDialog(lib1_gv_end_phase_dialog, lib1_gv_fADE_OUT_BATTLE_UI_TIME);
    }

    if ((lib1_gv_planning_instructions != c_invalidDialogId)) {
        lib1_gf_FadeandDestroyDialog(lib1_gv_planning_instructions, lib1_gv_fADE_OUT_BATTLE_UI_TIME);
    }

    lv_team = 0;
    for ( ; ( (auto44B52FC6_ai >= 0 && lv_team <= auto44B52FC6_ae) || (auto44B52FC6_ai < 0 && lv_team >= auto44B52FC6_ae) ) ; lv_team += auto44B52FC6_ai ) {
        auto19F44FA0_g = lib1_gv_team[lv_team];
        lv_player = -1;
        while (true) {
            lv_player = PlayerGroupNextPlayer(auto19F44FA0_g, lv_player);
            if (lv_player < 0) { break; }
            TimerPause(lib1_gv_hover_timer[lv_player], true);
            DialogDestroy(lib1_gv_player[lv_player].lv_hand.lv_hidden_overlay);
            if ((lib1_gv_card_hover_dialog[lv_player] != c_invalidDialogId)) {
                lib1_gf_FadeandDestroyDialog(lib1_gv_card_hover_dialog[lv_player], lib1_gv_fADE_OUT_BATTLE_UI_TIME);
            }

            if ((lib1_gv_player[lv_player].lv_resources.lv_dialog != c_invalidDialogId)) {
                lib1_gf_FadeandDestroyDialog(lib1_gv_player[lv_player].lv_resources.lv_dialog, lib1_gv_fADE_OUT_BATTLE_UI_TIME);
            }

            lv_top_of_hand = lib1_gf_TopofHand(lv_player);
            auto6E667A71_ae = lv_top_of_hand;
            lv_hand_index = 0;
            for ( ; ( (auto6E667A71_ai >= 0 && lv_hand_index <= auto6E667A71_ae) || (auto6E667A71_ai < 0 && lv_hand_index >= auto6E667A71_ae) ) ; lv_hand_index += auto6E667A71_ai ) {
                if ((lib1_gv_player[lv_player].lv_hand.lv_card[lv_hand_index].lv_ui.lv_dialog != c_invalidDialogId)) {
                    lib1_gf_FadeandDestroyDialog(lib1_gv_player[lv_player].lv_hand.lv_card[lv_hand_index].lv_ui.lv_dialog, lib1_gv_fADE_OUT_BATTLE_UI_TIME);
                }

            }
        }
    }
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeInfoPanel, false);
    Wait(lib1_gv_fADE_OUT_BATTLE_UI_TIME, c_timeGame);
    Wait(lib1_gv_fADE_OUT_DELAY, c_timeGame);
    CinematicFade(false, lib1_gv_fADE_OUT_BATTLEFIELD, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    Wait(lib1_gv_fADE_OUT_BATTLEFIELD, c_timeGame);
    lv_team = 0;
    for ( ; ( (auto8B3F5C53_ai >= 0 && lv_team <= auto8B3F5C53_ae) || (auto8B3F5C53_ai < 0 && lv_team >= auto8B3F5C53_ae) ) ; lv_team += auto8B3F5C53_ai ) {
        auto40B4D36A_g = lib1_gv_team[lv_team];
        lv_player = -1;
        while (true) {
            lv_player = PlayerGroupNextPlayer(auto40B4D36A_g, lv_player);
            if (lv_player < 0) { break; }
            if ((EventUnit() == lib1_gf_PlayersXelnagaStructure(lv_player))) {
                lib1_gf_ProcessDefeat(lv_player);
            }
            else {
                lib1_gf_ProcessVictory(lv_player);
            }
            DialogSetVisible(lib1_gv_reward_dialog, PlayerGroupSingle(lv_player), true);
        }
    }
    DialogControlFadeTransparency(lib1_gv_reward_dialog_background_image, PlayerGroupAll(), lib1_gv_fADE_OUT_BATTLE_UI_TIME, 0.0);
    TriggerEnable(lib1_gt_CollectionPageUpdateLoop, true);
    autoC46B9006_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC46B9006_u = UnitGroupCount(autoC46B9006_g, c_unitCountAll);
    for (;; autoC46B9006_u -= 1) {
        autoC46B9006_var = UnitGroupUnitFromEnd(autoC46B9006_g, autoC46B9006_u);
        if (autoC46B9006_var == null) { break; }
        UnitRemove(autoC46B9006_var);
    }
    Wait(0.5, c_timeGame);
    auto652F9DAB_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto652F9DAB_u = UnitGroupCount(auto652F9DAB_g, c_unitCountAll);
    for (;; auto652F9DAB_u -= 1) {
        auto652F9DAB_var = UnitGroupUnitFromEnd(auto652F9DAB_g, auto652F9DAB_u);
        if (auto652F9DAB_var == null) { break; }
        UnitRemove(auto652F9DAB_var);
    }
    Wait(0.5, c_timeGame);
    autoCC38DD3A_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoCC38DD3A_u = UnitGroupCount(autoCC38DD3A_g, c_unitCountAll);
    for (;; autoCC38DD3A_u -= 1) {
        autoCC38DD3A_var = UnitGroupUnitFromEnd(autoCC38DD3A_g, autoCC38DD3A_u);
        if (autoCC38DD3A_var == null) { break; }
        UnitRemove(autoCC38DD3A_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_GameEnd_Init () {
    lib1_gt_GameEnd = TriggerCreate("lib1_gt_GameEnd_Func");
    TriggerAddEventUnitDied(lib1_gt_GameEnd, UnitRefFromVariable("lib1_gv_keystone[0]"));
    TriggerAddEventUnitDied(lib1_gt_GameEnd, UnitRefFromVariable("lib1_gv_keystone[1]"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Check Unit Origin
//--------------------------------------------------------------------------------------------------
bool lib1_gt_CheckUnitOrigin_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_card_id;

    // Automatic Variable Declarations
    const int auto950A0217_ae = lib1_gv_mAX_CARD_ID;
    const int auto950A0217_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib1_gv_debug == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_card_id = 0;
    for ( ; ( (auto950A0217_ai >= 0 && lv_card_id <= auto950A0217_ae) || (auto950A0217_ai < 0 && lv_card_id >= auto950A0217_ae) ) ; lv_card_id += auto950A0217_ai ) {
        if ((UnitGroupHasUnit(lib1_gv_units_from_card[lv_card_id], EventUnit()) == true)) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringToText(lib1_gv_card[lv_card_id].lv_name));
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_CheckUnitOrigin_Init () {
    lib1_gt_CheckUnitOrigin = TriggerCreate("lib1_gt_CheckUnitOrigin_Func");
    TriggerAddEventUnitSelected(lib1_gt_CheckUnitOrigin, null, c_playerAny, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Free Camera
//--------------------------------------------------------------------------------------------------
bool lib1_gt_FreeCamera_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gv_test_mode == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gv_mouse_rotation_on = !(lib1_gv_mouse_rotation_on);
    if ((lib1_gv_mouse_rotation_on == true)) {
        CameraSetMouseRotates(EventPlayer(), true);
        DialogDestroyAll();
    }
    else {
        CameraSetMouseRotates(EventPlayer(), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_FreeCamera_Init () {
    lib1_gt_FreeCamera = TriggerCreate("lib1_gt_FreeCamera_Func");
    TriggerAddEventChatMessage(lib1_gt_FreeCamera, c_playerAny, "-cam", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show Command
//--------------------------------------------------------------------------------------------------
bool lib1_gt_ShowCommand_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gv_test_mode == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeCommandPanel, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_ShowCommand_Init () {
    lib1_gt_ShowCommand = TriggerCreate("lib1_gt_ShowCommand_Func");
    TriggerAddEventChatMessage(lib1_gt_ShowCommand, c_playerAny, "-comcard", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toggle Debug
//--------------------------------------------------------------------------------------------------
bool lib1_gt_ToggleDebug_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gv_test_mode == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gv_debug = !(lib1_gv_debug);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_ToggleDebug_Init () {
    lib1_gt_ToggleDebug = TriggerCreate("lib1_gt_ToggleDebug_Func");
    TriggerAddEventChatMessage(lib1_gt_ToggleDebug, c_playerAny, "-debug", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create and Save Corrupted Deck
//--------------------------------------------------------------------------------------------------
bool lib1_gt_CreateandSaveCorruptedDeck_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gv_test_mode == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gv_player_collection[EventPlayer()].lv_decklist[0][0].lv_card_id[0] = lib1_gf_GetCardIDByName("Marauder Squad");
    lib1_gf_SaveDecktoBank(EventPlayer(), 0, 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_CreateandSaveCorruptedDeck_Init () {
    lib1_gt_CreateandSaveCorruptedDeck = TriggerCreate("lib1_gt_CreateandSaveCorruptedDeck_Func");
    TriggerAddEventChatMessage(lib1_gt_CreateandSaveCorruptedDeck, c_playerAny, "-corruptme", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Handle Corrupted Collection
//--------------------------------------------------------------------------------------------------
bool lib1_gt_HandleCorruptedCollection_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gv_test_mode == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gf_HandleCorruptedCollection(1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_HandleCorruptedCollection_Init () {
    lib1_gt_HandleCorruptedCollection = TriggerCreate("lib1_gt_HandleCorruptedCollection_Func");
    TriggerAddEventChatMessage(lib1_gt_HandleCorruptedCollection, c_playerAny, "-collectioncorrupted", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Decklist Corrupted
//--------------------------------------------------------------------------------------------------
bool lib1_gt_DecklistCorrupted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gv_test_mode == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gf_HandleCorruptedDecklist(1, 0, 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_DecklistCorrupted_Init () {
    lib1_gt_DecklistCorrupted = TriggerCreate("lib1_gt_DecklistCorrupted_Func");
    TriggerAddEventChatMessage(lib1_gt_DecklistCorrupted, c_playerAny, "-deckcorrupted", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove Bonus
//--------------------------------------------------------------------------------------------------
bool lib1_gt_RemoveBonus_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gv_test_mode == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gv_player_collection[1].lv_essence_earned = -2000;
    lib1_gf_SaveCurrencytoBank(1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_RemoveBonus_Init () {
    lib1_gt_RemoveBonus = TriggerCreate("lib1_gt_RemoveBonus_Func");
    TriggerAddEventChatMessage(lib1_gt_RemoveBonus, c_playerAny, "-breaksave", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Win Rate
//--------------------------------------------------------------------------------------------------
bool lib1_gt_WinRate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gv_test_mode == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (PlayerName(EventPlayer()) + StringExternal("Param/Value/lib_1_A9F5D71C") + FixedToText(lib1_gf_MatchmakingRank(EventPlayer()), 3)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_WinRate_Init () {
    lib1_gt_WinRate = TriggerCreate("lib1_gt_WinRate_Func");
    TriggerAddEventChatMessage(lib1_gt_WinRate, c_playerAny, "-winrate", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Created
//--------------------------------------------------------------------------------------------------
bool lib1_gt_Created_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gv_test_mode == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, IntToText(lib1_gv_player[EventPlayer()].lv_units_created[0]));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, IntToText(lib1_gv_player[EventPlayer()].lv_heroes_created[0]));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, IntToText(lib1_gv_player[EventPlayer()].lv_structures_created[0]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_Created_Init () {
    lib1_gt_Created = TriggerCreate("lib1_gt_Created_Func");
    TriggerAddEventChatMessage(lib1_gt_Created, c_playerAny, "-created", true);
}

void lib1_InitTriggers () {
    lib1_gt_CommonEffectDraw1_Init();
    lib1_gt_CommonEffectDraw2_Init();
    lib1_gt_CommonEffectDraw3_Init();
    lib1_gt_CommonEffectAddHandSizeBufftoAllCreatedUnits_Init();
    lib1_gt_CommonEffectGenerate2WarpInCards_Init();
    lib1_gt_CommonEffectRemove1GasIncome_Init();
    lib1_gt_CommonEffectUnstableZergUnit_Init();
    lib1_gt_CommonEffectPopulateWithInterceptors_Init();
    lib1_gt_CommonEffectAdd1MineralIncome_Init();
    lib1_gt_CommonEffectAdd1GasIncome_Init();
    lib1_gt_CommonEffectDamagedSpawn_Init();
    lib1_gt_CommonEffectCliffAmbushSpawn_Init();
    lib1_gt_CoreSet_Init();
    lib1_gt_CoreTerran_Init();
    lib1_gt_CoreZerg_Init();
    lib1_gt_CoreProtoss_Init();
    lib1_gt_CoreUncollectable_Init();
    lib1_gt_EffectBunker_Init();
    lib1_gt_EffectTwinTurrets_Init();
    lib1_gt_EffectBarracks_Init();
    lib1_gt_EffectFactory_Init();
    lib1_gt_EffectEngineeringBay_Init();
    lib1_gt_EffectYamatoCannon_Init();
    lib1_gt_EffectScannerSweep_Init();
    lib1_gt_EffectSeekerMissiles_Init();
    lib1_gt_EffectStimpack_Init();
    lib1_gt_EffectSiegeTanks_Init();
    lib1_gt_EffectGhostOperatives_Init();
    lib1_gt_EffectRepairCrew_Init();
    lib1_gt_EffectMedivacRunners_Init();
    lib1_gt_EffectRavenSupport_Init();
    lib1_gt_EffectSupplyDepots_Init();
    lib1_gt_EffectSensorTower_Init();
    lib1_gt_EffectRefinery_Init();
    lib1_gt_EffectStarport_Init();
    lib1_gt_EffectStrikeCannons_Init();
    lib1_gt_EffectReactor_Init();
    lib1_gt_EffectSteadyTargeting_Init();
    lib1_gt_EffectDoomDrop_Init();
    lib1_gt_EffectPerchedArtilleryCargo_Init();
    lib1_gt_EffectPerchedArtilleryOrder_Init();
    lib1_gt_EffectEntrench_Init();
    lib1_gt_EffectFusionCore_Init();
    lib1_gt_EffectArmory_Init();
    lib1_gt_EffectReconstruction_Init();
    lib1_gt_EffectTacticalNuke_Init();
    lib1_gt_EffectTechLab_Init();
    lib1_gt_EffectHyperion_Init();
    lib1_gt_EffectJimRaynor_Init();
    lib1_gt_EffectNova_Init();
    lib1_gt_EffectBurrowedAmbush_Init();
    lib1_gt_EffectSpawningPool_Init();
    lib1_gt_EffectRoachWarren_Init();
    lib1_gt_EffectHydraliskDen_Init();
    lib1_gt_EffectSpineCrawlers_Init();
    lib1_gt_EffectSporeCrawlers_Init();
    lib1_gt_EffectMetabolicBoost_Init();
    lib1_gt_EffectGroovedSpines_Init();
    lib1_gt_EffectBindingCreep_Init();
    lib1_gt_EffectLarvalQueen_Init();
    lib1_gt_EffectExcretingOverseer_Init();
    lib1_gt_EffectBanelingNest_Init();
    lib1_gt_EffectSpire_Init();
    lib1_gt_EffectExtractor_Init();
    lib1_gt_EffectEvolutionChamber_Init();
    lib1_gt_EffectEvolutionChamberEffect_Init();
    lib1_gt_EffectInjectLarva_Init();
    lib1_gt_EffectTunnelingRoaches_Init();
    lib1_gt_EffectParasiticVipers_Init();
    lib1_gt_EffectBanelingBombs_Init();
    lib1_gt_EffectUltraliskCavern_Init();
    lib1_gt_EffectNydusNetwork_Init();
    lib1_gt_EffectGreaterSpire_Init();
    lib1_gt_EffectMassMutation_Init();
    lib1_gt_EffectNeuralParasite_Init();
    lib1_gt_EffectZagara_Init();
    lib1_gt_EffectKerrigan_Init();
    lib1_gt_EffectDehaka_Init();
    lib1_gt_EffectSiegingRavagers_Init();
    lib1_gt_EffectGateway_Init();
    lib1_gt_EffectPhotonCannons_Init();
    lib1_gt_EffectShieldBatteries_Init();
    lib1_gt_EffectPylonStructure_Init();
    lib1_gt_EffectPylonDrawWarpIn_Init();
    lib1_gt_EffectPsionicStorm_Init();
    lib1_gt_EffectGravitonBeam_Init();
    lib1_gt_EffectStasisWards_Init();
    lib1_gt_EffectHallucinationSentries_Init();
    lib1_gt_EffectWarpProbe_Init();
    lib1_gt_EffectCarrier_Init();
    lib1_gt_EffectShieldingSentries_Init();
    lib1_gt_EffectDiscerningOracles_Init();
    lib1_gt_EffectInfiltratingAdepts_Init();
    lib1_gt_EffectNerazimAssassins_Init();
    lib1_gt_EffectStargate_Init();
    lib1_gt_EffectForge_Init();
    lib1_gt_EffectForgeEffect_Init();
    lib1_gt_EffectCyberneticsCore_Init();
    lib1_gt_EffectAssimilator_Init();
    lib1_gt_EffectTwilightCouncil_Init();
    lib1_gt_EffectTwilightCouncilPeriodicShuffle_Init();
    lib1_gt_EffectFeedback_Init();
    lib1_gt_EffectPhotonOvercharge_Init();
    lib1_gt_EffectWarpGate_Init();
    lib1_gt_EffectGoldenArmada_Init();
    lib1_gt_EffectMergingArchons_Init();
    lib1_gt_EffectWarpOffensive_Init();
    lib1_gt_EffectRoboticsFacility_Init();
    lib1_gt_EffectFleetBeacon_Init();
    lib1_gt_EffectTemplarArchives_Init();
    lib1_gt_EffectDarkShrine_Init();
    lib1_gt_EffectVortex_Init();
    lib1_gt_EffectReplicate_Init();
    lib1_gt_EffectKarax_Init();
    lib1_gt_EffectZeratul_Init();
    lib1_gt_EffectArtanis_Init();
    lib1_gt_EffectMothershipCore_Init();
    lib1_gt_EffectCanisterRifleNovaOps_Init();
    lib1_gt_EffectHellfireShotgunNovaOps_Init();
    lib1_gt_EffectStealthSuitNovaOps_Init();
    lib1_gt_EffectAssaultSuitNovaOps_Init();
    lib1_gt_EffectVanishNovaOps_Init();
    lib1_gt_EffectFlashbangGrenadeNovaOps_Init();
    lib1_gt_EffectSwarmThemHiveMind_Init();
    lib1_gt_EffectDefendtheHiveHiveMind_Init();
    lib1_gt_EffectSetanAmbushHiveMind_Init();
    lib1_gt_EffectMothership_Init();
    lib1_gt_OdinDies_Init();
    lib1_gt_NovaDies_Init();
    lib1_gt_HandLimitUnitDies_Init();
    lib1_gt_CyberneticsRevive_Init();
    lib1_gt_MothershipCoreDies_Init();
    lib1_gt_AssassinKills_Init();
    lib1_gt_LegacySet_Init();
    lib1_gt_LegacyAllRaces_Init();
    lib1_gt_EffectOrbitalCommand_Init();
    lib1_gt_EffectDesperateOffensive_Init();
    lib1_gt_EffectBrutalisk_Init();
    lib1_gt_EffectLeapingRaptors_Init();
    lib1_gt_EffectInfestationPit_Init();
    lib1_gt_EffectChronoProbe_Init();
    lib1_gt_EffectPhotonArray_Init();
    lib1_gt_EffectUndyingStalker_Init();
    lib1_gt_InfestedDies_Init();
    lib1_gt_UndyingUnitDies_Init();
    lib1_gt_FirstContactSet_Init();
    lib1_gt_FirstContactTerran_Init();
    lib1_gt_FirstContactZerg_Init();
    lib1_gt_FirstContactProtoss_Init();
    lib1_gt_FirstContactUncollectible_Init();
    lib1_gt_EffectRiot1_Init();
    lib1_gt_EffectRiot2_Init();
    lib1_gt_EffectRiot3_Init();
    lib1_gt_EffectRiot4_Init();
    lib1_gt_EffectReconSquad_Init();
    lib1_gt_EffectTarsonisTurrets_Init();
    lib1_gt_EffectBadlandsGarage_Init();
    lib1_gt_EffectSpiderMinefield_Init();
    lib1_gt_EffectIrradiate_Init();
    lib1_gt_EffectScienceVessels_Init();
    lib1_gt_EffectTarsonisSecurity_Init();
    lib1_gt_EffectResearchFacility_Init();
    lib1_gt_EffectCouncilCorruption_Init();
    lib1_gt_EffectMachineShop_Init();
    lib1_gt_Effect22ndDivision_Init();
    lib1_gt_EffectGhostAcademy_Init();
    lib1_gt_EffectBackwaterStationDiscardFromHand_Init();
    lib1_gt_EffectBackwaterStationDiscardFromDeck_Init();
    lib1_gt_EffectKorhalsDestruction_Init();
    lib1_gt_EffectResocialization_Init();
    lib1_gt_EffectNoradII_Init();
    lib1_gt_EffectKerriganAssassin_Init();
    lib1_gt_EffectRaynorRebel_Init();
    lib1_gt_EffectSunkenColony_Init();
    lib1_gt_EffectFlyerCarapace_Init();
    lib1_gt_EffectChitinousPlating_Init();
    lib1_gt_EffectDuneRunnerDNA_Init();
    lib1_gt_EffectAcidicSpire_Init();
    lib1_gt_EffectAerialInvasion_Init();
    lib1_gt_EffectEscapedExperiments_Init();
    lib1_gt_EffectMetasynapticNode_Init();
    lib1_gt_EffectSlothienDNA_Init();
    lib1_gt_EffectBlackentheSky_Init();
    lib1_gt_EffectCreepColony_Init();
    lib1_gt_EffectBrontolithDNA_Init();
    lib1_gt_EffectDeepInfestation_Init();
    lib1_gt_EffectOvermind_Init();
    lib1_gt_EffectTorrasque_Init();
    lib1_gt_EffectKerrigansChrysalis_Init();
    lib1_gt_EffectPsiMatrix_Init();
    lib1_gt_EffectAiurGateway_Init();
    lib1_gt_EffectCloakingField_Init();
    lib1_gt_EffectCharge_Init();
    lib1_gt_EffectStasisField_Init();
    lib1_gt_EffectPlanetarySurveyor_Init();
    lib1_gt_EffectReaverAdvance_Init();
    lib1_gt_EffectWarRobotics_Init();
    lib1_gt_EffectShieldMatrix_Init();
    lib1_gt_EffectMassRecall_Init();
    lib1_gt_EffectStructuralStasis_Init();
    lib1_gt_EffectRecallSuits_Init();
    lib1_gt_EffectGatheringStorm_Init();
    lib1_gt_EffectRoboticsBay_Init();
    lib1_gt_EffectConclaveDirective_Init();
    lib1_gt_EffectPlanetCracker_Init();
    lib1_gt_EffectPraetorFenix_Init();
    lib1_gt_EffectGantrithor_Init();
    lib1_gt_EffectTassadarInitialization_Init();
    lib1_gt_EffectRiot_Init();
    lib1_gt_EffectInfestation_Init();
    lib1_gt_Effect22ndReinforcements_Init();
    lib1_gt_EffectSpiderMines_Init();
    lib1_gt_EffectZerglingResearch_Init();
    lib1_gt_EffectHydraliskResearch_Init();
    lib1_gt_EffectDefilerResearch_Init();
    lib1_gt_EffectTassadarPeriodicEffect_Init();
    lib1_gt_PersonalRecallRevive_Init();
    lib1_gt_TorrasqueDeath_Init();
    lib1_gt_PraetorFenixDeath_Init();
    lib1_gt_CommanderDies_Init();
    lib1_gt_UnnaturalExperimentsSet_Init();
    lib1_gt_UnnaturalExperimentsPromo_Init();
    lib1_gt_UnnaturalExperimentsTerran_Init();
    lib1_gt_UnnaturalExperimentsZerg_Init();
    lib1_gt_UnnaturalExperimentsProtoss_Init();
    lib1_gt_UnnaturalExperimentsUncollectible_Init();
    lib1_gt_EffectPhysicsLab_Init();
    lib1_gt_EffectMoebius_Init();
    lib1_gt_EffectTerrazineCanister_Init();
    lib1_gt_EffectLoadedValkyrie_Init();
    lib1_gt_EffectProtossRelicCard_Init();
    lib1_gt_EffectProtossRelicCost_Init();
    lib1_gt_EffectMoebiusSearchCrew_Init();
    lib1_gt_EffectDigForArtifacts_Init();
    lib1_gt_EffectOldPsiDisruptor_Init();
    lib1_gt_EffectDefensiveMatrix_Init();
    lib1_gt_EffectSecretHangar_Init();
    lib1_gt_EffectNarudsCreations_Init();
    lib1_gt_EffectInterferenceMatrix_Init();
    lib1_gt_EffectEgonStetmann_Init();
    lib1_gt_EffectStetmannAddict_Init();
    lib1_gt_EffectMoebiusHybrid_Init();
    lib1_gt_EffectBehemothICannons_Init();
    lib1_gt_EffectBehemothIICannons_Init();
    lib1_gt_EffectLaboratorySuppliesMakeCards_Init();
    lib1_gt_EffectLaboratorySuppliesBuild_Init();
    lib1_gt_EffectCloakedAirstrike_Init();
    lib1_gt_EffectUndergroundBase_Init();
    lib1_gt_EffectExplosiveMutagen_Init();
    lib1_gt_EffectBloatedDevourer_Init();
    lib1_gt_EffectSwellingEggs_Init();
    lib1_gt_EffectOminousEgg_Init();
    lib1_gt_EffectMysteriousEgg_Init();
    lib1_gt_EffectHybridReaver_Init();
    lib1_gt_EffectHybridBehemoth_Init();
    lib1_gt_EffectAberration_Init();
    lib1_gt_EffectAbathursEvolution_Init();
    lib1_gt_EffectBroodlingGestation_Init();
    lib1_gt_EffectMutable_Init();
    lib1_gt_EffectMutableMorph_Init();
    lib1_gt_EffectMutationChamber_Init();
    lib1_gt_EffectMutationChamberPeriodicEffect_Init();
    lib1_gt_EffectHybridNemesis_Init();
    lib1_gt_EffectVoidRiftIncomeLimitSet_Init();
    lib1_gt_EffectVoidRiftGasBoost_Init();
    lib1_gt_EffectPilotedCorsair_Init();
    lib1_gt_EffectVoidShades_Init();
    lib1_gt_EffectHybridDestroyers_Init();
    lib1_gt_EffectEnduringStasisAbility_Init();
    lib1_gt_EffectEnduringStasisDraw_Init();
    lib1_gt_EffectKaraxsInvention_Init();
    lib1_gt_EffectMurderousAscendance_Init();
    lib1_gt_EffectHybridDominator_Init();
    lib1_gt_EffectMalashInitialization_Init();
    lib1_gt_EffectMalashPeriodicEffect_Init();
    lib1_gt_EffectPsionicOrb_Init();
    lib1_gt_EffectWarpStargate_Init();
    lib1_gt_EffectVoidGate_Init();
    lib1_gt_EffectArgusCrystal_Init();
    lib1_gt_EffectEnergyCrystal_Init();
    lib1_gt_EffectEnergyCrystalEnergy_Init();
    lib1_gt_EffectAmonDiscard_Init();
    lib1_gt_EffectAmonDraw_Init();
    lib1_gt_EffectVoidArmy_Init();
    lib1_gt_ArgusCrystalDies_Init();
    lib1_gt_DesperateAlliancesSet_Init();
    lib1_gt_DesperateAlliancesPromo_Init();
    lib1_gt_DesperateAlliancesMixed_Init();
    lib1_gt_DesperateAlliancesTerran_Init();
    lib1_gt_DesperateAlliancesZerg_Init();
    lib1_gt_DesperateAlliancesProtoss_Init();
    lib1_gt_DesperateAlliancesUncollectible_Init();
    lib1_gt_EffectFromtheShadows_Init();
    lib1_gt_EffectDeadlySaboteurs_Init();
    lib1_gt_EffectFenixandRaynor_Init();
    lib1_gt_EffectFearlessRaiders_Init();
    lib1_gt_EffectKerriganandRaszagal_Init();
    lib1_gt_EffectSamirDuran_Init();
    lib1_gt_EffectProjectBlackFlag_Init();
    lib1_gt_EffectPsionicBlackout_Init();
    lib1_gt_EffectKorhalGarrison_Init();
    lib1_gt_EffectAirSupport_Init();
    lib1_gt_EffectTheIronFist_Init();
    lib1_gt_EffectEscapeShuttle_Init();
    lib1_gt_EffectPsiEmitter_Init();
    lib1_gt_PsiEmitterSCVDies_Init();
    lib1_gt_EffectOrbitalSupplyDropOverdrawPrevention_Init();
    lib1_gt_EffectOrbitalSupplyDropDraw_Init();
    lib1_gt_EffectRaidersCache_Init();
    lib1_gt_EffectAtlasWing_Init();
    lib1_gt_EffectCronusWing_Init();
    lib1_gt_EffectConfederateLoyalists_Init();
    lib1_gt_EffectColonialConscriptsHandDiscard_Init();
    lib1_gt_EffectColonialConscriptsHandAdd_Init();
    lib1_gt_EffectColonialConscriptsDeck_Init();
    lib1_gt_EffectFuelRaidRemoval_Init();
    lib1_gt_EffectFuelRaidVespeneBarrel_Init();
    lib1_gt_EffectCommandeerRemoval_Init();
    lib1_gt_EffectCommandeerDeckAdditions_Init();
    lib1_gt_EffectNeurostimDrugs_Init();
    lib1_gt_EffectBurningOutpost_Init();
    lib1_gt_EffectCombatDrugs_Init();
    lib1_gt_EffectLtMorales_Init();
    lib1_gt_EffectEMP_Init();
    lib1_gt_EffectRegroup_Init();
    lib1_gt_EffectCarapaceContagion_Init();
    lib1_gt_EffectSavageContagion_Init();
    lib1_gt_EffectEnsnaringQueen_Init();
    lib1_gt_EffectMurderousClaws_Init();
    lib1_gt_EffectPatientKillers_Init();
    lib1_gt_EffectBurrowedSwarm_Init();
    lib1_gt_EffectTrueColors_Init();
    lib1_gt_EffectOverlordNetwork_Init();
    lib1_gt_EffectLurkerAdvance_Init();
    lib1_gt_EffectDevouringOne_Init();
    lib1_gt_EffectSuddenBetrayal_Init();
    lib1_gt_EffectPlaguebringer_Init();
    lib1_gt_EffectConsumeDiscard_Init();
    lib1_gt_EffectConsumeBuff_Init();
    lib1_gt_EffectScourgeBurst_Init();
    lib1_gt_EffectSpawnBroodlings_Init();
    lib1_gt_EffectLurkerDen_Init();
    lib1_gt_EffectANewHomeworld_Init();
    lib1_gt_EffectChronoWave_Init();
    lib1_gt_EffectTalematrosGridFetch_Init();
    lib1_gt_EffectTalematrosGridBuild_Init();
    lib1_gt_EffectDaelaamArchitects_Init();
    lib1_gt_EffectDragoonShrine_Init();
    lib1_gt_EffectArtanisFounder_Init();
    lib1_gt_EffectDisruptionWeb_Init();
    lib1_gt_EffectMaelstrom_Init();
    lib1_gt_EffectMindControl_Init();
    lib1_gt_EffectDarkArchonMaelstrom_Init();
    lib1_gt_EffectDarkArchonFeedback_Init();
    lib1_gt_EffectDarkArchonMindControl_Init();
    lib1_gt_EffectAugmentationRecall_Init();
    lib1_gt_EffectTassadarsDisciples_Init();
    lib1_gt_EffectPoweredGates_Init();
    lib1_gt_EffectShadowWalk_Init();
    lib1_gt_EffectArchonofJustice_Init();
    lib1_gt_EffectAldarisInsurgent_Init();
    lib1_gt_EffectRepairStation_Init();
    lib1_gt_InitializeCosmeticTrophies_Init();
    lib1_gt_InitializeCosmeticPets_Init();
    lib1_gt_InitializeCosmeticDecorations_Init();
    lib1_gt_InitializeCosmeticStore_Init();
    lib1_gt_Initialization_Init();
    lib1_gt_PlayerLeaves_Init();
    lib1_gt_FixDefaultGUI_Init();
    lib1_gt_ShowDamageText_Init();
    lib1_gt_HoverTimerExpires_Init();
    lib1_gt_ShiftKeyUp_Init();
    lib1_gt_ShiftKeyDown_Init();
    lib1_gt_SelectCardPlanningPhase_Init();
    lib1_gt_SelectCardPlayPhase_Init();
    lib1_gt_MouseEnterCard_Init();
    lib1_gt_MouseExitCard_Init();
    lib1_gt_SelectResource_Init();
    lib1_gt_EndPhaseButtonResponse_Init();
    lib1_gt_MouseEnterChooseResource_Init();
    lib1_gt_MouseExitChooseResource_Init();
    lib1_gt_ClickUnit_Init();
    lib1_gt_Fatigue_Init();
    lib1_gt_PhaseEnds_Init();
    lib1_gt_PlayPhaseLoop_Init();
    lib1_gt_UpdateTimer_Init();
    lib1_gt_GasProducerDies_Init();
    lib1_gt_TutorialButtonResponse_Init();
    lib1_gt_UnitDies_Init();
    lib1_gt_UnitEntersDefensiveArea_Init();
    lib1_gt_DamageResponse_Init();
    lib1_gt_AttackResponse_Init();
    lib1_gt_UnitisCreated_Init();
    lib1_gt_UnitFinishesTraining_Init();
    lib1_gt_UnitFinishesConstruction_Init();
    lib1_gt_MothershipStartsUpgrading_Init();
    lib1_gt_MothershipFinishesUpgrading_Init();
    lib1_gt_AdeptFinishesTransferring_Init();
    lib1_gt_TacticalRetreat_Init();
    lib1_gt_DefensiveRetreat_Init();
    lib1_gt_Cleanup_Init();
    lib1_gt_WaitingUnitFinishesCasting_Init();
    lib1_gt_UnloadCargo_Init();
    lib1_gt_LoadCargo_Init();
    lib1_gt_CleanupAirSupportBC_Init();
    lib1_gt_StructureDies_Init();
    lib1_gt_StructureUnitPushFail_Init();
    lib1_gt_StructureBuildFailAny_Init();
    lib1_gt_StructureBuildFinish_Init();
    lib1_gt_StructureBuildStart_Init();
    lib1_gt_SupplyDepotDies_Init();
    lib1_gt_TrackDamage_Init();
    lib1_gt_TrackKills_Init();
    lib1_gt_TrackCreated_Init();
    lib1_gt_PreventLinkEditing_Init();
    lib1_gt_CollectionPageUpdateLoop_Init();
    lib1_gt_ExitRewardScreenButtonResponse_Init();
    lib1_gt_ExitNewPlayerRewardScreenButtonResponse_Init();
    lib1_gt_MainMenuCollectionButtonResponse_Init();
    lib1_gt_MainMenuStoreButtonResponse_Init();
    lib1_gt_MainMenuStatsPageButtonResponse_Init();
    lib1_gt_MainMenuCosmeticsPageButtonResponse_Init();
    lib1_gt_BacktoMainMenuClicked_Init();
    lib1_gt_LeftArrowKeyPressed_Init();
    lib1_gt_RightArrowKeyPressed_Init();
    lib1_gt_UpArrowKeyPressed_Init();
    lib1_gt_DownArrowKeyPressed_Init();
    lib1_gt_LeftCollectionArrowMouseEnter_Init();
    lib1_gt_RightCollectionArrowMouseEnter_Init();
    lib1_gt_LeftCollectionArrowMouseExit_Init();
    lib1_gt_RightCollectionArrowMouseExit_Init();
    lib1_gt_LeftCollectionArrowClick_Init();
    lib1_gt_RightCollectionArrowClick_Init();
    lib1_gt_UpDeckArrowMouseEnter_Init();
    lib1_gt_DownDeckArrowMouseEnter_Init();
    lib1_gt_UpDeckArrowMouseExit_Init();
    lib1_gt_DownDeckArrowMouseExit_Init();
    lib1_gt_UpDeckArrowClick_Init();
    lib1_gt_DownDeckArrowClick_Init();
    lib1_gt_TotalCostFilterClick_Init();
    lib1_gt_TextFilterInput_Init();
    lib1_gt_SearchButtonMouseEnter_Init();
    lib1_gt_SearchButtonMouseExit_Init();
    lib1_gt_SearchButtonMouseClick_Init();
    lib1_gt_CraftingButtonMouseClick_Init();
    lib1_gt_CollectionCardClicked_Init();
    lib1_gt_CollectionCardStartHover_Init();
    lib1_gt_CollectionCardStopHover_Init();
    lib1_gt_CraftCard_Init();
    lib1_gt_DestroyCard_Init();
    lib1_gt_DecklistCardClicked_Init();
    lib1_gt_ChangeDecksClicked_Init();
    lib1_gt_SaveDeck_Init();
    lib1_gt_EditDeckNameMouseEnter_Init();
    lib1_gt_EditDeckNameMouseExit_Init();
    lib1_gt_EditDeckNameClick_Init();
    lib1_gt_SaveDeckNameMouseEnter_Init();
    lib1_gt_SaveDeckNameMouseExit_Init();
    lib1_gt_SaveDeckNameClick_Init();
    lib1_gt_PlayerTypesDeckName_Init();
    lib1_gt_DecklistClicked_Init();
    lib1_gt_MouseEnterDecklist_Init();
    lib1_gt_MouseExitDecklist_Init();
    lib1_gt_MouseEnterDecklistDelete_Init();
    lib1_gt_MouseExitDecklistDelete_Init();
    lib1_gt_MouseClickDecklistDelete_Init();
    lib1_gt_MouseEnterRibbon_Init();
    lib1_gt_MouseExitRibbon_Init();
    lib1_gt_MouseClickRibbon_Init();
    lib1_gt_MouseEnterAddDeck_Init();
    lib1_gt_MouseExitAddDeck_Init();
    lib1_gt_MouseClickAddDeck_Init();
    lib1_gt_BuyPackButtonClick_Init();
    lib1_gt_BacktoStoreClicked_Init();
    lib1_gt_LeftPackArrow_Init();
    lib1_gt_RightPackArrow_Init();
    lib1_gt_LeftPackArrowMouseEnter_Init();
    lib1_gt_LeftPackArrowMouseExit_Init();
    lib1_gt_RightPackArrowMouseEnter_Init();
    lib1_gt_RightPackArrowMouseExit_Init();
    lib1_gt_OpenTerranStats_Init();
    lib1_gt_OpenZergStats_Init();
    lib1_gt_OpenProtossStats_Init();
    lib1_gt_ResetStats_Init();
    lib1_gt_PressCosmeticButton_Init();
    lib1_gt_LeftTrophyArrow_Init();
    lib1_gt_RightTrophyArrow_Init();
    lib1_gt_LeftTrophyArrowMouseEnter_Init();
    lib1_gt_LeftPetArrowMouseEnter_Init();
    lib1_gt_LeftDecorationArrowMouseEnter_Init();
    lib1_gt_LeftTrophyArrowMouseExit_Init();
    lib1_gt_LeftPetArrowMouseExit_Init();
    lib1_gt_LeftDecorationArrowMouseExit_Init();
    lib1_gt_RightTrophyArrowMouseEnter_Init();
    lib1_gt_RightPetArrowMouseEnter_Init();
    lib1_gt_RightDecorationArrowMouseEnter_Init();
    lib1_gt_RightTrophyArrowMouseExit_Init();
    lib1_gt_RightPetArrowMouseExit_Init();
    lib1_gt_RightDecorationArrowMouseExit_Init();
    lib1_gt_GameEnd_Init();
    lib1_gt_CheckUnitOrigin_Init();
    lib1_gt_FreeCamera_Init();
    lib1_gt_ShowCommand_Init();
    lib1_gt_ToggleDebug_Init();
    lib1_gt_CreateandSaveCorruptedDeck_Init();
    lib1_gt_HandleCorruptedCollection_Init();
    lib1_gt_DecklistCorrupted_Init();
    lib1_gt_RemoveBonus_Init();
    lib1_gt_WinRate_Init();
    lib1_gt_Created_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool lib1_InitLib_completed = false;

void lib1_InitLib () {
    if (lib1_InitLib_completed) {
        return;
    }

    lib1_InitLib_completed = true;

    lib1_InitLibraries();
    lib1_InitVariables();
    lib1_InitTriggers();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    lib1_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
}
