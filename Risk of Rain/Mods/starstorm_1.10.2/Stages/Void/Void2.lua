-- Generated by ProvEdit version 0.1 --
local STAGE_INFO = {
    name = "Void2",
    subname = "",
    width = 1568,
    height = 1584,
    music = ":nothing:"
}

local STAGE_LAYERS = {
    {
        depth = 12,
        sprite = "VoidTileset2",
        origin = "Starstorm",
        tiles = {
            [67] = {
                [65] = {3,2}, [48] = {3,2}, [46] = {1,0}, [64] = {3,1}, [63] = {1,1}, [47] = {1,1}, [62] = {1,0}, 
            },
            [69] = {
                [46] = {1,0}, [63] = {1,2}, [47] = {1,2}, [62] = {1,0}, 
            },
            [63] = {
                [44] = {4,1}, [31] = {1,2}, [48] = {1,2}, [30] = {1,1}, [46] = {1,0}, [64] = {1,2}, [60] = {4,1}, [29] = {1,0}, [63] = {1,1}, [43] = {4,1}, [47] = {1,1}, [45] = {4,1}, [62] = {1,0}, [61] = {4,1}, 
            },
            [65] = {
                [48] = {1,2}, [46] = {1,0}, [64] = {1,2}, [63] = {1,1}, [47] = {1,1}, [45] = {3,3}, [62] = {1,0}, 
            },
            [55] = {
                [65] = {1,1}, [35] = {2,1}, [36] = {1,1}, [34] = {3,1}, [31] = {1,2}, [48] = {2,2}, [30] = {1,1}, [46] = {1,0}, [64] = {1,1}, [60] = {4,1}, [67] = {1,1}, [38] = {3,1}, [37] = {1,1}, [40] = {3,1}, [39] = {3,1}, [29] = {1,0}, [63] = {1,1}, [59] = {4,1}, [69] = {3,2}, [66] = {1,1}, 
                [33] = {3,0}, [41] = {3,2}, [47] = {1,1}, [45] = {0,3}, [62] = {1,1}, [58] = {4,1}, [68] = {1,1}, [49] = {0,2}, [61] = {1,0}, 
            },
            [59] = {
                [36] = {1,0}, [31] = {1,2}, [48] = {1,1}, [30] = {1,1}, [46] = {1,0}, [52] = {4,1}, [64] = {3,2}, [37] = {1,2}, [29] = {1,0}, [51] = {4,1}, [63] = {1,1}, [47] = {1,1}, [54] = {4,1}, [62] = {1,0}, [53] = {4,1}, [49] = {3,2}, [61] = {3,0}, 
            },
            [47] = {
                [70] = {1,1}, [65] = {1,1}, [78] = {0,2}, [35] = {2,0}, [73] = {1,1}, [36] = {1,1}, [34] = {0,1}, [31] = {1,1}, [30] = {1,1}, [46] = {3,0}, [32] = {1,1}, [64] = {1,1}, [72] = {1,1}, [67] = {1,1}, [75] = {1,1}, [38] = {1,2}, [37] = {1,1}, [29] = {1,0}, [63] = {1,1}, [69] = {1,1}, 
                [66] = {1,1}, [77] = {2,2}, [74] = {1,1}, [33] = {2,2}, [47] = {3,2}, [62] = {1,0}, [71] = {1,1}, [68] = {1,1}, [76] = {1,1}, 
            },
            [51] = {
                [70] = {1,1}, [65] = {1,1}, [78] = {3,2}, [35] = {1,1}, [73] = {1,1}, [86] = {3,2}, [81] = {3,0}, [36] = {1,1}, [34] = {1,1}, [31] = {2,2}, [30] = {1,1}, [46] = {1,0}, [32] = {0,1}, [64] = {1,1}, [72] = {1,1}, [67] = {1,1}, [75] = {1,1}, [83] = {3,1}, [38] = {2,2}, [37] = {1,1}, 
                [40] = {0,2}, [39] = {0,1}, [29] = {1,0}, [63] = {1,1}, [69] = {1,1}, [66] = {1,1}, [77] = {1,1}, [74] = {1,1}, [85] = {3,1}, [82] = {3,1}, [33] = {2,0}, [47] = {1,2}, [62] = {1,0}, [71] = {1,1}, [68] = {1,1}, [76] = {1,1}, [84] = {3,1}, 
            },
            [41] = {
                [22] = {1,1}, [65] = {0,2}, [24] = {1,1}, [36] = {0,0}, [20] = {1,0}, [31] = {1,2}, [48] = {1,2}, [30] = {1,1}, [46] = {1,0}, [64] = {2,2}, [37] = {0,2}, [28] = {1,1}, [29] = {1,1}, [63] = {1,1}, [26] = {1,1}, [27] = {1,1}, [23] = {1,1}, [25] = {1,1}, [21] = {1,1}, [47] = {1,1}, 
                [45] = {1,3}, [62] = {1,1}, [61] = {1,0}, 
            },
            [46] = {
                [70] = {0,1}, [22] = {4,1}, [65] = {1,1}, [35] = {1,0}, [24] = {4,1}, [73] = {0,1}, [36] = {1,1}, [31] = {1,1}, [48] = {3,2}, [30] = {1,1}, [46] = {1,0}, [32] = {2,2}, [64] = {1,1}, [60] = {4,1}, [72] = {2,2}, [67] = {1,1}, [75] = {0,1}, [38] = {1,2}, [37] = {1,1}, [28] = {4,1}, 
                [29] = {1,0}, [63] = {1,1}, [26] = {4,1}, [27] = {4,1}, [23] = {4,1}, [69] = {2,2}, [66] = {1,1}, [25] = {4,1}, [77] = {0,2}, [74] = {0,1}, [21] = {4,1}, [33] = {0,2}, [47] = {1,1}, [45] = {1,3}, [62] = {1,0}, [71] = {2,0}, [68] = {1,1}, [76] = {0,1}, 
            },
            [33] = {
                [60] = {1,0}, [63] = {0,2}, [62] = {2,2}, [61] = {1,1}, 
            },
            [38] = {
                [24] = {4,1}, [31] = {1,2}, [30] = {1,1}, [64] = {0,2}, [60] = {3,0}, [28] = {1,1}, [29] = {1,1}, [26] = {4,1}, [63] = {2,2}, [27] = {1,0}, [23] = {4,1}, [25] = {4,1}, [62] = {1,1}, [61] = {1,0}, 
            },
            [30] = {
                [60] = {1,0}, [62] = {1,2}, [61] = {1,1}, 
            },
            [56] = {
                [65] = {1,1}, [35] = {3,0}, [36] = {2,1}, [34] = {1,3}, [31] = {1,2}, [48] = {1,1}, [30] = {1,1}, [46] = {1,0}, [64] = {1,1}, [67] = {3,1}, [37] = {1,2}, [28] = {4,1}, [29] = {1,0}, [63] = {1,1}, [26] = {4,1}, [27] = {4,1}, [66] = {3,1}, [47] = {1,1}, [45] = {1,3}, [50] = {0,2}, 
                [62] = {1,1}, [68] = {3,2}, [49] = {2,2}, [61] = {1,0}, 
            },
            [60] = {
                [36] = {1,0}, [31] = {1,2}, [48] = {1,2}, [30] = {1,1}, [46] = {1,0}, [37] = {1,2}, [29] = {1,0}, [63] = {1,2}, [47] = {1,1}, [45] = {4,3}, [62] = {1,0}, 
            },
            [48] = {
                [70] = {1,1}, [65] = {1,1}, [78] = {2,2}, [35] = {1,1}, [73] = {1,1}, [36] = {1,1}, [34] = {1,1}, [31] = {1,1}, [30] = {1,1}, [32] = {1,1}, [64] = {1,1}, [72] = {1,1}, [67] = {1,1}, [80] = {0,2}, [75] = {1,1}, [38] = {1,2}, [37] = {1,1}, [28] = {4,1}, [29] = {1,0}, [63] = {1,1}, 
                [69] = {1,1}, [66] = {1,1}, [77] = {1,1}, [74] = {1,1}, [33] = {1,1}, [62] = {1,0}, [71] = {1,1}, [68] = {1,1}, [79] = {0,1}, [76] = {1,1}, 
            },
            [52] = {
                [70] = {1,1}, [65] = {1,1}, [35] = {1,1}, [73] = {1,1}, [36] = {1,1}, [34] = {1,1}, [31] = {1,1}, [30] = {1,1}, [46] = {1,0}, [32] = {1,1}, [64] = {1,1}, [72] = {1,1}, [67] = {1,1}, [75] = {1,1}, [38] = {1,1}, [37] = {1,1}, [40] = {2,2}, [39] = {1,1}, [29] = {1,0}, [63] = {1,1}, 
                [69] = {1,1}, [66] = {1,1}, [77] = {3,2}, [74] = {1,1}, [33] = {1,1}, [41] = {0,2}, [47] = {1,2}, [62] = {1,0}, [71] = {1,1}, [68] = {1,1}, [76] = {3,1}, 
            },
            [39] = {
                [31] = {1,2}, [30] = {1,1}, [64] = {1,2}, [28] = {1,1}, [29] = {1,1}, [63] = {1,1}, [27] = {1,0}, [62] = {1,1}, [61] = {1,0}, 
            },
            [44] = {
                [65] = {1,1}, [35] = {1,0}, [36] = {1,1}, [34] = {4,3}, [44] = {4,1}, [31] = {2,2}, [48] = {1,2}, [30] = {1,1}, [46] = {1,0}, [32] = {0,2}, [64] = {1,1}, [67] = {2,2}, [38] = {0,2}, [37] = {2,2}, [28] = {0,3}, [29] = {1,0}, [63] = {1,1}, [66] = {1,1}, [47] = {1,1}, [45] = {4,1}, 
                [62] = {1,0}, [68] = {0,2}, 
            },
            [31] = {
                [60] = {1,0}, [62] = {1,2}, [61] = {1,1}, 
            },
            [36] = {
                [31] = {0,2}, [30] = {2,2}, [64] = {3,2}, [60] = {1,0}, [28] = {1,1}, [29] = {1,1}, [26] = {2,3}, [63] = {1,1}, [27] = {1,0}, [59] = {4,2}, [62] = {1,1}, [61] = {1,1}, 
            },
            [28] = {
                [60] = {0,0}, [61] = {0,2}, 
            },
            [71] = {
                [46] = {1,0}, [63] = {3,2}, [47] = {1,2}, [45] = {4,3}, [62] = {3,0}, 
            },
            [72] = {
                [46] = {3,0}, [47] = {3,2}, 
            },
            [68] = {
                [46] = {1,0}, [63] = {1,2}, [47] = {1,2}, [62] = {1,0}, 
            },
            [70] = {
                [46] = {1,0}, [56] = {4,1}, [60] = {4,1}, [63] = {1,2}, [59] = {4,1}, [47] = {1,2}, [45] = {4,1}, [62] = {1,0}, [58] = {4,1}, [61] = {4,1}, [57] = {4,1}, 
            },
            [64] = {
                [31] = {3,2}, [48] = {1,2}, [30] = {3,1}, [46] = {1,0}, [64] = {1,2}, [29] = {3,0}, [63] = {1,1}, [47] = {1,1}, [62] = {1,0}, 
            },
            [66] = {
                [65] = {0,2}, [48] = {1,2}, [46] = {1,0}, [64] = {2,2}, [63] = {1,1}, [47] = {1,1}, [45] = {4,3}, [62] = {1,0}, 
            },
            [57] = {
                [65] = {1,2}, [36] = {1,0}, [31] = {1,2}, [48] = {1,1}, [30] = {1,1}, [46] = {1,0}, [56] = {4,1}, [52] = {4,1}, [64] = {1,1}, [37] = {1,2}, [55] = {4,1}, [29] = {1,0}, [63] = {1,1}, [47] = {1,1}, [54] = {4,1}, [50] = {1,2}, [62] = {2,1}, [53] = {4,1}, [49] = {1,1}, [61] = {1,0}, 
                [57] = {4,1}, 
            },
            [61] = {
                [35] = {4,2}, [36] = {1,0}, [31] = {1,2}, [48] = {1,2}, [30] = {1,1}, [46] = {1,0}, [64] = {0,2}, [38] = {0,2}, [37] = {2,2}, [28] = {3,3}, [29] = {1,0}, [63] = {2,2}, [47] = {1,1}, [62] = {1,0}, [61] = {1,3}, 
            },
            [49] = {
                [70] = {1,1}, [65] = {1,1}, [78] = {1,1}, [35] = {1,1}, [73] = {1,1}, [86] = {0,1}, [81] = {0,1}, [36] = {1,1}, [34] = {1,1}, [31] = {1,1}, [30] = {1,1}, [46] = {0,0}, [32] = {3,1}, [64] = {1,1}, [72] = {1,1}, [67] = {1,1}, [80] = {2,2}, [75] = {1,1}, [88] = {0,2}, [83] = {0,1}, 
                [38] = {1,2}, [37] = {1,1}, [40] = {4,1}, [39] = {4,1}, [29] = {1,0}, [63] = {1,1}, [69] = {1,1}, [66] = {1,1}, [77] = {1,1}, [74] = {1,1}, [85] = {0,1}, [82] = {0,1}, [33] = {2,1}, [47] = {0,2}, [45] = {4,3}, [62] = {1,0}, [71] = {1,1}, [68] = {1,1}, [79] = {1,1}, [76] = {1,1}, 
                [87] = {0,1}, [84] = {0,1}, 
            },
            [53] = {
                [70] = {1,1}, [65] = {1,1}, [35] = {1,1}, [73] = {3,1}, [36] = {1,1}, [34] = {1,1}, [31] = {1,1}, [48] = {0,2}, [30] = {1,1}, [46] = {1,0}, [32] = {1,1}, [64] = {1,1}, [72] = {1,1}, [67] = {1,1}, [75] = {3,2}, [38] = {1,1}, [37] = {1,1}, [40] = {1,1}, [39] = {1,1}, [29] = {1,0}, 
                [63] = {1,1}, [69] = {1,1}, [66] = {1,1}, [74] = {3,1}, [33] = {1,1}, [41] = {1,2}, [47] = {2,2}, [62] = {1,0}, [71] = {1,1}, [68] = {1,1}, 
            },
            [42] = {
                [22] = {3,1}, [65] = {1,2}, [35] = {0,0}, [24] = {2,1}, [36] = {2,0}, [20] = {3,0}, [31] = {1,2}, [48] = {1,2}, [30] = {1,1}, [46] = {1,0}, [56] = {4,1}, [64] = {1,1}, [60] = {4,1}, [37] = {1,2}, [28] = {1,1}, [55] = {4,1}, [29] = {1,1}, [63] = {1,1}, [26] = {1,1}, [27] = {1,1}, 
                [59] = {4,1}, [23] = {3,1}, [25] = {1,1}, [19] = {2,3}, [21] = {3,1}, [47] = {1,1}, [54] = {4,1}, [62] = {1,1}, [58] = {4,1}, [61] = {1,0}, [57] = {4,1}, 
            },
            [45] = {
                [65] = {1,1}, [35] = {1,0}, [36] = {1,1}, [34] = {2,3}, [31] = {1,1}, [48] = {1,2}, [30] = {1,1}, [46] = {1,0}, [32] = {1,2}, [64] = {1,1}, [72] = {0,2}, [67] = {1,1}, [38] = {1,2}, [37] = {1,1}, [29] = {1,0}, [63] = {1,1}, [69] = {0,2}, [66] = {1,1}, [47] = {1,1}, [45] = {2,3}, 
                [62] = {1,0}, [71] = {0,0}, [68] = {2,2}, 
            },
            [34] = {
                [64] = {0,2}, [60] = {1,0}, [63] = {2,2}, [62] = {1,1}, [61] = {1,1}, 
            },
            [37] = {
                [31] = {1,2}, [30] = {1,1}, [60] = {1,0}, [28] = {1,1}, [29] = {1,1}, [26] = {1,3}, [63] = {1,2}, [27] = {1,0}, [59] = {1,3}, [62] = {1,1}, [61] = {1,0}, 
            },
            [29] = {
                [60] = {1,0}, [62] = {0,2}, [61] = {2,2}, 
            },
            [58] = {
                [65] = {3,2}, [35] = {3,3}, [36] = {1,0}, [31] = {1,2}, [48] = {1,1}, [30] = {1,1}, [46] = {1,0}, [56] = {4,1}, [64] = {1,1}, [60] = {4,1}, [37] = {1,2}, [28] = {2,3}, [29] = {1,0}, [63] = {1,1}, [59] = {4,1}, [47] = {1,1}, [50] = {3,2}, [62] = {1,0}, [58] = {4,1}, [49] = {1,1}, 
                [61] = {3,0}, [57] = {4,1}, 
            },
            [62] = {
                [22] = {4,1}, [24] = {4,1}, [36] = {1,0}, [31] = {1,2}, [48] = {1,2}, [30] = {1,1}, [46] = {1,0}, [64] = {1,2}, [38] = {3,2}, [37] = {3,1}, [28] = {4,1}, [29] = {1,0}, [26] = {4,1}, [63] = {1,1}, [27] = {4,1}, [23] = {4,1}, [25] = {4,1}, [21] = {4,1}, [47] = {1,1}, [62] = {1,0}, 
            },
            [50] = {
                [70] = {1,1}, [65] = {1,1}, [78] = {1,1}, [35] = {1,1}, [73] = {1,1}, [86] = {1,1}, [81] = {2,1}, [36] = {1,1}, [34] = {1,1}, [44] = {4,1}, [31] = {1,2}, [30] = {1,1}, [46] = {1,0}, [32] = {3,3}, [64] = {1,1}, [72] = {1,1}, [67] = {1,1}, [80] = {3,1}, [75] = {1,1}, [88] = {3,2}, 
                [83] = {1,1}, [38] = {1,2}, [37] = {1,1}, [28] = {4,2}, [29] = {1,0}, [63] = {1,1}, [69] = {1,1}, [66] = {1,1}, [77] = {1,1}, [74] = {1,1}, [85] = {1,1}, [82] = {1,1}, [33] = {1,0}, [43] = {4,1}, [47] = {1,2}, [45] = {4,1}, [62] = {1,0}, [71] = {1,1}, [68] = {1,1}, [79] = {3,1}, 
                [76] = {1,1}, [87] = {3,1}, [84] = {1,1}, 
            },
            [54] = {
                [70] = {3,1}, [65] = {1,1}, [35] = {1,1}, [36] = {1,1}, [34] = {1,1}, [44] = {4,1}, [31] = {1,1}, [42] = {4,1}, [48] = {1,2}, [30] = {1,1}, [46] = {1,0}, [32] = {3,1}, [64] = {1,1}, [72] = {3,2}, [67] = {1,1}, [38] = {1,1}, [37] = {1,1}, [40] = {1,1}, [39] = {1,1}, [28] = {4,3}, 
                [29] = {1,0}, [63] = {1,1}, [69] = {1,1}, [66] = {1,1}, [33] = {2,1}, [43] = {4,1}, [41] = {1,2}, [47] = {1,1}, [45] = {4,1}, [62] = {1,0}, [71] = {3,1}, [68] = {1,1}, [61] = {1,0}, 
            },
            [40] = {
                [22] = {0,1}, [24] = {0,1}, [20] = {0,0}, [31] = {1,2}, [48] = {0,2}, [30] = {1,1}, [46] = {0,0}, [64] = {1,2}, [28] = {1,1}, [29] = {1,1}, [63] = {1,1}, [26] = {0,1}, [27] = {1,0}, [23] = {0,1}, [25] = {0,1}, [19] = {1,3}, [21] = {0,1}, [47] = {0,1}, [62] = {1,1}, [61] = {1,0}, 
            },
            [43] = {
                [65] = {2,2}, [35] = {1,0}, [24] = {3,0}, [36] = {1,1}, [34] = {4,1}, [31] = {1,2}, [48] = {1,2}, [30] = {1,1}, [46] = {1,0}, [32] = {4,1}, [64] = {1,1}, [60] = {4,1}, [67] = {0,2}, [37] = {1,2}, [28] = {3,1}, [29] = {2,1}, [63] = {1,1}, [26] = {3,1}, [27] = {3,1}, [23] = {3,3}, 
                [66] = {0,1}, [25] = {3,1}, [33] = {4,1}, [47] = {1,1}, [62] = {1,1}, [61] = {0,0}, 
            },
            [32] = {
                [60] = {1,0}, [59] = {4,3}, [62] = {1,2}, [61] = {1,1}, 
            },
            [35] = {
                [30] = {0,2}, [64] = {1,2}, [60] = {1,0}, [28] = {0,1}, [29] = {0,1}, [26] = {4,1}, [63] = {1,1}, [27] = {0,0}, [62] = {1,1}, [61] = {1,1}, 
            },
        }
    },
    {
        depth = 11,
        sprite = "VoidTileset2",
        origin = "Starstorm",
        tiles = {
            [65] = {
                [65] = {2,2}, [48] = {4,1}, [52] = {4,1}, [64] = {1,1}, [67] = {0,1}, [51] = {4,1}, [63] = {1,0}, [69] = {0,2}, [66] = {0,1}, [50] = {4,1}, [68] = {0,1}, [49] = {4,1}, 
            },
            [55] = {
                [35] = {3,1}, [36] = {3,2}, [34] = {3,1}, [31] = {1,1}, [30] = {1,1}, [32] = {1,1}, [29] = {1,0}, [63] = {3,2}, [33] = {3,1}, [62] = {3,1}, [61] = {3,0}, 
            },
            [59] = {
                [48] = {1,1}, [46] = {1,0}, [51] = {1,2}, [47] = {1,1}, [50] = {1,1}, [49] = {1,1}, 
            },
            [47] = {
                [65] = {0,2}, [64] = {0,1}, [63] = {2,2}, [62] = {1,1}, [61] = {1,0}, 
            },
            [51] = {
                [65] = {1,1}, [64] = {1,1}, [67] = {3,1}, [63] = {1,1}, [69] = {3,2}, [66] = {1,1}, [62] = {1,1}, [68] = {3,1}, [61] = {1,0}, 
            },
            [41] = {
                [27] = {3,0}, 
            },
            [46] = {
                [48] = {4,1}, [52] = {4,1}, [51] = {4,1}, [63] = {1,2}, [50] = {4,1}, [62] = {1,1}, [53] = {4,1}, [49] = {4,1}, [61] = {1,0}, 
            },
            [30] = {
                [63] = {0,2}, [62] = {0,1}, [61] = {0,0}, 
            },
            [56] = {
                [31] = {3,1}, [30] = {3,1}, [32] = {3,2}, [29] = {3,0}, [61] = {1,0}, 
            },
            [60] = {
                [48] = {1,1}, [46] = {1,0}, [51] = {3,2}, [47] = {1,1}, [50] = {3,1}, [49] = {3,1}, 
            },
            [48] = {
                [65] = {2,2}, [64] = {1,1}, [67] = {0,2}, [63] = {1,1}, [66] = {0,1}, [62] = {1,1}, [61] = {1,0}, 
            },
            [52] = {
                [65] = {1,1}, [35] = {0,2}, [34] = {0,1}, [31] = {0,1}, [48] = {4,1}, [30] = {0,0}, [32] = {0,1}, [64] = {1,1}, [63] = {1,1}, [66] = {3,2}, [33] = {0,1}, [47] = {4,1}, [50] = {4,1}, [62] = {1,1}, [49] = {4,1}, [61] = {1,0}, 
            },
            [44] = {
                [63] = {1,2}, [62] = {1,1}, [61] = {1,0}, 
            },
            [31] = {
                [63] = {3,2}, [62] = {1,1}, [61] = {1,0}, 
            },
            [36] = {
                [61] = {2,1}, 
            },
            [71] = {
                [48] = {4,1}, [47] = {4,1}, 
            },
            [64] = {
                [65] = {0,2}, [64] = {0,1}, [63] = {0,0}, 
            },
            [66] = {
                [65] = {3,1}, [64] = {3,1}, [67] = {3,1}, [63] = {3,0}, [69] = {3,2}, [66] = {3,1}, [68] = {3,1}, 
            },
            [57] = {
                [44] = {4,1}, [42] = {4,1}, [48] = {0,1}, [46] = {0,0}, [52] = {0,2}, [38] = {4,1}, [37] = {4,1}, [40] = {4,1}, [39] = {4,1}, [51] = {0,1}, [43] = {4,1}, [41] = {4,1}, [47] = {0,1}, [50] = {0,1}, [49] = {0,1}, [61] = {1,0}, 
            },
            [61] = {
                [48] = {3,2}, [46] = {3,0}, [47] = {3,1}, 
            },
            [49] = {
                [65] = {1,1}, [64] = {1,1}, [67] = {2,2}, [38] = {4,1}, [63] = {1,1}, [69] = {0,2}, [66] = {1,1}, [62] = {1,1}, [68] = {0,1}, [61] = {1,0}, 
            },
            [53] = {
                [65] = {3,2}, [35] = {2,2}, [36] = {0,1}, [34] = {1,1}, [31] = {1,1}, [42] = {0,2}, [30] = {1,0}, [32] = {1,1}, [64] = {1,1}, [38] = {0,1}, [37] = {0,1}, [40] = {0,1}, [39] = {0,1}, [63] = {1,1}, [33] = {1,1}, [41] = {0,1}, [62] = {1,1}, [61] = {1,0}, 
            },
            [42] = {
                [44] = {4,1}, [42] = {4,1}, [38] = {4,1}, [37] = {4,1}, [40] = {4,1}, [39] = {4,1}, [43] = {4,1}, [41] = {4,1}, [62] = {0,2}, [61] = {0,0}, 
            },
            [45] = {
                [63] = {1,2}, [62] = {1,1}, [61] = {1,0}, 
            },
            [58] = {
                [22] = {4,1}, [24] = {4,1}, [18] = {4,1}, [20] = {4,1}, [48] = {1,1}, [46] = {1,0}, [52] = {3,2}, [28] = {4,1}, [51] = {1,1}, [26] = {4,1}, [27] = {4,1}, [23] = {4,1}, [25] = {4,1}, [19] = {4,1}, [21] = {4,1}, [47] = {1,1}, [50] = {1,1}, [49] = {1,1}, [61] = {1,0}, 
            },
            [62] = {
                [31] = {4,1}, [32] = {4,1}, [33] = {4,1}, 
            },
            [50] = {
                [65] = {1,1}, [64] = {1,1}, [67] = {1,1}, [63] = {1,1}, [69] = {1,2}, [66] = {1,1}, [62] = {1,1}, [68] = {1,1}, [61] = {1,0}, 
            },
            [54] = {
                [35] = {1,1}, [36] = {1,1}, [34] = {1,1}, [31] = {1,1}, [42] = {3,2}, [30] = {2,0}, [32] = {1,1}, [64] = {3,2}, [38] = {3,1}, [37] = {3,1}, [40] = {3,1}, [39] = {3,1}, [29] = {0,0}, [63] = {1,1}, [33] = {1,1}, [41] = {3,1}, [62] = {1,1}, [61] = {1,0}, 
            },
            [43] = {
                [31] = {4,1}, [63] = {0,2}, [62] = {2,2}, [61] = {1,0}, 
            },
            [32] = {
                [62] = {3,2}, [61] = {3,0}, 
            },
            [35] = {
                [63] = {1,1}, 
            },
        }
    },
    {
        depth = 10,
        sprite = "VoidTileset2",
        origin = "Starstorm",
        tiles = {
            [69] = {
                [48] = {4,0}, [46] = {4,0}, [52] = {4,0}, [51] = {4,0}, [47] = {4,0}, [54] = {4,0}, [50] = {4,0}, [53] = {4,0}, [49] = {4,0}, 
            },
            [59] = {
                [34] = {4,0}, [31] = {4,0}, [30] = {4,0}, [32] = {4,0}, [29] = {4,0}, [33] = {4,0}, 
            },
            [41] = {
                [48] = {4,0}, [46] = {4,0}, [56] = {4,0}, [52] = {4,0}, [55] = {4,0}, [51] = {4,0}, [59] = {4,0}, [47] = {4,0}, [54] = {4,0}, [50] = {4,0}, [58] = {4,0}, [53] = {4,0}, [49] = {4,0}, [57] = {4,0}, 
            },
            [61] = {
                [36] = {4,0}, [44] = {4,0}, [42] = {4,0}, [38] = {4,0}, [37] = {4,0}, [40] = {4,0}, [39] = {4,0}, [43] = {4,0}, [41] = {4,0}, 
            },
        }
    },
}

local STAGE_COLLISION = {
    ["BNoSpawn"] = {
        {56,122}, {58,124}, {100,174}, {104,154}, {102,156}, {100,160}, {100,158}, {96,156}, {98,174}, {98,172}, {98,170}, {98,168}, {98,166}, {98,164}, {98,162}, {98,160}, {98,158}, {100,176}, {98,176}, {128,130}, 
        {126,130}, {124,130}, {122,130}, {120,130}, {118,130}, {134,128}, {134,130}, {132,130}, {130,130}, {142,126}, {140,126}, {138,126}, {136,126}, {134,126}, {144,94}, {142,94}, {140,94}, {138,94}, {136,94}, {134,96}, 
        {132,96}, {130,96}, {128,96}, {126,96}, {124,96}, {82,94}, {80,94}, {90,96}, {88,96}, {86,96}, {84,96}, {82,96}, {80,96}, {76,128}, {84,128}, {82,128}, {80,128}, {78,128}, {74,128}, {72,128}, 
        {70,128}, {68,128}, {116,130}, {86,130}, {86,132}, {86,134}, {88,136}, {90,138}, {90,140}, {90,142}, {90,144}, {92,146}, {92,148}, {92,150}, {92,152}, {92,154}, {106,146}, {106,148}, {106,150}, {106,152}, 
        {108,140}, {108,142}, {108,144}, {110,138}, {112,132}, {112,134}, {114,130}, {112,136}, {94,156}, {98,92}, {98,94}, {100,94}, {102,94}, {104,94}, {110,98}, {120,98}, {106,96}, {108,96}, {122,96}, {94,92}, 
        {94,94}, {92,96}, {114,72}, {116,72}, {118,72}, {120,72}, {122,72}, {124,72}, {112,70}, {110,66}, {110,68}, {112,64}, {114,62}, {116,62}, {118,62}, {120,62}, {122,62}, {124,62}, {126,62}, {128,62}, 
        {128,58}, {128,60}, {80,48}, {86,48}, {86,50}, {80,50}, {86,52}, {80,52}, {86,54}, {80,40}, {82,40}, {84,40}, {84,42}, {80,42}, {84,44}, {80,44}, {84,46}, {80,46}, {70,54}, {72,54}, 
        {74,54}, {76,54}, {78,54}, {70,56}, {70,58}, {70,60}, {72,62}, {74,62}, {76,62}, {78,62}, {80,62}, {82,62}, {84,62}, {86,62}, {90,64}, {88,64}, {92,66}, {94,68}, {86,70}, {88,70}, 
        {90,70}, {92,70}, {84,70}, {82,72}, {82,74}, {84,74}, {86,74}, {88,76}, {90,76}, {92,76}, {94,76}, {96,76}, {98,76}, {100,76}, {102,80}, {102,78}, {104,82}, {106,84}, {108,84}, {110,76}, 
        {110,78}, {110,80}, {110,82}, {112,74}, {114,74}, {116,74}, {118,74}, {120,74}, {122,74}, {122,76}, {124,74}, {124,76}, {114,102}, {116,102}, {118,102}, {120,102}, {120,100}, {112,100}, {86,56}, {118,60}, 
        {116,60}, {60,126}, {62,126}, {64,126}, {66,126}, {102,162}, {102,164}, {102,166}, {102,168}, {102,170}, {102,172}, 
    },
    ["B"] = {
        {76,120}, {74,120}, {144,92}, {142,92}, {140,92}, {138,92}, {136,92}, {134,92}, {132,92}, {130,92}, {128,92}, {126,92}, {124,92}, {122,92}, {142,124}, {140,124}, {138,124}, {136,124}, {134,124}, {132,124}, 
        {130,124}, {128,124}, {126,124}, {124,124}, {122,124}, {120,124}, {90,92}, {88,92}, {86,92}, {84,92}, {82,92}, {80,92}, {88,122}, {86,122}, {84,122}, {82,122}, {118,122}, {116,122}, {114,122}, {112,122}, 
        {88,58}, {90,58}, {92,58}, {94,58}, {96,58}, {98,58}, {100,58}, {102,58}, {104,58}, {106,58}, {108,58}, {110,58}, {112,58}, {114,58}, {116,58}, {118,58}, {120,58}, {122,58}, {124,58}, {126,58}, 
        {100,92}, {102,92}, {104,92}, {106,92}, {108,92}, {110,92}, {112,92}, {114,92}, {116,92}, {118,92}, {120,92}, {92,122}, {94,122}, {96,122}, {98,122}, {100,122}, {102,122}, {104,122}, {106,122}, {108,122}, 
        {110,122}, {90,122}, {78,122}, {80,122}, {56,120}, {58,120}, {60,120}, {62,120}, {64,120}, {66,120}, {68,120}, {70,120}, {72,120}, {92,92}, 
    },
    ["Rope"] = {
        {138,108}, {138,106}, {138,104}, {138,102}, {138,100}, {138,98}, {138,96}, {138,94}, {138,92}, {82,118}, {82,116}, {82,114}, {82,112}, {82,110}, {82,108}, {82,106}, {82,104}, {82,102}, {82,100}, {82,98}, 
        {82,96}, {82,94}, {82,92}, {118,60}, {118,62}, {118,64}, {118,66}, {118,68}, {122,72}, {122,74}, {122,76}, {122,78}, {122,80}, {122,82}, {122,84}, {122,86}, {122,88}, {118,58}, 
    },
}

local STAGE_OBJECTS = {
}

local STAGE_BACKGROUNDS = {
    [10000] = {"Void2Background", "Starstorm", 1, 0, 0.9, 0.9, 0, 0, 0, 0.8 },
}

-- LEVEL DATA END --
local function r(t,n,o)local q=_G[t].find(n,o)return q or error("Failed to resolve "..n..":"..o.. " ("..t.."), make sure all resources are loaded before loading the stage.") end

local function mkObjs()
    local bg = Object("PELDR_BG")
    local ts = Object("PELDR_TS")
	local c = camera
	local x,y,w,h=0,0,0,0
    callback("onCameraUpdate", function() if bg:find(1) or ts:find(1) then x,y,w,h=camera.x,camera.y,camera.width,camera.height end end, -100)
    local z = {}
    callback("globalRoomEnd", function(r)
        for k, _ in pairs(z) do
            if Surface.isValid(k) then
                k:free()
            end
        end
    end, -100)
    
    local di,st,rst = graphics.drawImage,graphics.setTarget,graphics.resetTarget
    local function chnk(s, ts, x, y, o)
        local r = {0, 0, 16, 16}
        local d = {image = s, x = 0, y = 0, region = r}
        local sf = Surface(512, 512)
        st(sf)
        local w
        for _x = x / 16, (x + 512) / 16 do
            local q = ts[_x]
            if q ~= nil then
                for _y = y / 16, (y + 512) / 16 do
                    local t = q[_y]
                    if t ~= nil then
                        r[1] = t[1] * 16 + (o or (t[1] + 1))
                        r[2] = t[2] * 16 + (o or (t[2] + 1))
                        d.x = _x * 16 - x
                        d.y = _y * 16 - y
                        w = 1
                        di(d)
                    end
                end
            end
        end
        rst()
        if not w then
            sf:free()
            return 0
        else
            z[sf] = 1
            return sf
        end
    end
    local mf,mc = math.floor, math.ceil
    local vld = Surface.isValid
	ts:addCallback("draw", function(i)
		local d=i:getModData("PELDR")
        local c = d.c
        for X = mf(x / 512), mc((x + w) / 512) do
            local q = c[X]
            if q == nil then
                q = {}
                c[X] = {}
            end
            for Y = mf(y / 512), mc((y + h) / 512) do
                local cc = q[Y]
                if cc ~= 0 and not vld(cc) then
                    if cc ~= nil then
                        z[cc] = nil
                    end
                    cc = chnk(d.s, d.t, X * 512, Y * 512,d.g or 0)
                    q[Y] = cc
                end
                if cc ~= 0 then
                    cc:draw(X * 512, Y * 512)
                end
            end
        end
	end)
    
	bg:addCallback("draw", function(i)
		local d=i:getModData("PELDR")
		local s=d.s
		
		local fx,fy=d.x+x*d.px+w*d.xo,d.y+y*d.py+h*d.yo

		local sw,x1,x2=1,fx,fx
		if d.hr then
			sw = s.width
			x1 = x1 % sw + x - x % sw - sw
			x2 = x + w
		end

		local sh,y1,y2=1,fy,fy
		if d.vr then
			sh=s.height
			y1 = y1 % sh + y - y % sh - sh
			y2=y + h
		end

		for X=x1,x2,sw do for Y=y1,y2,sh do s:draw(X,Y)end end
	end)
	return ts,bg
end
local ts,bg=Object.find("PELDR_TS"),Object.find("PELDR_BG")
if ts == nil then ts,bg=mkObjs()end

local function spawnBG(sprite, depth, x, y, hrepeat, vrepeat, xparallax, yparallax, xpercentoffs, ypercentoffs)
	local i=bg:create(0,0)
	d=i:getModData("PELDR")
	i.depth = depth
	d.s = sprite
	d.x = x
	d.y = y
	d.hr = hrepeat
	d.vr = vrepeat
	d.px = xparallax
	d.py = yparallax
	d.xo = xpercentoffs
	d.yo = ypercentoffs
end

local function spawnTS(sprite, depth, tiles, grid)
	local i=ts:create(0,0)
	d=i:getModData("PELDR")
    i.depth = depth
    d.c = {}
    d.s = sprite
    d.g = grid
    d.t = tiles
end

local room = Room.new(STAGE_INFO.name)
room:resize(STAGE_INFO.width, STAGE_INFO.height)
for col, coordlist in pairs(STAGE_COLLISION) do
	local obj = Object.find(col, "Vanilla")
	for _, coords in ipairs(coordlist) do
        room:createInstance(obj, coords[1]*8, coords[2]*8)
    end
end
for _, objectlist in ipairs(STAGE_OBJECTS) do
	local obj = r("Object", objectlist[1], objectlist[2])
	for _, coords in ipairs(objectlist[3]) do
		room:createInstance(obj, coords[1]*8, coords[2]*8)
	end
end

local bgs = {}
for k, v in pairs(STAGE_BACKGROUNDS) do
    table.insert(bgs, {r("Sprite", v[1], v[2]), k, v[7], v[8], v[3]==1, v[4]==1, v[5], v[6], v[9], v[10]})
end
local lrs = {}
for _, v in ipairs(STAGE_LAYERS) do
    table.insert(lrs, {r("Sprite", v.sprite, v.origin), v.depth, v.tiles, v.grid})
end
local function mrgcol(o)
    for _, v in ipairs(o:findAll()) do
        v.xscale = 1 / 16
    end
    local c
    repeat
        c = 0
        for _, v in ipairs(o:findAll()) do
            if v:isValid() and v.xscale < 1 then
                local s = o:findPoint(v:get("bbox_right") + 16, v.y)
                if s and s.xscale < 1 then
                    c = 1
                    v.xscale = v.xscale + s.xscale
                    s:destroy()
                end
            end
        end
    until c == 0
end
local bs = Object.find("bossSpawn","vanilla")
local bs2 = Object.find("bossSpawn2","vanilla")
callback("globalRoomStart", function(r)
    if r == room then
        for _, v in ipairs(bgs) do
            spawnBG(table.unpack(v))
        end
        for _, v in ipairs(lrs) do
            spawnTS(table.unpack(v))
        end
        mrgcol(bs)
        mrgcol(bs2)
    end
end)

local objShards = Object.new("Shards")
objShards.sprite = Sprite.load("Crystal", "Interactables/Resources/crystal.png", 1, 20, 37)
objShards.depth = 7

objShards:addCallback("create", function(self)
	local selfData = self:getData()
	selfData.allpoints = {}
	for i = 1, 6 do
		thesepoints = {}
		for i = 1, 1 do
			local points = {}
			for i = 1, 3 do
				local dir = 1
				if math.chance(50) then dir = -1 end
				table.insert(points, {l = math.random(360), a = math.random(360), s = (math.random(2, 8) * dir)})
			end
			table.insert(thesepoints, points)
		end
		table.insert(selfData.allpoints, thesepoints)
	end
end)
objShards:addCallback("step", function(self)
	local selfData = self:getData()
	if runData.rolledSeraphPiece and not selfData.piece then
		selfData.player = nil
		if net.online then
			selfData.player = net.localPlayer
		else
			selfData.player = misc.players[1]
		end
		if selfData.player and selfData.player:isValid() and selfData.player:get("activity") ~= 23 then
			if selfData.timer then
				if selfData.timer > 0 then
					selfData.timer = selfData.timer - 1
				else
					selfData.timer = nil
					selfData.piece = true
				end
			else
				selfData.timer = 100
			end
		end
	end
end)
objShards:addCallback("draw", function(self)
	local selfData = self:getData()
	
	local px, py
	if selfData.player and selfData.player:isValid() then
		if selfData.timer then
			px = selfData.player.x
			py = selfData.player.y
		end
	end
	
	--[[
		if obj.P:findRectangle(self.x - 14, self.y - 42, self.x + 14, self.y + 2) and selfData.myplayer ~= -4 then
			local player = Object.findInstance(selfData.myplayer)
			
			local keyStr = "Activate"
			if player and player:isValid() then
				keyStr = input.getControlString("enter", player)
			end
			
			local costStr = ""
			if selfData.cost > 0 then
				costStr = " &y&("..selfData.cost.." Shards)"
			end
			
			local text = ""
			local pp = not net.online or player == net.localPlayer
			if input.getPlayerGamepad(player) and pp then
				text = "Press ".."'"..keyStr.."'".." to use one shard"..costStr
			else
				text = "Press ".."&y&'"..keyStr.."'&!&".." to use one shard"..costStr
			end
			graphics.color(Color.WHITE)
			graphics.alpha(1)
			graphics.printColor(text, self.x - 78, self.y - 57)
		end
	]]
	graphics.alpha(0.85 - (math.random(0, 15) * 0.01))
	graphics.color(Color.fromHex(0xED7BCC))
	graphics.print(global.seraphCount.." SHARDS", self.x - 3, self.y + 6, FONT_DAMAGE2, graphics.ALIGN_MIDDLE, graphics.ALIGN_TOP)
	
	graphics.color(Color.PINK)
	graphics.alpha(0.)
	graphics.circle(self.x , self.y - 37, (global.seraphCount * 0.65) + math.random(1, 7) * 0.1, false)
	graphics.circle(self.x , self.y - 37, (global.seraphCount * 1.1) + math.random(1, 7) * 0.1, false)
	graphics.color(Color.fromHex(0xFF00B6))
	graphics.alpha(1)
	for ii = 1, global.seraphCount do
		local thesepoints = selfData.allpoints[ii]
		if thesepoints then
			for _, points in ipairs(thesepoints) do
				local cpoints = {}
				--if global.seraphCount < 6 then
					for i, point in ipairs(points) do
						local dis = math.sin(math.rad(point.l)) * 6--math.random(8, 12)
						local angle = math.rad(point.a + math.random(-8, 8))
						local x, y = math.cos(angle) * dis, math.sin(angle) * dis
						local tt = math.rad(global.timer * (ii * 0.1))
						local ttt = ((ii - 1) * 3)
						local xx, yy = math.cos(tt) * ttt, math.sin(tt) * ttt
						table.insert(cpoints, {x = self.x + x + xx, y = self.y + y + yy - 37})
						point.a = point.a + point.s
						point.l = point.l + point.s
					end
					graphics.color(Color.fromHex(0xE8C9EF))
					graphics.triangle(cpoints[1].x, cpoints[1].y, cpoints[2].x, cpoints[2].y, cpoints[3].x, cpoints[3].y, false)
					graphics.color(Color.fromHex(0xFF00B6))
					graphics.triangle(cpoints[1].x, cpoints[1].y, cpoints[2].x, cpoints[2].y, cpoints[3].x, cpoints[3].y, true)
				--end
				if px and ii == global.seraphCount then
					graphics.alpha(selfData.timer / 100)
					graphics.triangle(cpoints[1].x, cpoints[1].y, cpoints[2].x, cpoints[2].y, px, py, false)
				end
			end
		end
	end
end)

local objCamp = Object.new("Camp")
objCamp.sprite = Sprite.load("Camp", "Stages/Void/Camp", 1, 280, 65)
objCamp.depth = 5

callback.register("globalRoomStart", function(rm)
	if rm == room then
		obj.TeleporterFake:create(762, 464).visible = false
		if net.host then
			local tele = obj.Teleporter:find(1) or obj.Teleporter:create(762, 464)
			tele:set("maxtime", 1)
		end
		--obj.bkgVoid2:create(820, 877)
		objCamp:create(943, 976)
		obj.ItemChest:create(1004, 992)
		local chest = obj.ItemChest:create(1058, 992)
		chest:getData().yoffset = 10
		obj.ItemChest:create(1112, 992)
		obj.DarkCrystal:create(540, 960)
		
		objShards:create(488, 960)
		
		runData.keepTime = true
		
		if net.host or not obj.Crystal:find(1) then
			obj.Crystal:create(703, 970)
		end
	end
end)

return room